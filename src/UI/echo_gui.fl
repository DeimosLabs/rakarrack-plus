# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

widget_class EchoGui {
  user_data 1 open
  xywh {1616 79 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"} visible position_relative
} {
  Fl_Light_Button echo_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Multi_On_Off);
 o->value(rkr->Echo_Bypass);
 return;
}
rkr->Echo_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Echo->cleanup();
rgui->findpos(4,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x35 color 62 selection_color 1 labelsize 10 align 84 when 1
    class RKR_Light_Button
  }
  Fl_Choice echo_preset {
    label Preset
    user_data 12004
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12004))rkr->efx_Echo->setpreset((int) o->value());
echo_WD->value(Dry_Wet(rkr->efx_Echo->getpar(Echo_DryWet)));
echo_pan->value(rkr->efx_Echo->getpar(Echo_Pan)-64);
echo_delay->value(rkr->efx_Echo->getpar(Echo_Delay));
echo_LRdl->value(rkr->efx_Echo->getpar(Echo_LR_Delay));
echo_LRc->value(rkr->efx_Echo->getpar(Echo_LR_Cross));
echo_fb->value(rkr->efx_Echo->getpar(Echo_Feedback));
echo_damp->value(rkr->efx_Echo->getpar(Echo_Damp));
echo_RV->value(rkr->efx_Echo->getpar(Echo_Reverse));
echo_direct->value(rkr->efx_Echo->getpar(Echo_Direct));}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label {Echo 1}
      xywh {57 57 36 21} labelsize 10
    }
    MenuItem {} {
      label {Echo 2}
      xywh {57 57 36 21} labelsize 10
    }
    MenuItem {} {
      label {Echo 3}
      xywh {57 57 36 21} labelsize 10
    }
    MenuItem {} {
      label {Simple Echo}
      xywh {67 67 36 21} labelsize 10
    }
    MenuItem {} {
      label Canyon
      xywh {77 77 36 21} labelsize 10
    }
    MenuItem {} {
      label {Panning Echo 1}
      xywh {97 97 36 21} labelsize 10
    }
    MenuItem {} {
      label {Panning Echo 2}
      xywh {107 107 36 21} labelsize 10
    }
    MenuItem {} {
      label {Panning Echo 3}
      xywh {117 117 36 21} labelsize 10
    }
    MenuItem {} {
      label {Feedback Echo}
      xywh {127 127 36 21} labelsize 10
    }
  }
  Fl_Value_Slider echo_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echo_DryWet);
 return;
} 
rkr->efx_Echo->changepar(Echo_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 35 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echo_RV {
    label Reverse
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echo_Reverse);
 return;
} 
rkr->efx_Echo->changepar(Echo_Reverse,(int)o->value());}
    xywh {56 58 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echo_pan {
    label Pan
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echo_Pan);
 return;
} 
rkr->efx_Echo->changepar(Echo_Pan,(int)(o->value()+64));}
    xywh {56 73 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echo_delay {
    label Delay
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echo_Delay);
 return;
} 
rkr->efx_Echo->changepar(Echo_Delay,(int)o->value());}
    xywh {56 88 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 20 maximum 2000 step 1 value 20 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echo_LRdl {
    label {L/R Delay}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echo_LR_Delay);
 return;
} 
rkr->efx_Echo->changepar(Echo_LR_Delay,(int)o->value());}
    xywh {56 103 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echo_LRc {
    label {L/R Cross}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echo_LR_Cross);
 return;
} 
rkr->efx_Echo->changepar(Echo_LR_Cross,(int)(o->value()));}
    xywh {56 118 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echo_fb {
    label Feedback
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echo_Feedback);
 return;
} 
rkr->efx_Echo->changepar(Echo_Feedback,(int)o->value());}
    xywh {56 133 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button echo_direct {
    label Direct
    user_data 2
    callback {rkr->efx_Echo->changepar(Echo_Direct,(int)o->value());}
    xywh {51 148 53 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Value_Slider echo_damp {
    label Damp
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echo_Damp);
 return;
} 
rkr->efx_Echo->changepar(Echo_Damp,(int)o->value());} selected
    xywh {56 167 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
}
