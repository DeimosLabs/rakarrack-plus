# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class EchoGui {open selected
  xywh {1616 79 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button echo_activar {
    label On
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Bypass[EFX_ECHO]);
 return;
}
m_process->EFX_Bypass[EFX_ECHO]=(int)o->value();
if((int) o->value()==0)
m_process->Rack_Effects[EFX_ECHO]->cleanup();
m_parent->findpos(EFX_ECHO,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x35 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice echo_preset {
    label Preset
    user_data UD_PRESET_ECHO
    callback {long long ud= (long long) v;
if((ud==0)||(ud==UD_PRESET_ECHO))
    m_process->Rack_Effects[EFX_ECHO]->setpreset((int) o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_ECHO]; i++)
{
    parameter_refresh(i);
};}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label {Echo 1}
      xywh {57 57 36 21} labelsize 10
    }
    MenuItem {} {
      label {Echo 2}
      xywh {57 57 36 21} labelsize 10
    }
    MenuItem {} {
      label {Echo 3}
      xywh {57 57 36 21} labelsize 10
    }
    MenuItem {} {
      label {Simple Echo}
      xywh {67 67 36 21} labelsize 10
    }
    MenuItem {} {
      label Canyon
      xywh {77 77 36 21} labelsize 10
    }
    MenuItem {} {
      label {Panning Echo 1}
      xywh {97 97 36 21} labelsize 10
    }
    MenuItem {} {
      label {Panning Echo 2}
      xywh {107 107 36 21} labelsize 10
    }
    MenuItem {} {
      label {Panning Echo 3}
      xywh {117 117 36 21} labelsize 10
    }
    MenuItem {} {
      label {Feedback Echo}
      xywh {127 127 36 21} labelsize 10
    }
  }
  Fl_Value_Slider echo_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Echo_DryWet);
 return;
} 
m_process->Rack_Effects[EFX_ECHO]->changepar(Echo_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 35 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echo_RV {
    label Reverse
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Echo_Reverse);
 return;
} 
m_process->Rack_Effects[EFX_ECHO]->changepar(Echo_Reverse,(int)o->value());}
    xywh {56 58 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echo_pan {
    label Pan
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Echo_Pan);
 return;
} 
m_process->Rack_Effects[EFX_ECHO]->changepar(Echo_Pan,(int)(o->value()+64));}
    xywh {56 73 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echo_delay {
    label Delay
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Echo_Delay);
 return;
} 
m_process->Rack_Effects[EFX_ECHO]->changepar(Echo_Delay,(int)o->value());}
    xywh {56 88 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 20 maximum 2000 step 1 value 20 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echo_LRdl {
    label {L/R Delay}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Echo_LR_Delay);
 return;
} 
m_process->Rack_Effects[EFX_ECHO]->changepar(Echo_LR_Delay,(int)o->value());}
    xywh {56 103 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echo_LRc {
    label {L/R Cross}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Echo_LR_Cross);
 return;
} 
m_process->Rack_Effects[EFX_ECHO]->changepar(Echo_LR_Cross,(int)(o->value()));}
    xywh {56 118 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echo_fb {
    label Feedback
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Echo_Feedback);
 return;
} 
m_process->Rack_Effects[EFX_ECHO]->changepar(Echo_Feedback,(int)o->value());}
    xywh {56 133 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button echo_direct {
    label Direct
    callback {m_process->Rack_Effects[EFX_ECHO]->changepar(Echo_Direct,(int)o->value());}
    xywh {51 148 53 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Value_Slider echo_damp {
    label Damp
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Echo_Damp);
 return;
} 
m_process->Rack_Effects[EFX_ECHO]->changepar(Echo_Damp,(int)o->value());}
    xywh {56 167 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Function {parameter_refresh(int index)} {return_type void
  } {
    code {switch (index)
    {
    case Echo_DryWet:
        echo_WD->value(Dry_Wet(m_process->Rack_Effects[EFX_ECHO]->getpar(Echo_DryWet)));
        break;
    case Echo_Pan:
        echo_pan->value(m_process->Rack_Effects[EFX_ECHO]->getpar(Echo_Pan)-64);
        break;
    case Echo_Delay:
        echo_delay->value(m_process->Rack_Effects[EFX_ECHO]->getpar(Echo_Delay));
        break;
    case Echo_LR_Delay:
        echo_LRdl->value(m_process->Rack_Effects[EFX_ECHO]->getpar(Echo_LR_Delay));
        break;
    case Echo_LR_Cross:
        echo_LRc->value(m_process->Rack_Effects[EFX_ECHO]->getpar(Echo_LR_Cross));
        break;
    case Echo_Feedback:
        echo_fb->value(m_process->Rack_Effects[EFX_ECHO]->getpar(Echo_Feedback));
        break;
    case Echo_Damp:
        echo_damp->value(m_process->Rack_Effects[EFX_ECHO]->getpar(Echo_Damp));
        break;
    case Echo_Reverse:
        echo_RV->value(m_process->Rack_Effects[EFX_ECHO]->getpar(Echo_Reverse));
        break;
    case Echo_Direct:
        echo_direct->value(m_process->Rack_Effects[EFX_ECHO]->getpar(Echo_Direct));
        break;
    };} {}
  }
  Function {tap_tempo_update()} {return_type void
  } {
    code {echo_delay->value(m_process->Rack_Effects[EFX_ECHO]->getpar(Echo_Delay));} {}
  }
}
