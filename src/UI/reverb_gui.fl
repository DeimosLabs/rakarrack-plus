# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

widget_class ReverbGui {
  user_data 1 open
  xywh {1679 213 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"} visible position_relative
} {
  Fl_Light_Button reverb_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(116);
 o->value(rkr->Reverb_Bypass);
 return;
}
rkr->Reverb_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Rev->cleanup();
rgui->findpos(8,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x39 color 62 selection_color 1 labelsize 10 align 84 when 1
    class RKR_Light_Button
  }
  Fl_Choice reverb_preset {
    label Preset
    user_data 12008
    callback {rkr->Reverb_Bypass=0;
long long ud= (long long) v;
if((ud==0)||(ud==12008))rkr->efx_Rev->setpreset((int) o->value());
reverb_WD->value(Dry_Wet(rkr->efx_Rev->getpar(Reverb_DryWet)));
reverb_pan->value(rkr->efx_Rev->getpar(Reverb_Pan)-64);
reverb_time->value(rkr->efx_Rev->getpar(Reverb_Time));
reverb_ldel->value(rkr->efx_Rev->getpar(Reverb_I_Delay));
reverb_ldelft->value(rkr->efx_Rev->getpar(Reverb_Delay_FB));
reverb_LPF->value(rkr->efx_Rev->getpar(Reverb_LPF));
reverb_HPF->value(rkr->efx_Rev->getpar(Reverb_HPF));
reverb_damp->value(rkr->efx_Rev->getpar(Reverb_Damp));
reverb_RS->value(rkr->efx_Rev->getpar(Reverb_Room));
reverb_type->value(rkr->efx_Rev->getpar(Reverb_Type));
if((int)reverb_activar->value())rkr->Reverb_Bypass=1;} selected
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label {Cathedral 1}
      xywh {44 44 36 21} labelsize 10
    }
    MenuItem {} {
      label {Cathedral 2}
      xywh {44 44 36 21} labelsize 10
    }
    MenuItem {} {
      label {Cathedral 3}
      xywh {44 44 36 21} labelsize 10
    }
    MenuItem {} {
      label {Hall 1}
      xywh {54 54 36 21} labelsize 10
    }
    MenuItem {} {
      label {Hall 2}
      xywh {64 64 36 21} labelsize 10
    }
    MenuItem {} {
      label {Room 1}
      xywh {74 74 36 21} labelsize 10
    }
    MenuItem {} {
      label {Room 2}
      xywh {84 84 36 21} labelsize 10
    }
    MenuItem {} {
      label Basement
      xywh {94 94 36 21} labelsize 10
    }
    MenuItem {} {
      label Tunnel
      xywh {104 104 36 21} labelsize 10
    }
    MenuItem {} {
      label {Echoed 1}
      xywh {114 114 36 21} labelsize 10
    }
    MenuItem {} {
      label {Echoed 2}
      xywh {124 124 36 21} labelsize 10
    }
    MenuItem {} {
      label {Very Long 1}
      xywh {134 134 36 21} labelsize 10
    }
    MenuItem {} {
      label {Very Long 2}
      xywh {144 144 36 21} labelsize 10
    }
  }
  Fl_Value_Slider reverb_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(57);
 return;
} 
rkr->efx_Rev->changepar(Reverb_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 27 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider reverb_pan {
    label Pan
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(63);
 return;
} 
rkr->efx_Rev->changepar(Reverb_Pan,(int)(o->value()+64));}
    xywh {56 39 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider reverb_time {
    label Time
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Reverb_Time);
 return;
}
rkr->efx_Rev->changepar(Reverb_Time,(int)o->value());}
    xywh {56 52 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider reverb_ldel {
    label {I. Del}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Reverb_I_Delay);
 return;
}
rkr->efx_Rev->changepar(Reverb_I_Delay,(int)o->value());}
    tooltip {Initial Delay} xywh {56 64 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider reverb_ldelft {
    label {Del. E/R}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Reverb_Delay_FB);
 return;
}
rkr->efx_Rev->changepar(Reverb_Delay_FB,(int)o->value());}
    tooltip {Initial Delay Feedback} xywh {56 77 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Choice reverb_type {
    label Type
    user_data 12
    callback {rkr->efx_Rev->changepar(Reverb_Type,(int)o->value());}
    xywh {62 92 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label Freeverb
      xywh {34 34 36 21} labelsize 10
    }
    MenuItem {} {
      label Random
      callback {rkr->efx_Rev->changepar(Reverb_Type,1)}
      xywh {34 34 36 21} labelsize 10
    }
  }
  Fl_Value_Slider reverb_RS {
    label {R. Size}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Reverb_Room);
 return;
}
rkr->Reverb_Bypass=0;
rkr->efx_Rev->changepar(Reverb_Room,(int)o->value());
if((int)reverb_activar->value())rkr->Reverb_Bypass=1;}
    tooltip {Room Size} xywh {56 116 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 1 maximum 127 step 1 value 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider reverb_LPF {
    label LPF
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(87);
 return;
} 
rkr->efx_Rev->changepar(Reverb_LPF,(int)o->value());}
    tooltip {Lowpass Filter} xywh {56 131 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 26000 step 1 value 20000 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider reverb_HPF {
    label HPF
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(90);
 return;
} 
rkr->efx_Rev->changepar(Reverb_HPF,(int)o->value());}
    tooltip {Highpass Filter} xywh {56 147 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 20000 step 1 value 20 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider reverb_damp {
    label Damping
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Reverb_Damp);
 return;
}
rkr->efx_Rev->changepar(Reverb_Damp,(int)o->value());}
    xywh {56 163 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 64 maximum 127 step 1 value 64 textcolor 7
    class RKR_Slider
  }
}
