# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class {\#include "common_gui_menu.h"} AlienwahGui {open selected
  xywh {1643 766 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  code3 {\#include "common_gui_menu.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button Alienwah_activar {
    label On
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Active[EFX_ALIENWAH]);
 return;
}
m_process->EFX_Active[EFX_ALIENWAH]=(int)o->value();
if((int) o->value()==0)
m_process->Rack_Effects[EFX_ALIENWAH]->cleanup();
m_parent->findpos(EFX_ALIENWAH,(int)o->value(),o);}
    xywh {4 4 34 18} shortcut 0x36 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice Alienwah_preset {
    label Preset
    user_data UD_PRESET_ALIENWAH
    callback {long long ud= (long long) v;
if((ud==0)||(ud==UD_PRESET_ALIENWAH))
    m_process->Rack_Effects[EFX_ALIENWAH]->setpreset((int) o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_ALIENWAH]; i++)
{
    parameter_refresh(i);
}}
    xywh {76 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label AlienWah1
      xywh {72 72 36 21} labelsize 10
    }
    MenuItem {} {
      label AlienWah2
      xywh {72 72 36 21} labelsize 10
    }
    MenuItem {} {
      label AlienWah3
      xywh {72 72 36 21} labelsize 10
    }
    MenuItem {} {
      label AlienWah4
      xywh {82 82 36 21} labelsize 10
    }
  }
  Fl_Value_Slider Alienwah_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Alien_DryWet);
 return;
} 
m_process->Rack_Effects[EFX_ALIENWAH]->changepar(Alien_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 29 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider Alienwah_pan {
    label Pan
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Alien_Pan);
 return;
} 
m_process->Rack_Effects[EFX_ALIENWAH]->changepar(Alien_Pan,(int)(o->value()+64));}
    xywh {56 41 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider Alienwah_freq {
    label Tempo
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Alien_LFO_Tempo);
 return;
} 
m_process->Rack_Effects[EFX_ALIENWAH]->changepar(Alien_LFO_Tempo,(int)o->value());}
    xywh {56 53 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider Alienwah_rnd {
    label Random
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Alien_LFO_Random);
 return;
} 
m_process->Rack_Effects[EFX_ALIENWAH]->changepar(Alien_LFO_Random,(int)o->value());}
    xywh {56 65 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Choice Alienwah_lfotype {
    label {LFO Type}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Alien_LFO_Type);
 return;
} 

m_process->Rack_Effects[EFX_ALIENWAH]->changepar(Alien_LFO_Type,(int)o->value())} open
    xywh {78 79 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    code0 {o->menu(m_lfo_menu->get_lfo_type());}
    class RKR_Choice
  } {}
  Fl_Value_Slider Alienwah_phase {
    label Phase
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Alien_Phase);
 return;
} 
m_process->Rack_Effects[EFX_ALIENWAH]->changepar(Alien_Phase,(int)o->value());}
    xywh {56 105 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider Alienwah_stdf {
    label {Stereo Df}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Alien_LFO_Stereo);
 return;
} 
m_process->Rack_Effects[EFX_ALIENWAH]->changepar(Alien_LFO_Stereo,(int)o->value());}
    xywh {56 117 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider Alienwah_dpth {
    label Depth
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Alien_Depth);
 return;
} 
m_process->Rack_Effects[EFX_ALIENWAH]->changepar(Alien_Depth,(int)o->value());}
    xywh {56 129 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider Alienwah_delay {
    label Delay
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Alien_Delay);
 return;
} 
m_process->EFX_Active[EFX_ALIENWAH]=0;
m_process->Rack_Effects[EFX_ALIENWAH]->changepar(Alien_Delay,(int)o->value());
if (Alienwah_activar->value()) m_process->EFX_Active[EFX_ALIENWAH]=1;}
    xywh {56 141 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider Alienwah_fb {
    label Feedback
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Alien_Feedback);
 return;
} 
m_process->Rack_Effects[EFX_ALIENWAH]->changepar(Alien_Feedback,(int)o->value());}
    xywh {56 153 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider Alienwah_LR {
    label {L/R Cross}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Alien_LR_Cross);
 return;
} 
m_process->Rack_Effects[EFX_ALIENWAH]->changepar(Alien_LR_Cross,(int)(o->value()));}
    xywh {56 166 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  decl {CommonGuiMenu *m_lfo_menu;} {private local
  }
  Function {parameter_refresh(int index)} {C return_type void
  } {
    code {switch (index)
    {
    case Alien_DryWet:
        Alienwah_WD->value(Dry_Wet(m_process->Rack_Effects[EFX_ALIENWAH]->getpar(Alien_DryWet)));
        break;
    case Alien_Pan:
        Alienwah_pan->value(m_process->Rack_Effects[EFX_ALIENWAH]->getpar(Alien_Pan)-64);
        break;
    case Alien_LFO_Tempo:
        Alienwah_freq->value(m_process->Rack_Effects[EFX_ALIENWAH]->getpar(Alien_LFO_Tempo));
        break;
    case Alien_LFO_Random:
        Alienwah_rnd->value(m_process->Rack_Effects[EFX_ALIENWAH]->getpar(Alien_LFO_Random));
        break;
    case Alien_LFO_Type:
        Alienwah_lfotype->value(m_process->Rack_Effects[EFX_ALIENWAH]->getpar(Alien_LFO_Type));
        break;
    case Alien_LFO_Stereo:
        Alienwah_stdf->value(m_process->Rack_Effects[EFX_ALIENWAH]->getpar(Alien_LFO_Stereo));
        break;
    case Alien_Depth:
        Alienwah_dpth->value(m_process->Rack_Effects[EFX_ALIENWAH]->getpar(Alien_Depth));
        break;
    case Alien_Feedback:
        Alienwah_fb->value(m_process->Rack_Effects[EFX_ALIENWAH]->getpar(Alien_Feedback));
        break;
    case Alien_Delay:
        Alienwah_delay->value(m_process->Rack_Effects[EFX_ALIENWAH]->getpar(Alien_Delay));
        break;
    case Alien_LR_Cross:
        Alienwah_LR->value(m_process->Rack_Effects[EFX_ALIENWAH]->getpar(Alien_LR_Cross));
        break;
    case Alien_Phase:
        Alienwah_phase->value(m_process->Rack_Effects[EFX_ALIENWAH]->getpar(Alien_Phase));
        break;
    }} {}
  }
  Function {tap_tempo_update()} {return_type void
  } {
    code {Alienwah_freq->value(m_process->Rack_Effects[EFX_ALIENWAH]->getpar(Alien_LFO_Tempo));} {}
  }
}
