# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class {\#include "common_gui_menu.h"} OtremGui {open selected
  xywh {1550 57 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  code3 {\#include "common_gui_menu.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button otrem_activar {
    label On
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Bypass[EFX_OPTICALTREM]);
 return;
}
m_process->EFX_Bypass[EFX_OPTICALTREM]=(int)o->value();
if((int) o->value()==0)
m_process->Rack_Effects[EFX_OPTICALTREM]->cleanup();
m_parent->findpos(EFX_OPTICALTREM,(int)o->value(),o);}
    xywh {5 6 34 18} shortcut 0x38 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice otrem_preset {
    label Preset
    user_data UD_PRESET_OPTICALTREM
    callback {long long ud= (long long) v;
if((ud==0)||(ud==UD_PRESET_OPTICALTREM))
    m_process->Rack_Effects[EFX_OPTICALTREM]->setpreset((int)o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_OPTICALTREM]; i++)
{
    parameter_refresh(i);
};}
    xywh {77 6 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label Fast
      xywh {72 72 36 21} labelsize 10
    }
    MenuItem {} {
      label {Trem 2}
      xywh {72 72 36 21} labelsize 10
    }
    MenuItem {} {
      label {Hard Pan}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Soft Pan}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Ramp Down}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Hard Ramp}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Slow
      xywh {82 82 36 21} labelsize 10
    }
  }
  Fl_Value_Slider otrem_dpth {
    label Depth
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Optical_Depth);
 return;
}
m_process->Rack_Effects[EFX_OPTICALTREM]->changepar(Optical_Depth,(int)o->value());}
    xywh {56 35 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider otrem_freq {
    label Tempo
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Optical_LFO_Tempo);
 return;
}
m_process->Rack_Effects[EFX_OPTICALTREM]->changepar(Optical_LFO_Tempo,(int)o->value());}
    xywh {56 55 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider otrem_rnd {
    label Random
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Optical_LFO_Random);
 return;
}
m_process->Rack_Effects[EFX_OPTICALTREM]->changepar(Optical_LFO_Random,(int)o->value());}
    xywh {56 75 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Choice otrem_lfotype {
    label {LFO Type}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Optical_LFO_Type);
 return;
}

m_process->Rack_Effects[EFX_OPTICALTREM]->changepar(Optical_LFO_Type,(int)o->value());}
    xywh {78 102 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    code0 {o->menu(m_lfo_menu->get_lfo_type());}
    class RKR_Choice
  } {}
  Fl_Value_Slider otrem_stdf {
    label {Stereo Df}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Optical_LFO_Stereo);
 return;
}
m_process->Rack_Effects[EFX_OPTICALTREM]->changepar(Optical_LFO_Stereo,(int)o->value());}
    tooltip {LFO L/R Delay} xywh {56 129 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider otrem_pan {
    label Pan
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Optical_Pan);
 return;
}
m_process->Rack_Effects[EFX_OPTICALTREM]->changepar(Optical_Pan,(int)(o->value()+64));}
    xywh {56 149 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button otrem_invert {
    label Invert
    callback {m_process->Rack_Effects[EFX_OPTICALTREM]->changepar(Optical_Invert,(int)o->value())}
    tooltip {If checked it behaves more like tube preamp trem. If unchecked it behaves like a stompbox Opto Trem} xywh {49 164 73 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  decl {CommonGuiMenu *m_lfo_menu;} {private local
  }
  Function {parameter_refresh(int index)} {return_type void
  } {
    code {switch (index)
    {
    case Optical_Depth:
        otrem_dpth->value(m_process->Rack_Effects[EFX_OPTICALTREM]->getpar(Optical_Depth));
        break;
    case Optical_LFO_Tempo:
        otrem_freq->value(m_process->Rack_Effects[EFX_OPTICALTREM]->getpar(Optical_LFO_Tempo));
        break;
    case Optical_LFO_Random:
        otrem_rnd->value(m_process->Rack_Effects[EFX_OPTICALTREM]->getpar(Optical_LFO_Random));
        break;
    case Optical_LFO_Type:
        otrem_lfotype->value(m_process->Rack_Effects[EFX_OPTICALTREM]->getpar(Optical_LFO_Type));
        break;
    case Optical_LFO_Stereo:
        otrem_stdf->value(m_process->Rack_Effects[EFX_OPTICALTREM]->getpar(Optical_LFO_Stereo));
        break;
    case Optical_Pan:
        otrem_pan->value(m_process->Rack_Effects[EFX_OPTICALTREM]->getpar(Optical_Pan)-64);
        break;
    case Optical_Invert:
        otrem_invert->value(m_process->Rack_Effects[EFX_OPTICALTREM]->getpar(Optical_Invert));
        break;
    }} {}
  }
  Function {tap_tempo_update()} {return_type void
  } {
    code {otrem_freq->value(m_process->Rack_Effects[EFX_OPTICALTREM]->getpar(Optical_LFO_Tempo));} {}
  }
}
