# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_Counter.h"} {public global
}

widget_class {this->m_parent = NULL; this->m_process = NULL;} MidiGui {
  user_data 1 open
  xywh {1159 78 275 50} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  code3 {this->m_parent = NULL; this->m_process = NULL;} visible position_relative
} {
  Function {initialize(RKR* _rkr, RKRGUI* _rgui)} {C return_type void
  } {
    code {m_process = _rkr;
m_parent= _rgui;} {}
  }
  Fl_Light_Button midi_activar {
    label On
    user_data 2
    callback {if ((int)o->value()==0)
  { 
    m_process->efx_MIDIConverter->panic();
    Mled->color(fl_darker(FL_RED));
    Mled->redraw();
  }


  m_process->MIDIConverter_Bypass=(int)o->value();
  Midi_out_Counter->do_callback();

  if(m_parent != NULL)
    m_parent->ChangeActives();

  MIDI_LABEL->redraw_label();}
    tooltip {Enable MIDI Converter - Shortcut 'M'} xywh {5 4 38 18} shortcut 0x6d color 62 selection_color 1 labelsize 10 when 1
    class RKR_Light_Button
  }
  Fl_Choice MIDIOctave {
    label Octave
    user_data 12
    callback {switch((int)o->value())
{
  case 0:
  m_process->efx_MIDIConverter->changepar(MIDIConv_Octave,-2);
  break;
  
  case 1:
  m_process->efx_MIDIConverter->changepar(MIDIConv_Octave,-1);
  break;

  case 2:
  m_process->efx_MIDIConverter->changepar(MIDIConv_Octave,0);
  break;

  case 3:
  m_process->efx_MIDIConverter->changepar(MIDIConv_Octave,1);

  break;

  case 4:
  m_process->efx_MIDIConverter->changepar(MIDIConv_Octave,2);
  break;

}}
    tooltip {Adjust MIDI note out by octave.} xywh {107 31 37 16} down_box BORDER_BOX selection_color 0 labelsize 8 labelcolor 7 when 1 textsize 10 textcolor 7
    code0 {o->set_label_offset(-2);}
    code1 {o->set_text_offset(-1);}
    class RKR_Choice
  } {
    MenuItem {} {
      label {-2}
      xywh {62 62 36 21} labelsize 9
    }
    MenuItem {} {
      label {-1}
      xywh {62 62 36 21} labelsize 9
    }
    MenuItem {} {
      label 0
      xywh {10 10 36 21} labelsize 9
    }
    MenuItem {} {
      label 1
      xywh {10 10 36 21} labelsize 9
    }
    MenuItem {} {
      label 2
      xywh {20 20 36 21} labelsize 9
    }
  }
  Fl_Counter Midi_out_Counter {
    label Channel
    callback {m_process->efx_MIDIConverter->changepar(MIDIConv_Midi, (int)o->value());}
    tooltip {Channel to send MIDI out.} xywh {94 4 50 15} type Simple color 62 labelsize 9 labelcolor 7 minimum 1 maximum 16 step 1 value 1 textsize 11
    code0 {o->set_label_offset(-1);}
    code1 {o->set_text_offset(1);}
    class RKR_Counter
  }
  Fl_Check_Button Use_FFT {
    label FFT
    user_data 2
    callback {m_process->efx_MIDIConverter->changepar(MIDIConv_FFT, (int)o->value());} selected
    tooltip {FFT based algorithm which is much more
CPU intensive but may provide better results.} xywh {51 34 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 1
    class RKR_Check_Button
  }
  Fl_Value_Slider Trig_Adj {
    label Trigger
    callback {m_process->efx_MIDIConverter->changepar(MIDIConv_Trigger,(int)o->value());}
    xywh {147 15 117 11} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 8 labelcolor 7 align 9 minimum 2 maximum 60 step 1 textcolor 7
    code0 {o->set_label_offset(-2);}
    code1 {o->shut_off_pixel_adjustment();}
    class RKR_Slider
  }
  Fl_Value_Slider Vel_Adj {
    label Velocity
    callback {m_process->efx_MIDIConverter->changepar(MIDIConv_Velocity,(int)o->value());}
    xywh {147 34 117 11} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 8 labelcolor 7 align 9 minimum 1 maximum 100 step 1 textcolor 7
    code0 {o->set_label_offset(-2);}
    code1 {o->shut_off_pixel_adjustment();}
    class RKR_Slider
  }
  Fl_Box Mled {
    xywh {51 5 10 10} box ROUNDED_BOX color 88 labelsize 18
  }
  Fl_Box MIDI_LABEL {
    label MIDI
    user_data 7
    xywh {4 32 44 14} labelfont 1 labelcolor 7 when 0
    class RKR_Box
  }
  decl {RKR  *m_process} {private local
  }
  decl {RKRGUI *m_parent} {private local
  }
}
