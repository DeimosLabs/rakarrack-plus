# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
widget_class {this->m_rgui = NULL; this->m_rkr = NULL;} MidiGui {
  user_data 1 open
  xywh {1389 231 276 52} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "sliderW.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  code3 {this->m_rgui = NULL; this->m_rkr = NULL;} visible position_relative
} {
  Function {initialize(RKR* _rkr, RKRGUI* _rgui)} {open C return_type void
  } {
    code {m_rkr = _rkr;
m_rgui= _rgui;} {}
  }
  Fl_Light_Button midi_activar {
    label On
    user_data 2
    callback {if ((int)o->value()==0)
  { 
    m_rkr->efx_MIDIConverter->panic();
    Mled->color(fl_darker(FL_RED));
    Mled->redraw();
  }


  m_rkr->MIDIConverter_Bypass=(int)o->value();
  Midi_out_Counter->do_callback();

  if(m_rgui != NULL)
    m_rgui->ChangeActives();

  MIDI_LABEL->redraw_label();}
    tooltip {Enable MIDI Converter - Shortcut 'M'} xywh {5 4 38 18} shortcut 0x6d color 62 selection_color 1 labelsize 10 when 1
  }
  Fl_Choice MIDIOctave {
    label Octave
    user_data 12
    callback {switch((int)o->value())
{
  case 0:
  m_rkr->efx_MIDIConverter->changepar(4,-2);
  break;
  
  case 1:
  m_rkr->efx_MIDIConverter->changepar(4,-1);
  break;

  case 2:
  m_rkr->efx_MIDIConverter->changepar(4,0);
  break;

  case 3:
  m_rkr->efx_MIDIConverter->changepar(4,1);

  break;

  case 4:
  m_rkr->efx_MIDIConverter->changepar(4,2);
  break;

}}
    tooltip {Adjust MIDI note out by octave.} xywh {107 31 37 16} down_box BORDER_BOX selection_color 0 labelsize 8 labelcolor 7 when 1 textsize 10 textcolor 7
  } {
    MenuItem {} {
      label {-2}
      xywh {62 62 36 21} labelsize 10
    }
    MenuItem {} {
      label {-1}
      xywh {62 62 36 21} labelsize 10
    }
    MenuItem {} {
      label 0
      xywh {10 10 36 21} labelsize 9
    }
    MenuItem {} {
      label 1
      xywh {10 10 36 21} labelsize 9
    }
    MenuItem {} {
      label 2
      xywh {20 20 36 21} labelsize 9
    }
  }
  Fl_Counter Midi_out_Counter {
    label Channel
    callback {m_rkr->efx_MIDIConverter->changepar(3, (int)o->value());} selected
    tooltip {Channel to send MIDI out.} xywh {94 4 50 15} type Simple color 62 labelsize 9 labelcolor 7 minimum 1 maximum 16 step 1 value 1 textsize 11
  }
  Fl_Check_Button Use_FFT {
    label FFT
    user_data 2
    callback {m_rkr->efx_MIDIConverter->changepar(5, (int)o->value());}
    tooltip {FFT based algorithm which is much more
CPU intensive but may provide better results.} xywh {51 34 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 1
  }
  Fl_Value_Slider Trig_Adj {
    label Trigger
    callback {m_rkr->efx_MIDIConverter->changepar(1,(int)o->value());}
    xywh {147 15 117 11} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 8 labelcolor 7 align 9 minimum 2 maximum 60 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider Vel_Adj {
    label Velocity
    callback {m_rkr->efx_MIDIConverter->changepar(2,(int)o->value());}
    xywh {147 34 117 11} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 8 labelcolor 7 align 9 minimum 1 maximum 100 step 1 textcolor 7
    class SliderW
  }
  Fl_Box Mled {
    xywh {51 5 10 10} box ROUNDED_BOX color 88 labelsize 18
  }
  Fl_Box MIDI_LABEL {
    label MIDI
    user_data 7
    xywh {4 32 44 14} labelfont 1 labelcolor 7 when 0
  }
  decl {RKR  *m_rkr} {private local
  }
  decl {RKRGUI *m_rgui} {private local
  }
}
