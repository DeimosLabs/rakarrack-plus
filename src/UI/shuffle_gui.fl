# data file for the Fltk User Interface Designer (fluid)
version 1.0305
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

widget_class ShuffleGui {
  user_data 1 open
  xywh {1550 57 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"} visible position_relative
} {
  Fl_Light_Button shuffle_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(116);
 o->value(rkr->Shuffle_Bypass);
 return;
}
rkr->Shuffle_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Shuffle->cleanup();
rgui->findpos(26,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x33 color 62 selection_color 1 labelsize 10 align 84 when 1
    class RKR_Light_Button
  }
  Fl_Choice shuffle_preset {
    label Preset
    user_data 12026
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12026))rkr->efx_Shuffle->setpreset((int)o->value());
shuffle_volL->value(rkr->efx_Shuffle->getpar(1));
shuffle_volML->value(rkr->efx_Shuffle->getpar(2));
shuffle_volMH->value(rkr->efx_Shuffle->getpar(2));
shuffle_volH->value(rkr->efx_Shuffle->getpar(4));
shuffle_cross1->value(rkr->efx_Shuffle->getpar(5));
shuffle_cross2->value(rkr->efx_Shuffle->getpar(6));
shuffle_cross3->value(rkr->efx_Shuffle->getpar(7));
shuffle_cross4->value(rkr->efx_Shuffle->getpar(8));
shuffle_Q->value(rkr->efx_Shuffle->getpar(9));
shuffle_WD->value(Dry_Wet(rkr->efx_Shuffle->getpar(0)));
shuffle_E->value(rkr->efx_Shuffle->getpar(10));} selected
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label {Shuffle 1}
      xywh {52 52 36 21} labelsize 10
    }
    MenuItem {} {
      label {Shuffle 2}
      xywh {52 52 36 21} labelsize 10
    }
    MenuItem {} {
      label {Shuffle 3}
      xywh {62 62 36 21} labelsize 10
    }
    MenuItem {} {
      label {Shuffle 4}
      xywh {72 72 36 21} labelsize 10
    }
    MenuItem {} {
      label Remover
      xywh {72 72 36 21} labelsize 10
    }
  }
  Fl_Value_Slider shuffle_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(227);
 return;
} 
rkr->efx_Shuffle->changepar(0,Dry_Wet((int)o->value()));}
    xywh {56 31 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider shuffle_cross1 {
    label {Low Freq}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(228);
 return;
} 
rkr->efx_Shuffle->changepar(5,(int)o->value());}
    xywh {56 49 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 1000 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider shuffle_volL {
    label {Low Gain}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(229);
 return;
} 
rkr->efx_Shuffle->changepar(1,(int)o->value());}
    xywh {56 64 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider shuffle_cross2 {
    label {M.L. Freq}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(230);
 return;
} 
rkr->efx_Shuffle->changepar(6,(int)o->value());}
    tooltip {Mid Low Frequency} xywh {56 79 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 400 maximum 4000 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider shuffle_volML {
    label {M.L Gain}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(231);
 return;
}
rkr->efx_Shuffle->changepar(2,(int)o->value());}
    tooltip {Mid Low Gain} xywh {56 94 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider shuffle_cross3 {
    label {M.H. Freq}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(232);
 return;
}
rkr->efx_Shuffle->changepar(7,(int)o->value());}
    tooltip {Mid High Frequency} xywh {56 109 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1200 maximum 8000 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider shuffle_volMH {
    label {M.H. Gain}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(233);
 return;
}
rkr->efx_Shuffle->changepar(3,(int)o->value());}
    tooltip {Mid High Gain} xywh {56 124 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider shuffle_cross4 {
    label {High Freq}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(234);
 return;
}
rkr->efx_Shuffle->changepar(8,(int)o->value());}
    tooltip {High Frequency} xywh {56 139 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 6000 maximum 26000 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider shuffle_volH {
    label {High Gain}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(235);
 return;
}
rkr->efx_Shuffle->changepar(4,(int)o->value());}
    xywh {56 154 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider shuffle_Q {
    label Q
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(236);
 return;
}
rkr->efx_Shuffle->changepar(9,(int)o->value());}
    tooltip Width xywh {56 169 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button shuffle_E {
    label Rev
    user_data 2
    callback {rkr->efx_Shuffle->changepar(10,(int)o->value());}
    tooltip {Filtered Band - (Uncheck = Mid: Check = Side)} xywh {2 167 40 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
}
