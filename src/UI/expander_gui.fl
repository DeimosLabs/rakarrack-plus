# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class ExpanderGui {
  user_data 1 open
  xywh {1550 57 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button expander_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Multi_On_Off);
 o->value(rkr->EFX_Bypass[EFX_EXPANDER]);
 return;
}
rkr->EFX_Bypass[EFX_EXPANDER]=(int)o->value();
rgui->findpos(EFX_EXPANDER,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x32 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice expander_preset {
    label Preset
    user_data 12025
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12025))rkr->Rack_Effects[EFX_EXPANDER]->setpreset((int) o->value());
expander_ATime->value(rkr->Rack_Effects[EFX_EXPANDER]->getpar(Expander_Attack));
expander_RTime->value(rkr->Rack_Effects[EFX_EXPANDER]->getpar(Expander_Release));
expander_shape->value(rkr->Rack_Effects[EFX_EXPANDER]->getpar(Expander_Shape));
expander_threshold->value(rkr->Rack_Effects[EFX_EXPANDER]->getpar(Expander_Threshold));
expander_HPF->value(rkr->Rack_Effects[EFX_EXPANDER]->getpar(Expander_HPF));
expander_LPF->value(rkr->Rack_Effects[EFX_EXPANDER]->getpar(Expander_LPF));
expander_level->value(rkr->Rack_Effects[EFX_EXPANDER]->getpar(Expander_Gain));} selected
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label {Noise Gate}
      xywh {52 52 36 21} labelsize 10
    }
    MenuItem {} {
      label {Boost Gate}
      xywh {52 52 36 21} labelsize 10
    }
    MenuItem {} {
      label {Treble swell}
      xywh {52 52 36 21} labelsize 10
    }
    MenuItem {} {
      label Another
      xywh {62 62 36 21} labelsize 10
    }
  }
  Fl_Value_Slider expander_ATime {
    label {A. Time}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Expander_Attack);
 return;
} 
rkr->Rack_Effects[EFX_EXPANDER]->changepar(Expander_Attack,(int)o->value());}
    xywh {56 39 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 5000 step 1 value 10 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider expander_RTime {
    label {R. Time}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Expander_Release);
 return;
} 
rkr->Rack_Effects[EFX_EXPANDER]->changepar(Expander_Release,(int) o->value());}
    xywh {56 61 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 10 maximum 1000 step 1 value 500 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider expander_shape {
    label Shape
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Expander_Shape);
 return;
} 
rkr->Rack_Effects[EFX_EXPANDER]->changepar(Expander_Shape, (int) o->value());}
    xywh {56 83 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 50 step 1 value 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider expander_threshold {
    label Threshold
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Expander_Threshold);
 return;
} 
rkr->Rack_Effects[EFX_EXPANDER]->changepar(Expander_Threshold, (int)o->value());}
    xywh {56 105 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -80 maximum 0 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider expander_level {
    label {Out Gain}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Expander_Gain);
 return;
} 
rkr->Rack_Effects[EFX_EXPANDER]->changepar(Expander_Gain, (int) o->value());}
    xywh {56 125 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 127 step 1 value 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider expander_LPF {
    label LPF
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Expander_LPF);
 return;
} 
rkr->Rack_Effects[EFX_EXPANDER]->changepar(Expander_LPF, (int)o->value());}
    xywh {56 146 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 26000 step 1 value 20000 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider expander_HPF {
    label HPF
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Expander_HPF);
 return;
} 
rkr->Rack_Effects[EFX_EXPANDER]->changepar(Expander_HPF, (int)o->value());}
    xywh {56 162 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 20000 step 1 value 20 textcolor 7
    class RKR_Slider
  }
}
