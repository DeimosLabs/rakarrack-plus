# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class ConvoGui {open selected
  xywh {1550 57 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Function {add_user_files()} {return_type void
  } {
    code {for(unsigned i = 0; i < m_process->Convolotron_WAV_Files.size(); i++)
{
    m_parent->add_convolotron_file(m_process->Convolotron_WAV_Files[i].User_File_Menu_Name );
}} {}
  }
  Fl_Light_Button convo_activar {
    label On
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Active[EFX_CONVOLOTRON]);
 return;
}
m_process->EFX_Active[EFX_CONVOLOTRON]=(int)o->value();
if((int) o->value()==0)
m_process->Rack_Effects[EFX_CONVOLOTRON]->cleanup();
m_parent->findpos(EFX_CONVOLOTRON,(int)o->value(),o);}
    xywh {6 4 34 18} shortcut 0x35 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice convo_preset {
    label Preset
    user_data UD_PRESET_CONVOLOTRON
    callback {long long ud= (long long) v;
if((ud==0)||(ud==UD_PRESET_CONVOLOTRON))
    m_process->Rack_Effects[EFX_CONVOLOTRON]->setpreset((int) o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_CONVOLOTRON]; i++)
{
    parameter_refresh(i);
};}
    xywh {79 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label {Marshall JCM200}
      xywh {67 67 36 21} labelsize 10
    }
    MenuItem {} {
      label {Fender Superchamp}
      xywh {67 67 36 21} labelsize 10
    }
    MenuItem {} {
      label {Mesa Boogie}
      xywh {67 67 36 21} labelsize 10
    }
    MenuItem {} {
      label {Mesa Boogie 2}
      xywh {77 77 36 21} labelsize 10
    }
  }
  Fl_Value_Slider convo_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Convo_DryWet);
 return;
}
m_process->Rack_Effects[EFX_CONVOLOTRON]->changepar(Convo_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 30 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider convo_pan {
    label Pan
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Convo_Pan);
 return;
}
m_process->Rack_Effects[EFX_CONVOLOTRON]->changepar(Convo_Pan,(int)(o->value()+64));}
    xywh {56 46 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider convo_level {
    label Level
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Convo_Level);
 return;
}
m_process->Rack_Effects[EFX_CONVOLOTRON]->changepar(Convo_Level,(int)o->value());}
    xywh {56 62 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider convo_damp {
    label Damp
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Convo_Damp);
 return;
}
m_process->Rack_Effects[EFX_CONVOLOTRON]->changepar(Convo_Damp,(int)o->value());}
    xywh {56 78 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider convo_fb {
    label Feedback
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Convo_Feedback);
 return;
}
m_process->Rack_Effects[EFX_CONVOLOTRON]->changepar(Convo_Feedback,(int)o->value());}
    xywh {56 94 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider convo_length {
    label Length
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Convo_Length);
 return;
}
m_process->Rack_Effects[EFX_CONVOLOTRON]->changepar(Convo_Length,(int)o->value());}
    xywh {56 110 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 5 maximum 250 step 1 value 100 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button convo_user {
    label User
    callback {m_process->Rack_Effects[EFX_CONVOLOTRON]->changepar(Convo_User_File,(int)o->value());

if((int)o->value())B_wav->activate(); else B_wav->deactivate();}
    xywh {110 126 43 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button convo_safe {
    label {Safe Mode}
    callback {m_process->Rack_Effects[EFX_CONVOLOTRON]->changepar(Convo_Safe,(int)o->value())}
    xywh {19 141 73 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Button B_wav {
    label Browse
    callback {// If nothing previously set, then default location
    std::string chooser_start_location = "";

    // If the user set a User Directory, then use it
    if(strcmp(m_process->UDirFilename, DATADIR) != 0)
    {
        chooser_start_location = m_process->UDirFilename;
    }

    char *filename;
    filename = fl_file_chooser("Load Wav File:", "(*.wav)", chooser_start_location.c_str(), 0);

    if (filename == NULL)
        return;

    filename = fl_filename_setext(filename, ".wav");

    Convolotron *Efx_Convolotron = static_cast<Convolotron*>(m_process->Rack_Effects[EFX_CONVOLOTRON]);
    strcpy(Efx_Convolotron->Filename, filename);

    if(!Efx_Convolotron->setfile(USERFILE))
    {
        m_process->Handle_Message(14, filename);
    }}
    xywh {106 143 46 12} labelsize 10 deactivate
    class RKR_Button
  }
  Fl_Choice convo_fnum {
    label Preset
    callback {m_process->Rack_Effects[EFX_CONVOLOTRON]->changepar(Convo_Set_File,(int)o->value());}
    xywh {51 159 101 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label {Marshall JCM200}
      xywh {44 44 36 21} labelsize 10
    }
    MenuItem {} {
      label {Fender Superchamp}
      xywh {54 54 36 21} labelsize 10
    }
    MenuItem {} {
      label {Mesa Boogie}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Mesa Boogie 2}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Marshall Plexi}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Bassman
      xywh {10 10 36 21} labelsize 10
    }
    MenuItem {} {
      label JCM2000
      xywh {20 20 36 21} labelsize 10
    }
    MenuItem {} {
      label Ampeg
      xywh {30 30 36 21} labelsize 10
    }
    MenuItem {} {
      label Marshall2
      xywh {40 40 36 21} labelsize 10
    }
  }
  Function {parameter_refresh(int index)} {return_type void
  } {
    code {switch (index)
    {
    case Convo_DryWet:
        convo_WD->value(Dry_Wet(m_process->Rack_Effects[EFX_CONVOLOTRON]->getpar(Convo_DryWet)));
        break;
    case Convo_Pan:
        convo_pan->value(m_process->Rack_Effects[EFX_CONVOLOTRON]->getpar(Convo_Pan)-64);
        break;
    case Convo_Safe:
        convo_safe->value(m_process->Rack_Effects[EFX_CONVOLOTRON]->getpar(Convo_Safe));
        break;
    case Convo_Length:
        convo_length->value(m_process->Rack_Effects[EFX_CONVOLOTRON]->getpar(Convo_Length));
        break;
    case Convo_User_File:
        convo_user->value(m_process->Rack_Effects[EFX_CONVOLOTRON]->getpar(Convo_User_File));
        convo_user->do_callback();
        break;
    case Convo_SKIP_5:
        break;
    case Convo_Damp:
        convo_damp->value(m_process->Rack_Effects[EFX_CONVOLOTRON]->getpar(Convo_Damp));
        break;
    case Convo_Level:
        convo_level->value(m_process->Rack_Effects[EFX_CONVOLOTRON]->getpar(Convo_Level));
        break;
    case Convo_Set_File:
        convo_fnum->value(m_process->Rack_Effects[EFX_CONVOLOTRON]->getpar(Convo_Set_File));
        break;
    case Convo_SKIP_9:
        break;
    case Convo_Feedback:
        convo_fb->value(m_process->Rack_Effects[EFX_CONVOLOTRON]->getpar(Convo_Feedback));
        break;
    }} {}
  }
}
