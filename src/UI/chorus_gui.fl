# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

widget_class {\#include "common_gui_menu.h"} ChorusGui {
  user_data 1 open
  xywh {1668 157 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  code3 {\#include "common_gui_menu.h"} visible position_relative
} {
  Fl_Light_Button chorus_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(116);
 o->value(rkr->Chorus_Bypass);
 return;
}
rkr->Chorus_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Chorus->cleanup();
rgui->findpos(5,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x36 color 62 selection_color 1 labelsize 10 align 84 when 1
    class RKR_Light_Button
  }
  Fl_Choice chorus_preset {
    label Preset
    user_data 12005
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12005))rkr->efx_Chorus->setpreset(0,(int) o->value());
chorus_WD->value(Dry_Wet(rkr->efx_Chorus->getpar(Chorus_DryWet)));
chorus_pan->value(rkr->efx_Chorus->getpar(Chorus_Pan)-64);
chorus_freq->value(rkr->efx_Chorus->getpar(Chorus_LFO_Tempo));
chorus_rnd->value(rkr->efx_Chorus->getpar(Chorus_LFO_Random));
chorus_lfotype->value(rkr->efx_Chorus->getpar(Chorus_LFO_Type));
chorus_stdf->value(rkr->efx_Chorus->getpar(Chorus_LFO_Stereo));
chorus_dpth->value(rkr->efx_Chorus->getpar(Chorus_Depth));
chorus_delay->value(rkr->efx_Chorus->getpar(Chorus_Delay));
chorus_fb->value(rkr->efx_Chorus->getpar(Chorus_Feedback));
chorus_LR->value(rkr->efx_Chorus->getpar(Chorus_LR_Cross));
chorus_subs->value(rkr->efx_Chorus->getpar(Chorus_Subtract));
chorus_awesome->value(rkr->efx_Chorus->getpar(Chorus_Intense));} selected
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label {Chorus 1}
      xywh {102 102 36 21} labelsize 10
    }
    MenuItem {} {
      label {Chorus 2}
      xywh {102 102 36 21} labelsize 10
    }
    MenuItem {} {
      label {Chorus 3}
      xywh {102 102 36 21} labelsize 10
    }
    MenuItem {} {
      label {Celeste 1}
      xywh {112 112 36 21} labelsize 10
    }
    MenuItem {} {
      label {Celeste 2}
      xywh {122 122 36 21} labelsize 10
    }
  }
  Fl_Value_Slider chorus_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(52);
 return;
} 
rkr->efx_Chorus->changepar(Chorus_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 29 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider chorus_pan {
    label Pan
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(50);
 return;
} 
rkr->efx_Chorus->changepar(Chorus_Pan,(int)(o->value()+64));}
    xywh {56 41 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider chorus_freq {
    label Tempo
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(72);
 return;
} 
rkr->efx_Chorus->changepar(Chorus_LFO_Tempo,(int)o->value());}
    xywh {56 53 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider chorus_rnd {
    label Random
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(105);
 return;
} 
rkr->efx_Chorus->changepar(Chorus_LFO_Random,(int)o->value());}
    xywh {56 65 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Choice chorus_lfotype {
    label {LFO Type}
    user_data 12
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Chorus_LFO_Type);
 return;
} 

rkr->efx_Chorus->changepar(Chorus_LFO_Type,(int)o->value())} open
    xywh {78 77 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    code0 {o->menu(m_lfo_menu->get_lfo_type());}
    class RKR_Choice
  } {}
  Fl_Check_Button chorus_subs {
    label Subtract
    user_data 2
    callback {rkr->efx_Chorus->changepar(Chorus_Subtract,(int)o->value())}
    xywh {25 94 62 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button chorus_awesome {
    label Intense
    user_data 2
    callback {rkr->efx_Chorus->changepar(Chorus_Intense,(int)o->value())}
    xywh {88 95 56 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Value_Slider chorus_stdf {
    label {Stereo Df}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(99);
 return;
} 
rkr->efx_Chorus->changepar(Chorus_LFO_Stereo,(int)o->value());}
    xywh {56 115 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider chorus_dpth {
    label Depth
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(23);
 return;
} 
rkr->efx_Chorus->changepar(Chorus_Depth,(int)o->value());}
    xywh {56 128 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider chorus_delay {
    label Delay
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Chorus_Delay);
 return;
} 

rkr->efx_Chorus->changepar(Chorus_Delay,(int)o->value());}
    xywh {56 141 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider chorus_fb {
    label Feedback
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(79);
 return;
} 
rkr->efx_Chorus->changepar(Chorus_Feedback,(int)o->value());}
    xywh {56 154 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider chorus_LR {
    label {L/R Cross}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(91);
 return;
} 
rkr->efx_Chorus->changepar(Chorus_LR_Cross,(int)(o->value()));}
    xywh {55 168 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  decl {CommonGuiMenu *m_lfo_menu;} {private local
  }
}
