# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
widget_class {\#include "common_gui_menu.h"} SynthfilterGui {
  user_data 1 open
  xywh {1550 56 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "sliderW.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  code3 {\#include "common_gui_menu.h"} visible position_relative
} {
  Fl_Light_Button synthfilter_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(116);
 o->value(rkr->Synthfilter_Bypass);
 return;
}
rkr->Synthfilter_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Synthfilter->cleanup();
rgui->findpos(27,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x37 color 62 selection_color 1 labelsize 10 align 84 when 1
  }
  Fl_Choice synthfilter_preset {
    label Preset
    user_data 12027
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12027))rkr->efx_Synthfilter->setpreset((int) o->value());
synthfilter_WD->value(Dry_Wet(rkr->efx_Synthfilter->getpar(0)));
synthfilter_Distort->value(rkr->efx_Synthfilter->getpar(1));
synthfilter_freq->value(rkr->efx_Synthfilter->getpar(2));
synthfilter_rand->value(rkr->efx_Synthfilter->getpar(3));
synthfilter_lfotype->value(rkr->efx_Synthfilter->getpar(4));
synthfilter_stdf->value(rkr->efx_Synthfilter->getpar(5));
synthfilter_width->value(rkr->efx_Synthfilter->getpar(6));
synthfilter_Lstages->value(rkr->efx_Synthfilter->getpar(8));
synthfilter_Hstages->value(rkr->efx_Synthfilter->getpar(9));
synthfilter_fb->value(rkr->efx_Synthfilter->getpar(7));
synthfilter_Offset->value(rkr->efx_Synthfilter->getpar(15));
synthfilter_subs->value(rkr->efx_Synthfilter->getpar(10));
synthfilter_dpth->value(rkr->efx_Synthfilter->getpar(11));
synthfilter_EnvSens->value(rkr->efx_Synthfilter->getpar(12));
synthfilter_ATime->value(rkr->efx_Synthfilter->getpar(13));
synthfilter_RTime->value(rkr->efx_Synthfilter->getpar(14));}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
  } {
    MenuItem {} {
      label {Low Pass}
      xywh {82 82 36 21} labelsize 10
    }
    MenuItem {} {
      label {High Pass}
      xywh {82 82 36 21} labelsize 10
    }
    MenuItem {} {
      label {Band Pass}
      xywh {82 82 36 21} labelsize 10
    }
    MenuItem {} {
      label {Lead Synth}
      xywh {92 92 36 21} labelsize 10
    }
    MenuItem {} {
      label Water
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Pan Filter}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Multi
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Lazy Wahble}
      xywh {10 10 36 21} labelsize 10
    }
  }
  Fl_Value_Slider synthfilter_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(237);
 return;
}
rkr->efx_Synthfilter->changepar(0,Dry_Wet((int)(o->value())));}
    xywh {56 25 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider synthfilter_Distort {
    label Distort
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(238);
 return;
}
rkr->efx_Synthfilter->changepar(1,(int)o->value());}
    xywh {56 36 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider synthfilter_freq {
    label Tempo
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(239);
 return;
}
rkr->efx_Synthfilter->changepar(2,(int)o->value());}
    xywh {56 48 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider synthfilter_rand {
    label Random
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(446);
 return;
}
rkr->efx_Synthfilter->changepar(3,(int)o->value());} selected
    xywh {56 59 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Choice synthfilter_lfotype {
    label {LFO Type}
    callback {rkr->efx_Synthfilter->changepar(4,(int)o->value());}
    xywh {54 69 52 13} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    code0 {o->menu(m_lfo_menu->get_lfo_type());}
  } {}
  Fl_Check_Button synthfilter_subs {
    label {Subtr.}
    user_data 2
    callback {rkr->efx_Synthfilter->changepar(10,(int)o->value())}
    xywh {109 68 46 15} down_box BORDER_BOX labelsize 10 labelcolor 7
  }
  Fl_Value_Slider synthfilter_stdf {
    label {Stereo Df}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(240);
 return;
}
rkr->efx_Synthfilter->changepar(5,(int)o->value());}
    tooltip {LFO L/R Delay} xywh {56 83 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider synthfilter_width {
    label Width
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(241);
 return;
}
rkr->efx_Synthfilter->changepar(6,(int)o->value());}
    xywh {56 94 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider synthfilter_fb {
    label Feedback
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(242);
 return;
}
rkr->efx_Synthfilter->changepar(7,(int)o->value());}
    xywh {56 105 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class SliderW
  }
  Fl_Counter synthfilter_Lstages {
    label {LPF Stg.}
    callback {rkr->efx_Synthfilter->changepar(8,(int)o->value());}
    xywh {48 116 28 11} type Simple box THIN_UP_BOX labelsize 10 labelcolor 7 align 4 minimum 0 maximum 12 step 1 value 1 textsize 9
  }
  Fl_Counter synthfilter_Hstages {
    label {HPF Stg.}
    callback {rkr->efx_Synthfilter->changepar(9,(int)o->value());}
    xywh {125 116 28 11} type Simple box THIN_UP_BOX labelsize 10 labelcolor 7 align 4 minimum 0 maximum 12 step 1 value 1 textsize 9
  }
  Fl_Value_Slider synthfilter_dpth {
    label Depth
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(243);
 return;
}
rkr->efx_Synthfilter->changepar(11,(int)o->value());}
    xywh {56 128 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider synthfilter_EnvSens {
    label {E.Sens}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(244);
 return;
}
rkr->efx_Synthfilter->changepar(12,(int)(o->value()));}
    tooltip {Envelope Sensitivity} xywh {56 139 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider synthfilter_ATime {
    label {A.Time}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(245);
 return;
}
rkr->efx_Synthfilter->changepar(13,(int)o->value());}
    tooltip {Attack Time} xywh {56 149 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 5 maximum 1000 step 1 value 5 textcolor 7
    class SliderW
  }
  Fl_Value_Slider synthfilter_RTime {
    label {R.Time}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(246);
 return;
}
rkr->efx_Synthfilter->changepar(14,(int)o->value());}
    tooltip {Release Time} xywh {56 160 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 5 maximum 500 step 1 value 5 textcolor 7
    class SliderW
  }
  Fl_Value_Slider synthfilter_Offset {
    label Offset
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(247);
 return;
}
rkr->efx_Synthfilter->changepar(15,(int)o->value());}
    tooltip {HPF/LPF Offset} xywh {56 170 100 9} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  decl {CommonGuiMenu *m_lfo_menu;} {private local
  }
}
