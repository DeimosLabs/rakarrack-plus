# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Value_Input.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Counter.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

widget_class {\#include "common_gui_menu.h"} SynthfilterGui {
  user_data 1 open
  xywh {1557 72 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  code3 {\#include "common_gui_menu.h"} visible position_relative
} {
  Fl_Light_Button synthfilter_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Multi_On_Off);
 o->value(rkr->EFX_Bypass[EFX_SYNTHFILTER]);
 return;
}
rkr->EFX_Bypass[EFX_SYNTHFILTER]=(int)o->value();
if((int) o->value()==0)
rkr->Rack_Effects[EFX_SYNTHFILTER]->cleanup();
rgui->findpos(EFX_SYNTHFILTER,(int)o->value(),o);} selected
    xywh {5 4 34 18} shortcut 0x37 color 62 selection_color 1 labelsize 10 align 84 when 1
    class RKR_Light_Button
  }
  Fl_Choice synthfilter_preset {
    label Preset
    user_data 12027
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12027))rkr->Rack_Effects[EFX_SYNTHFILTER]->setpreset((int) o->value());
synthfilter_WD->value(Dry_Wet(rkr->Rack_Effects[EFX_SYNTHFILTER]->getpar(Synthfilter_DryWet)));
synthfilter_Distort->value(rkr->Rack_Effects[EFX_SYNTHFILTER]->getpar(Synthfilter_Distort));
synthfilter_freq->value(rkr->Rack_Effects[EFX_SYNTHFILTER]->getpar(Synthfilter_LFO_Tempo));
synthfilter_rand->value(rkr->Rack_Effects[EFX_SYNTHFILTER]->getpar(Synthfilter_LFO_Random));
synthfilter_lfotype->value(rkr->Rack_Effects[EFX_SYNTHFILTER]->getpar(Synthfilter_LFO_Type));
synthfilter_stdf->value(rkr->Rack_Effects[EFX_SYNTHFILTER]->getpar(Synthfilter_LFO_Stereo));
synthfilter_width->value(rkr->Rack_Effects[EFX_SYNTHFILTER]->getpar(Synthfilter_Width));
synthfilter_Lstages->value(rkr->Rack_Effects[EFX_SYNTHFILTER]->getpar(Synthfilter_LPF_Stages));
synthfilter_Hstages->value(rkr->Rack_Effects[EFX_SYNTHFILTER]->getpar(Synthfilter_HPF_Stages));
synthfilter_fb->value(rkr->Rack_Effects[EFX_SYNTHFILTER]->getpar(Synthfilter_Feedback));
synthfilter_Offset->value(rkr->Rack_Effects[EFX_SYNTHFILTER]->getpar(Synthfilter_Offset));
synthfilter_subs->value(rkr->Rack_Effects[EFX_SYNTHFILTER]->getpar(Synthfilter_Subtract));
synthfilter_dpth->value(rkr->Rack_Effects[EFX_SYNTHFILTER]->getpar(Synthfilter_Depth));
synthfilter_EnvSens->value(rkr->Rack_Effects[EFX_SYNTHFILTER]->getpar(Synthfilter_Env_Sens));
synthfilter_ATime->value(rkr->Rack_Effects[EFX_SYNTHFILTER]->getpar(Synthfilter_Attack));
synthfilter_RTime->value(rkr->Rack_Effects[EFX_SYNTHFILTER]->getpar(Synthfilter_Release));}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label {Low Pass}
      xywh {82 82 36 21} labelsize 10
    }
    MenuItem {} {
      label {High Pass}
      xywh {82 82 36 21} labelsize 10
    }
    MenuItem {} {
      label {Band Pass}
      xywh {82 82 36 21} labelsize 10
    }
    MenuItem {} {
      label {Lead Synth}
      xywh {92 92 36 21} labelsize 10
    }
    MenuItem {} {
      label Water
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Pan Filter}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Multi
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Lazy Wahble}
      xywh {10 10 36 21} labelsize 10
    }
  }
  Fl_Value_Slider synthfilter_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Synthfilter_DryWet);
 return;
}
rkr->Rack_Effects[EFX_SYNTHFILTER]->changepar(Synthfilter_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 25 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider synthfilter_Distort {
    label Distort
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Synthfilter_Distort);
 return;
}
rkr->Rack_Effects[EFX_SYNTHFILTER]->changepar(Synthfilter_Distort,(int)o->value());}
    xywh {56 37 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider synthfilter_freq {
    label Tempo
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Synthfilter_LFO_Tempo);
 return;
}
rkr->Rack_Effects[EFX_SYNTHFILTER]->changepar(Synthfilter_LFO_Tempo,(int)o->value());}
    xywh {56 49 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Input synthfilter_rand {
    label R
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Synthfilter_LFO_Random);
 return;
}
rkr->Rack_Effects[EFX_SYNTHFILTER]->changepar(Synthfilter_LFO_Random,(int)o->value());}
    tooltip {LFO Randomness} xywh {16 62 23 15} labelsize 10 labelcolor 7 maximum 127 step 1 textsize 10 textcolor 7
    class RKR_Value_Input
  }
  Fl_Choice synthfilter_lfotype {
    label LFO
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Synthfilter_LFO_Type);
 return;
}

rkr->Rack_Effects[EFX_SYNTHFILTER]->changepar(Synthfilter_LFO_Type,(int)o->value());}
    xywh {65 63 52 13} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    code0 {o->menu(m_lfo_menu->get_lfo_type());}
    code1 {o->set_text_offset(-1);}
    class RKR_Choice
  } {}
  Fl_Check_Button synthfilter_subs {
    label Sub
    user_data 2
    callback {rkr->Rack_Effects[EFX_SYNTHFILTER]->changepar(Synthfilter_Subtract,(int)o->value())}
    tooltip {Subtract - Make output of filter negative} xywh {143 63 46 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 4
    class RKR_Check_Button
  }
  Fl_Value_Slider synthfilter_stdf {
    label {Stereo Df}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Synthfilter_LFO_Stereo);
 return;
}
rkr->Rack_Effects[EFX_SYNTHFILTER]->changepar(Synthfilter_LFO_Stereo,(int)o->value());}
    tooltip {LFO L/R Delay} xywh {56 80 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider synthfilter_width {
    label Width
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Synthfilter_Width);
 return;
}
rkr->Rack_Effects[EFX_SYNTHFILTER]->changepar(Synthfilter_Width,(int)o->value());}
    xywh {56 91 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider synthfilter_fb {
    label Feedback
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Synthfilter_Feedback);
 return;
}
rkr->Rack_Effects[EFX_SYNTHFILTER]->changepar(Synthfilter_Feedback,(int)o->value());}
    xywh {56 102 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Counter synthfilter_Lstages {
    label {LPF Stg.}
    callback {rkr->Rack_Effects[EFX_SYNTHFILTER]->changepar(Synthfilter_LPF_Stages,(int)o->value());}
    xywh {48 114 28 11} type Simple box THIN_UP_BOX labelsize 10 labelcolor 7 align 4 minimum 0 maximum 12 step 1 value 1 textsize 9
    code0 {o->set_text_offset(-1);}
    class RKR_Counter
  }
  Fl_Counter synthfilter_Hstages {
    label {HPF Stg.}
    callback {rkr->Rack_Effects[EFX_SYNTHFILTER]->changepar(Synthfilter_HPF_Stages,(int)o->value());}
    xywh {125 114 28 11} type Simple box THIN_UP_BOX labelsize 10 labelcolor 7 align 4 minimum 0 maximum 12 step 1 value 1 textsize 9
    code0 {o->set_text_offset(-1);}
    class RKR_Counter
  }
  Fl_Value_Slider synthfilter_dpth {
    label Depth
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Synthfilter_Depth);
 return;
}
rkr->Rack_Effects[EFX_SYNTHFILTER]->changepar(Synthfilter_Depth,(int)o->value());}
    xywh {56 126 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider synthfilter_EnvSens {
    label {E.Sens}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Synthfilter_Env_Sens);
 return;
}
rkr->Rack_Effects[EFX_SYNTHFILTER]->changepar(Synthfilter_Env_Sens,(int)(o->value()));}
    tooltip {Envelope Sensitivity} xywh {56 137 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider synthfilter_ATime {
    label {A.Time}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Synthfilter_Attack);
 return;
}
rkr->Rack_Effects[EFX_SYNTHFILTER]->changepar(Synthfilter_Attack,(int)o->value());}
    tooltip {Attack Time} xywh {56 148 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 5 maximum 1000 step 1 value 5 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider synthfilter_RTime {
    label {R.Time}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Synthfilter_Release);
 return;
}
rkr->Rack_Effects[EFX_SYNTHFILTER]->changepar(Synthfilter_Release,(int)o->value());}
    tooltip {Release Time} xywh {56 159 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 5 maximum 500 step 1 value 5 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider synthfilter_Offset {
    label Offset
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Synthfilter_Offset);
 return;
}
rkr->Rack_Effects[EFX_SYNTHFILTER]->changepar(Synthfilter_Offset,(int)o->value());}
    tooltip {HPF/LPF Offset} xywh {56 170 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  decl {CommonGuiMenu *m_lfo_menu;} {private local
  }
}
