# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
widget_class SharGui {
  user_data 1 open
  xywh {1550 57 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "sliderW.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"} visible position_relative
} {
  Fl_Light_Button shar_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(116);
 o->value(rkr->StereoHarm_Bypass);
 return;
}
rkr->StereoHarm_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_StereoHarm->cleanup();
rkr->efx_StereoHarm->changepar(3,rkr->efx_StereoHarm->getpar(3));
rkr->efx_StereoHarm->changepar(6,rkr->efx_StereoHarm->getpar(6));
rgui->Chord(1);
rgui->findpos(42,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x30 color 62 selection_color 1 labelsize 10 when 1
  }
  Fl_Choice shar_preset {
    label Preset
    user_data 12042
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12042))rkr->efx_StereoHarm->setpreset((int)o->value());
shar_WD->value(Dry_Wet(rkr->efx_StereoHarm->getpar(0)));
shar_ganl->value(rkr->efx_StereoHarm->getpar(1)-64);
shar_intl->value(rkr->efx_StereoHarm->getpar(2)-12);
shar_chl->value(rkr->efx_StereoHarm->getpar(3));
shar_ganr->value(rkr->efx_StereoHarm->getpar(4)-64);
shar_intr->value(rkr->efx_StereoHarm->getpar(5)-12);
shar_chr->value(rkr->efx_StereoHarm->getpar(6));
shar_lrc->value(rkr->efx_StereoHarm->getpar(11));
shar_SELECT->value(rkr->efx_StereoHarm->getpar(7));
shar_note->value(rkr->efx_StereoHarm->getpar(8));
shar_type->value(rkr->efx_StereoHarm->getpar(9));
shar_MIDI->value(rkr->efx_StereoHarm->getpar(10));
if ((rkr->efx_StereoHarm->PMIDI) || (rkr->efx_StereoHarm->PSELECT)) rgui->Chord(1);}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
  } {
    MenuItem {} {
      label Plain
      xywh {10 10 45 26} labelsize 10
    }
    MenuItem {} {
      label Octavator
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label Chorus
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label {Hard Chorus}
      xywh {0 0 36 21} labelsize 10
    }
  }
  Fl_Value_Slider shar_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(358);
 return;
}
rkr->efx_StereoHarm->changepar(0,Dry_Wet((int)(o->value())));}
    xywh {56 26 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider shar_intl {
    label {Int L}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(359);
 return;
}
rkr->StereoHarm_Bypass=0;
rkr->efx_StereoHarm->changepar(2,(int)(o->value()+12));
if((int)shar_activar->value())rkr->StereoHarm_Bypass=1;}
    tooltip {Left Interval} xywh {56 39 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -12 maximum 12 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider shar_chl {
    label {Chrm L}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(360);
 return;
}
rkr->efx_StereoHarm->changepar(3,(int)o->value());}
    tooltip {Left Chroma} xywh {56 52 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -2000 maximum 2000 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider shar_ganl {
    label {Gain L}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(361);
 return;
}
rkr->efx_StereoHarm->changepar(1,(int)(o->value()+64));}
    xywh {56 65 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider shar_intr {
    label {Int R}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(362);
 return;
}
rkr->StereoHarm_Bypass=0;
rkr->efx_StereoHarm->changepar(5,(int)(o->value()+12));
if((int)shar_activar->value())rkr->StereoHarm_Bypass=1;}
    tooltip {Right Interval} xywh {56 78 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -12 maximum 12 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider shar_chr {
    label {Chrm R}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(363);
 return;
}
rkr->efx_StereoHarm->changepar(6,(int)o->value());}
    tooltip {Right Chroma} xywh {56 91 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -2000 maximum 2000 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider shar_ganr {
    label {Gain R}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(364);
 return;
}
rkr->efx_StereoHarm->changepar(4,(int)(o->value()+64));}
    xywh {56 104 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider shar_lrc {
    label {L/R Cross}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(365);
 return;
}
rkr->efx_StereoHarm->changepar(11,(int)(o->value()));}
    xywh {56 117 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Check_Button shar_MIDI {
    label MIDI
    user_data 2
    callback {rkr->efx_StereoHarm->changepar(10,(int)o->value());
rkr->RC_Stereo_Harm->cleanup();

if(!(int)o->value())
{
rkr->efx_StereoHarm->changepar(3,rkr->efx_StereoHarm->getpar(3));
rkr->efx_StereoHarm->changepar(6,rkr->efx_StereoHarm->getpar(6));
}}
    xywh {9 129 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 8
  }
  Fl_Check_Button shar_SELECT {
    label SEL
    user_data 2
    callback {rkr->efx_StereoHarm->changepar(7,(int)o->value());
rkr->RC_Stereo_Harm->cleanup();
rgui->Chord(1);

if(!(int)o->value())
{
rkr->efx_StereoHarm->changepar(3,rkr->efx_StereoHarm->getpar(3));
rkr->efx_StereoHarm->changepar(6,rkr->efx_StereoHarm->getpar(6));
}}
    xywh {9 142 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 8
  }
  Fl_Box shar_chordname {
    xywh {56 132 98 21} labelsize 12 labelcolor 7
  }
  Fl_Value_Slider shar_note {
    label Note
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(366);
 return;
}
rkr->efx_StereoHarm->changepar(8,(int)o->value());
rgui->Chord(1);}
    xywh {56 158 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 23 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider shar_type {
    label Chord
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(367);
 return;
}
rkr->efx_StereoHarm->changepar(9,(int)o->value());
rgui->Chord(1);} selected
    xywh {56 170 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 33 step 1 textcolor 7
    class SliderW
  }
}
