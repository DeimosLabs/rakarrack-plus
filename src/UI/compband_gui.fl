# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class CbandGui {
  user_data 1 open selected
  xywh {1550 57 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button cband_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Bypass[EFX_COMPBAND]);
 return;
}
m_process->EFX_Bypass[EFX_COMPBAND]=(int)o->value();
if((int) o->value()==0)
m_process->Rack_Effects[EFX_COMPBAND]->cleanup();
m_parent->findpos(EFX_COMPBAND,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x38 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice cband_preset {
    label Preset
    user_data 12043
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12043))m_process->Rack_Effects[EFX_COMPBAND]->setpreset((int)o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_COMPBAND]; i++)
{
    parameter_refresh(i);
};}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label {Good Start}
      xywh {82 82 36 21} labelsize 10
    }
    MenuItem {} {
      label Loudness
      xywh {82 82 36 21} labelsize 10
    }
    MenuItem {} {
      label {Loudness 2}
      xywh {82 82 36 21} labelsize 10
    }
  }
  Fl_Value_Slider cband_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_CompBand_DryWet);
 return;
}
m_process->Rack_Effects[EFX_COMPBAND]->changepar(CompBand_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 27 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider cband_gain {
    label Gain
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_CompBand_Gain);
 return;
}
m_process->Rack_Effects[EFX_COMPBAND]->changepar(CompBand_Gain,(int)o->value());}
    xywh {56 39 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider cband_Lratio {
    label {L Ratio}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_CompBand_Low_Ratio);
 return;
}
m_process->Rack_Effects[EFX_COMPBAND]->changepar(CompBand_Low_Ratio, (int) o->value());}
    xywh {56 51 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2 maximum 42 step 1 value 2 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider cband_MLratio {
    label {ML Ratio}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_CompBand_Mid_1_Ratio);
 return;
}
m_process->Rack_Effects[EFX_COMPBAND]->changepar(CompBand_Mid_1_Ratio, (int) o->value());}
    xywh {56 63 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2 maximum 42 step 1 value 2 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider cband_MHratio {
    label {MH Ratio}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_CompBand_Mid_2_Ratio);
 return;
}
m_process->Rack_Effects[EFX_COMPBAND]->changepar(CompBand_Mid_2_Ratio, (int) o->value());}
    xywh {56 75 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2 maximum 42 step 1 value 2 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider cband_Hratio {
    label {H Ratio}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_CompBand_High_Ratio);
 return;
}
m_process->Rack_Effects[EFX_COMPBAND]->changepar(CompBand_High_Ratio, (int) o->value());}
    xywh {56 87 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2 maximum 42 step 1 value 2 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider cband_Lthres {
    label {L Thres}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_CompBand_Low_Thresh);
 return;
}
m_process->Rack_Effects[EFX_COMPBAND]->changepar(CompBand_Low_Thresh, (int)o->value());}
    xywh {56 99 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -70 maximum 24 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider cband_MLthres {
    label {ML Thres}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_CompBand_Mid_1_Thresh);
 return;
}
m_process->Rack_Effects[EFX_COMPBAND]->changepar(CompBand_Mid_1_Thresh, (int)o->value());}
    xywh {56 111 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -70 maximum 24 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider cband_MHthres {
    label {MH Thres}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_CompBand_Mid_2_Thresh);
 return;
}
m_process->Rack_Effects[EFX_COMPBAND]->changepar(CompBand_Mid_2_Thresh, (int)o->value());}
    xywh {56 123 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -70 maximum 24 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider cband_Hthres {
    label {H Thres}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_CompBand_High_Thresh);
 return;
}
m_process->Rack_Effects[EFX_COMPBAND]->changepar(CompBand_High_Thresh, (int)o->value());}
    xywh {56 135 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -70 maximum 24 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider cband_cross1 {
    label {Cross 1}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_CompBand_Cross_1);
 return;
}
m_process->Rack_Effects[EFX_COMPBAND]->changepar(CompBand_Cross_1,(int)o->value());}
    xywh {56 147 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 1000 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider cband_cross2 {
    label {Cross 2}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_CompBand_Cross_2);
 return;
}
m_process->Rack_Effects[EFX_COMPBAND]->changepar(CompBand_Cross_2,(int)o->value());}
    xywh {56 159 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1000 maximum 8000 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider cband_cross3 {
    label {Cross 3}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_CompBand_Cross_3);
 return;
}
m_process->Rack_Effects[EFX_COMPBAND]->changepar(CompBand_Cross_3,(int)o->value());}
    xywh {56 171 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2000 maximum 26000 step 1 textcolor 7
    class RKR_Slider
  }
  Function {parameter_refresh(int index)} {return_type void
  } {
    code {switch (index)
    {
    case CompBand_DryWet:
        cband_WD->value(Dry_Wet(m_process->Rack_Effects[EFX_COMPBAND]->getpar(CompBand_DryWet)));
        break;
    case CompBand_Low_Ratio:
        cband_Lratio->value(m_process->Rack_Effects[EFX_COMPBAND]->getpar(CompBand_Low_Ratio));
        break;
    case CompBand_Mid_1_Ratio:
        cband_MLratio->value(m_process->Rack_Effects[EFX_COMPBAND]->getpar(CompBand_Mid_1_Ratio));
        break;
    case CompBand_Mid_2_Ratio:
        cband_MHratio->value(m_process->Rack_Effects[EFX_COMPBAND]->getpar(CompBand_Mid_2_Ratio));
        break;
    case CompBand_High_Ratio:
        cband_Hratio->value(m_process->Rack_Effects[EFX_COMPBAND]->getpar(CompBand_High_Ratio));
        break;
    case CompBand_Low_Thresh:
        cband_Lthres->value(m_process->Rack_Effects[EFX_COMPBAND]->getpar(CompBand_Low_Thresh));
        break;
    case CompBand_Mid_1_Thresh:
        cband_MLthres->value(m_process->Rack_Effects[EFX_COMPBAND]->getpar(CompBand_Mid_1_Thresh));
        break;
    case CompBand_Mid_2_Thresh:
        cband_MHthres->value(m_process->Rack_Effects[EFX_COMPBAND]->getpar(CompBand_Mid_2_Thresh));
        break;
    case CompBand_High_Thresh:
        cband_Hthres->value(m_process->Rack_Effects[EFX_COMPBAND]->getpar(CompBand_High_Thresh));
        break;
    case CompBand_Cross_1:
        cband_cross1->value(m_process->Rack_Effects[EFX_COMPBAND]->getpar(CompBand_Cross_1));
        break;
    case CompBand_Cross_2:
        cband_cross2->value(m_process->Rack_Effects[EFX_COMPBAND]->getpar(CompBand_Cross_2));
        break;
    case CompBand_Cross_3:
        cband_cross3->value(m_process->Rack_Effects[EFX_COMPBAND]->getpar(CompBand_Cross_3));
        break;
    case CompBand_Gain:
        cband_gain->value(m_process->Rack_Effects[EFX_COMPBAND]->getpar(CompBand_Gain));
        break;
    }} {}
  }
}
