# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class ShelfGui {open selected
  xywh {1550 57 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button shelf_activar {
    label On
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Bypass[EFX_SHELFBOOST]);
 return;
}
m_process->EFX_Bypass[EFX_SHELFBOOST]=(int)o->value();
if((int) o->value()==0)
m_process->Rack_Effects[EFX_SHELFBOOST]->cleanup();
m_parent->findpos(EFX_SHELFBOOST,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x31 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice shelf_preset {
    label Preset
    user_data UD_PRESET_SHELFBOOST
    callback {long long ud= (long long) v;
if((ud==0)||(ud==UD_PRESET_SHELFBOOST))
    m_process->Rack_Effects[EFX_SHELFBOOST]->setpreset((int) o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_SHELFBOOST]; i++)
{
    parameter_refresh(i);
};}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label Treble
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label Mid
      xywh {20 20 36 21} labelsize 10
    }
    MenuItem {} {
      label Bass
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Distortion 1}
      xywh {0 0 36 21} labelsize 10
    }
  }
  Fl_Value_Slider shelf_gain {
    label Gain
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Shelf_Gain);
 return;
}
m_process->Rack_Effects[EFX_SHELFBOOST]->changepar(Shelf_Gain,(int)o->value());}
    xywh {56 66 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider shelf_level {
    label Level
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Shelf_Level);
 return;
}
m_process->Rack_Effects[EFX_SHELFBOOST]->changepar(Shelf_Level,(int)o->value());}
    xywh {56 86 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 127 step 1 value 32 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider shelf_freq1 {
    label Tone
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Shelf_Tone);
 return;
}
m_process->Rack_Effects[EFX_SHELFBOOST]->changepar(Shelf_Tone,(int)o->value());}
    xywh {56 106 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 220 maximum 16000 step 1 value 1000 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider shelf_q1 {
    label Presence
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Shelf_Presence);
 return;
}
m_process->Rack_Effects[EFX_SHELFBOOST]->changepar(Shelf_Presence,(int)o->value());}
    xywh {56 126 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button shelf_mode {
    label Stereo
    callback {m_process->Rack_Effects[EFX_SHELFBOOST]->changepar(Shelf_Stereo,(int)o->value());}
    xywh {13 153 54 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Function {parameter_refresh(int index)} {return_type void
  } {
    code {switch (index)
    {
    case Shelf_Gain:
        shelf_gain->value(m_process->Rack_Effects[EFX_SHELFBOOST]->getpar(Shelf_Gain));
        break;
    case Shelf_Presence:
        shelf_q1->value(m_process->Rack_Effects[EFX_SHELFBOOST]->getpar(Shelf_Presence));
        break;
    case Shelf_Tone:
        shelf_freq1->value(m_process->Rack_Effects[EFX_SHELFBOOST]->getpar(Shelf_Tone));
        break;
    case Shelf_Stereo:
        shelf_mode->value(m_process->Rack_Effects[EFX_SHELFBOOST]->getpar(Shelf_Stereo));
        break;
    case Shelf_Level:
        shelf_level->value(m_process->Rack_Effects[EFX_SHELFBOOST]->getpar(Shelf_Level));
        break;
    }} {}
  }
}
