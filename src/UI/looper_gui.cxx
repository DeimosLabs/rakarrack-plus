// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "looper_gui.h"

void LooperGui::cb_looper_activar_i(Fl_Light_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(116);
 o->value(rkr->Looper_Bypass);
 return;
}
rkr->Looper_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Looper->cleanup();
rgui->findpos(30,(int)o->value(),o);
}
void LooperGui::cb_looper_activar(Fl_Light_Button* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_activar_i(o,v);
}

void LooperGui::cb_looper_preset_i(Fl_Choice* o, void* v) {
  long long ud= (long long) v;
if((ud==0)||(ud==12030))rkr->efx_Looper->setpreset((int) o->value());
looper_WD->value(Dry_Wet(rkr->efx_Looper->getpar(0)));
looper_play->value(rkr->efx_Looper->getpar(1));
looper_record->value(rkr->efx_Looper->getpar(3));
looper_rv->value(rkr->efx_Looper->getpar(5));
looper_ap->value(rkr->efx_Looper->getpar(9));
looper_level1->value(rkr->efx_Looper->getpar(6));
looper_level2->value(rkr->efx_Looper->getpar(10));

looper_t1->value(rkr->efx_Looper->getpar(7));
looper_t2->value(rkr->efx_Looper->getpar(8));
looper_r1->value(rkr->efx_Looper->getpar(11));
looper_r2->value(rkr->efx_Looper->getpar(12));
looper_lnk->value(rkr->efx_Looper->getpar(13));
looper_Tempo->value(rkr->efx_Looper->getpar(14));
looper_bar->value(rkr->efx_Looper->getpar(15));
looper_ms->value(rkr->efx_Looper->getpar(17));
}
void LooperGui::cb_looper_preset(Fl_Choice* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_preset_i(o,v);
}

Fl_Menu_Item LooperGui::menu_looper_preset[] = {
 {"Looper", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Reverse", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void LooperGui::cb_looper_WD_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(267);
 return;
}
rkr->efx_Looper->changepar(0,Dry_Wet((int)(o->value())));
}
void LooperGui::cb_looper_WD(SliderW* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_WD_i(o,v);
}

void LooperGui::cb_looper_level1_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(268);
 return;
}
rkr->efx_Looper->changepar(6,(int)o->value());
}
void LooperGui::cb_looper_level1(SliderW* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_level1_i(o,v);
}

void LooperGui::cb_looper_level2_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(269);
 return;
}
rkr->efx_Looper->changepar(10,(int)o->value());
}
void LooperGui::cb_looper_level2(SliderW* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_level2_i(o,v);
}

void LooperGui::cb_looper_Tempo_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(423);
 return;
}
rkr->efx_Looper->changepar(14,(int)o->value());
}
void LooperGui::cb_looper_Tempo(SliderW* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_Tempo_i(o,v);
}

void LooperGui::cb_looper_bar_i(Fl_Choice* o, void*) {
  rkr->efx_Looper->changepar(15,(int)o->value());
}
void LooperGui::cb_looper_bar(Fl_Choice* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_bar_i(o,v);
}

void LooperGui::cb_looper_ms_i(Fl_Choice* o, void*) {
  rkr->efx_Looper->changepar(17,(int)o->value());
}
void LooperGui::cb_looper_ms(Fl_Choice* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_ms_i(o,v);
}

void LooperGui::cb_looper_rv_i(Fl_Check_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(270);
 return;
}
rkr->efx_Looper->changepar(5,(int)o->value());
}
void LooperGui::cb_looper_rv(Fl_Check_Button* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_rv_i(o,v);
}

void LooperGui::cb_looper_ap_i(Fl_Check_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(271);
 return;
}
rkr->efx_Looper->changepar(9,(int)o->value());
}
void LooperGui::cb_looper_ap(Fl_Check_Button* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_ap_i(o,v);
}

void LooperGui::cb_looper_play_i(Fl_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(272);
 return;
}
rkr->efx_Looper->changepar(1,(int)o->value());
rgui->update_looper();
}
void LooperGui::cb_looper_play(Fl_Button* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_play_i(o,v);
}

void LooperGui::cb_looper_stop_i(Fl_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(273);
 return;
}
rkr->efx_Looper->changepar(2,(int)o->value());
rgui->update_looper();
}
void LooperGui::cb_looper_stop(Fl_Button* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_stop_i(o,v);
}

void LooperGui::cb_looper_record_i(Fl_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(274);
 return;
}
rkr->efx_Looper->changepar(3,(int)o->value());
rgui->update_looper();
}
void LooperGui::cb_looper_record(Fl_Button* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_record_i(o,v);
}

void LooperGui::cb_looper_r1_i(Fl_Check_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(275);
 return;
}
rkr->efx_Looper->changepar(11,(int)o->value());
}
void LooperGui::cb_looper_r1(Fl_Check_Button* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_r1_i(o,v);
}

void LooperGui::cb_looper_r2_i(Fl_Check_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(276);
 return;
}
rkr->efx_Looper->changepar(12,(int)o->value());
}
void LooperGui::cb_looper_r2(Fl_Check_Button* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_r2_i(o,v);
}

void LooperGui::cb_looper_t1_i(Fl_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(277);
 return;
}
rkr->efx_Looper->changepar(7,(int)o->value());
rgui->update_looper();
}
void LooperGui::cb_looper_t1(Fl_Button* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_t1_i(o,v);
}

void LooperGui::cb_looper_t2_i(Fl_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(278);
 return;
}
rkr->efx_Looper->changepar(8,(int)o->value());
rgui->update_looper();
}
void LooperGui::cb_looper_t2(Fl_Button* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_t2_i(o,v);
}

void LooperGui::cb_looper_lnk_i(Fl_Check_Button* o, void*) {
  rkr->efx_Looper->changepar(13,(int)o->value());
}
void LooperGui::cb_looper_lnk(Fl_Check_Button* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_lnk_i(o,v);
}

void LooperGui::cb_looper_clear_i(Fl_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(279);
 return;
}
rkr->efx_Looper->changepar(4,(int)o->value());
rgui->update_looper();
}
void LooperGui::cb_looper_clear(Fl_Button* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_clear_i(o,v);
}

void LooperGui::cb_looper_mt_i(Fl_Check_Button* o, void*) {
  rkr->efx_Looper->changepar(16,(int)o->value());
}
void LooperGui::cb_looper_mt(Fl_Check_Button* o, void* v) {
  ((LooperGui*)(o->parent()))->cb_looper_mt_i(o,v);
}
LooperGui::LooperGui(int X, int Y, int W, int H, const char *L)
  : Fl_Group(0, 0, W, H, L) {
this->box(FL_UP_BOX);
this->color(FL_FOREGROUND_COLOR);
this->selection_color(FL_FOREGROUND_COLOR);
this->user_data((void*)(1));
this->align(Fl_Align(96|FL_ALIGN_INSIDE));
{ looper_activar = new Fl_Light_Button(5, 4, 34, 18, "On");
  looper_activar->shortcut(0x35);
  looper_activar->color((Fl_Color)62);
  looper_activar->selection_color((Fl_Color)1);
  looper_activar->labelsize(10);
  looper_activar->callback((Fl_Callback*)cb_looper_activar, (void*)(2));
  looper_activar->align(Fl_Align(68|FL_ALIGN_INSIDE));
  looper_activar->when(FL_WHEN_CHANGED);
} // Fl_Light_Button* looper_activar
{ looper_preset = new Fl_Choice(77, 4, 76, 18, "Preset");
  looper_preset->down_box(FL_BORDER_BOX);
  looper_preset->selection_color(FL_FOREGROUND_COLOR);
  looper_preset->labelsize(10);
  looper_preset->labelcolor(FL_BACKGROUND2_COLOR);
  looper_preset->textsize(10);
  looper_preset->textcolor(FL_BACKGROUND2_COLOR);
  looper_preset->callback((Fl_Callback*)cb_looper_preset, (void*)(12030));
  looper_preset->when(FL_WHEN_RELEASE_ALWAYS);
  looper_preset->menu(menu_looper_preset);
} // Fl_Choice* looper_preset
{ looper_WD = new SliderW(53, 25, 100, 10, "Dry/Wet");
  looper_WD->type(5);
  looper_WD->box(FL_FLAT_BOX);
  looper_WD->color((Fl_Color)178);
  looper_WD->selection_color((Fl_Color)62);
  looper_WD->labeltype(FL_NORMAL_LABEL);
  looper_WD->labelfont(0);
  looper_WD->labelsize(10);
  looper_WD->labelcolor(FL_BACKGROUND2_COLOR);
  looper_WD->maximum(127);
  looper_WD->step(1);
  looper_WD->textcolor(FL_BACKGROUND2_COLOR);
  looper_WD->callback((Fl_Callback*)cb_looper_WD);
  looper_WD->align(Fl_Align(FL_ALIGN_LEFT));
  looper_WD->when(FL_WHEN_CHANGED);
} // SliderW* looper_WD
{ looper_level1 = new SliderW(53, 37, 100, 10, "Level 1");
  looper_level1->type(5);
  looper_level1->box(FL_FLAT_BOX);
  looper_level1->color((Fl_Color)178);
  looper_level1->selection_color((Fl_Color)62);
  looper_level1->labeltype(FL_NORMAL_LABEL);
  looper_level1->labelfont(0);
  looper_level1->labelsize(10);
  looper_level1->labelcolor(FL_BACKGROUND2_COLOR);
  looper_level1->maximum(127);
  looper_level1->step(1);
  looper_level1->textcolor(FL_BACKGROUND2_COLOR);
  looper_level1->callback((Fl_Callback*)cb_looper_level1);
  looper_level1->align(Fl_Align(FL_ALIGN_LEFT));
  looper_level1->when(FL_WHEN_RELEASE);
} // SliderW* looper_level1
{ looper_level2 = new SliderW(53, 49, 100, 10, "Level 2");
  looper_level2->type(5);
  looper_level2->box(FL_FLAT_BOX);
  looper_level2->color((Fl_Color)178);
  looper_level2->selection_color((Fl_Color)62);
  looper_level2->labeltype(FL_NORMAL_LABEL);
  looper_level2->labelfont(0);
  looper_level2->labelsize(10);
  looper_level2->labelcolor(FL_BACKGROUND2_COLOR);
  looper_level2->maximum(127);
  looper_level2->step(1);
  looper_level2->textcolor(FL_BACKGROUND2_COLOR);
  looper_level2->callback((Fl_Callback*)cb_looper_level2);
  looper_level2->align(Fl_Align(FL_ALIGN_LEFT));
  looper_level2->when(FL_WHEN_RELEASE);
} // SliderW* looper_level2
{ looper_Tempo = new SliderW(53, 61, 100, 10, "Tempo");
  looper_Tempo->type(5);
  looper_Tempo->box(FL_FLAT_BOX);
  looper_Tempo->color((Fl_Color)178);
  looper_Tempo->selection_color((Fl_Color)62);
  looper_Tempo->labeltype(FL_NORMAL_LABEL);
  looper_Tempo->labelfont(0);
  looper_Tempo->labelsize(10);
  looper_Tempo->labelcolor(FL_BACKGROUND2_COLOR);
  looper_Tempo->minimum(20);
  looper_Tempo->maximum(380);
  looper_Tempo->step(1);
  looper_Tempo->value(100);
  looper_Tempo->textcolor(FL_BACKGROUND2_COLOR);
  looper_Tempo->callback((Fl_Callback*)cb_looper_Tempo);
  looper_Tempo->align(Fl_Align(FL_ALIGN_LEFT));
  looper_Tempo->when(FL_WHEN_RELEASE);
} // SliderW* looper_Tempo
{ Fl_Choice* o = looper_bar = new Fl_Choice(57, 73, 40, 15, "Time Sig.");
  looper_bar->down_box(FL_BORDER_BOX);
  looper_bar->selection_color(FL_FOREGROUND_COLOR);
  looper_bar->labelsize(10);
  looper_bar->labelcolor(FL_BACKGROUND2_COLOR);
  looper_bar->textsize(10);
  looper_bar->textcolor(FL_BACKGROUND2_COLOR);
  looper_bar->callback((Fl_Callback*)cb_looper_bar);
  looper_bar->when(FL_WHEN_RELEASE_ALWAYS);
  o->menu(m_looper_bar->get_time_sig());
} // Fl_Choice* looper_bar
{ Fl_Choice* o = looper_ms = new Fl_Choice(121, 73, 29, 15, "MS");
  looper_ms->down_box(FL_BORDER_BOX);
  looper_ms->selection_color(FL_FOREGROUND_COLOR);
  looper_ms->labelsize(10);
  looper_ms->labelcolor(FL_BACKGROUND2_COLOR);
  looper_ms->textsize(10);
  looper_ms->textcolor(FL_BACKGROUND2_COLOR);
  looper_ms->callback((Fl_Callback*)cb_looper_ms);
  looper_ms->when(FL_WHEN_RELEASE_ALWAYS);
  o->menu(m_looper_ms->get_metronome_sound());
} // Fl_Choice* looper_ms
{ looper_rv = new Fl_Check_Button(8, 89, 61, 15, "Reverse");
  looper_rv->tooltip("Play Loop in Reverse");
  looper_rv->down_box(FL_BORDER_BOX);
  looper_rv->labelsize(10);
  looper_rv->labelcolor(FL_BACKGROUND2_COLOR);
  looper_rv->callback((Fl_Callback*)cb_looper_rv, (void*)(2));
} // Fl_Check_Button* looper_rv
{ looper_ap = new Fl_Check_Button(78, 89, 67, 15, "Auto Play");
  looper_ap->down_box(FL_BORDER_BOX);
  looper_ap->labelsize(10);
  looper_ap->labelcolor(FL_BACKGROUND2_COLOR);
  looper_ap->callback((Fl_Callback*)cb_looper_ap, (void*)(2));
} // Fl_Check_Button* looper_ap
{ Box_Play = new Fl_Box(4, 103, 52, 14, "Play/Stop");
  Box_Play->labelsize(10);
  Box_Play->labelcolor(FL_BACKGROUND2_COLOR);
} // Fl_Box* Box_Play
{ Box_P = new Fl_Box(58, 103, 44, 14, "Pause");
  Box_P->labelsize(10);
  Box_P->labelcolor(FL_BACKGROUND2_COLOR);
} // Fl_Box* Box_P
{ Fl_Box* o = new Fl_Box(109, 103, 44, 14, "Record");
  o->labelsize(10);
  o->labelcolor(FL_BACKGROUND2_COLOR);
} // Fl_Box* o
{ looper_play = new Fl_Button(8, 117, 44, 22, "@|>");
  looper_play->tooltip("Play - Shortcut \'F5\'");
  looper_play->type(1);
  looper_play->shortcut(0xffc2);
  looper_play->callback((Fl_Callback*)cb_looper_play, (void*)(2));
} // Fl_Button* looper_play
{ looper_stop = new Fl_Button(59, 117, 44, 22, "@||");
  looper_stop->tooltip("Stop - Shortcut \'F6\'");
  looper_stop->type(1);
  looper_stop->shortcut(0xffc3);
  looper_stop->callback((Fl_Callback*)cb_looper_stop, (void*)(2));
} // Fl_Button* looper_stop
{ looper_record = new Fl_Button(109, 117, 44, 22, "@circle");
  looper_record->type(1);
  looper_record->labelcolor((Fl_Color)1);
  looper_record->callback((Fl_Callback*)cb_looper_record, (void*)(2));
} // Fl_Button* looper_record
{ Fl_Box* o = new Fl_Box(71, 149, 39, 14, "Track");
  o->labelsize(10);
  o->labelcolor(FL_BACKGROUND2_COLOR);
} // Fl_Box* o
{ looper_r1 = new Fl_Check_Button(8, 153, 15, 15, "R1");
  looper_r1->tooltip("Record on Track 1");
  looper_r1->down_box(FL_BORDER_BOX);
  looper_r1->labelsize(10);
  looper_r1->labelcolor(FL_BACKGROUND2_COLOR);
  looper_r1->callback((Fl_Callback*)cb_looper_r1, (void*)(2));
  looper_r1->align(Fl_Align(FL_ALIGN_TOP));
} // Fl_Check_Button* looper_r1
{ looper_r2 = new Fl_Check_Button(27, 153, 15, 15, "R2");
  looper_r2->tooltip("Record on Track 2");
  looper_r2->down_box(FL_BORDER_BOX);
  looper_r2->labelsize(10);
  looper_r2->labelcolor(FL_BACKGROUND2_COLOR);
  looper_r2->callback((Fl_Callback*)cb_looper_r2, (void*)(2));
  looper_r2->align(Fl_Align(FL_ALIGN_TOP));
} // Fl_Check_Button* looper_r2
{ looper_t1 = new Fl_Button(111, 147, 18, 18, "1");
  looper_t1->tooltip("Enable Play, Stop, Record on Track 1");
  looper_t1->type(1);
  looper_t1->labelsize(10);
  looper_t1->callback((Fl_Callback*)cb_looper_t1, (void*)(2));
  looper_t1->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
} // Fl_Button* looper_t1
{ looper_t2 = new Fl_Button(134, 147, 18, 18, "2");
  looper_t2->tooltip("Enable Play, Stop, Record on Track 2");
  looper_t2->type(1);
  looper_t2->labelsize(10);
  looper_t2->callback((Fl_Callback*)cb_looper_t2, (void*)(2));
  looper_t2->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
} // Fl_Button* looper_t2
{ looper_lnk = new Fl_Check_Button(27, 167, 15, 15, "Lnk");
  looper_lnk->tooltip("Link track 1 and track 2 with the same length");
  looper_lnk->down_box(FL_BORDER_BOX);
  looper_lnk->labelsize(10);
  looper_lnk->labelcolor(FL_BACKGROUND2_COLOR);
  looper_lnk->callback((Fl_Callback*)cb_looper_lnk, (void*)(2));
  looper_lnk->align(Fl_Align(FL_ALIGN_LEFT));
} // Fl_Check_Button* looper_lnk
{ looper_clear = new Fl_Button(46, 165, 43, 14, "Clear");
  looper_clear->tooltip("Erase the Selected Track");
  looper_clear->labelsize(10);
  looper_clear->callback((Fl_Callback*)cb_looper_clear, (void*)(2));
} // Fl_Button* looper_clear
{ looper_mt = new Fl_Check_Button(93, 167, 27, 15, "M");
  looper_mt->tooltip("Metronome");
  looper_mt->down_box(FL_BORDER_BOX);
  looper_mt->labelsize(10);
  looper_mt->labelcolor(FL_BACKGROUND2_COLOR);
  looper_mt->callback((Fl_Callback*)cb_looper_mt, (void*)(2));
} // Fl_Check_Button* looper_mt
{ L_TimePos = new Fl_Box(121, 166, 35, 14);
  L_TimePos->box(FL_DOWN_BOX);
  L_TimePos->align(Fl_Align(68|FL_ALIGN_INSIDE));
} // Fl_Box* L_TimePos
position(X, Y);
end();
}
