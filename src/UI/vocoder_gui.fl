# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

widget_class {\#include "newvum.h"} VocoderGui {
  user_data 1 open
  xywh {1550 56 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  code3 {\#include "newvum.h"} visible position_relative
} {
  Fl_Light_Button vo_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(116);
 o->value(rkr->Vocoder_Bypass);
 return;
}
rkr->Vocoder_Bypass=(int)o->value();
if((int) o->value()==0)
vu_vu->value(-48);
rgui->findpos(35,(int)o->value(),o);}
    xywh {6 4 34 18} shortcut 0x35 color 62 selection_color 1 labelsize 10 align 84 when 1
    class RKR_Light_Button
  }
  Fl_Choice vo_preset {
    label Preset
    user_data 12035
    callback {long long ud= (long long) v;
        if((ud==0)||(ud==12035))rkr->efx_Vocoder->setpreset((int) o->value());
        vo_WD->value(Dry_Wet(rkr->efx_Vocoder->getpar(Vocoder_DryWet)));
        vo_pan->value(rkr->efx_Vocoder->getpar(Vocoder_Pan)-64);
        vo_mu->value(rkr->efx_Vocoder->getpar(Vocoder_Smear));
        vo_q->value(rkr->efx_Vocoder->getpar(Vocoder_Q));
        vo_input->value(rkr->efx_Vocoder->getpar(Vocoder_Input));
        vo_ring->value(rkr->efx_Vocoder->getpar(Vocoder_Ring));
        vo_level->value(rkr->efx_Vocoder->getpar(Vocoder_Level));}
    xywh {79 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label {Vocoder 1}
      xywh {77 77 36 21} labelsize 10
    }
    MenuItem {} {
      label {Vocoder 2}
      xywh {77 77 36 21} labelsize 10
    }
    MenuItem {} {
      label {Vocoder 3}
      xywh {77 77 36 21} labelsize 10
    }
    MenuItem {} {
      label {Vocoder 4}
      xywh {87 87 36 21} labelsize 10
    }
    MenuItem {} {
      label {Vocoder 5}
      xywh {97 97 36 21} labelsize 10
    }
  }
  Fl_Value_Slider vo_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
        {
         rgui->getMIDIControl(MC_Vocoder_DryWet);
         return;
        }
        rkr->efx_Vocoder->changepar(Vocoder_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 30 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider vo_pan {
    label Pan
    callback {if(Fl::event_button()==3)
        {
         rgui->getMIDIControl(MC_Vocoder_Pan);
         return;
        }
        rkr->efx_Vocoder->changepar(Vocoder_Pan,(int)(o->value()+64));}
    xywh {56 50 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider vo_input {
    label Input
    callback {if(Fl::event_button()==3)
        {
         rgui->getMIDIControl(MC_Vocoder_Input);
         return;
        }
        rkr->efx_Vocoder->changepar(Vocoder_Input,(int)o->value());}
    xywh {56 70 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider vo_mu {
    label Smear
    callback {if(Fl::event_button()==3)
        {
         rgui->getMIDIControl(MC_Vocoder_Smear);
         return;
        }
        rkr->efx_Vocoder->changepar(Vocoder_Smear,(int)o->value());}
    tooltip {Muffle, Blur} xywh {56 90 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 127 step 1 value 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider vo_q {
    label Q
    callback {if(Fl::event_button()==3)
        {
         rgui->getMIDIControl(MC_Vocoder_Q);
         return;
        }
        rkr->efx_Vocoder->changepar(Vocoder_Q,(int)o->value());}
    tooltip Resonance xywh {56 110 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 40 maximum 170 step 1 value 120 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider vo_ring {
    label Ring
    callback {if(Fl::event_button()==3)
        {
         rgui->getMIDIControl(MC_Vocoder_Ring);
         return;
        }
        rkr->efx_Vocoder->changepar(Vocoder_Ring,(int)o->value());} selected
    xywh {56 130 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider vo_level {
    label Level
    callback {if(Fl::event_button()==3)
        {
         rgui->getMIDIControl(MC_Vocoder_Level);
         return;
        }
        rkr->efx_Vocoder->changepar(Vocoder_Level,(int)o->value());}
    xywh {56 150 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Slider vu_vu {
    xywh {7 55 11 122} type {Vert Fill} box NO_BOX color 178 selection_color 90 align 80 when 0 minimum 15 maximum -48 step 1 value -48
    class NewVum
  }
}
