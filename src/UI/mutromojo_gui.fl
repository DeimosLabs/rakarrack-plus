# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Value_Input.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Counter.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

widget_class {\#include "common_gui_menu.h"} MutromojoGui {
  user_data 1 open
  xywh {1550 57 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  code3 {\#include "common_gui_menu.h"} visible position_relative
} {
  Fl_Light_Button mutromojo_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Multi_On_Off);
 o->value(rkr->EFX_Bypass[EFX_MUTROMOJO]);
 return;
}
rkr->EFX_Bypass[EFX_MUTROMOJO]=(int)o->value();
if((int) o->value()==0)
rkr->efx_MuTroMojo->cleanup();
rgui->findpos(EFX_MUTROMOJO,(int)o->value(),o);} selected
    xywh {6 5 34 18} shortcut 0x36 color 62 selection_color 1 labelsize 10 align 84 when 1
    class RKR_Light_Button
  }
  Fl_Choice mutromojo_preset {
    label Preset
    user_data 12031
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12031))rkr->efx_MuTroMojo->setpreset((int) o->value());
mutromojo_WD->value(Dry_Wet(rkr->efx_MuTroMojo->getpar(MuTro_DryWet)));

int temp=rkr->efx_MuTroMojo->getpar(Mutro_Mode_Legacy);

if((temp==1) || (temp==3)) mutromojo_qm->value(1); else mutromojo_qm->value(0);
if((temp==2) || (temp==3)) mutromojo_nat->value(1); else mutromojo_nat->value(0);


mutromojo_q->value(rkr->efx_MuTroMojo->getpar(MuTro_Resonance));
mutromojo_freq->value(rkr->efx_MuTroMojo->getpar(MuTro_LFO_Tempo));
mutromojo_Rnd->value(rkr->efx_MuTroMojo->getpar(MuTro_LFO_Random));
mutromojo_lfotype->value(rkr->efx_MuTroMojo->getpar(MuTro_LFO_Type));
mutromojo_St->value(rkr->efx_MuTroMojo->getpar(MuTro_LFO_Stereo)-64);
mutromojo_dpth->value(rkr->efx_MuTroMojo->getpar(MuTro_Depth));
mutromojo_ampsns->value(rkr->efx_MuTroMojo->getpar(MuTro_Env_Sens));
mutromojo_ampsnsinv->value(rkr->efx_MuTroMojo->getpar(MuTro_Wah));
mutromojo_smooth->value(rkr->efx_MuTroMojo->getpar(MuTro_Env_Smooth));
mutromojo_lp->value(rkr->efx_MuTroMojo->getpar(MuTro_LowPass));
mutromojo_bp->value(rkr->efx_MuTroMojo->getpar(MuTro_BandPass));
mutromojo_hp->value(rkr->efx_MuTroMojo->getpar(MuTro_HighPass));
svfilter_stages->value(rkr->efx_MuTroMojo->getpar(MuTro_Stages));
mutromojo_rng->value(rkr->efx_MuTroMojo->getpar(MuTro_Range));
mutromojo_minfreq->value(rkr->efx_MuTroMojo->getpar(MuTro_St_Freq));
mutromojo_res->value(rkr->efx_MuTroMojo->getpar(MuTro_Mod_Res));
o->value(rkr->efx_MuTroMojo->getpar(Mutro_Preset));
o->redraw();}
    xywh {78 5 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label WahWah
      xywh {72 72 36 21} labelsize 10
    }
    MenuItem {} {
      label Mutron
      xywh {72 72 36 21} labelsize 10
    }
    MenuItem {} {
      label {Phase Wah}
      xywh {72 72 36 21} labelsize 10
    }
    MenuItem {} {
      label Phaser
      xywh {82 82 36 21} labelsize 10
    }
    MenuItem {} {
      label {Quack Quack}
      xywh {92 92 36 21} labelsize 10
    }
    MenuItem {} {
      label SmoothTron
      xywh {102 102 36 21} labelsize 10
    }
    MenuItem {} {
      label {Wah Fever}
      xywh {112 112 36 21} labelsize 10
    }
  }
  Fl_Value_Slider mutromojo_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_MuTro_DryWet);
 return;
}
rkr->efx_MuTroMojo->changepar(MuTro_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 25 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button mutromojo_qm {
    label M
    user_data 2
    callback {if((int)o->value()) 
rkr->efx_MuTroMojo->Pmode +=1;
else
rkr->efx_MuTroMojo->Pmode -=1;
rkr->efx_MuTroMojo->changepar(Mutro_Mode_Legacy,rkr->efx_MuTroMojo->Pmode);}
    tooltip {Analog Gain Mode} xywh {18 34 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 4
    class RKR_Check_Button
  }
  Fl_Value_Slider mutromojo_lp {
    label LP
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_MuTro_LowPass);
 return;
}
rkr->efx_MuTroMojo->changepar(MuTro_LowPass,(int)o->value());}
    tooltip {Lowpass Level} xywh {56 37 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button mutromojo_nat {
    label N
    user_data 2
    callback {if((int)o->value()) 
rkr->efx_MuTroMojo->Pmode +=2;
else
rkr->efx_MuTroMojo->Pmode -=2;
rkr->efx_MuTroMojo->changepar(Mutro_Mode_Legacy,rkr->efx_MuTroMojo->Pmode);}
    tooltip {Exponential Wah} xywh {18 44 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 4
    class RKR_Check_Button
  }
  Fl_Value_Slider mutromojo_bp {
    label BP
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_MuTro_BandPass);
 return;
}
rkr->efx_MuTroMojo->changepar(MuTro_BandPass,(int)o->value());}
    tooltip {Bandpass Level} xywh {56 49 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button mutromojo_res {
    label R
    user_data 2
    callback {rkr->efx_MuTroMojo->changepar(MuTro_Mod_Res,(int)o->value());}
    tooltip {Modulate Resonance} xywh {18 54 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 4
    class RKR_Check_Button
  }
  Fl_Value_Slider mutromojo_hp {
    label HP
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_MuTro_HighPass);
 return;
}
rkr->efx_MuTroMojo->changepar(MuTro_HighPass,(int)o->value());}
    tooltip {Highpass Level} xywh {56 61 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Counter svfilter_stages {
    label Stg
    callback {rkr->efx_MuTroMojo->changepar(MuTro_Stages,(int)o->value());}
    tooltip {Filter Stages} xywh {27 74 27 12} type Simple box THIN_UP_BOX labelsize 10 labelcolor 7 align 4 minimum 1 maximum 12 step 1 value 1 textsize 9
    code0 {o->set_text_offset(-1);}
    class RKR_Counter
  }
  Fl_Choice mutromojo_lfotype {
    label LFO
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_MuTro_LFO_Type);
 return;
}

rkr->efx_MuTroMojo->changepar(MuTro_LFO_Type,(int)o->value())}
    xywh {80 73 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    code0 {o->menu(m_lfo_menu->get_lfo_type());}
    class RKR_Choice
  } {}
  Fl_Value_Slider mutromojo_dpth {
    label Depth
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_MuTro_Depth);
 return;
}
rkr->efx_MuTroMojo->changepar(MuTro_Depth,(int)o->value());}
    xywh {56 91 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider mutromojo_freq {
    label Tempo
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_MuTro_LFO_Tempo);
 return;
}
rkr->efx_MuTroMojo->changepar(MuTro_LFO_Tempo,(int)o->value());}
    xywh {56 103 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider mutromojo_q {
    label {Res.}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_MuTro_Resonance);
 return;
}
rkr->efx_MuTroMojo->changepar(MuTro_Resonance,(int)(o->value()));}
    tooltip Resonance xywh {56 116 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider mutromojo_rng {
    label Range
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_MuTro_Range);
 return;
}
rkr->efx_MuTroMojo->changepar(MuTro_Range,(int)o->value());}
    tooltip {Sweep Range} xywh {56 128 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 10 maximum 6000 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider mutromojo_ampsnsinv {
    label Wah
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_MuTro_Wah);
 return;
}
rkr->efx_MuTroMojo->changepar(MuTro_Wah,(int)o->value());}
    xywh {56 140 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider mutromojo_ampsns {
    label {E. Sens}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_MuTro_Env_Sens);
 return;
}
rkr->efx_MuTroMojo->changepar(MuTro_Env_Sens,(int)o->value());}
    tooltip {Envelope Sensitivity} xywh {56 152 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Input mutromojo_smooth {
    label S
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_MuTro_Env_Smooth);
 return;
}
rkr->efx_MuTroMojo->changepar(MuTro_Env_Smooth,(int)o->value());}
    tooltip {Envelope Smoothing} xywh {13 165 23 15} labelsize 10 labelcolor 7 maximum 127 step 1 textsize 10 textcolor 7
    class RKR_Value_Input
  }
  Fl_Value_Input mutromojo_Rnd {
    label R
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_MuTro_LFO_Random);
 return;
}
rkr->efx_MuTroMojo->changepar(MuTro_LFO_Random,(int)o->value());}
    tooltip {LFO Randomness} xywh {51 165 23 15} labelsize 10 labelcolor 7 maximum 127 step 1 textsize 10 textcolor 7
    class RKR_Value_Input
  }
  Fl_Value_Input mutromojo_St {
    label D
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_MuTro_LFO_Stereo);
 return;
}
rkr->efx_MuTroMojo->changepar(MuTro_LFO_Stereo,(int)o->value()+64);}
    tooltip {LFO L/R Delay} xywh {90 165 23 15} labelsize 10 labelcolor 7 minimum -64 maximum 63 step 1 textsize 10 textcolor 7
    class RKR_Value_Input
  }
  Fl_Value_Input mutromojo_minfreq {
    label F
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_MuTro_St_Freq);
 return;
}
rkr->efx_MuTroMojo->changepar(MuTro_St_Freq,(int)o->value());}
    tooltip {Starting Frequency} xywh {127 165 26 15} labelsize 10 labelcolor 7 minimum 30 maximum 800 step 1 value 450 textsize 10 textcolor 7
    class RKR_Value_Input
  }
  decl {CommonGuiMenu *m_lfo_menu;} {private local
  }
}
