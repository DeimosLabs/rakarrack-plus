// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "whawha_gui.h"

void WhawhaGui::cb_WhaWha_activar_i(RKR_Light_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(116);
 o->value(rkr->WhaWha_Bypass);
 return;
}
rkr->WhaWha_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_WhaWha->cleanup();
rgui->findpos(10,(int)o->value(),o);
}
void WhawhaGui::cb_WhaWha_activar(RKR_Light_Button* o, void* v) {
  ((WhawhaGui*)(o->parent()))->cb_WhaWha_activar_i(o,v);
}

void WhawhaGui::cb_WhaWha_preset_i(RKR_Choice* o, void* v) {
  rkr->WhaWha_Bypass=0;
long long ud= (long long) v;
if((ud==0)||(ud==12010))rkr->efx_WhaWha->setpreset((int) o->value()); 
WhaWha_WD->value(Dry_Wet(rkr->efx_WhaWha->getpar(WahWah_DryWet)));
WhaWha_pan->value(rkr->efx_WhaWha->getpar(WahWah_Pan)-64);
WhaWha_freq->value(rkr->efx_WhaWha->getpar(WahWah_LFO_Tempo));
WhaWha_rnd->value(rkr->efx_WhaWha->getpar(WahWah_LFO_Random));
WhaWha_lfotype->value(rkr->efx_WhaWha->getpar(WahWah_LFO_Type));
WhaWha_stdf->value(rkr->efx_WhaWha->getpar(WahWah_LFO_Stereo));
WhaWha_dpth->value(rkr->efx_WhaWha->getpar(WahWah_Depth));
WhaWha_ampsns->value(rkr->efx_WhaWha->getpar(WahWah_Sense));
WhaWha_ampsnsinv->value(rkr->efx_WhaWha->getpar(WahWah_ASI));
WhaWha_smooth->value(rkr->efx_WhaWha->getpar(WahWah_Smooth));
WhaWha_ftype->value(rkr->efx_WhaWha->getpar(WahWah_Mode));
if((int)WhaWha_activar->value()) rkr->WhaWha_Bypass=1;
}
void WhawhaGui::cb_WhaWha_preset(RKR_Choice* o, void* v) {
  ((WhawhaGui*)(o->parent()))->cb_WhaWha_preset_i(o,v);
}

Fl_Menu_Item WhawhaGui::menu_WhaWha_preset[] = {
 {"WahWah", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"AutoWah", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Sweep", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"VocalMorph1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"VocalMorph2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void WhawhaGui::cb_WhaWha_WD_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(28);
 return;
} 
rkr->efx_WhaWha->changepar(WahWah_DryWet,Dry_Wet((int)(o->value())));
}
void WhawhaGui::cb_WhaWha_WD(RKR_Slider* o, void* v) {
  ((WhawhaGui*)(o->parent()))->cb_WhaWha_WD_i(o,v);
}

void WhawhaGui::cb_WhaWha_pan_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(66);
 return;
} 
rkr->efx_WhaWha->changepar(WahWah_Pan,(int)(o->value()+64));
}
void WhawhaGui::cb_WhaWha_pan(RKR_Slider* o, void* v) {
  ((WhawhaGui*)(o->parent()))->cb_WhaWha_pan_i(o,v);
}

void WhawhaGui::cb_WhaWha_freq_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(75);
 return;
} 
rkr->efx_WhaWha->changepar(WahWah_LFO_Tempo,(int)o->value());
}
void WhawhaGui::cb_WhaWha_freq(RKR_Slider* o, void* v) {
  ((WhawhaGui*)(o->parent()))->cb_WhaWha_freq_i(o,v);
}

void WhawhaGui::cb_WhaWha_rnd_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(108);
 return;
} 
rkr->efx_WhaWha->changepar(WahWah_LFO_Random,(int)o->value());
}
void WhawhaGui::cb_WhaWha_rnd(RKR_Slider* o, void* v) {
  ((WhawhaGui*)(o->parent()))->cb_WhaWha_rnd_i(o,v);
}

void WhawhaGui::cb_WhaWha_lfotype_i(RKR_Choice* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(470);
 return;
} 

rkr->efx_WhaWha->changepar(WahWah_LFO_Type,(int)o->value());
}
void WhawhaGui::cb_WhaWha_lfotype(RKR_Choice* o, void* v) {
  ((WhawhaGui*)(o->parent()))->cb_WhaWha_lfotype_i(o,v);
}

void WhawhaGui::cb_WhaWha_stdf_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(102);
 return;
} 
rkr->efx_WhaWha->changepar(WahWah_LFO_Stereo,(int)o->value());
}
void WhawhaGui::cb_WhaWha_stdf(RKR_Slider* o, void* v) {
  ((WhawhaGui*)(o->parent()))->cb_WhaWha_stdf_i(o,v);
}

void WhawhaGui::cb_WhaWha_dpth_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(1);
 return;
} 
rkr->efx_WhaWha->changepar(WahWah_Depth,(int)o->value());
}
void WhawhaGui::cb_WhaWha_dpth(RKR_Slider* o, void* v) {
  ((WhawhaGui*)(o->parent()))->cb_WhaWha_dpth_i(o,v);
}

void WhawhaGui::cb_WhaWha_ampsns_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(111);
 return;
} 
rkr->efx_WhaWha->changepar(WahWah_Sense,(int)o->value());
}
void WhawhaGui::cb_WhaWha_ampsns(RKR_Slider* o, void* v) {
  ((WhawhaGui*)(o->parent()))->cb_WhaWha_ampsns_i(o,v);
}

void WhawhaGui::cb_WhaWha_ampsnsinv_i(RKR_Check_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(112);
 return;
} 
rkr->efx_WhaWha->changepar(WahWah_ASI,(int)o->value());
}
void WhawhaGui::cb_WhaWha_ampsnsinv(RKR_Check_Button* o, void* v) {
  ((WhawhaGui*)(o->parent()))->cb_WhaWha_ampsnsinv_i(o,v);
}

void WhawhaGui::cb_WhaWha_ftype_i(RKR_Choice* o, void*) {
  rkr->efx_WhaWha->changepar(WahWah_Mode,(int)o->value());
}
void WhawhaGui::cb_WhaWha_ftype(RKR_Choice* o, void* v) {
  ((WhawhaGui*)(o->parent()))->cb_WhaWha_ftype_i(o,v);
}

Fl_Menu_Item WhawhaGui::menu_WhaWha_ftype[] = {
 {"Low-Pass Analog", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"State Variable LPF", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Band-Pass Analog", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Formant 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Formant 2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void WhawhaGui::cb_WhaWha_smooth_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(113);
 return;
} 
rkr->efx_WhaWha->changepar(WahWah_Smooth,(int)o->value());
}
void WhawhaGui::cb_WhaWha_smooth(RKR_Slider* o, void* v) {
  ((WhawhaGui*)(o->parent()))->cb_WhaWha_smooth_i(o,v);
}
WhawhaGui::WhawhaGui(int X, int Y, int W, int H, const char *L)
  : Fl_Group(0, 0, W, H, L) {
this->box(FL_UP_BOX);
this->color(FL_FOREGROUND_COLOR);
this->selection_color(FL_FOREGROUND_COLOR);
this->user_data((void*)(1));
this->align(Fl_Align(96|FL_ALIGN_INSIDE));
{ WhaWha_activar = new RKR_Light_Button(5, 4, 34, 18, "On");
  WhaWha_activar->box(FL_UP_BOX);
  WhaWha_activar->shortcut(0x36);
  WhaWha_activar->color((Fl_Color)62);
  WhaWha_activar->selection_color((Fl_Color)1);
  WhaWha_activar->labeltype(FL_NORMAL_LABEL);
  WhaWha_activar->labelfont(0);
  WhaWha_activar->labelsize(10);
  WhaWha_activar->labelcolor(FL_FOREGROUND_COLOR);
  WhaWha_activar->callback((Fl_Callback*)cb_WhaWha_activar, (void*)(2));
  WhaWha_activar->align(Fl_Align(68|FL_ALIGN_INSIDE));
  WhaWha_activar->when(FL_WHEN_CHANGED);
} // RKR_Light_Button* WhaWha_activar
{ WhaWha_preset = new RKR_Choice(77, 4, 76, 18, "Preset");
  WhaWha_preset->box(FL_FLAT_BOX);
  WhaWha_preset->down_box(FL_BORDER_BOX);
  WhaWha_preset->color(FL_BACKGROUND_COLOR);
  WhaWha_preset->selection_color(FL_FOREGROUND_COLOR);
  WhaWha_preset->labeltype(FL_NORMAL_LABEL);
  WhaWha_preset->labelfont(0);
  WhaWha_preset->labelsize(10);
  WhaWha_preset->labelcolor(FL_BACKGROUND2_COLOR);
  WhaWha_preset->textsize(10);
  WhaWha_preset->textcolor(FL_BACKGROUND2_COLOR);
  WhaWha_preset->callback((Fl_Callback*)cb_WhaWha_preset, (void*)(12010));
  WhaWha_preset->align(Fl_Align(FL_ALIGN_LEFT));
  WhaWha_preset->when(FL_WHEN_RELEASE_ALWAYS);
  WhaWha_preset->menu(menu_WhaWha_preset);
} // RKR_Choice* WhaWha_preset
{ WhaWha_WD = new RKR_Slider(56, 29, 100, 10, "Dry/Wet");
  WhaWha_WD->type(5);
  WhaWha_WD->box(FL_FLAT_BOX);
  WhaWha_WD->color((Fl_Color)178);
  WhaWha_WD->selection_color((Fl_Color)62);
  WhaWha_WD->labeltype(FL_NORMAL_LABEL);
  WhaWha_WD->labelfont(0);
  WhaWha_WD->labelsize(10);
  WhaWha_WD->labelcolor(FL_BACKGROUND2_COLOR);
  WhaWha_WD->maximum(127);
  WhaWha_WD->step(1);
  WhaWha_WD->textcolor(FL_BACKGROUND2_COLOR);
  WhaWha_WD->callback((Fl_Callback*)cb_WhaWha_WD);
  WhaWha_WD->align(Fl_Align(FL_ALIGN_LEFT));
  WhaWha_WD->when(FL_WHEN_CHANGED);
} // RKR_Slider* WhaWha_WD
{ WhaWha_pan = new RKR_Slider(56, 41, 100, 10, "Pan");
  WhaWha_pan->type(5);
  WhaWha_pan->box(FL_FLAT_BOX);
  WhaWha_pan->color((Fl_Color)178);
  WhaWha_pan->selection_color((Fl_Color)62);
  WhaWha_pan->labeltype(FL_NORMAL_LABEL);
  WhaWha_pan->labelfont(0);
  WhaWha_pan->labelsize(10);
  WhaWha_pan->labelcolor(FL_BACKGROUND2_COLOR);
  WhaWha_pan->minimum(-64);
  WhaWha_pan->maximum(63);
  WhaWha_pan->step(1);
  WhaWha_pan->textcolor(FL_BACKGROUND2_COLOR);
  WhaWha_pan->callback((Fl_Callback*)cb_WhaWha_pan);
  WhaWha_pan->align(Fl_Align(FL_ALIGN_LEFT));
  WhaWha_pan->when(FL_WHEN_CHANGED);
} // RKR_Slider* WhaWha_pan
{ WhaWha_freq = new RKR_Slider(56, 53, 100, 10, "Tempo");
  WhaWha_freq->type(5);
  WhaWha_freq->box(FL_FLAT_BOX);
  WhaWha_freq->color((Fl_Color)178);
  WhaWha_freq->selection_color((Fl_Color)62);
  WhaWha_freq->labeltype(FL_NORMAL_LABEL);
  WhaWha_freq->labelfont(0);
  WhaWha_freq->labelsize(10);
  WhaWha_freq->labelcolor(FL_BACKGROUND2_COLOR);
  WhaWha_freq->minimum(1);
  WhaWha_freq->maximum(600);
  WhaWha_freq->step(1);
  WhaWha_freq->textcolor(FL_BACKGROUND2_COLOR);
  WhaWha_freq->callback((Fl_Callback*)cb_WhaWha_freq);
  WhaWha_freq->align(Fl_Align(FL_ALIGN_LEFT));
  WhaWha_freq->when(FL_WHEN_CHANGED);
} // RKR_Slider* WhaWha_freq
{ WhaWha_rnd = new RKR_Slider(56, 65, 100, 10, "Random");
  WhaWha_rnd->type(5);
  WhaWha_rnd->box(FL_FLAT_BOX);
  WhaWha_rnd->color((Fl_Color)178);
  WhaWha_rnd->selection_color((Fl_Color)62);
  WhaWha_rnd->labeltype(FL_NORMAL_LABEL);
  WhaWha_rnd->labelfont(0);
  WhaWha_rnd->labelsize(10);
  WhaWha_rnd->labelcolor(FL_BACKGROUND2_COLOR);
  WhaWha_rnd->maximum(127);
  WhaWha_rnd->step(1);
  WhaWha_rnd->textcolor(FL_BACKGROUND2_COLOR);
  WhaWha_rnd->callback((Fl_Callback*)cb_WhaWha_rnd);
  WhaWha_rnd->align(Fl_Align(FL_ALIGN_LEFT));
  WhaWha_rnd->when(FL_WHEN_CHANGED);
} // RKR_Slider* WhaWha_rnd
{ RKR_Choice* o = WhaWha_lfotype = new RKR_Choice(78, 79, 72, 16, "LFO Type");
  WhaWha_lfotype->box(FL_FLAT_BOX);
  WhaWha_lfotype->down_box(FL_BORDER_BOX);
  WhaWha_lfotype->color(FL_BACKGROUND_COLOR);
  WhaWha_lfotype->selection_color(FL_FOREGROUND_COLOR);
  WhaWha_lfotype->labeltype(FL_NORMAL_LABEL);
  WhaWha_lfotype->labelfont(0);
  WhaWha_lfotype->labelsize(10);
  WhaWha_lfotype->labelcolor(FL_BACKGROUND2_COLOR);
  WhaWha_lfotype->textsize(10);
  WhaWha_lfotype->textcolor(FL_BACKGROUND2_COLOR);
  WhaWha_lfotype->callback((Fl_Callback*)cb_WhaWha_lfotype);
  WhaWha_lfotype->align(Fl_Align(FL_ALIGN_LEFT));
  WhaWha_lfotype->when(FL_WHEN_RELEASE);
  o->menu(m_lfo_menu->get_lfo_type());
} // RKR_Choice* WhaWha_lfotype
{ WhaWha_stdf = new RKR_Slider(56, 105, 100, 10, "Stereo Df");
  WhaWha_stdf->tooltip("LFO L/R Delay");
  WhaWha_stdf->type(5);
  WhaWha_stdf->box(FL_FLAT_BOX);
  WhaWha_stdf->color((Fl_Color)178);
  WhaWha_stdf->selection_color((Fl_Color)62);
  WhaWha_stdf->labeltype(FL_NORMAL_LABEL);
  WhaWha_stdf->labelfont(0);
  WhaWha_stdf->labelsize(10);
  WhaWha_stdf->labelcolor(FL_BACKGROUND2_COLOR);
  WhaWha_stdf->maximum(127);
  WhaWha_stdf->step(1);
  WhaWha_stdf->textcolor(FL_BACKGROUND2_COLOR);
  WhaWha_stdf->callback((Fl_Callback*)cb_WhaWha_stdf);
  WhaWha_stdf->align(Fl_Align(FL_ALIGN_LEFT));
  WhaWha_stdf->when(FL_WHEN_CHANGED);
} // RKR_Slider* WhaWha_stdf
{ WhaWha_dpth = new RKR_Slider(56, 117, 100, 10, "Depth");
  WhaWha_dpth->type(5);
  WhaWha_dpth->box(FL_FLAT_BOX);
  WhaWha_dpth->color((Fl_Color)178);
  WhaWha_dpth->selection_color((Fl_Color)62);
  WhaWha_dpth->labeltype(FL_NORMAL_LABEL);
  WhaWha_dpth->labelfont(0);
  WhaWha_dpth->labelsize(10);
  WhaWha_dpth->labelcolor(FL_BACKGROUND2_COLOR);
  WhaWha_dpth->maximum(127);
  WhaWha_dpth->step(1);
  WhaWha_dpth->textcolor(FL_BACKGROUND2_COLOR);
  WhaWha_dpth->callback((Fl_Callback*)cb_WhaWha_dpth);
  WhaWha_dpth->align(Fl_Align(FL_ALIGN_LEFT));
  WhaWha_dpth->when(FL_WHEN_CHANGED);
} // RKR_Slider* WhaWha_dpth
{ WhaWha_ampsns = new RKR_Slider(56, 129, 100, 10, "Amp.S.");
  WhaWha_ampsns->tooltip("Amplitude Sensitivity");
  WhaWha_ampsns->type(5);
  WhaWha_ampsns->box(FL_FLAT_BOX);
  WhaWha_ampsns->color((Fl_Color)178);
  WhaWha_ampsns->selection_color((Fl_Color)62);
  WhaWha_ampsns->labeltype(FL_NORMAL_LABEL);
  WhaWha_ampsns->labelfont(0);
  WhaWha_ampsns->labelsize(10);
  WhaWha_ampsns->labelcolor(FL_BACKGROUND2_COLOR);
  WhaWha_ampsns->maximum(127);
  WhaWha_ampsns->step(1);
  WhaWha_ampsns->textcolor(FL_BACKGROUND2_COLOR);
  WhaWha_ampsns->callback((Fl_Callback*)cb_WhaWha_ampsns);
  WhaWha_ampsns->align(Fl_Align(FL_ALIGN_LEFT));
  WhaWha_ampsns->when(FL_WHEN_CHANGED);
} // RKR_Slider* WhaWha_ampsns
{ WhaWha_ampsnsinv = new RKR_Check_Button(8, 145, 70, 15, "A.S.I.");
  WhaWha_ampsnsinv->tooltip("Amplitude Sensitivity Inverse");
  WhaWha_ampsnsinv->box(FL_NO_BOX);
  WhaWha_ampsnsinv->down_box(FL_BORDER_BOX);
  WhaWha_ampsnsinv->color(FL_BACKGROUND_COLOR);
  WhaWha_ampsnsinv->selection_color(FL_FOREGROUND_COLOR);
  WhaWha_ampsnsinv->labeltype(FL_NORMAL_LABEL);
  WhaWha_ampsnsinv->labelfont(0);
  WhaWha_ampsnsinv->labelsize(10);
  WhaWha_ampsnsinv->labelcolor(FL_BACKGROUND2_COLOR);
  WhaWha_ampsnsinv->callback((Fl_Callback*)cb_WhaWha_ampsnsinv, (void*)(2));
  WhaWha_ampsnsinv->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
  WhaWha_ampsnsinv->when(FL_WHEN_RELEASE);
} // RKR_Check_Button* WhaWha_ampsnsinv
{ WhaWha_ftype = new RKR_Choice(95, 145, 59, 16, "F. Type");
  WhaWha_ftype->tooltip("Filter Type");
  WhaWha_ftype->box(FL_FLAT_BOX);
  WhaWha_ftype->down_box(FL_BORDER_BOX);
  WhaWha_ftype->color(FL_BACKGROUND_COLOR);
  WhaWha_ftype->selection_color(FL_FOREGROUND_COLOR);
  WhaWha_ftype->labeltype(FL_NORMAL_LABEL);
  WhaWha_ftype->labelfont(0);
  WhaWha_ftype->labelsize(10);
  WhaWha_ftype->labelcolor(FL_BACKGROUND2_COLOR);
  WhaWha_ftype->textsize(10);
  WhaWha_ftype->textcolor(FL_BACKGROUND2_COLOR);
  WhaWha_ftype->callback((Fl_Callback*)cb_WhaWha_ftype);
  WhaWha_ftype->align(Fl_Align(FL_ALIGN_LEFT));
  WhaWha_ftype->when(FL_WHEN_RELEASE);
  WhaWha_ftype->menu(menu_WhaWha_ftype);
} // RKR_Choice* WhaWha_ftype
{ WhaWha_smooth = new RKR_Slider(56, 165, 100, 10, "Smooth");
  WhaWha_smooth->type(5);
  WhaWha_smooth->box(FL_FLAT_BOX);
  WhaWha_smooth->color((Fl_Color)178);
  WhaWha_smooth->selection_color((Fl_Color)62);
  WhaWha_smooth->labeltype(FL_NORMAL_LABEL);
  WhaWha_smooth->labelfont(0);
  WhaWha_smooth->labelsize(10);
  WhaWha_smooth->labelcolor(FL_BACKGROUND2_COLOR);
  WhaWha_smooth->maximum(127);
  WhaWha_smooth->step(1);
  WhaWha_smooth->textcolor(FL_BACKGROUND2_COLOR);
  WhaWha_smooth->callback((Fl_Callback*)cb_WhaWha_smooth);
  WhaWha_smooth->align(Fl_Align(FL_ALIGN_LEFT));
  WhaWha_smooth->when(FL_WHEN_CHANGED);
} // RKR_Slider* WhaWha_smooth
position(X, Y);
end();
}
