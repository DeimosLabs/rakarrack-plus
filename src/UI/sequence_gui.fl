# data file for the Fltk User Interface Designer (fluid)
version 1.0308
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class SequenceGui {open selected
  xywh {1550 57 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button seq_activar {
    label On
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Active[EFX_SEQUENCE]);
 return;
}
m_process->EFX_Active[EFX_SEQUENCE]=(int)o->value();
if((int) o->value()==0)
m_process->Rack_Effects[EFX_SEQUENCE]->cleanup();
m_parent->findpos(EFX_SEQUENCE,(int)o->value(),o);}
    xywh {5 4 34 16} shortcut 0x36 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice seq_preset {
    label Preset
    user_data UD_PRESET_SEQUENCE
    callback {long long ud= (long long) v;
if((ud==0)||(ud==UD_PRESET_SEQUENCE))
    m_process->Rack_Effects[EFX_SEQUENCE]->setpreset((int) o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_SEQUENCE]; i++)
{
    parameter_refresh(i);
};}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label Jumpy
      xywh {82 82 36 21} labelsize 10
    }
    MenuItem {} {
      label {Stair Step}
      xywh {82 82 36 21} labelsize 10
    }
    MenuItem {} {
      label Mild
      xywh {82 82 36 21} labelsize 10
    }
    MenuItem {} {
      label {Wah Wah}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Filter Pan}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Stepper
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Shifter
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Zeke Trem}
      xywh {10 10 36 21} labelsize 10
    }
    MenuItem {} {
      label Boogie
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Chorus
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Sequence 11}
      xywh {10 10 36 21} labelsize 10
    }
  }
  Fl_Value_Slider seq_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Sequence_DryWet);
 return;
}
m_process->Rack_Effects[EFX_SEQUENCE]->changepar(Sequence_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 25 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider seq_1 {
    label 1
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Sequence_Step_1);
 return;
}
m_process->Rack_Effects[EFX_SEQUENCE]->changepar(Sequence_Step_1,(int)o->value());}
    xywh {56 37 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider seq_2 {
    label 2
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Sequence_Step_2);
 return;
}
m_process->Rack_Effects[EFX_SEQUENCE]->changepar(Sequence_Step_2,(int)o->value());}
    xywh {56 49 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider seq_3 {
    label 3
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Sequence_Step_3);
 return;
}
m_process->Rack_Effects[EFX_SEQUENCE]->changepar(Sequence_Step_3,(int)o->value());}
    xywh {56 61 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider seq_4 {
    label 4
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Sequence_Step_4);
 return;
}
m_process->Rack_Effects[EFX_SEQUENCE]->changepar(Sequence_Step_4,(int)o->value());}
    xywh {56 73 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider seq_5 {
    label 5
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Sequence_Step_5);
 return;
}
m_process->Rack_Effects[EFX_SEQUENCE]->changepar(Sequence_Step_5,(int)o->value());}
    xywh {56 85 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider seq_6 {
    label 6
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Sequence_Step_6);
 return;
}
m_process->Rack_Effects[EFX_SEQUENCE]->changepar(Sequence_Step_6,(int)o->value());}
    xywh {56 97 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider seq_7 {
    label 7
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Sequence_Step_7);
 return;
}
m_process->Rack_Effects[EFX_SEQUENCE]->changepar(Sequence_Step_7,(int)o->value());}
    xywh {56 109 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider seq_8 {
    label 8
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Sequence_Step_8);
 return;
}
m_process->Rack_Effects[EFX_SEQUENCE]->changepar(Sequence_Step_8,(int)o->value());}
    xywh {56 121 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider seq_tempo {
    label Tempo
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Sequence_Tempo);
 return;
}
m_process->Rack_Effects[EFX_SEQUENCE]->changepar(Sequence_Tempo,(int)o->value());}
    xywh {56 133 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider seq_q {
    label Q
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Sequence_Resonance);
 return;
}
m_process->Rack_Effects[EFX_SEQUENCE]->changepar(Sequence_Resonance,(int)o->value()+64);}
    tooltip {Filter Resonance} xywh {56 145 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider seq_stdf {
    label {Stereo Df}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Sequence_Stdf);
 return;
}
m_process->Rack_Effects[EFX_SEQUENCE]->changepar(Sequence_Stdf,(int)o->value());}
    tooltip {Right Channel Step Lag} xywh {56 157 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 7 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button seq_amp {
    label Amp
    callback {m_process->Rack_Effects[EFX_SEQUENCE]->changepar(Sequence_Amp,(int)o->value())}
    tooltip {Amplitude/Alt. Mode} xywh {9 111 43 14} down_box BORDER_BOX labelsize 10 labelcolor 7 align 5
    class RKR_Check_Button
  }
  Fl_Choice seq_mode {
    label M
    callback {m_process->Rack_Effects[EFX_SEQUENCE]->changepar(Sequence_Mode,(int)o->value())}
    tooltip {Modulation Mode} xywh {90 169 62 13} down_box BORDER_BOX labelsize 9 labelcolor 7 textsize 9 textcolor 7
    code0 {o->set_label_offset(-1);}
    code1 {o->set_text_offset(-1);}
    class RKR_Choice
  } {
    MenuItem {} {
      label Lineal
      xywh {0 0 36 21} labelsize 9
    }
    MenuItem {} {
      label UpDown
      xywh {0 0 36 21} labelsize 9
    }
    MenuItem {} {
      label Stepper
      xywh {0 0 36 21} labelsize 9
    }
    MenuItem {} {
      label Shifter
      xywh {0 0 36 21} labelsize 9
    }
    MenuItem {} {
      label Tremor
      xywh {10 10 36 21} labelsize 9
    }
    MenuItem {} {
      label Arpegiator
      xywh {0 0 36 21} labelsize 9
    }
    MenuItem {} {
      label Chorus
      xywh {0 0 36 21} labelsize 9
    }
    MenuItem {} {
      label TrigStepper
      xywh {10 10 36 21} labelsize 9
    }
    MenuItem {} {
      label {Seq Delay}
      xywh {20 20 36 21} labelsize 9
    }
  }
  Fl_Choice seq_range {
    label R
    callback {m_process->Rack_Effects[EFX_SEQUENCE]->changepar(Sequence_Range,(int)o->value()+1)}
    tooltip {Step Adjustment Range} xywh {16 169 57 13} down_box BORDER_BOX labelsize 9 labelcolor 7 textsize 9 textcolor 7
    code0 {o->set_label_offset(-1);}
    code1 {o->set_text_offset(-1);}
    class RKR_Choice
  } {
    MenuItem {} {
      label {450-2.5k}
      xywh {10 10 36 21} labelsize 9
    }
    MenuItem {} {
      label {150-4k}
      xywh {10 10 36 21} labelsize 9
    }
    MenuItem {} {
      label {40-800}
      xywh {10 10 36 21} labelsize 9
    }
    MenuItem {} {
      label {100-1.6k}
      xywh {10 10 36 21} labelsize 9
    }
    MenuItem {} {
      label {80-16k}
      xywh {20 20 36 21} labelsize 9
    }
    MenuItem {} {
      label {60-18k}
      xywh {10 10 36 21} labelsize 9
    }
    MenuItem {} {
      label {40-2.2k}
      xywh {10 10 36 21} labelsize 9
    }
    MenuItem {} {
      label {20-6k}
      xywh {20 20 36 21} labelsize 9
    }
  }
  Function {parameter_refresh(int index)} {return_type void
  } {
    code {switch (index)
    {
    case Sequence_Step_1:
        seq_1->value(m_process->Rack_Effects[EFX_SEQUENCE]->getpar(Sequence_Step_1));
        break;
    case Sequence_Step_2:
        seq_2->value(m_process->Rack_Effects[EFX_SEQUENCE]->getpar(Sequence_Step_2));
        break;
    case Sequence_Step_3:
        seq_3->value(m_process->Rack_Effects[EFX_SEQUENCE]->getpar(Sequence_Step_3));
        break;
    case Sequence_Step_4:
        seq_4->value(m_process->Rack_Effects[EFX_SEQUENCE]->getpar(Sequence_Step_4));
        break;
    case Sequence_Step_5:
        seq_5->value(m_process->Rack_Effects[EFX_SEQUENCE]->getpar(Sequence_Step_5));
        break;
    case Sequence_Step_6:
        seq_6->value(m_process->Rack_Effects[EFX_SEQUENCE]->getpar(Sequence_Step_6));
        break;
    case Sequence_Step_7:
        seq_7->value(m_process->Rack_Effects[EFX_SEQUENCE]->getpar(Sequence_Step_7));
        break;
    case Sequence_Step_8:
        seq_8->value(m_process->Rack_Effects[EFX_SEQUENCE]->getpar(Sequence_Step_8));
        break;
    case Sequence_DryWet:
        seq_WD->value(Dry_Wet(m_process->Rack_Effects[EFX_SEQUENCE]->getpar(Sequence_DryWet)));
        break;
    case Sequence_Tempo:
        seq_tempo->value(m_process->Rack_Effects[EFX_SEQUENCE]->getpar(Sequence_Tempo));
        break;
    case Sequence_Resonance:
        seq_q->value(m_process->Rack_Effects[EFX_SEQUENCE]->getpar(Sequence_Resonance)-64);
        break;
    case Sequence_Amp:
        seq_amp->value(m_process->Rack_Effects[EFX_SEQUENCE]->getpar(Sequence_Amp));
        break;
    case Sequence_Stdf:
        seq_stdf->value(m_process->Rack_Effects[EFX_SEQUENCE]->getpar(Sequence_Stdf));
        break;
    case Sequence_Mode:
        seq_mode->value(m_process->Rack_Effects[EFX_SEQUENCE]->getpar(Sequence_Mode));
        break;
    case Sequence_Range:
        seq_range->value(m_process->Rack_Effects[EFX_SEQUENCE]->getpar(Sequence_Range) - 1);
        break;
    }} {}
  }
  Function {tap_tempo_update()} {return_type void
  } {
    code {seq_tempo->value(m_process->Rack_Effects[EFX_SEQUENCE]->getpar(Sequence_Tempo));} {}
  }
}
