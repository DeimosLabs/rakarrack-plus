# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class EqGui {
  user_data 1 open selected
  xywh {1366 114 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button eq_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Bypass[EFX_EQ]);
 return;
} 
m_process->EFX_Bypass[EFX_EQ]=(int)o->value();
if((int) o->value()==0)
m_process->Rack_Effects[EFX_EQ]->cleanup();
m_parent->findpos(EFX_EQ,(int)o->value(),o);}
    xywh {5 2 34 18} shortcut 0x31 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice eq_preset {
    label Preset
    user_data UD_PRESET_EQ
    callback {long long ud= (long long) v;
if((ud==0)||(ud==UD_PRESET_EQ))
   m_process->Rack_Effects[EFX_EQ]->setpreset((int)o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_EQ]; i++)
{
    parameter_refresh(i);
};}
    xywh {77 2 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label Plain
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label Pop
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label Jazz
      xywh {42 42 36 21} labelsize 10
    }
  }
  Fl_Value_Slider eq_Gain {
    label Gain
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_EQ_Gain);
 return;
} 
m_process->Rack_Effects[EFX_EQ]->changepar(EQ_Gain,(int)(o->value()+64));}
    xywh {56 24 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_Q {
    label Q
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_EQ_Q);
 return;
}

m_process->Rack_Effects[EFX_EQ]->changepar(EQ_Q,(int)(o->value()+64));}
    tooltip Resonance xywh {56 37 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_1 {
    label {31 Hz}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_EQ_31_HZ);
 return;
} 
m_process->Rack_Effects[EFX_EQ]->changepar(EQ_31_HZ,(int)(o->value()+64));}
    xywh {56 56 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_2 {
    label {63 Hz}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_EQ_63_HZ);
 return;
} 
m_process->Rack_Effects[EFX_EQ]->changepar(EQ_63_HZ,(int)(o->value()+64));}
    xywh {56 68 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_3 {
    label {125 Hz}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_EQ_125_HZ);
 return;
} 
m_process->Rack_Effects[EFX_EQ]->changepar(EQ_125_HZ,(int)(o->value()+64));}
    xywh {56 80 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_4 {
    label {250 Hz}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_EQ_250_HZ);
 return;
} 
m_process->Rack_Effects[EFX_EQ]->changepar(EQ_250_HZ,(int)(o->value()+64));}
    xywh {56 93 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_5 {
    label {500 Hz}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_EQ_500_HZ);
 return;
} 
m_process->Rack_Effects[EFX_EQ]->changepar(EQ_500_HZ,(int)(o->value()+64));}
    xywh {56 105 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_6 {
    label {1 Khz}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_EQ_1_KHZ);
 return;
} 
m_process->Rack_Effects[EFX_EQ]->changepar(EQ_1_KHZ,(int)(o->value()+64));}
    xywh {56 117 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_7 {
    label {2 Khz}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_EQ_2_KHZ);
 return;
} 
m_process->Rack_Effects[EFX_EQ]->changepar(EQ_2_KHZ,(int)(o->value()+64));}
    xywh {56 130 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_8 {
    label {4 Khz}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_EQ_4_KHZ);
 return;
} 
m_process->Rack_Effects[EFX_EQ]->changepar(EQ_4_KHZ,(int)(o->value()+64));}
    xywh {56 142 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_9 {
    label {8 Khz}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_EQ_8_KHZ);
 return;
} 
m_process->Rack_Effects[EFX_EQ]->changepar(EQ_8_KHZ,(int)(o->value()+64));}
    xywh {56 154 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_10 {
    label {16 Khz}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_EQ_16_KHZ);
 return;
} 
m_process->Rack_Effects[EFX_EQ]->changepar(EQ_16_KHZ,(int)(o->value()+64));}
    xywh {56 165 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Function {parameter_refresh(int index)} {return_type void
  } {
    code {switch(index)
    {
    case EQ_Gain:
        eq_Gain->value(m_process->Rack_Effects[EFX_EQ]->getpar(EQ_Gain)-64);
        break;
    case EQ_Q:
        eq_Q->value(m_process->Rack_Effects[EFX_EQ]->getpar(EQ_Q)-64);
        break;
    case EQ_31_HZ:
        eq_1->value(m_process->Rack_Effects[EFX_EQ]->getpar(EQ_31_HZ)-64);
        break;
    case EQ_63_HZ:
        eq_2->value(m_process->Rack_Effects[EFX_EQ]->getpar(EQ_63_HZ)-64);
        break;
    case EQ_125_HZ:
        eq_3->value(m_process->Rack_Effects[EFX_EQ]->getpar(EQ_125_HZ)-64);
        break;
    case EQ_250_HZ:
        eq_4->value(m_process->Rack_Effects[EFX_EQ]->getpar(EQ_250_HZ)-64);
        break;
    case EQ_500_HZ:
        eq_5->value(m_process->Rack_Effects[EFX_EQ]->getpar(EQ_500_HZ)-64);
        break;
    case EQ_1_KHZ:
        eq_6->value(m_process->Rack_Effects[EFX_EQ]->getpar(EQ_1_KHZ)-64);
        break;
    case EQ_2_KHZ:
        eq_7->value(m_process->Rack_Effects[EFX_EQ]->getpar(EQ_2_KHZ)-64);
        break;
    case EQ_4_KHZ:
        eq_8->value(m_process->Rack_Effects[EFX_EQ]->getpar(EQ_4_KHZ)-64);
        break;
    case EQ_8_KHZ:
        eq_9->value(m_process->Rack_Effects[EFX_EQ]->getpar(EQ_8_KHZ)-64);
        break;
    case EQ_16_KHZ:
        eq_10->value(m_process->Rack_Effects[EFX_EQ]->getpar(EQ_16_KHZ)-64);
        break;
    }} {}
  }
}
