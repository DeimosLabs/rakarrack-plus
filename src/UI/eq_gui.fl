# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

widget_class EqGui {
  user_data 1 open
  xywh {824 241 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"} visible position_relative
} {
  Fl_Light_Button eq_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(116);
 o->value(rkr->EQ1_Bypass);
 return;
} 
rkr->EQ1_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_EQ1->cleanup();
rgui->findpos(0,(int)o->value(),o);}
    xywh {5 2 34 18} shortcut 0x31 color 62 selection_color 1 labelsize 10 align 84 when 1
    class RKR_Light_Button
  }
  Fl_Choice eq_preset {
    label Preset
    user_data 12000
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12000))rkr->efx_EQ1->setpreset((int)o->value());
eq_1->value(rkr->efx_EQ1->getpar(EQ_31_HZ)-64);
eq_2->value(rkr->efx_EQ1->getpar(EQ_63_HZ)-64);
eq_3->value(rkr->efx_EQ1->getpar(EQ_125_HZ)-64);
eq_4->value(rkr->efx_EQ1->getpar(EQ_250_HZ)-64);
eq_5->value(rkr->efx_EQ1->getpar(EQ_500_HZ)-64);
eq_6->value(rkr->efx_EQ1->getpar(EQ_1_KHZ)-64);
eq_7->value(rkr->efx_EQ1->getpar(EQ_2_KHZ)-64);
eq_8->value(rkr->efx_EQ1->getpar(EQ_4_KHZ)-64);
eq_9->value(rkr->efx_EQ1->getpar(EQ_8_KHZ)-64);
eq_10->value(rkr->efx_EQ1->getpar(EQ_16_KHZ)-64);
eq_Gain->value(rkr->efx_EQ1->getpar(EQ_Gain)-64);
eq_Q->value(rkr->efx_EQ1->getpar(EQ_Q)-64);} selected
    xywh {77 2 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label Plain
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label Pop
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label Jazz
      xywh {42 42 36 21} labelsize 10
    }
  }
  Fl_Value_Slider eq_Gain {
    label Gain
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(130);
 return;
} 
rkr->efx_EQ1->changepar(EQ_Gain,(int)(o->value()+64));}
    xywh {56 24 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_Q {
    label Q
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(131);
 return;
} 
int i;
for(i=0;i<10;i++) rkr->efx_EQ1->changepar(i*5+13,(int)(o->value()+64));}
    tooltip Resonance xywh {56 37 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_1 {
    label {31 Hz}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(132);
 return;
} 
rkr->efx_EQ1->changepar(EQ_31_HZ,(int)(o->value()+64));}
    xywh {56 56 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_2 {
    label {63 Hz}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(133);
 return;
} 
rkr->efx_EQ1->changepar(EQ_63_HZ,(int)(o->value()+64));}
    xywh {56 68 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_3 {
    label {125 Hz}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(134);
 return;
} 
rkr->efx_EQ1->changepar(EQ_125_HZ,(int)(o->value()+64));}
    xywh {56 80 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_4 {
    label {250 Hz}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(135);
 return;
} 
rkr->efx_EQ1->changepar(EQ_250_HZ,(int)(o->value()+64));}
    xywh {56 93 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_5 {
    label {500 Hz}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(136);
 return;
} 
rkr->efx_EQ1->changepar(EQ_500_HZ,(int)(o->value()+64));}
    xywh {56 105 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_6 {
    label {1 Khz}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(137);
 return;
} 
rkr->efx_EQ1->changepar(EQ_1_KHZ,(int)(o->value()+64));}
    xywh {56 117 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_7 {
    label {2 Khz}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(138);
 return;
} 
rkr->efx_EQ1->changepar(EQ_2_KHZ,(int)(o->value()+64));}
    xywh {56 130 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_8 {
    label {4 Khz}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(139);
 return;
} 
rkr->efx_EQ1->changepar(EQ_4_KHZ,(int)(o->value()+64));}
    xywh {56 142 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_9 {
    label {8 Khz}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(140);
 return;
} 
rkr->efx_EQ1->changepar(EQ_8_KHZ,(int)(o->value()+64));}
    xywh {56 154 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eq_10 {
    label {16 Khz}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(141);
 return;
} 
rkr->efx_EQ1->changepar(EQ_16_KHZ,(int)(o->value()+64));}
    xywh {56 165 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
}
