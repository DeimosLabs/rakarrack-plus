# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class HarGui {open selected
  xywh {1691 85 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button har_activar {
    label On
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Active[EFX_HARMONIZER]);
 return;
}
m_process->EFX_Active[EFX_HARMONIZER]=(int)o->value();
if((int) o->value()==0)
m_process->Rack_Effects[EFX_HARMONIZER]->cleanup();
m_process->Rack_Effects[EFX_HARMONIZER]->changepar(Harm_Interval,m_process->Rack_Effects[EFX_HARMONIZER]->getpar(Harm_Interval));
m_parent->Chord(0);
m_parent->findpos(EFX_HARMONIZER,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x30 color 62 selection_color 1 labelsize 10 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice har_preset {
    label Preset
    user_data UD_PRESET_HARMONIZER
    callback {long long ud= (long long) v;
if((ud==0)||(ud==UD_PRESET_HARMONIZER))
    m_process->Rack_Effects[EFX_HARMONIZER]->setpreset((int)o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_HARMONIZER]; i++)
{
    parameter_refresh(i);
};

Harmonizer *Efx_Harmonizer = static_cast <Harmonizer*> (m_process->Rack_Effects[EFX_HARMONIZER]);
if ((Efx_Harmonizer->PMIDI) || (Efx_Harmonizer->PSELECT)) m_parent->Chord(0);}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label Plain
      xywh {0 0 45 26} labelsize 10
    }
    MenuItem {} {
      label Octavator
      xywh {32 32 36 21} labelsize 10
    }
    MenuItem {} {
      label {3m Down}
      xywh {32 32 36 21} labelsize 10
    }
  }
  Fl_Value_Slider har_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Harm_DryWet);
 return;
} 
m_process->Rack_Effects[EFX_HARMONIZER]->changepar(Harm_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 30 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider har_int {
    label Interval
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Harm_Interval);
 return;
} 
m_process->EFX_Active[EFX_HARMONIZER]=0;
m_process->Rack_Effects[EFX_HARMONIZER]->changepar(Harm_Interval,(int)(o->value()+12));
if((int)har_activar->value())m_process->EFX_Active[EFX_HARMONIZER]=1;}
    xywh {56 43 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -12 maximum 12 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider har_gan {
    label Gain
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Harm_Gain);
 return;
} 
m_process->Rack_Effects[EFX_HARMONIZER]->changepar(Harm_Gain,(int)(o->value()+64));}
    xywh {56 58 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider har_pan {
    label Pan
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Harm_Pan);
 return;
} 
m_process->Rack_Effects[EFX_HARMONIZER]->changepar(Harm_Pan,(int)(o->value()+64));}
    xywh {56 71 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider har_freq1 {
    label Freq
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Harm_Filter_Freq);
 return;
} 
m_process->Rack_Effects[EFX_HARMONIZER]->changepar(Harm_Filter_Freq,(int)o->value());}
    xywh {56 88 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 26000 step 1 value 2000 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider har_gan1 {
    label {F. Gain}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Harm_Filter_Gain);
 return;
} 
m_process->Rack_Effects[EFX_HARMONIZER]->changepar(Harm_Filter_Gain,(int)(o->value()+64));}
    tooltip {Filter Gain} xywh {56 100 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider har_q1 {
    label {Filter Q}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Harm_Filter_Q);
 return;
} 
m_process->Rack_Effects[EFX_HARMONIZER]->changepar(Harm_Filter_Q,(int)(o->value()+64));}
    xywh {56 112 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button har_MIDI {
    label MIDI
    callback {m_process->Rack_Effects[EFX_HARMONIZER]->changepar(Harm_MIDI,(int)o->value());
m_process->RC_Harm->cleanup();
if(!(int)o->value())m_process->Rack_Effects[EFX_HARMONIZER]->changepar(Harm_Interval,m_process->Rack_Effects[EFX_HARMONIZER]->getpar(Harm_Interval));}
    xywh {9 124 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 8
    class RKR_Check_Button
  }
  Fl_Check_Button har_SELECT {
    label SELECT
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Harm_Select);
 return;
}
m_process->Rack_Effects[EFX_HARMONIZER]->changepar(Harm_Select,(int)o->value());
m_process->RC_Harm->cleanup();
if(!(int)o->value())m_process->Rack_Effects[EFX_HARMONIZER]->changepar(Harm_Interval,m_process->Rack_Effects[EFX_HARMONIZER]->getpar(Harm_Interval));
m_parent->Chord(0);}
    xywh {9 142 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 8
    class RKR_Check_Button
  }
  Fl_Box har_chordname {
    xywh {56 126 98 27} labelsize 12 labelcolor 7
    code0 {o->set_label_offset(2);}
    class RKR_Box
  }
  Fl_Value_Slider har_note {
    label Note
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Harm_Note);
 return;
}
m_process->Rack_Effects[EFX_HARMONIZER]->changepar(Harm_Note,(unsigned char)o->value());
m_parent->Chord(0);}
    xywh {56 158 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 23 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider har_type {
    label Chord
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Harm_Chord);
 return;
}
m_process->Rack_Effects[EFX_HARMONIZER]->changepar(Harm_Chord,(unsigned char)o->value());
m_parent->Chord(0);}
    xywh {56 170 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 33 step 1 textcolor 7
    class RKR_Slider
  }
  Function {parameter_refresh(int index)} {return_type void
  } {
    code {switch (index)
    {
    case Harm_DryWet:
        har_WD->value(Dry_Wet(m_process->Rack_Effects[EFX_HARMONIZER]->getpar(Harm_DryWet)));
        break;
    case Harm_Pan:
        har_pan->value(m_process->Rack_Effects[EFX_HARMONIZER]->getpar(Harm_Pan)-64);
        break;
    case Harm_Gain:
        har_gan->value(m_process->Rack_Effects[EFX_HARMONIZER]->getpar(Harm_Gain)-64);
        break;
    case Harm_Interval:
        har_int->value(m_process->Rack_Effects[EFX_HARMONIZER]->getpar(Harm_Interval)-12);
        break;
    case Harm_Filter_Freq:
        har_freq1->value(m_process->Rack_Effects[EFX_HARMONIZER]->getpar(Harm_Filter_Freq));
        break;
    case Harm_Select:
        har_SELECT->value(m_process->Rack_Effects[EFX_HARMONIZER]->getpar(Harm_Select));
        break;
    case Harm_Note:
        har_note->value(m_process->Rack_Effects[EFX_HARMONIZER]->getpar(Harm_Note));
        m_parent->Chord(0);
        break;
    case Harm_Chord:
        har_type->value(m_process->Rack_Effects[EFX_HARMONIZER]->getpar(Harm_Chord));
        m_parent->Chord(0);
        break;
    case Harm_Filter_Gain:
        har_gan1->value(m_process->Rack_Effects[EFX_HARMONIZER]->getpar(Harm_Filter_Gain)-64);
        break;
    case Harm_Filter_Q:
        har_q1->value(m_process->Rack_Effects[EFX_HARMONIZER]->getpar(Harm_Filter_Q)-64);
        break;
    case Harm_MIDI:
        har_MIDI->value(m_process->Rack_Effects[EFX_HARMONIZER]->getpar(Harm_MIDI));
        break;
    }} {}
  }
}
