// generated by Fast Light User Interface Designer (fluid) version 1.0304

#ifndef mutromojo_gui_h
#define mutromojo_gui_h
#include <FL/Fl.H>
#include "RKR_Light_Button.h"
#include "RKR_Value_Input.h"
#include "RKR_Check_Button.h"
#include "RKR_Counter.h"
#include "RKR_Choice.h"
#include <FL/Fl_Group.H>
#include "RKR_Slider.h"
#include "../process.h"
#include "rakarrack.h"
#include "common_gui_menu.h"

class MutromojoGui : public Fl_Group {
public:
  MutromojoGui(int X, int Y, int W, int H, const char *L = 0);
  RKR_Light_Button *mutromojo_activar;
private:
  inline void cb_mutromojo_activar_i(RKR_Light_Button*, void*);
  static void cb_mutromojo_activar(RKR_Light_Button*, void*);
public:
  RKR_Choice *mutromojo_preset;
private:
  inline void cb_mutromojo_preset_i(RKR_Choice*, void*);
  static void cb_mutromojo_preset(RKR_Choice*, void*);
  static Fl_Menu_Item menu_mutromojo_preset[];
public:
  RKR_Slider *mutromojo_WD;
private:
  inline void cb_mutromojo_WD_i(RKR_Slider*, void*);
  static void cb_mutromojo_WD(RKR_Slider*, void*);
public:
  RKR_Check_Button *mutromojo_qm;
private:
  inline void cb_mutromojo_qm_i(RKR_Check_Button*, void*);
  static void cb_mutromojo_qm(RKR_Check_Button*, void*);
public:
  RKR_Slider *mutromojo_lp;
private:
  inline void cb_mutromojo_lp_i(RKR_Slider*, void*);
  static void cb_mutromojo_lp(RKR_Slider*, void*);
public:
  RKR_Check_Button *mutromojo_nat;
private:
  inline void cb_mutromojo_nat_i(RKR_Check_Button*, void*);
  static void cb_mutromojo_nat(RKR_Check_Button*, void*);
public:
  RKR_Slider *mutromojo_bp;
private:
  inline void cb_mutromojo_bp_i(RKR_Slider*, void*);
  static void cb_mutromojo_bp(RKR_Slider*, void*);
public:
  RKR_Check_Button *mutromojo_res;
private:
  inline void cb_mutromojo_res_i(RKR_Check_Button*, void*);
  static void cb_mutromojo_res(RKR_Check_Button*, void*);
public:
  RKR_Slider *mutromojo_hp;
private:
  inline void cb_mutromojo_hp_i(RKR_Slider*, void*);
  static void cb_mutromojo_hp(RKR_Slider*, void*);
public:
  RKR_Counter *svfilter_stages;
private:
  inline void cb_svfilter_stages_i(RKR_Counter*, void*);
  static void cb_svfilter_stages(RKR_Counter*, void*);
public:
  RKR_Choice *mutromojo_lfotype;
private:
  inline void cb_mutromojo_lfotype_i(RKR_Choice*, void*);
  static void cb_mutromojo_lfotype(RKR_Choice*, void*);
public:
  RKR_Slider *mutromojo_dpth;
private:
  inline void cb_mutromojo_dpth_i(RKR_Slider*, void*);
  static void cb_mutromojo_dpth(RKR_Slider*, void*);
public:
  RKR_Slider *mutromojo_freq;
private:
  inline void cb_mutromojo_freq_i(RKR_Slider*, void*);
  static void cb_mutromojo_freq(RKR_Slider*, void*);
public:
  RKR_Slider *mutromojo_q;
private:
  inline void cb_mutromojo_q_i(RKR_Slider*, void*);
  static void cb_mutromojo_q(RKR_Slider*, void*);
public:
  RKR_Slider *mutromojo_rng;
private:
  inline void cb_mutromojo_rng_i(RKR_Slider*, void*);
  static void cb_mutromojo_rng(RKR_Slider*, void*);
public:
  RKR_Slider *mutromojo_ampsnsinv;
private:
  inline void cb_mutromojo_ampsnsinv_i(RKR_Slider*, void*);
  static void cb_mutromojo_ampsnsinv(RKR_Slider*, void*);
public:
  RKR_Slider *mutromojo_ampsns;
private:
  inline void cb_mutromojo_ampsns_i(RKR_Slider*, void*);
  static void cb_mutromojo_ampsns(RKR_Slider*, void*);
public:
  RKR_Value_Input *mutromojo_smooth;
private:
  inline void cb_mutromojo_smooth_i(RKR_Value_Input*, void*);
  static void cb_mutromojo_smooth(RKR_Value_Input*, void*);
public:
  RKR_Value_Input *mutromojo_Rnd;
private:
  inline void cb_mutromojo_Rnd_i(RKR_Value_Input*, void*);
  static void cb_mutromojo_Rnd(RKR_Value_Input*, void*);
public:
  RKR_Value_Input *mutromojo_St;
private:
  inline void cb_mutromojo_St_i(RKR_Value_Input*, void*);
  static void cb_mutromojo_St(RKR_Value_Input*, void*);
public:
  RKR_Value_Input *mutromojo_minfreq;
private:
  inline void cb_mutromojo_minfreq_i(RKR_Value_Input*, void*);
  static void cb_mutromojo_minfreq(RKR_Value_Input*, void*);
  CommonGuiMenu *m_lfo_menu; 
};
#endif
