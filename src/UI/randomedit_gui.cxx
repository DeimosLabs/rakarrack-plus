// generated by Fast Light User Interface Designer (fluid) version 1.0308

#include "randomedit_gui.h"
const std::vector<std::string> vctFX_Name
{
    "Equalizer",
    "Compressor",
    "Distortion",
    "Overdrive",
    "Echo",
    "Chorus",
    "Phaser",
    "Flanger",
    "Reverb",
    "Parametric",
    "WahWah",
    "Alienwah",
    "Cabinet",
    "Pan",
    "Harmonizer",
    "Musical Delay",
    "Noisegate",
    "Derelict",
    "Analog Phaser",
    "Valve",
    "Dual Flange",
    "Ring",
    "Exciter",
    "Distband",
    "Arpie",
    "Expander",
    "Shuffle",
    "Synthfilter",
    "Varyband",
    "Convolotron",
    "Looper",
    "MuTroMojo",
    "Echoverse",
    "Coilcrafter",
    "Shelfboost",
    "Vocoder",
    "Sustainer",
    "Sequence",
    "Shifter",
    "Stompbox",
    "Reverbtron",
    "Echotron",
    "Stereoharm",
    "Compband",
    "Opticaltrem",
    "Vibe",
    "Infinity"
}; 
RandomEditGui::RandomEditGui(int X, int Y, int W, int H, const char *L)
  : Fl_Double_Window(X, Y, W, H, L) {
  _RandomEditGui();
}

RandomEditGui::RandomEditGui(int W, int H, const char *L)
  : Fl_Double_Window(0, 0, W, H, L) {
  clear_flag(16);
  _RandomEditGui();
}

RandomEditGui::RandomEditGui()
  : Fl_Double_Window(0, 0, 240, 235, 0) {
  clear_flag(16);
  _RandomEditGui();
}

void RandomEditGui::_RandomEditGui() {
this->box(FL_FLAT_BOX);
this->color(FL_BACKGROUND_COLOR);
this->selection_color(FL_BACKGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->align(Fl_Align(FL_ALIGN_TOP));
this->when(FL_WHEN_RELEASE);
{ Fondo14 = new Fl_Box(0, 1, 240, 234);
} // Fl_Box* Fondo14
{ RandomScroll = new RKR_Scroll(13, 25, 215, 185, "Effect Status");
  RandomScroll->tooltip("Check any effects that should NOT be included for random selection.");
  RandomScroll->type(6);
  RandomScroll->box(FL_NO_BOX);
  RandomScroll->color(FL_BACKGROUND_COLOR);
  RandomScroll->selection_color(FL_BACKGROUND_COLOR);
  RandomScroll->labeltype(FL_NORMAL_LABEL);
  RandomScroll->labelfont(0);
  RandomScroll->labelsize(14);
  RandomScroll->labelcolor(FL_FOREGROUND_COLOR);
  RandomScroll->align(Fl_Align(FL_ALIGN_TOP));
  RandomScroll->when(FL_WHEN_RELEASE);
  RandomScroll->end();
} // RKR_Scroll* RandomScroll
end();
resizable(this);
}

void RandomEditGui::initialize(RKRGUI *_rgui) {
  m_parent = _rgui;
}
