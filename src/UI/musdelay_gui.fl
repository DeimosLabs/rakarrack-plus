# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class MusdelayGui {open selected
  xywh {1640 159 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button musdelay_activar {
    label On
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Active[EFX_MUSICAL_DELAY]);
 return;
}
m_process->EFX_Active[EFX_MUSICAL_DELAY]=(int)o->value();
if((int) o->value()==0)
m_process->Rack_Effects[EFX_MUSICAL_DELAY]->cleanup();
m_parent->findpos(EFX_MUSICAL_DELAY,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x35 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice musdelay_preset {
    label Preset
    user_data UD_PRESET_MUSICAL_DELAY
    callback {m_process->EFX_Active[EFX_MUSICAL_DELAY]=0;
long long ud= (long long) v;
if((ud==0)||(ud==UD_PRESET_MUSICAL_DELAY))
    m_process->Rack_Effects[EFX_MUSICAL_DELAY]->setpreset(o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_MUSICAL_DELAY]; i++)
{
    parameter_refresh(i);
};

if((int)musdelay_activar->value())m_process->EFX_Active[EFX_MUSICAL_DELAY]=1;}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label {Echo 1}
      xywh {62 62 36 21} labelsize 10
    }
    MenuItem {} {
      label {Echo 2}
      xywh {62 62 36 21} labelsize 10
    }
  }
  Fl_Value_Slider musdelay_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Music_DryWet);
 return;
} 
m_process->Rack_Effects[EFX_MUSICAL_DELAY]->changepar(Music_DryWet,Dry_Wet((int)o->value()));}
    xywh {56 26 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider musdelay_LRc {
    label {L/R Cross}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Music_LR_Cross);
 return;
} 
m_process->Rack_Effects[EFX_MUSICAL_DELAY]->changepar(Music_LR_Cross,(int)o->value());}
    xywh {56 38 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider musdelay_pan1 {
    label {Pan 1}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Music_Pan_1);
 return;
} 
m_process->Rack_Effects[EFX_MUSICAL_DELAY]->changepar(Music_Pan_1,(int)o->value()+64);}
    xywh {56 50 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider musdelay_pan2 {
    label {Pan 2}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Music_Pan_2);
 return;
} 
m_process->Rack_Effects[EFX_MUSICAL_DELAY]->changepar(Music_Pan_2,(int)o->value()+64);}
    xywh {56 62 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Choice musdelay_delay1 {
    callback {m_process->EFX_Active[EFX_MUSICAL_DELAY]=0;
m_process->Rack_Effects[EFX_MUSICAL_DELAY]->changepar(Music_Delay_1,o->value()+1);
if((int)musdelay_activar->value())m_process->EFX_Active[EFX_MUSICAL_DELAY]=1;}
    tooltip {Delay 1} xywh {10 82 38 14} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label 1
      xywh {0 0 45 26} labelsize 10
    }
    MenuItem {} {
      label {1/2}
      xywh {10 10 45 26} labelsize 10
    }
    MenuItem {} {
      label {1/3}
      xywh {20 20 45 26} labelsize 10
    }
    MenuItem {} {
      label {1/4}
      xywh {30 30 45 26} labelsize 10
    }
    MenuItem {} {
      label {1/5}
      xywh {40 40 45 26} labelsize 10
    }
    MenuItem {} {
      label {1/6}
      xywh {50 50 45 26} labelsize 10
    }
  }
  Fl_Choice musdelay_delay3 {
    callback {m_process->EFX_Active[EFX_MUSICAL_DELAY]=0;
m_process->Rack_Effects[EFX_MUSICAL_DELAY]->changepar(Music_Del_Offset,o->value()+1);
if((int)musdelay_activar->value())m_process->EFX_Active[EFX_MUSICAL_DELAY]=1;}
    tooltip {Delay Offset} xywh {62 82 38 14} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label 1
      xywh {10 10 45 26} labelsize 10
    }
    MenuItem {} {
      label {1/2}
      xywh {20 20 45 26} labelsize 10
    }
    MenuItem {} {
      label {1/3}
      xywh {30 30 45 26} labelsize 10
    }
    MenuItem {} {
      label {1/4}
      xywh {40 40 45 26} labelsize 10
    }
    MenuItem {} {
      label {1/5}
      xywh {50 50 45 26} labelsize 10
    }
    MenuItem {} {
      label {1/6}
      xywh {60 60 45 26} labelsize 10
    }
    MenuItem {} {
      label 0
      xywh {0 0 45 26} labelsize 10
    }
  }
  Fl_Choice musdelay_delay2 {
    callback {m_process->EFX_Active[EFX_MUSICAL_DELAY]=0;
m_process->Rack_Effects[EFX_MUSICAL_DELAY]->changepar(Music_Delay_2,o->value()+1);
if((int)musdelay_activar->value())m_process->EFX_Active[EFX_MUSICAL_DELAY]=1;}
    tooltip {Delay 2} xywh {114 82 38 14} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
    code0 {o->menu(menu_musdelay_delay1);}
    class RKR_Choice
  } {}
  Fl_Value_Slider musdelay_tempo {
    label Tempo
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Music_Tempo);
 return;
}
m_process->EFX_Active[EFX_MUSICAL_DELAY]=0;
m_process->Rack_Effects[EFX_MUSICAL_DELAY]->changepar(Music_Tempo,(int)o->value());
if((int)musdelay_activar->value())m_process->EFX_Active[EFX_MUSICAL_DELAY]=1;}
    xywh {56 103 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 10 maximum 480 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider musdelay_gain1 {
    label {Gain 1}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Music_Gain_1);
 return;
} 
m_process->Rack_Effects[EFX_MUSICAL_DELAY]->changepar(Music_Gain_1,(int)o->value());}
    xywh {56 122 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider musdelay_gain2 {
    label {Gain 2}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Music_Gain_2);
 return;
} 
m_process->Rack_Effects[EFX_MUSICAL_DELAY]->changepar(Music_Gain_2,(int)o->value());}
    xywh {56 134 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider musdelay_fb1 {
    label {FB 1}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Music_Feedback_1);
 return;
} 
m_process->Rack_Effects[EFX_MUSICAL_DELAY]->changepar(Music_Feedback_1,(int)o->value());}
    tooltip {Feedback 1} xywh {56 146 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider musdelay_fb2 {
    label {FB 2}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Music_Feedback_2);
 return;
} 
m_process->Rack_Effects[EFX_MUSICAL_DELAY]->changepar(Music_Feedback_2,(int)o->value());}
    tooltip {Feedback 2} xywh {56 158 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider musdelay_damp {
    label Damp
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Music_Damp);
 return;
}
m_process->Rack_Effects[EFX_MUSICAL_DELAY]->changepar(Music_Damp,(int)o->value());}
    xywh {56 170 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Function {parameter_refresh(int index)} {return_type void
  } {
    code {switch (index)
    {
    case Music_DryWet:
        musdelay_WD->value(Dry_Wet(m_process->Rack_Effects[EFX_MUSICAL_DELAY]->getpar(Music_DryWet)));
        break;
    case Music_Pan_1:
        musdelay_pan1->value(m_process->Rack_Effects[EFX_MUSICAL_DELAY]->getpar(Music_Pan_1)-64);
        break;
    case Music_Delay_1:
        musdelay_delay1->value(m_process->Rack_Effects[EFX_MUSICAL_DELAY]->getpar(Music_Delay_1)-1);
        break;
    case Music_Del_Offset:
        musdelay_delay3->value(m_process->Rack_Effects[EFX_MUSICAL_DELAY]->getpar(Music_Del_Offset)-1);
        break;
    case Music_LR_Cross:
        musdelay_LRc->value(m_process->Rack_Effects[EFX_MUSICAL_DELAY]->getpar(Music_LR_Cross));
        break;
    case Music_Feedback_1:
        musdelay_fb1->value(m_process->Rack_Effects[EFX_MUSICAL_DELAY]->getpar(Music_Feedback_1));
        break;
    case Music_Damp:
        musdelay_damp->value(m_process->Rack_Effects[EFX_MUSICAL_DELAY]->getpar(Music_Damp));
        break;
    case Music_Pan_2:
        musdelay_pan2->value(m_process->Rack_Effects[EFX_MUSICAL_DELAY]->getpar(Music_Pan_2)-64);
        break;
    case Music_Delay_2:
        musdelay_delay2->value(m_process->Rack_Effects[EFX_MUSICAL_DELAY]->getpar(Music_Delay_2)-1);
        break;
    case Music_Feedback_2:
        musdelay_fb2->value(m_process->Rack_Effects[EFX_MUSICAL_DELAY]->getpar(Music_Feedback_2));
        break;
    case Music_Tempo:
        musdelay_tempo->value(m_process->Rack_Effects[EFX_MUSICAL_DELAY]->getpar(Music_Tempo));
        break;
    case Music_Gain_1:
        musdelay_gain1->value(m_process->Rack_Effects[EFX_MUSICAL_DELAY]->getpar(Music_Gain_1));
        break;
    case Music_Gain_2:
        musdelay_gain2->value(m_process->Rack_Effects[EFX_MUSICAL_DELAY]->getpar(Music_Gain_2));
        break;
    }} {}
  }
  Function {tap_tempo_update()} {return_type void
  } {
    code {musdelay_tempo->value(m_process->Rack_Effects[EFX_MUSICAL_DELAY]->getpar(Music_Tempo));} {}
  }
}
