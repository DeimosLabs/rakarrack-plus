// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "gate_gui.h"

void GateGui::cb_gate_activar_i(RKR_Light_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Multi_On_Off);
 o->value(rkr->EFX_Bypass[EFX_NOISEGATE]);
 return;
}
rkr->EFX_Bypass[EFX_NOISEGATE]=(int)o->value();
rgui->findpos(EFX_NOISEGATE,(int)o->value(),o);
}
void GateGui::cb_gate_activar(RKR_Light_Button* o, void* v) {
  ((GateGui*)(o->parent()))->cb_gate_activar_i(o,v);
}

void GateGui::cb_gate_preset_i(RKR_Choice* o, void* v) {
  long long ud= (long long) v;
if((ud==0)||(ud==12016))rkr->Rack_Effects[EFX_NOISEGATE]->setpreset((int) o->value());
gate_ATime->value(rkr->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_Attack));
gate_RTime->value(rkr->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_Release));
gate_range->value(rkr->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_Range));
gate_threshold->value(rkr->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_Threshold));
gate_hold->value(rkr->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_Hold));
gate_HPF->value(rkr->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_HPF));
gate_LPF->value(rkr->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_LPF));
}
void GateGui::cb_gate_preset(RKR_Choice* o, void* v) {
  ((GateGui*)(o->parent()))->cb_gate_preset_i(o,v);
}

Fl_Menu_Item GateGui::menu_gate_preset[] = {
 {"0dB", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"-10dB", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"-20dB", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void GateGui::cb_gate_ATime_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Gate_Attack);
 return;
}
rkr->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_Attack,(int)o->value());
}
void GateGui::cb_gate_ATime(RKR_Slider* o, void* v) {
  ((GateGui*)(o->parent()))->cb_gate_ATime_i(o,v);
}

void GateGui::cb_gate_RTime_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Gate_Release);
 return;
}
rkr->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_Release, (int) o->value());
}
void GateGui::cb_gate_RTime(RKR_Slider* o, void* v) {
  ((GateGui*)(o->parent()))->cb_gate_RTime_i(o,v);
}

void GateGui::cb_gate_range_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Gate_Range);
 return;
}
rkr->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_Range, (int) o->value());
}
void GateGui::cb_gate_range(RKR_Slider* o, void* v) {
  ((GateGui*)(o->parent()))->cb_gate_range_i(o,v);
}

void GateGui::cb_gate_threshold_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Gate_Threshold);
 return;
}
rkr->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_Threshold, (int)o->value());
}
void GateGui::cb_gate_threshold(RKR_Slider* o, void* v) {
  ((GateGui*)(o->parent()))->cb_gate_threshold_i(o,v);
}

void GateGui::cb_gate_hold_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Gate_Hold);
 return;
}
rkr->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_Hold,(int)o->value());
}
void GateGui::cb_gate_hold(RKR_Slider* o, void* v) {
  ((GateGui*)(o->parent()))->cb_gate_hold_i(o,v);
}

void GateGui::cb_gate_LPF_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Gate_LPF);
 return;
}
rkr->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_LPF, (int)o->value());
}
void GateGui::cb_gate_LPF(RKR_Slider* o, void* v) {
  ((GateGui*)(o->parent()))->cb_gate_LPF_i(o,v);
}

void GateGui::cb_gate_HPF_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Gate_HPF);
 return;
}
rkr->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_HPF, (int)o->value());
}
void GateGui::cb_gate_HPF(RKR_Slider* o, void* v) {
  ((GateGui*)(o->parent()))->cb_gate_HPF_i(o,v);
}
GateGui::GateGui(int X, int Y, int W, int H, const char *L)
  : RKR_Gui_Effect(0, 0, W, H, L) {
this->box(FL_UP_BOX);
this->color(FL_FOREGROUND_COLOR);
this->selection_color(FL_FOREGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->user_data((void*)(1));
this->align(Fl_Align(96|FL_ALIGN_INSIDE));
this->when(FL_WHEN_RELEASE);
{ RKR_Light_Button* o = gate_activar = new RKR_Light_Button(5, 4, 34, 18, "On");
  gate_activar->box(FL_UP_BOX);
  gate_activar->shortcut(0x32);
  gate_activar->color((Fl_Color)62);
  gate_activar->selection_color((Fl_Color)1);
  gate_activar->labeltype(FL_NORMAL_LABEL);
  gate_activar->labelfont(0);
  gate_activar->labelsize(10);
  gate_activar->labelcolor(FL_FOREGROUND_COLOR);
  gate_activar->callback((Fl_Callback*)cb_gate_activar, (void*)(2));
  gate_activar->align(Fl_Align(68|FL_ALIGN_INSIDE));
  gate_activar->when(FL_WHEN_CHANGED);
  activate_effect = o;
} // RKR_Light_Button* gate_activar
{ RKR_Choice* o = gate_preset = new RKR_Choice(77, 4, 76, 18, "Preset");
  gate_preset->box(FL_FLAT_BOX);
  gate_preset->down_box(FL_BORDER_BOX);
  gate_preset->color(FL_BACKGROUND_COLOR);
  gate_preset->selection_color(FL_FOREGROUND_COLOR);
  gate_preset->labeltype(FL_NORMAL_LABEL);
  gate_preset->labelfont(0);
  gate_preset->labelsize(10);
  gate_preset->labelcolor(FL_BACKGROUND2_COLOR);
  gate_preset->textsize(10);
  gate_preset->textcolor(FL_BACKGROUND2_COLOR);
  gate_preset->callback((Fl_Callback*)cb_gate_preset, (void*)(12016));
  gate_preset->align(Fl_Align(FL_ALIGN_LEFT));
  gate_preset->when(FL_WHEN_RELEASE_ALWAYS);
  gate_preset->menu(menu_gate_preset);
  preset_choice = o;
} // RKR_Choice* gate_preset
{ gate_ATime = new RKR_Slider(56, 39, 100, 10, "A. Time");
  gate_ATime->tooltip("Attack Time");
  gate_ATime->type(5);
  gate_ATime->box(FL_FLAT_BOX);
  gate_ATime->color((Fl_Color)178);
  gate_ATime->selection_color((Fl_Color)62);
  gate_ATime->labeltype(FL_NORMAL_LABEL);
  gate_ATime->labelfont(0);
  gate_ATime->labelsize(10);
  gate_ATime->labelcolor(FL_BACKGROUND2_COLOR);
  gate_ATime->minimum(1);
  gate_ATime->maximum(250);
  gate_ATime->step(1);
  gate_ATime->value(1);
  gate_ATime->textcolor(FL_BACKGROUND2_COLOR);
  gate_ATime->callback((Fl_Callback*)cb_gate_ATime);
  gate_ATime->align(Fl_Align(FL_ALIGN_LEFT));
  gate_ATime->when(FL_WHEN_CHANGED);
} // RKR_Slider* gate_ATime
{ gate_RTime = new RKR_Slider(56, 61, 100, 10, "R. Time");
  gate_RTime->tooltip("Release Time");
  gate_RTime->type(5);
  gate_RTime->box(FL_FLAT_BOX);
  gate_RTime->color((Fl_Color)178);
  gate_RTime->selection_color((Fl_Color)62);
  gate_RTime->labeltype(FL_NORMAL_LABEL);
  gate_RTime->labelfont(0);
  gate_RTime->labelsize(10);
  gate_RTime->labelcolor(FL_BACKGROUND2_COLOR);
  gate_RTime->minimum(2);
  gate_RTime->maximum(250);
  gate_RTime->step(1);
  gate_RTime->value(120);
  gate_RTime->textcolor(FL_BACKGROUND2_COLOR);
  gate_RTime->callback((Fl_Callback*)cb_gate_RTime);
  gate_RTime->align(Fl_Align(FL_ALIGN_LEFT));
  gate_RTime->when(FL_WHEN_CHANGED);
} // RKR_Slider* gate_RTime
{ gate_range = new RKR_Slider(56, 83, 100, 10, "Range");
  gate_range->type(5);
  gate_range->box(FL_FLAT_BOX);
  gate_range->color((Fl_Color)178);
  gate_range->selection_color((Fl_Color)62);
  gate_range->labeltype(FL_NORMAL_LABEL);
  gate_range->labelfont(0);
  gate_range->labelsize(10);
  gate_range->labelcolor(FL_BACKGROUND2_COLOR);
  gate_range->minimum(-90);
  gate_range->maximum(0);
  gate_range->step(1);
  gate_range->textcolor(FL_BACKGROUND2_COLOR);
  gate_range->callback((Fl_Callback*)cb_gate_range);
  gate_range->align(Fl_Align(FL_ALIGN_LEFT));
  gate_range->when(FL_WHEN_CHANGED);
} // RKR_Slider* gate_range
{ gate_threshold = new RKR_Slider(56, 105, 100, 10, "Threshold");
  gate_threshold->type(5);
  gate_threshold->box(FL_FLAT_BOX);
  gate_threshold->color((Fl_Color)178);
  gate_threshold->selection_color((Fl_Color)62);
  gate_threshold->labeltype(FL_NORMAL_LABEL);
  gate_threshold->labelfont(0);
  gate_threshold->labelsize(10);
  gate_threshold->labelcolor(FL_BACKGROUND2_COLOR);
  gate_threshold->minimum(-70);
  gate_threshold->maximum(20);
  gate_threshold->step(1);
  gate_threshold->textcolor(FL_BACKGROUND2_COLOR);
  gate_threshold->callback((Fl_Callback*)cb_gate_threshold);
  gate_threshold->align(Fl_Align(FL_ALIGN_LEFT));
  gate_threshold->when(FL_WHEN_CHANGED);
} // RKR_Slider* gate_threshold
{ gate_hold = new RKR_Slider(56, 127, 100, 10, "Hold");
  gate_hold->type(5);
  gate_hold->box(FL_FLAT_BOX);
  gate_hold->color((Fl_Color)178);
  gate_hold->selection_color((Fl_Color)62);
  gate_hold->labeltype(FL_NORMAL_LABEL);
  gate_hold->labelfont(0);
  gate_hold->labelsize(10);
  gate_hold->labelcolor(FL_BACKGROUND2_COLOR);
  gate_hold->minimum(2);
  gate_hold->maximum(500);
  gate_hold->step(1);
  gate_hold->textcolor(FL_BACKGROUND2_COLOR);
  gate_hold->callback((Fl_Callback*)cb_gate_hold);
  gate_hold->align(Fl_Align(FL_ALIGN_LEFT));
  gate_hold->when(FL_WHEN_CHANGED);
} // RKR_Slider* gate_hold
{ gate_LPF = new RKR_Slider(56, 146, 100, 10, "LPF");
  gate_LPF->type(5);
  gate_LPF->box(FL_FLAT_BOX);
  gate_LPF->color((Fl_Color)178);
  gate_LPF->selection_color((Fl_Color)62);
  gate_LPF->labeltype(FL_NORMAL_LABEL);
  gate_LPF->labelfont(0);
  gate_LPF->labelsize(10);
  gate_LPF->labelcolor(FL_BACKGROUND2_COLOR);
  gate_LPF->minimum(20);
  gate_LPF->maximum(26000);
  gate_LPF->step(1);
  gate_LPF->value(20000);
  gate_LPF->textcolor(FL_BACKGROUND2_COLOR);
  gate_LPF->callback((Fl_Callback*)cb_gate_LPF);
  gate_LPF->align(Fl_Align(FL_ALIGN_LEFT));
  gate_LPF->when(FL_WHEN_CHANGED);
} // RKR_Slider* gate_LPF
{ gate_HPF = new RKR_Slider(56, 162, 100, 10, "HPF");
  gate_HPF->type(5);
  gate_HPF->box(FL_FLAT_BOX);
  gate_HPF->color((Fl_Color)178);
  gate_HPF->selection_color((Fl_Color)62);
  gate_HPF->labeltype(FL_NORMAL_LABEL);
  gate_HPF->labelfont(0);
  gate_HPF->labelsize(10);
  gate_HPF->labelcolor(FL_BACKGROUND2_COLOR);
  gate_HPF->minimum(20);
  gate_HPF->maximum(20000);
  gate_HPF->step(1);
  gate_HPF->value(20);
  gate_HPF->textcolor(FL_BACKGROUND2_COLOR);
  gate_HPF->callback((Fl_Callback*)cb_gate_HPF);
  gate_HPF->align(Fl_Align(FL_ALIGN_LEFT));
  gate_HPF->when(FL_WHEN_CHANGED);
} // RKR_Slider* gate_HPF
position(X, Y);
end();
}
