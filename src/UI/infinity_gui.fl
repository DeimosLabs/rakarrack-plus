# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Counter.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class {\#include "RKR_Value_Input.h"} InfinityGui {
  user_data 1 open selected
  xywh {1550 57 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  code3 {\#include "RKR_Value_Input.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button infinity_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Multi_On_Off); 
 o->value(rkr->EFX_Bypass[EFX_INFINITY]);
 return;
} 
rkr->EFX_Bypass[EFX_INFINITY]=(int)o->value();
if((int) o->value()==0)
rkr->Rack_Effects[EFX_INFINITY]->cleanup();
rgui->findpos(EFX_INFINITY,(int)o->value(),o);}
    xywh {8 5 34 18} shortcut 0x31 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice infinity_preset {
    label Preset
    user_data 12046
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12046))rkr->Rack_Effects[EFX_INFINITY]->setpreset((int) o->value());

for (int i = 0; i < rkr->EFX_Param_Size[EFX_INFINITY]; i++)
{
    parameter_refresh(i);
};}
    xywh {80 5 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label Plain
      xywh {37 37 36 21} labelsize 10
    }
    MenuItem {} {
      label Basic
      xywh {27 27 36 21} labelsize 10
    }
    MenuItem {} {
      label {Rising Comb}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Falling Comb}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Laser
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Doppler
      xywh {10 10 36 21} labelsize 10
    }
    MenuItem {} {
      label Detune
      xywh {20 20 36 21} labelsize 10
    }
    MenuItem {} {
      label {Dizzy Sailor}
      xywh {30 30 36 21} labelsize 10
    }
    MenuItem {} {
      label {Stereo Phaser}
      xywh {40 40 36 21} labelsize 10
    }
    MenuItem {} {
      label Corkscrew
      xywh {50 50 36 21} labelsize 10
    }
    MenuItem {} {
      label FreqeeVox
      xywh {60 60 36 21} labelsize 10
    }
  }
  Fl_Value_Slider infinity_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Infinity_DryWet);
 return;
} 
rkr->Rack_Effects[EFX_INFINITY]->changepar(Infinity_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 27 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider infinity_Q {
    label Res
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Infinity_Resonance);
 return;
}
rkr->Rack_Effects[EFX_INFINITY]->changepar(Infinity_Resonance,(int)o->value());}
    tooltip {Resonance Filter} xywh {56 41 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -1000 maximum 1000 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Input infinity_1 {
    label 1
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Infinity_Band_1);
 return;
} 
rkr->Rack_Effects[EFX_INFINITY]->changepar(Infinity_Band_1,(int)o->value());}
    xywh {15 56 23 15} labelsize 10 labelcolor 7 minimum -64 maximum 64 step 1 textsize 10 textcolor 7
    class RKR_Value_Input
  }
  Fl_Value_Input infinity_2 {
    label 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Infinity_Band_2);
 return;
} 
rkr->Rack_Effects[EFX_INFINITY]->changepar(Infinity_Band_2,(int)o->value());}
    xywh {54 56 23 15} labelsize 10 labelcolor 7 minimum -64 maximum 64 step 1 textsize 10 textcolor 7
    class RKR_Value_Input
  }
  Fl_Value_Input infinity_3 {
    label 3
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Infinity_Band_3);
 return;
} 
rkr->Rack_Effects[EFX_INFINITY]->changepar(Infinity_Band_3,(int)o->value());}
    xywh {93 56 23 15} labelsize 10 labelcolor 7 minimum -64 maximum 64 step 1 textsize 10 textcolor 7
    class RKR_Value_Input
  }
  Fl_Value_Input infinity_4 {
    label 4
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Infinity_Band_4);
 return;
} 
rkr->Rack_Effects[EFX_INFINITY]->changepar(Infinity_Band_4,(int)o->value());}
    xywh {130 56 23 15} labelsize 10 labelcolor 7 minimum -64 maximum 64 step 1 textsize 10 textcolor 7
    class RKR_Value_Input
  }
  Fl_Value_Input infinity_5 {
    label 5
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Infinity_Band_5);
 return;
} 
rkr->Rack_Effects[EFX_INFINITY]->changepar(Infinity_Band_5,(int)o->value());}
    xywh {15 74 23 15} labelsize 10 labelcolor 7 minimum -64 maximum 64 step 1 textsize 10 textcolor 7
    class RKR_Value_Input
  }
  Fl_Value_Input infinity_6 {
    label 6
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Infinity_Band_6);
 return;
} 
rkr->Rack_Effects[EFX_INFINITY]->changepar(Infinity_Band_6,(int)o->value());}
    xywh {54 74 23 15} labelsize 10 labelcolor 7 minimum -64 maximum 64 step 1 textsize 10 textcolor 7
    class RKR_Value_Input
  }
  Fl_Value_Input infinity_7 {
    label 7
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Infinity_Band_7);
 return;
} 
rkr->Rack_Effects[EFX_INFINITY]->changepar(Infinity_Band_7,(int)o->value());}
    xywh {93 74 23 15} labelsize 10 labelcolor 7 minimum -64 maximum 64 step 1 textsize 10 textcolor 7
    class RKR_Value_Input
  }
  Fl_Value_Input infinity_8 {
    label 8
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Infinity_Band_8);
 return;
} 
rkr->Rack_Effects[EFX_INFINITY]->changepar(Infinity_Band_8,(int)o->value());}
    xywh {130 74 23 15} labelsize 10 labelcolor 7 minimum -64 maximum 64 step 1 textsize 10 textcolor 7
    class RKR_Value_Input
  }
  Fl_Check_Button infinity_rev {
    label Reverse
    user_data 2
    callback {rkr->Rack_Effects[EFX_INFINITY]->changepar(Infinity_Reverse,(int)o->value());}
    tooltip {Reverse Left Channel Sweep} xywh {53 94 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 4
    class RKR_Check_Button
  }
  Fl_Counter infinity_stages {
    label Stages
    callback {rkr->Rack_Effects[EFX_INFINITY]->changepar(Infinity_Stages,(int)o->value());}
    xywh {106 93 46 15} type Simple labelsize 10 labelcolor 7 align 4 minimum 1 maximum 12 step 1 value 1 textsize 9
    code0 {o->set_text_offset(-1);}
    class RKR_Counter
  }
  Fl_Value_Slider infinity_pan {
    label AutoPan
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Infinity_AutoPan);
 return;
} 
rkr->Rack_Effects[EFX_INFINITY]->changepar(Infinity_AutoPan,(int)o->value());}
    xywh {56 111 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider infinity_stdf {
    label {Stereo Df}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Infinity_LR_Delay);
 return;
} 
rkr->Rack_Effects[EFX_INFINITY]->changepar(Infinity_LR_Delay,(int)o->value());}
    tooltip {Sweep L/R Delay} xywh {56 123 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider infinity_start {
    label Start
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Infinity_Start);
 return;
} 
rkr->Rack_Effects[EFX_INFINITY]->changepar(Infinity_Start,(int)o->value());}
    xywh {56 135 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider infinity_end {
    label End
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Infinity_End);
 return;
} 
rkr->Rack_Effects[EFX_INFINITY]->changepar(Infinity_End,(int)o->value());}
    xywh {56 147 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider infinity_rate {
    label Tempo
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Infinity_Tempo);
 return;
} 
rkr->Rack_Effects[EFX_INFINITY]->changepar(Infinity_Tempo,(int)o->value());}
    xywh {56 159 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider infinity_subdiv {
    label Subdiv
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Infinity_Subdivision);
 return;
} 
rkr->Rack_Effects[EFX_INFINITY]->changepar(Infinity_Subdivision,(int)o->value());}
    xywh {56 170 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -16 maximum 16 step 1 textcolor 7
    class RKR_Slider
  }
  Function {parameter_refresh(int index)} {return_type void
  } {
    code {switch (index)
    {
    case Infinity_DryWet:
        infinity_WD->value(Dry_Wet(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_DryWet)));
        break;
    case Infinity_Band_1:
        infinity_1->value(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_Band_1));
        break;
    case Infinity_Band_2:
        infinity_2->value(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_Band_2));
        break;
    case Infinity_Band_3:
        infinity_3->value(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_Band_3));
        break;
    case Infinity_Band_4:
        infinity_4->value(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_Band_4));
        break;
    case Infinity_Band_5:
        infinity_5->value(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_Band_5));
        break;
    case Infinity_Band_6:
        infinity_6->value(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_Band_6));
        break;
    case Infinity_Band_7:
        infinity_7->value(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_Band_7));
        break;
    case Infinity_Band_8:
        infinity_8->value(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_Band_8));
        break;
    case Infinity_Resonance:
        infinity_Q->value(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_Resonance));
        break;
    case Infinity_Start:
        infinity_start->value(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_Start));
        break;
    case Infinity_End:
        infinity_end->value(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_End));
        break;
    case Infinity_Tempo:
        infinity_rate->value(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_Tempo));
        break;
    case Infinity_LR_Delay:
        infinity_stdf->value(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_LR_Delay));
        break;
    case Infinity_Subdivision:
        infinity_subdiv->value(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_Subdivision));
        break;
    case Infinity_AutoPan:
        infinity_pan->value(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_AutoPan));
        break;
    case Infinity_Reverse:
        infinity_rev->value(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_Reverse));
        break;
    case Infinity_Stages:
        infinity_stages->value(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_Stages));
        break;
    }} {}
  }
  Function {tap_tempo_update()} {return_type void
  } {
    code {infinity_rate->value(rkr->Rack_Effects[EFX_INFINITY]->getpar(Infinity_Tempo));} {}
  }
}
