# data file for the Fltk User Interface Designer (fluid)
version 1.0305
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

widget_class {\#include "common_gui_menu.h"} MbdistGui {
  user_data 1 open
  xywh {1550 57 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "sliderW.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  code3 {\#include "common_gui_menu.h"} visible position_relative
} {
  Fl_Light_Button mbdist_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(116);
 o->value(rkr->MBDist_Bypass);
 return;
}
rkr->MBDist_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_MBDist->cleanup();
rgui->findpos(23,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x33 color 62 selection_color 1 labelsize 10 align 84 when 1
    class RKR_Light_Button
  }
  Fl_Choice mbdist_preset {
    label Preset
    user_data 12023
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12023))rkr->efx_MBDist->setpreset((int)o->value());
mbdist_WD->value(Dry_Wet(rkr->efx_MBDist->getpar(0)));
mbdist_LRc->value(rkr->efx_MBDist->getpar(2));
mbdist_drive->value(rkr->efx_MBDist->getpar(3));
mbdist_level->value(rkr->efx_MBDist->getpar(4));
mbdist_tipoL->value(rkr->efx_MBDist->getpar(5));
mbdist_tipoM->value(rkr->efx_MBDist->getpar(6));
mbdist_tipoH->value(rkr->efx_MBDist->getpar(7));
mbdist_volL->value(rkr->efx_MBDist->getpar(8));
mbdist_volM->value(rkr->efx_MBDist->getpar(9));
mbdist_volH->value(rkr->efx_MBDist->getpar(10));
mbdist_neg->value(rkr->efx_MBDist->getpar(11));
mbdist_st->value(rkr->efx_MBDist->getpar(14));
mbdist_pan->value(rkr->efx_MBDist->getpar(1)-64);
mbdist_cross1->value(rkr->efx_MBDist->getpar(12));
mbdist_cross2->value(rkr->efx_MBDist->getpar(13));}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label Saturation
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Distorsion 1}
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label Soft
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label Modulated
      xywh {52 52 36 21} labelsize 10
    }
    MenuItem {} {
      label Crunch
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label {Distortion 2}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Distortion 3}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Distortion 4}
      xywh {0 0 36 21} labelsize 10
    }
  }
  Fl_Value_Slider mbdist_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(202);
 return;
} 
rkr->efx_MBDist->changepar(0,Dry_Wet((int)(o->value())));}
    xywh {56 26 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider mbdist_LRc {
    label {L/R Cross}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(203);
 return;
} 
rkr->efx_MBDist->changepar(2,(int)(o->value()));}
    xywh {56 38 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider mbdist_drive {
    label Drive
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(204);
 return;
} 
rkr->efx_MBDist->changepar(3,(int)o->value());}
    xywh {56 50 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider mbdist_level {
    label Level
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(205);
 return;
} 
rkr->efx_MBDist->changepar(4,(int)o->value());}
    xywh {56 62 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider mbdist_volL {
    label {L. Gain}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(206);
 return;
} 
rkr->efx_MBDist->changepar(8,(int)o->value());}
    tooltip {Low Gain} xywh {56 76 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider mbdist_volM {
    label {M. Gain}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(207);
 return;
} 
rkr->efx_MBDist->changepar(9,(int)o->value());}
    tooltip {Mid Gain} xywh {56 89 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider mbdist_volH {
    label {H. Gain}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(208);
 return;
} 
rkr->efx_MBDist->changepar(10,(int)o->value());}
    tooltip {High Gain} xywh {56 102 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider mbdist_cross1 {
    label {Cross 1}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(209);
 return;
} 
rkr->efx_MBDist->changepar(12,(int)o->value());}
    xywh {56 115 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 1000 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider mbdist_cross2 {
    label {Cross 2}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(210);
 return;
} 
rkr->efx_MBDist->changepar(13,(int)o->value());}
    xywh {56 127 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 800 maximum 12000 step 1 textcolor 7
    class SliderW
  }
  Fl_Choice mbdist_tipoL {
    callback {rkr->efx_MBDist->changepar(5,(int)o->value());} open
    xywh {3 139 50 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    code0 {o->menu(m_dist_menu->get_distortion_type());}
    class RKR_Choice
  } {}
  Fl_Choice mbdist_tipoM {
    callback {rkr->efx_MBDist->changepar(6,(int)o->value());} open
    xywh {54 139 50 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    code0 {o->menu(m_dist_menu->get_distortion_type());}
    class RKR_Choice
  } {}
  Fl_Choice mbdist_tipoH {
    callback {rkr->efx_MBDist->changepar(7,(int)o->value());} open selected
    xywh {105 139 50 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    code0 {o->menu(m_dist_menu->get_distortion_type());}
    class RKR_Choice
  } {}
  Fl_Value_Slider mbdist_pan {
    label Pan
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(211);
 return;
} 
rkr->efx_MBDist->changepar(1,(int)(o->value()+64));}
    xywh {56 158 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class SliderW
  }
  Fl_Check_Button mbdist_st {
    label Stereo
    user_data 2
    callback {rkr->efx_MBDist->changepar(14,(int)o->value());}
    xywh {32 168 54 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button mbdist_neg {
    label {Neg.}
    user_data 2
    callback {rkr->efx_MBDist->changepar(11,(int)o->value());}
    xywh {101 167 44 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  decl {CommonGuiMenu *m_dist_menu;} {private local
  }
}
