// generated by Fast Light User Interface Designer (fluid) version 1.0304

#ifndef rakarrack_h
#define rakarrack_h
#include <FL/Fl.H>
#include "../process.h"
#include "../global.h"
#include "sliderW.h"
#include "newvum.h"
#include "tunerbar.h"
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Progress.H>
#include <FL/Fl_Tooltip.H>
#include <FL/x.H>
#include <FL/Fl_PNG_Image.H>
#include <FL/Fl_Tiled_Image.H>
#include <FL/Fl_Help_Dialog.H>
#include <FL/Fl_File_Chooser.H>
#include <FL/Fl_Color_Chooser.H>
#include <X11/xpm.h>
class RKR;  // forward declaration
class Scope;  // forward declaration
class NewVum;  // forward declaration
class Analyzer;  // forward declaration
class TunerBar;  // forward declaration
class EqGui; // forward declaration
class CompressGui; // forward declaration
class DistGui; // forward declaration
class OvrdGui; // forward declaration
class EchoGui; // forward declaration
class ChorusGui; // forward declaration
class PhaserGui; // forward declaration
class FlangerGui; // forward declaration
class ReverbGui; // forward declaration
class PeqGui; // forward declaration
class WhawhaGui; // forward declaration
class AlienwahGui; // forward declaration
class CabinetGui; // forward declaration
class PanGui; // forward declaration
class HarGui; // forward declaration
class MusdelayGui; // forward declaration
class GateGui; // forward declaration
class NewdistGui; // forward declaration
class AphaserGui; // forward declaration
class ValveGui; // forward declaration
class DflangeGui; // forward declaration
class RingGui; // forward declaration
class ExciterGui; // forward declaration
class MbdistGui; // forward declaration
class ArpieGui; // forward declaration
class ExpanderGui; // forward declaration
class ShuffleGui; // forward declaration
class SynthfilterGui; // forward declaration
class MbvvolGui; // forward declaration
class ConvoGui; // forward declaration
class LooperGui; // forward declaration
class RyanwahGui; // forward declaration
class RbechoGui; // forward declaration
class CoilGui; // forward declaration
class ShelfGui; // forward declaration
class SustainGui; // forward declaration
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Button.H>
#include "scope.h"
#include "eq_gui.h"
#include "compress_gui.h"
#include "dist_gui.h"
#include "ovrd_gui.h"
#include "echo_gui.h"
#include "chorus_gui.h"
#include "phaser_gui.h"
#include "flanger_gui.h"
#include "reverb_gui.h"
#include "peq_gui.h"
#include "whawha_gui.h"
#include "alienwah_gui.h"
#include "cabinet_gui.h"
#include "pan_gui.h"
#include "har_gui.h"
#include "musdelay_gui.h"
#include "gate_gui.h"
#include "newdist_gui.h"
#include "aphaser_gui.h"
#include "valve_gui.h"
#include "dflange_gui.h"
#include "ring_gui.h"
#include "exciter_gui.h"
#include "mbdist_gui.h"
#include "arpie_gui.h"
#include "expander_gui.h"
#include "shuffle_gui.h"
#include "synthfilter_gui.h"
#include "mbvvol_gui.h"
#include "convo_gui.h"
#include "looper_gui.h"
#include "ryanwah_gui.h"
#include "rbecho_gui.h"
#include "coil_gui.h"
#include "shelf_gui.h"
#include <FL/Fl_Group.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Choice.H>
#include "sustain_gui.h"
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Counter.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Input.H>
#include "analyzer.h"
#include <FL/Fl_Browser.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_File_Input.H>
#include <FL/Fl_Scroll.H>

class RKRGUI {
  int made; 
  Fl_Help_Dialog *visor; 
  struct list_element *mBankNameList;
  struct list_element *mBankNameListTail;
public:
  Fl_Double_Window* make_window();
  Fl_Double_Window *Principal;
private:
  inline void cb_Principal_i(Fl_Double_Window*, void*);
  static void cb_Principal(Fl_Double_Window*, void*);
public:
  Fl_Box *fondo;
  Fl_Menu_Bar *MenuP;
  static Fl_Menu_Item menu_MenuP[];
  static Fl_Menu_Item *Archivo;
  static Fl_Menu_Item *Menu_New;
private:
  inline void cb_Menu_New_i(Fl_Menu_*, void*);
  static void cb_Menu_New(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Load_Preset;
private:
  inline void cb_Load_Preset_i(Fl_Menu_*, void*);
  static void cb_Load_Preset(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_Preset;
private:
  inline void cb_Save_Preset_i(Fl_Menu_*, void*);
  static void cb_Save_Preset(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Load_Bank_M;
private:
  inline void cb_Load_Bank_M_i(Fl_Menu_*, void*);
  static void cb_Load_Bank_M(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_Bank_M;
private:
  inline void cb_Save_Bank_M_i(Fl_Menu_*, void*);
  static void cb_Save_Bank_M(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Load_Skin;
private:
  inline void cb_Load_Skin_i(Fl_Menu_*, void*);
  static void cb_Load_Skin(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_Skin;
private:
  inline void cb_Save_Skin_i(Fl_Menu_*, void*);
  static void cb_Save_Skin(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Load_MTable;
private:
  inline void cb_Load_MTable_i(Fl_Menu_*, void*);
  static void cb_Load_MTable(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_MTable;
private:
  inline void cb_Save_MTable_i(Fl_Menu_*, void*);
  static void cb_Save_MTable(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ConvertReverb;
private:
  inline void cb_ConvertReverb_i(Fl_Menu_*, void*);
  static void cb_ConvertReverb(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ImportPresets;
private:
  inline void cb_ImportPresets_i(Fl_Menu_*, void*);
  static void cb_ImportPresets(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *salir;
private:
  inline void cb_salir_i(Fl_Menu_*, void*);
  static void cb_salir(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Bank_Menu;
private:
  inline void cb_Bank_Menu_i(Fl_Menu_*, void*);
  static void cb_Bank_Menu(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Ajustes;
private:
  inline void cb_Ajustes_i(Fl_Menu_*, void*);
  static void cb_Ajustes(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ML_Menu;
private:
  inline void cb_ML_Menu_i(Fl_Menu_*, void*);
  static void cb_ML_Menu(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ACI_Menu;
private:
  inline void cb_ACI_Menu_i(Fl_Menu_*, void*);
  static void cb_ACI_Menu(Fl_Menu_*, void*);
  inline void cb_Fullscreen_i(Fl_Menu_*, void*);
  static void cb_Fullscreen(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Ayuda;
  static Fl_Menu_Item *Contenido;
private:
  inline void cb_Contenido_i(Fl_Menu_*, void*);
  static void cb_Contenido(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Acerca_de;
private:
  inline void cb_Acerca_de_i(Fl_Menu_*, void*);
  static void cb_Acerca_de(Fl_Menu_*, void*);
public:
  Fl_Box *MT;
private:
  inline void cb_MT_i(Fl_Box*, void*);
  static void cb_MT(Fl_Box*, void*);
public:
  Fl_Button *TITTLE_L;
private:
  inline void cb_TITTLE_L_i(Fl_Button*, void*);
  static void cb_TITTLE_L(Fl_Button*, void*);
public:
  Fl_Box *LMT_LED;
  Fl_Box *CLIP_LED;
  Fl_Box *UPS_LED;
  Fl_Box *P_MIN_ST;
  Fl_Box *P_MOUT_ST;
  Fl_Box *P_AUX_ST;
  Fl_Box *P_IN_ST;
  Fl_Box *P_OUT_ST;
  Fl_Box *CPULOAD;
  Scope *Sco;
  Fl_Box *E1;
  Fl_Box *E2;
  Fl_Box *E3;
  Fl_Box *E4;
  Fl_Box *E5;
  Fl_Box *E6;
  Fl_Box *E7;
  Fl_Box *E8;
  Fl_Box *E9;
  Fl_Box *E10;
  Fl_Box *L1;
  Fl_Box *L2;
  Fl_Box *L3;
  Fl_Box *L4;
  Fl_Box *L5;
  Fl_Box *L6;
  Fl_Box *L7;
  Fl_Box *L8;
  Fl_Box *L9;
  Fl_Box *L10;
  EqGui *EQ;
  CompressGui *COMPRESS;
  DistGui *DIST;
  OvrdGui *OVRD;
  EchoGui *ECHO;
  ChorusGui *CHORUS;
  PhaserGui *PHASER;
  FlangerGui *FLANGER;
  ReverbGui *REVERB;
  PeqGui *PEQ;
  WhawhaGui *WHAWHA;
  AlienwahGui *ALIENWAH;
  CabinetGui *CABINET;
  PanGui *PAN;
  HarGui *HAR;
  MusdelayGui *MUSDELAY;
  GateGui *GATE;
  NewdistGui *NEWDIST;
  AphaserGui *APHASER;
  ValveGui *VALVE;
  DflangeGui *DFLANGE;
  RingGui *RING;
  ExciterGui *EXCITER;
  MbdistGui *MBDIST;
  ArpieGui *ARPIE;
  ExpanderGui *EXPANDER;
  ShuffleGui *SHUFFLE;
  SynthfilterGui *SYNTHFILTER;
  MbvvolGui *MBVVOL;
  ConvoGui *CONVOLOTRON;
  LooperGui *LOOPER;
  RyanwahGui *RYANWAH;
  RbechoGui *RBECHO;
  CoilGui *COILCRAFTER;
  ShelfGui *SHELFBOOST;
  Fl_Group *VOCODER;
  Fl_Light_Button *vo_activar;
private:
  inline void cb_vo_activar_i(Fl_Light_Button*, void*);
  static void cb_vo_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *vo_preset;
private:
  inline void cb_vo_preset_i(Fl_Choice*, void*);
  static void cb_vo_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_vo_preset[];
public:
  SliderW *vo_WD;
private:
  inline void cb_vo_WD_i(SliderW*, void*);
  static void cb_vo_WD(SliderW*, void*);
public:
  SliderW *vo_pan;
private:
  inline void cb_vo_pan_i(SliderW*, void*);
  static void cb_vo_pan(SliderW*, void*);
public:
  SliderW *vo_input;
private:
  inline void cb_vo_input_i(SliderW*, void*);
  static void cb_vo_input(SliderW*, void*);
public:
  SliderW *vo_mu;
private:
  inline void cb_vo_mu_i(SliderW*, void*);
  static void cb_vo_mu(SliderW*, void*);
public:
  SliderW *vo_q;
private:
  inline void cb_vo_q_i(SliderW*, void*);
  static void cb_vo_q(SliderW*, void*);
public:
  SliderW *vo_ring;
private:
  inline void cb_vo_ring_i(SliderW*, void*);
  static void cb_vo_ring(SliderW*, void*);
public:
  SliderW *vo_level;
private:
  inline void cb_vo_level_i(SliderW*, void*);
  static void cb_vo_level(SliderW*, void*);
public:
  NewVum *vu_vu;
  SustainGui *SUSTAINER;
  Fl_Group *SEQUENCE;
  Fl_Light_Button *seq_activar;
private:
  inline void cb_seq_activar_i(Fl_Light_Button*, void*);
  static void cb_seq_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *seq_preset;
private:
  inline void cb_seq_preset_i(Fl_Choice*, void*);
  static void cb_seq_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_seq_preset[];
public:
  SliderW *seq_WD;
private:
  inline void cb_seq_WD_i(SliderW*, void*);
  static void cb_seq_WD(SliderW*, void*);
public:
  SliderW *seq_1;
private:
  inline void cb_seq_1_i(SliderW*, void*);
  static void cb_seq_1(SliderW*, void*);
public:
  SliderW *seq_2;
private:
  inline void cb_seq_2_i(SliderW*, void*);
  static void cb_seq_2(SliderW*, void*);
public:
  SliderW *seq_3;
private:
  inline void cb_seq_3_i(SliderW*, void*);
  static void cb_seq_3(SliderW*, void*);
public:
  SliderW *seq_4;
private:
  inline void cb_seq_4_i(SliderW*, void*);
  static void cb_seq_4(SliderW*, void*);
public:
  SliderW *seq_5;
private:
  inline void cb_seq_5_i(SliderW*, void*);
  static void cb_seq_5(SliderW*, void*);
public:
  SliderW *seq_6;
private:
  inline void cb_seq_6_i(SliderW*, void*);
  static void cb_seq_6(SliderW*, void*);
public:
  SliderW *seq_7;
private:
  inline void cb_seq_7_i(SliderW*, void*);
  static void cb_seq_7(SliderW*, void*);
public:
  SliderW *seq_8;
private:
  inline void cb_seq_8_i(SliderW*, void*);
  static void cb_seq_8(SliderW*, void*);
public:
  SliderW *seq_tempo;
private:
  inline void cb_seq_tempo_i(SliderW*, void*);
  static void cb_seq_tempo(SliderW*, void*);
public:
  SliderW *seq_q;
private:
  inline void cb_seq_q_i(SliderW*, void*);
  static void cb_seq_q(SliderW*, void*);
public:
  SliderW *seq_stdf;
private:
  inline void cb_seq_stdf_i(SliderW*, void*);
  static void cb_seq_stdf(SliderW*, void*);
public:
  Fl_Check_Button *seq_amp;
private:
  inline void cb_seq_amp_i(Fl_Check_Button*, void*);
  static void cb_seq_amp(Fl_Check_Button*, void*);
public:
  Fl_Choice *seq_mode;
private:
  inline void cb_seq_mode_i(Fl_Choice*, void*);
  static void cb_seq_mode(Fl_Choice*, void*);
  static Fl_Menu_Item menu_seq_mode[];
public:
  Fl_Counter *seq_range;
private:
  inline void cb_seq_range_i(Fl_Counter*, void*);
  static void cb_seq_range(Fl_Counter*, void*);
public:
  Fl_Group *SHIFTER;
  Fl_Light_Button *shifter_activar;
private:
  inline void cb_shifter_activar_i(Fl_Light_Button*, void*);
  static void cb_shifter_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *shifter_preset;
private:
  inline void cb_shifter_preset_i(Fl_Choice*, void*);
  static void cb_shifter_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_shifter_preset[];
public:
  SliderW *shifter_WD;
private:
  inline void cb_shifter_WD_i(SliderW*, void*);
  static void cb_shifter_WD(SliderW*, void*);
public:
  SliderW *shifter_int;
private:
  inline void cb_shifter_int_i(SliderW*, void*);
  static void cb_shifter_int(SliderW*, void*);
public:
  SliderW *shifter_gain;
private:
  inline void cb_shifter_gain_i(SliderW*, void*);
  static void cb_shifter_gain(SliderW*, void*);
public:
  SliderW *shifter_pan;
private:
  inline void cb_shifter_pan_i(SliderW*, void*);
  static void cb_shifter_pan(SliderW*, void*);
public:
  SliderW *shifter_attack;
private:
  inline void cb_shifter_attack_i(SliderW*, void*);
  static void cb_shifter_attack(SliderW*, void*);
public:
  SliderW *shifter_decay;
private:
  inline void cb_shifter_decay_i(SliderW*, void*);
  static void cb_shifter_decay(SliderW*, void*);
public:
  SliderW *shifter_thre;
private:
  inline void cb_shifter_thre_i(SliderW*, void*);
  static void cb_shifter_thre(SliderW*, void*);
public:
  Fl_Check_Button *shifter_ud;
private:
  inline void cb_shifter_ud_i(Fl_Check_Button*, void*);
  static void cb_shifter_ud(Fl_Check_Button*, void*);
public:
  SliderW *shifter_whammy;
private:
  inline void cb_shifter_whammy_i(SliderW*, void*);
  static void cb_shifter_whammy(SliderW*, void*);
public:
  Fl_Choice *shifter_mode;
private:
  inline void cb_shifter_mode_i(Fl_Choice*, void*);
  static void cb_shifter_mode(Fl_Choice*, void*);
  static Fl_Menu_Item menu_shifter_mode[];
public:
  Fl_Group *STOMPBOX;
  Fl_Light_Button *stomp_activar;
private:
  inline void cb_stomp_activar_i(Fl_Light_Button*, void*);
  static void cb_stomp_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *stomp_preset;
private:
  inline void cb_stomp_preset_i(Fl_Choice*, void*);
  static void cb_stomp_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_stomp_preset[];
public:
  SliderW *stomp_WD;
private:
  inline void cb_stomp_WD_i(SliderW*, void*);
  static void cb_stomp_WD(SliderW*, void*);
public:
  SliderW *stomp_gain;
private:
  inline void cb_stomp_gain_i(SliderW*, void*);
  static void cb_stomp_gain(SliderW*, void*);
public:
  SliderW *stomp_low;
private:
  inline void cb_stomp_low_i(SliderW*, void*);
  static void cb_stomp_low(SliderW*, void*);
public:
  SliderW *stomp_mid;
private:
  inline void cb_stomp_mid_i(SliderW*, void*);
  static void cb_stomp_mid(SliderW*, void*);
public:
  SliderW *stomp_high;
private:
  inline void cb_stomp_high_i(SliderW*, void*);
  static void cb_stomp_high(SliderW*, void*);
public:
  Fl_Choice *stomp_mode;
private:
  inline void cb_stomp_mode_i(Fl_Choice*, void*);
  static void cb_stomp_mode(Fl_Choice*, void*);
  static Fl_Menu_Item menu_stomp_mode[];
public:
  Fl_Group *REVERBTRON;
  Fl_Light_Button *revtron_activar;
private:
  inline void cb_revtron_activar_i(Fl_Light_Button*, void*);
  static void cb_revtron_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *revtron_preset;
private:
  inline void cb_revtron_preset_i(Fl_Choice*, void*);
  static void cb_revtron_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_revtron_preset[];
public:
  SliderW *revtron_WD;
private:
  inline void cb_revtron_WD_i(SliderW*, void*);
  static void cb_revtron_WD(SliderW*, void*);
public:
  SliderW *revtron_pan;
private:
  inline void cb_revtron_pan_i(SliderW*, void*);
  static void cb_revtron_pan(SliderW*, void*);
public:
  SliderW *revtron_level;
private:
  inline void cb_revtron_level_i(SliderW*, void*);
  static void cb_revtron_level(SliderW*, void*);
public:
  SliderW *revtron_damp;
private:
  inline void cb_revtron_damp_i(SliderW*, void*);
  static void cb_revtron_damp(SliderW*, void*);
public:
  SliderW *revtron_fb;
private:
  inline void cb_revtron_fb_i(SliderW*, void*);
  static void cb_revtron_fb(SliderW*, void*);
public:
  SliderW *revtron_length;
private:
  inline void cb_revtron_length_i(SliderW*, void*);
  static void cb_revtron_length(SliderW*, void*);
public:
  SliderW *revtron_strech;
private:
  inline void cb_revtron_strech_i(SliderW*, void*);
  static void cb_revtron_strech(SliderW*, void*);
public:
  SliderW *revtron_idelay;
private:
  inline void cb_revtron_idelay_i(SliderW*, void*);
  static void cb_revtron_idelay(SliderW*, void*);
public:
  SliderW *revtron_fade;
private:
  inline void cb_revtron_fade_i(SliderW*, void*);
  static void cb_revtron_fade(SliderW*, void*);
public:
  SliderW *revtron_HPF;
private:
  inline void cb_revtron_HPF_i(SliderW*, void*);
  static void cb_revtron_HPF(SliderW*, void*);
public:
  SliderW *revtron_LPF;
private:
  inline void cb_revtron_LPF_i(SliderW*, void*);
  static void cb_revtron_LPF(SliderW*, void*);
public:
  Fl_Check_Button *revtron_rv;
private:
  inline void cb_revtron_rv_i(Fl_Check_Button*, void*);
  static void cb_revtron_rv(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *revtron_es;
private:
  inline void cb_revtron_es_i(Fl_Check_Button*, void*);
  static void cb_revtron_es(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *revtron_safe;
private:
  inline void cb_revtron_safe_i(Fl_Check_Button*, void*);
  static void cb_revtron_safe(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *revtron_user;
private:
  inline void cb_revtron_user_i(Fl_Check_Button*, void*);
  static void cb_revtron_user(Fl_Check_Button*, void*);
public:
  Fl_Button *B_rvb;
private:
  inline void cb_B_rvb_i(Fl_Button*, void*);
  static void cb_B_rvb(Fl_Button*, void*);
public:
  Fl_Choice *revtron_fnum;
private:
  inline void cb_revtron_fnum_i(Fl_Choice*, void*);
  static void cb_revtron_fnum(Fl_Choice*, void*);
  static Fl_Menu_Item menu_revtron_fnum[];
public:
  Fl_Group *ECHOTRON;
  Fl_Light_Button *echotron_activar;
private:
  inline void cb_echotron_activar_i(Fl_Light_Button*, void*);
  static void cb_echotron_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *echotron_preset;
private:
  inline void cb_echotron_preset_i(Fl_Choice*, void*);
  static void cb_echotron_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_echotron_preset[];
public:
  SliderW *echotron_WD;
private:
  inline void cb_echotron_WD_i(SliderW*, void*);
  static void cb_echotron_WD(SliderW*, void*);
public:
  SliderW *echotron_pan;
private:
  inline void cb_echotron_pan_i(SliderW*, void*);
  static void cb_echotron_pan(SliderW*, void*);
public:
  SliderW *echotron_tempo;
private:
  inline void cb_echotron_tempo_i(SliderW*, void*);
  static void cb_echotron_tempo(SliderW*, void*);
public:
  SliderW *echotron_damp;
private:
  inline void cb_echotron_damp_i(SliderW*, void*);
  static void cb_echotron_damp(SliderW*, void*);
public:
  SliderW *echotron_fb;
private:
  inline void cb_echotron_fb_i(SliderW*, void*);
  static void cb_echotron_fb(SliderW*, void*);
public:
  SliderW *echotron_lrcross;
private:
  inline void cb_echotron_lrcross_i(SliderW*, void*);
  static void cb_echotron_lrcross(SliderW*, void*);
public:
  SliderW *echotron_width;
private:
  inline void cb_echotron_width_i(SliderW*, void*);
  static void cb_echotron_width(SliderW*, void*);
public:
  SliderW *echotron_deep;
private:
  inline void cb_echotron_deep_i(SliderW*, void*);
  static void cb_echotron_deep(SliderW*, void*);
public:
  SliderW *echotron_stdf;
private:
  inline void cb_echotron_stdf_i(SliderW*, void*);
  static void cb_echotron_stdf(SliderW*, void*);
public:
  Fl_Check_Button *echotron_af;
private:
  inline void cb_echotron_af_i(Fl_Check_Button*, void*);
  static void cb_echotron_af(Fl_Check_Button*, void*);
public:
  Fl_Choice *echotron_lfotype;
private:
  inline void cb_echotron_lfotype_i(Fl_Choice*, void*);
  static void cb_echotron_lfotype(Fl_Choice*, void*);
public:
  Fl_Check_Button *echotron_mf;
private:
  inline void cb_echotron_mf_i(Fl_Check_Button*, void*);
  static void cb_echotron_mf(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *echotron_md;
private:
  inline void cb_echotron_md_i(Fl_Check_Button*, void*);
  static void cb_echotron_md(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *echotron_user;
private:
  inline void cb_echotron_user_i(Fl_Check_Button*, void*);
  static void cb_echotron_user(Fl_Check_Button*, void*);
public:
  Fl_Button *B_ech;
private:
  inline void cb_B_ech_i(Fl_Button*, void*);
  static void cb_B_ech(Fl_Button*, void*);
public:
  Fl_Counter *echotron_length;
private:
  inline void cb_echotron_length_i(Fl_Counter*, void*);
  static void cb_echotron_length(Fl_Counter*, void*);
public:
  Fl_Choice *echotron_fnum;
private:
  inline void cb_echotron_fnum_i(Fl_Choice*, void*);
  static void cb_echotron_fnum(Fl_Choice*, void*);
  static Fl_Menu_Item menu_echotron_fnum[];
public:
  Fl_Group *SHAR;
  Fl_Light_Button *shar_activar;
private:
  inline void cb_shar_activar_i(Fl_Light_Button*, void*);
  static void cb_shar_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *shar_preset;
private:
  inline void cb_shar_preset_i(Fl_Choice*, void*);
  static void cb_shar_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_shar_preset[];
public:
  SliderW *shar_WD;
private:
  inline void cb_shar_WD_i(SliderW*, void*);
  static void cb_shar_WD(SliderW*, void*);
public:
  SliderW *shar_intl;
private:
  inline void cb_shar_intl_i(SliderW*, void*);
  static void cb_shar_intl(SliderW*, void*);
public:
  SliderW *shar_chl;
private:
  inline void cb_shar_chl_i(SliderW*, void*);
  static void cb_shar_chl(SliderW*, void*);
public:
  SliderW *shar_ganl;
private:
  inline void cb_shar_ganl_i(SliderW*, void*);
  static void cb_shar_ganl(SliderW*, void*);
public:
  SliderW *shar_intr;
private:
  inline void cb_shar_intr_i(SliderW*, void*);
  static void cb_shar_intr(SliderW*, void*);
public:
  SliderW *shar_chr;
private:
  inline void cb_shar_chr_i(SliderW*, void*);
  static void cb_shar_chr(SliderW*, void*);
public:
  SliderW *shar_ganr;
private:
  inline void cb_shar_ganr_i(SliderW*, void*);
  static void cb_shar_ganr(SliderW*, void*);
public:
  SliderW *shar_lrc;
private:
  inline void cb_shar_lrc_i(SliderW*, void*);
  static void cb_shar_lrc(SliderW*, void*);
public:
  Fl_Check_Button *shar_MIDI;
private:
  inline void cb_shar_MIDI_i(Fl_Check_Button*, void*);
  static void cb_shar_MIDI(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *shar_SELECT;
private:
  inline void cb_shar_SELECT_i(Fl_Check_Button*, void*);
  static void cb_shar_SELECT(Fl_Check_Button*, void*);
public:
  Fl_Box *shar_chordname;
  SliderW *shar_note;
private:
  inline void cb_shar_note_i(SliderW*, void*);
  static void cb_shar_note(SliderW*, void*);
public:
  SliderW *shar_type;
private:
  inline void cb_shar_type_i(SliderW*, void*);
  static void cb_shar_type(SliderW*, void*);
public:
  Fl_Group *COMPBAND;
  Fl_Light_Button *cband_activar;
private:
  inline void cb_cband_activar_i(Fl_Light_Button*, void*);
  static void cb_cband_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *cband_preset;
private:
  inline void cb_cband_preset_i(Fl_Choice*, void*);
  static void cb_cband_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_cband_preset[];
public:
  SliderW *cband_WD;
private:
  inline void cb_cband_WD_i(SliderW*, void*);
  static void cb_cband_WD(SliderW*, void*);
public:
  SliderW *cband_gain;
private:
  inline void cb_cband_gain_i(SliderW*, void*);
  static void cb_cband_gain(SliderW*, void*);
public:
  SliderW *cband_Lratio;
private:
  inline void cb_cband_Lratio_i(SliderW*, void*);
  static void cb_cband_Lratio(SliderW*, void*);
public:
  SliderW *cband_MLratio;
private:
  inline void cb_cband_MLratio_i(SliderW*, void*);
  static void cb_cband_MLratio(SliderW*, void*);
public:
  SliderW *cband_MHratio;
private:
  inline void cb_cband_MHratio_i(SliderW*, void*);
  static void cb_cband_MHratio(SliderW*, void*);
public:
  SliderW *cband_Hratio;
private:
  inline void cb_cband_Hratio_i(SliderW*, void*);
  static void cb_cband_Hratio(SliderW*, void*);
public:
  SliderW *cband_Lthres;
private:
  inline void cb_cband_Lthres_i(SliderW*, void*);
  static void cb_cband_Lthres(SliderW*, void*);
public:
  SliderW *cband_MLthres;
private:
  inline void cb_cband_MLthres_i(SliderW*, void*);
  static void cb_cband_MLthres(SliderW*, void*);
public:
  SliderW *cband_MHthres;
private:
  inline void cb_cband_MHthres_i(SliderW*, void*);
  static void cb_cband_MHthres(SliderW*, void*);
public:
  SliderW *cband_Hthres;
private:
  inline void cb_cband_Hthres_i(SliderW*, void*);
  static void cb_cband_Hthres(SliderW*, void*);
public:
  SliderW *cband_cross1;
private:
  inline void cb_cband_cross1_i(SliderW*, void*);
  static void cb_cband_cross1(SliderW*, void*);
public:
  SliderW *cband_cross2;
private:
  inline void cb_cband_cross2_i(SliderW*, void*);
  static void cb_cband_cross2(SliderW*, void*);
public:
  SliderW *cband_cross3;
private:
  inline void cb_cband_cross3_i(SliderW*, void*);
  static void cb_cband_cross3(SliderW*, void*);
public:
  Fl_Group *OTREM;
  Fl_Light_Button *otrem_activar;
private:
  inline void cb_otrem_activar_i(Fl_Light_Button*, void*);
  static void cb_otrem_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *otrem_preset;
private:
  inline void cb_otrem_preset_i(Fl_Choice*, void*);
  static void cb_otrem_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_otrem_preset[];
public:
  SliderW *otrem_dpth;
private:
  inline void cb_otrem_dpth_i(SliderW*, void*);
  static void cb_otrem_dpth(SliderW*, void*);
public:
  SliderW *otrem_freq;
private:
  inline void cb_otrem_freq_i(SliderW*, void*);
  static void cb_otrem_freq(SliderW*, void*);
public:
  SliderW *otrem_rnd;
private:
  inline void cb_otrem_rnd_i(SliderW*, void*);
  static void cb_otrem_rnd(SliderW*, void*);
public:
  Fl_Choice *otrem_lfotype;
private:
  inline void cb_otrem_lfotype_i(Fl_Choice*, void*);
  static void cb_otrem_lfotype(Fl_Choice*, void*);
public:
  SliderW *otrem_stdf;
private:
  inline void cb_otrem_stdf_i(SliderW*, void*);
  static void cb_otrem_stdf(SliderW*, void*);
public:
  SliderW *otrem_pan;
private:
  inline void cb_otrem_pan_i(SliderW*, void*);
  static void cb_otrem_pan(SliderW*, void*);
public:
  Fl_Check_Button *otrem_invert;
private:
  inline void cb_otrem_invert_i(Fl_Check_Button*, void*);
  static void cb_otrem_invert(Fl_Check_Button*, void*);
public:
  Fl_Group *VIBE;
  Fl_Light_Button *vibe_activar;
private:
  inline void cb_vibe_activar_i(Fl_Light_Button*, void*);
  static void cb_vibe_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *vibe_preset;
private:
  inline void cb_vibe_preset_i(Fl_Choice*, void*);
  static void cb_vibe_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_vibe_preset[];
public:
  SliderW *vibe_WD;
private:
  inline void cb_vibe_WD_i(SliderW*, void*);
  static void cb_vibe_WD(SliderW*, void*);
public:
  SliderW *vibe_width;
private:
  inline void cb_vibe_width_i(SliderW*, void*);
  static void cb_vibe_width(SliderW*, void*);
public:
  SliderW *vibe_dpth;
private:
  inline void cb_vibe_dpth_i(SliderW*, void*);
  static void cb_vibe_dpth(SliderW*, void*);
public:
  SliderW *vibe_freq;
private:
  inline void cb_vibe_freq_i(SliderW*, void*);
  static void cb_vibe_freq(SliderW*, void*);
public:
  SliderW *vibe_rnd;
private:
  inline void cb_vibe_rnd_i(SliderW*, void*);
  static void cb_vibe_rnd(SliderW*, void*);
public:
  Fl_Choice *vibe_lfotype;
private:
  inline void cb_vibe_lfotype_i(Fl_Choice*, void*);
  static void cb_vibe_lfotype(Fl_Choice*, void*);
public:
  SliderW *vibe_stdf;
private:
  inline void cb_vibe_stdf_i(SliderW*, void*);
  static void cb_vibe_stdf(SliderW*, void*);
public:
  SliderW *vibe_fb;
private:
  inline void cb_vibe_fb_i(SliderW*, void*);
  static void cb_vibe_fb(SliderW*, void*);
public:
  SliderW *vibe_LR;
private:
  inline void cb_vibe_LR_i(SliderW*, void*);
  static void cb_vibe_LR(SliderW*, void*);
public:
  SliderW *vibe_pan;
private:
  inline void cb_vibe_pan_i(SliderW*, void*);
  static void cb_vibe_pan(SliderW*, void*);
public:
  Fl_Check_Button *vibe_stereo;
private:
  inline void cb_vibe_stereo_i(Fl_Check_Button*, void*);
  static void cb_vibe_stereo(Fl_Check_Button*, void*);
public:
  Fl_Group *INFINIT;
  Fl_Light_Button *infinity_activar;
private:
  inline void cb_infinity_activar_i(Fl_Light_Button*, void*);
  static void cb_infinity_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *infinity_preset;
private:
  inline void cb_infinity_preset_i(Fl_Choice*, void*);
  static void cb_infinity_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_infinity_preset[];
public:
  SliderW *infinity_WD;
private:
  inline void cb_infinity_WD_i(SliderW*, void*);
  static void cb_infinity_WD(SliderW*, void*);
public:
  SliderW *infinity_Q;
private:
  inline void cb_infinity_Q_i(SliderW*, void*);
  static void cb_infinity_Q(SliderW*, void*);
public:
  Fl_Value_Input *infinity_1;
private:
  inline void cb_infinity_1_i(Fl_Value_Input*, void*);
  static void cb_infinity_1(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *infinity_2;
private:
  inline void cb_infinity_2_i(Fl_Value_Input*, void*);
  static void cb_infinity_2(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *infinity_3;
private:
  inline void cb_infinity_3_i(Fl_Value_Input*, void*);
  static void cb_infinity_3(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *infinity_4;
private:
  inline void cb_infinity_4_i(Fl_Value_Input*, void*);
  static void cb_infinity_4(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *infinity_5;
private:
  inline void cb_infinity_5_i(Fl_Value_Input*, void*);
  static void cb_infinity_5(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *infinity_6;
private:
  inline void cb_infinity_6_i(Fl_Value_Input*, void*);
  static void cb_infinity_6(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *infinity_7;
private:
  inline void cb_infinity_7_i(Fl_Value_Input*, void*);
  static void cb_infinity_7(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *infinity_8;
private:
  inline void cb_infinity_8_i(Fl_Value_Input*, void*);
  static void cb_infinity_8(Fl_Value_Input*, void*);
public:
  Fl_Check_Button *infinity_rev;
private:
  inline void cb_infinity_rev_i(Fl_Check_Button*, void*);
  static void cb_infinity_rev(Fl_Check_Button*, void*);
public:
  Fl_Counter *infinity_stages;
private:
  inline void cb_infinity_stages_i(Fl_Counter*, void*);
  static void cb_infinity_stages(Fl_Counter*, void*);
public:
  SliderW *infinity_pan;
private:
  inline void cb_infinity_pan_i(SliderW*, void*);
  static void cb_infinity_pan(SliderW*, void*);
public:
  SliderW *infinity_stdf;
private:
  inline void cb_infinity_stdf_i(SliderW*, void*);
  static void cb_infinity_stdf(SliderW*, void*);
public:
  SliderW *infinity_start;
private:
  inline void cb_infinity_start_i(SliderW*, void*);
  static void cb_infinity_start(SliderW*, void*);
public:
  SliderW *infinity_end;
private:
  inline void cb_infinity_end_i(SliderW*, void*);
  static void cb_infinity_end(SliderW*, void*);
public:
  SliderW *infinity_rate;
private:
  inline void cb_infinity_rate_i(SliderW*, void*);
  static void cb_infinity_rate(SliderW*, void*);
public:
  SliderW *infinity_subdiv;
private:
  inline void cb_infinity_subdiv_i(SliderW*, void*);
  static void cb_infinity_subdiv(SliderW*, void*);
public:
  Fl_Group *Tuner;
  Fl_Light_Button *tuner_activar;
private:
  inline void cb_tuner_activar_i(Fl_Light_Button*, void*);
  static void cb_tuner_activar(Fl_Light_Button*, void*);
public:
  TunerBar *tuner_bar;
  Fl_Box *WNote;
  Fl_Box *WRfreq;
  Fl_Box *WNfreq;
  Fl_Box *PINCHO;
  Fl_Box *TUNER_LABEL;
  Fl_Group *InOut;
  Fl_Light_Button *ActivarGeneral;
private:
  inline void cb_ActivarGeneral_i(Fl_Light_Button*, void*);
  static void cb_ActivarGeneral(Fl_Light_Button*, void*);
public:
  Fl_Button *BostBut;
private:
  inline void cb_BostBut_i(Fl_Button*, void*);
  static void cb_BostBut(Fl_Button*, void*);
public:
  SliderW *Balance;
private:
  inline void cb_Balance_i(SliderW*, void*);
  static void cb_Balance(SliderW*, void*);
public:
  SliderW *Nivel_Entrada;
private:
  inline void cb_Nivel_Entrada_i(SliderW*, void*);
  static void cb_Nivel_Entrada(SliderW*, void*);
public:
  SliderW *Nivel_Salida;
private:
  inline void cb_Nivel_Salida_i(SliderW*, void*);
  static void cb_Nivel_Salida(SliderW*, void*);
public:
  NewVum *input_vul;
  NewVum *input_vur;
  NewVum *output_vul;
  NewVum *output_vur;
  Fl_Box *LABEL_IO;
  Fl_Group *Midi;
  Fl_Light_Button *midi_activar;
private:
  inline void cb_midi_activar_i(Fl_Light_Button*, void*);
  static void cb_midi_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *MIDIOctave;
private:
  inline void cb_MIDIOctave_i(Fl_Choice*, void*);
  static void cb_MIDIOctave(Fl_Choice*, void*);
  static Fl_Menu_Item menu_MIDIOctave[];
public:
  Fl_Counter *Midi_out_Counter;
private:
  inline void cb_Midi_out_Counter_i(Fl_Counter*, void*);
  static void cb_Midi_out_Counter(Fl_Counter*, void*);
public:
  Fl_Check_Button *Use_FFT;
private:
  inline void cb_Use_FFT_i(Fl_Check_Button*, void*);
  static void cb_Use_FFT(Fl_Check_Button*, void*);
public:
  SliderW *Trig_Adj;
private:
  inline void cb_Trig_Adj_i(SliderW*, void*);
  static void cb_Trig_Adj(SliderW*, void*);
public:
  SliderW *Vel_Adj;
private:
  inline void cb_Vel_Adj_i(SliderW*, void*);
  static void cb_Vel_Adj(SliderW*, void*);
public:
  Fl_Box *Mled;
  Fl_Box *MIDI_LABEL;
private:
  inline void cb_MIDI_LABEL_i(Fl_Box*, void*);
  static void cb_MIDI_LABEL(Fl_Box*, void*);
public:
  Fl_Group *Metro;
  Fl_Light_Button *metro_activar;
private:
  inline void cb_metro_activar_i(Fl_Light_Button*, void*);
  static void cb_metro_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *MetroBar;
private:
  inline void cb_MetroBar_i(Fl_Choice*, void*);
  static void cb_MetroBar(Fl_Choice*, void*);
public:
  SliderW *Metro_Volume;
private:
  inline void cb_Metro_Volume_i(SliderW*, void*);
  static void cb_Metro_Volume(SliderW*, void*);
public:
  Fl_Choice *MetroSound;
private:
  inline void cb_MetroSound_i(Fl_Choice*, void*);
  static void cb_MetroSound(Fl_Choice*, void*);
public:
  SliderW *Metro_Tempo;
private:
  inline void cb_Metro_Tempo_i(SliderW*, void*);
  static void cb_Metro_Tempo(SliderW*, void*);
public:
  Fl_Box *Metro_Led;
  Fl_Box *Metro_Label;
  Fl_Group *Presets;
  Fl_Box *PRESETS_LABEL;
  Fl_Button *L_B1;
private:
  inline void cb_L_B1_i(Fl_Button*, void*);
  static void cb_L_B1(Fl_Button*, void*);
public:
  Fl_Button *L_B2;
private:
  inline void cb_L_B2_i(Fl_Button*, void*);
  static void cb_L_B2(Fl_Button*, void*);
public:
  Fl_Button *L_B3;
private:
  inline void cb_L_B3_i(Fl_Button*, void*);
  static void cb_L_B3(Fl_Button*, void*);
public:
  Fl_Button *L_B4;
private:
  inline void cb_L_B4_i(Fl_Button*, void*);
  static void cb_L_B4(Fl_Button*, void*);
public:
  Fl_Button *S_new;
private:
  inline void cb_S_new_i(Fl_Button*, void*);
  static void cb_S_new(Fl_Button*, void*);
public:
  Fl_Button *L_preset;
private:
  inline void cb_L_preset_i(Fl_Button*, void*);
  static void cb_L_preset(Fl_Button*, void*);
public:
  Fl_Button *S_preset;
private:
  inline void cb_S_preset_i(Fl_Button*, void*);
  static void cb_S_preset(Fl_Button*, void*);
public:
  Fl_Light_Button *Compare;
private:
  inline void cb_Compare_i(Fl_Light_Button*, void*);
  static void cb_Compare(Fl_Light_Button*, void*);
public:
  Fl_Button *B_preset;
private:
  inline void cb_B_preset_i(Fl_Button*, void*);
  static void cb_B_preset(Fl_Button*, void*);
public:
  Fl_Input *WPreset_Name;
private:
  inline void cb_WPreset_Name_i(Fl_Input*, void*);
  static void cb_WPreset_Name(Fl_Input*, void*);
public:
  Fl_Counter *Preset_Counter;
private:
  inline void cb_Preset_Counter_i(Fl_Counter*, void*);
  static void cb_Preset_Counter(Fl_Counter*, void*);
public:
  Fl_Box *DAuthor;
  Fl_Button *RandomP;
private:
  inline void cb_RandomP_i(Fl_Button*, void*);
  static void cb_RandomP(Fl_Button*, void*);
public:
  Fl_Button *Open_Order;
private:
  inline void cb_Open_Order_i(Fl_Button*, void*);
  static void cb_Open_Order(Fl_Button*, void*);
public:
  Fl_Button *Etit;
private:
  inline void cb_Etit_i(Fl_Button*, void*);
  static void cb_Etit(Fl_Button*, void*);
public:
  Analyzer *Analy;
  Fl_Button *HideUE;
private:
  inline void cb_HideUE_i(Fl_Button*, void*);
  static void cb_HideUE(Fl_Button*, void*);
public:
  Fl_Button *SwitchMod;
private:
  inline void cb_SwitchMod_i(Fl_Button*, void*);
  static void cb_SwitchMod(Fl_Button*, void*);
public:
  Fl_Group *Tap;
  Fl_Light_Button *Tap_activar;
private:
  inline void cb_Tap_activar_i(Fl_Light_Button*, void*);
  static void cb_Tap_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *T_SEL;
private:
  inline void cb_T_SEL_i(Fl_Choice*, void*);
  static void cb_T_SEL(Fl_Choice*, void*);
  static Fl_Menu_Item menu_T_SEL[];
public:
  Fl_Choice *T_SET;
private:
  inline void cb_T_SET_i(Fl_Choice*, void*);
  static void cb_T_SET(Fl_Choice*, void*);
  static Fl_Menu_Item menu_T_SET[];
public:
  Fl_Button *T_Apply;
private:
  inline void cb_T_Apply_i(Fl_Button*, void*);
  static void cb_T_Apply(Fl_Button*, void*);
public:
  Fl_Button *T_BUT;
private:
  inline void cb_T_BUT_i(Fl_Button*, void*);
  static void cb_T_BUT(Fl_Button*, void*);
public:
  Fl_Box *TAP_LABEL;
  Fl_Value_Input *T_DIS;
private:
  inline void cb_T_DIS_i(Fl_Value_Input*, void*);
  static void cb_T_DIS(Fl_Value_Input*, void*);
public:
  Fl_Double_Window *BankWindow;
private:
  inline void cb_BankWindow_i(Fl_Double_Window*, void*);
  static void cb_BankWindow(Fl_Double_Window*, void*);
public:
  Fl_Box *Fondo3;
  Fl_Menu_Bar *MenuB;
  static Fl_Menu_Item menu_MenuB[];
  static Fl_Menu_Item *ArchivoB;
  static Fl_Menu_Item *NewB;
private:
  inline void cb_NewB_i(Fl_Menu_*, void*);
  static void cb_NewB(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Load_Bank;
private:
  inline void cb_Load_Bank_i(Fl_Menu_*, void*);
  static void cb_Load_Bank(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_Bank;
private:
  inline void cb_Save_Bank_i(Fl_Menu_*, void*);
  static void cb_Save_Bank(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Convert_Old_Bank;
private:
  inline void cb_Convert_Old_Bank_i(Fl_Menu_*, void*);
  static void cb_Convert_Old_Bank(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *salirB;
private:
  inline void cb_salirB_i(Fl_Menu_*, void*);
  static void cb_salirB(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *AyudaB;
  static Fl_Menu_Item *ContenidoB;
private:
  inline void cb_ContenidoB_i(Fl_Menu_*, void*);
  static void cb_ContenidoB(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Acerca_deB;
private:
  inline void cb_Acerca_deB_i(Fl_Menu_*, void*);
  static void cb_Acerca_deB(Fl_Menu_*, void*);
public:
  Fl_Button *B_B1;
private:
  inline void cb_B_B1_i(Fl_Button*, void*);
  static void cb_B_B1(Fl_Button*, void*);
public:
  Fl_Button *B_B2;
private:
  inline void cb_B_B2_i(Fl_Button*, void*);
  static void cb_B_B2(Fl_Button*, void*);
public:
  Fl_Button *B_B3;
private:
  inline void cb_B_B3_i(Fl_Button*, void*);
  static void cb_B_B3(Fl_Button*, void*);
public:
  Fl_Button *B_B4;
private:
  inline void cb_B_B4_i(Fl_Button*, void*);
  static void cb_B_B4(Fl_Button*, void*);
public:
  Fl_Choice *CH_UB;
private:
  inline void cb_CH_UB_i(Fl_Choice*, void*);
  static void cb_CH_UB(Fl_Choice*, void*);
public:
  Fl_Group *ob;
  Fl_Double_Window *Order;
private:
  inline void cb_Order_i(Fl_Double_Window*, void*);
  static void cb_Order(Fl_Double_Window*, void*);
public:
  Fl_Box *Fondo1;
  Fl_Box *O_TITLE;
  Fl_Browser *Avail_Bro;
  Fl_Button *Pon;
private:
  inline void cb_Pon_i(Fl_Button*, void*);
  static void cb_Pon(Fl_Button*, void*);
public:
  Fl_Browser *Order_Bro;
  Fl_Button *Sube;
private:
  inline void cb_Sube_i(Fl_Button*, void*);
  static void cb_Sube(Fl_Button*, void*);
public:
  Fl_Button *Baja;
private:
  inline void cb_Baja_i(Fl_Button*, void*);
  static void cb_Baja(Fl_Button*, void*);
public:
  Fl_Group *Filters;
  Fl_Button *Fil0;
private:
  inline void cb_Fil0_i(Fl_Button*, void*);
  static void cb_Fil0(Fl_Button*, void*);
public:
  Fl_Button *Fil1;
private:
  inline void cb_Fil1_i(Fl_Button*, void*);
  static void cb_Fil1(Fl_Button*, void*);
public:
  Fl_Button *Fil2;
private:
  inline void cb_Fil2_i(Fl_Button*, void*);
  static void cb_Fil2(Fl_Button*, void*);
public:
  Fl_Button *Fil4;
private:
  inline void cb_Fil4_i(Fl_Button*, void*);
  static void cb_Fil4(Fl_Button*, void*);
public:
  Fl_Button *Fil8;
private:
  inline void cb_Fil8_i(Fl_Button*, void*);
  static void cb_Fil8(Fl_Button*, void*);
public:
  Fl_Button *Fil16;
private:
  inline void cb_Fil16_i(Fl_Button*, void*);
  static void cb_Fil16(Fl_Button*, void*);
public:
  Fl_Button *Fil32;
private:
  inline void cb_Fil32_i(Fl_Button*, void*);
  static void cb_Fil32(Fl_Button*, void*);
public:
  Fl_Button *Fil64;
private:
  inline void cb_Fil64_i(Fl_Button*, void*);
  static void cb_Fil64(Fl_Button*, void*);
public:
  Fl_Button *Fil128;
private:
  inline void cb_Fil128_i(Fl_Button*, void*);
  static void cb_Fil128(Fl_Button*, void*);
public:
  Fl_Check_Button *Order_DeacHide;
private:
  inline void cb_Order_DeacHide_i(Fl_Check_Button*, void*);
  static void cb_Order_DeacHide(Fl_Check_Button*, void*);
public:
  Fl_Button *ok_order;
private:
  inline void cb_ok_order_i(Fl_Button*, void*);
  static void cb_ok_order(Fl_Button*, void*);
public:
  Fl_Button *Cancel_order;
private:
  inline void cb_Cancel_order_i(Fl_Button*, void*);
  static void cb_Cancel_order(Fl_Button*, void*);
public:
  Fl_Double_Window *Settings;
private:
  inline void cb_Settings_i(Fl_Double_Window*, void*);
  static void cb_Settings(Fl_Double_Window*, void*);
public:
  Fl_Box *Fondo2;
  Fl_Tabs *STabs;
  Fl_Group *Look;
  Fl_Box *Fondo6;
  Fl_Choice *scheme_ch;
private:
  inline void cb_scheme_ch_i(Fl_Choice*, void*);
  static void cb_scheme_ch(Fl_Choice*, void*);
  static Fl_Menu_Item menu_scheme_ch[];
public:
  Fl_Browser *Font_Bro;
private:
  inline void cb_Font_Bro_i(Fl_Browser*, void*);
  static void cb_Font_Bro(Fl_Browser*, void*);
public:
  Fl_Box *FSLabel;
  Fl_Button *FSless;
private:
  inline void cb_FSless_i(Fl_Button*, void*);
  static void cb_FSless(Fl_Button*, void*);
public:
  Fl_Button *FSplus;
private:
  inline void cb_FSplus_i(Fl_Button*, void*);
  static void cb_FSplus(Fl_Button*, void*);
public:
  Fl_Button *FSReset;
private:
  inline void cb_FSReset_i(Fl_Button*, void*);
  static void cb_FSReset(Fl_Button*, void*);
public:
  Fl_Box *CLLabel;
  Fl_Button *B_C;
private:
  inline void cb_B_C_i(Fl_Button*, void*);
  static void cb_B_C(Fl_Button*, void*);
public:
  Fl_Button *A_C;
private:
  inline void cb_A_C_i(Fl_Button*, void*);
  static void cb_A_C(Fl_Button*, void*);
public:
  Fl_Button *L_C;
private:
  inline void cb_L_C_i(Fl_Button*, void*);
  static void cb_L_C(Fl_Button*, void*);
public:
  Fl_Button *K_C;
private:
  inline void cb_K_C_i(Fl_Button*, void*);
  static void cb_K_C(Fl_Button*, void*);
public:
  Fl_Check_Button *Enable_Back;
private:
  inline void cb_Enable_Back_i(Fl_Check_Button*, void*);
  static void cb_Enable_Back(Fl_Check_Button*, void*);
public:
  Fl_File_Input *BackFiname;
  Fl_Button *BI_Browser;
private:
  inline void cb_BI_Browser_i(Fl_Button*, void*);
  static void cb_BI_Browser(Fl_Button*, void*);
public:
  Fl_Check_Button *Enable_DeacHide;
private:
  inline void cb_Enable_DeacHide_i(Fl_Check_Button*, void*);
  static void cb_Enable_DeacHide(Fl_Check_Button*, void*);
public:
  Fl_Group *AUDIO_SET;
  Fl_Box *Fondo7;
  Fl_Check_Button *INSTATE;
private:
  inline void cb_INSTATE_i(Fl_Check_Button*, void*);
  static void cb_INSTATE(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *Filter_DC;
private:
  inline void cb_Filter_DC_i(Fl_Check_Button*, void*);
  static void cb_Filter_DC(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *Pre_Serve;
private:
  inline void cb_Pre_Serve_i(Fl_Check_Button*, void*);
  static void cb_Pre_Serve(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *Update_TAP;
private:
  inline void cb_Update_TAP_i(Fl_Check_Button*, void*);
  static void cb_Update_TAP(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *UPSAMPLE_C;
private:
  inline void cb_UPSAMPLE_C_i(Fl_Check_Button*, void*);
  static void cb_UPSAMPLE_C(Fl_Check_Button*, void*);
public:
  Fl_Choice *Upr_Amo;
private:
  inline void cb_Upr_Amo_i(Fl_Choice*, void*);
  static void cb_Upr_Amo(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Upr_Amo[];
public:
  Fl_Choice *Upr_Qual;
private:
  inline void cb_Upr_Qual_i(Fl_Choice*, void*);
  static void cb_Upr_Qual(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Upr_Qual[];
public:
  Fl_Choice *Downr_Qual;
private:
  inline void cb_Downr_Qual_i(Fl_Choice*, void*);
  static void cb_Downr_Qual(Fl_Choice*, void*);
public:
  Fl_Counter *L_SIZE;
private:
  inline void cb_L_SIZE_i(Fl_Counter*, void*);
  static void cb_L_SIZE(Fl_Counter*, void*);
public:
  Fl_Counter *LM_Volume;
private:
  inline void cb_LM_Volume_i(Fl_Counter*, void*);
  static void cb_LM_Volume(Fl_Counter*, void*);
public:
  Fl_Choice *Har_Qual;
private:
  inline void cb_Har_Qual_i(Fl_Choice*, void*);
  static void cb_Har_Qual(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Har_Qual[];
public:
  Fl_Choice *Ste_Qual;
private:
  inline void cb_Ste_Qual_i(Fl_Choice*, void*);
  static void cb_Ste_Qual(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Ste_Qual[];
public:
  Fl_Choice *Voc_Bands;
private:
  inline void cb_Voc_Bands_i(Fl_Choice*, void*);
  static void cb_Voc_Bands(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Voc_Bands[];
public:
  Fl_Check_Button *FLPosition;
private:
  inline void cb_FLPosition_i(Fl_Check_Button*, void*);
  static void cb_FLPosition(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *DB6B;
private:
  inline void cb_DB6B_i(Fl_Check_Button*, void*);
  static void cb_DB6B(Fl_Check_Button*, void*);
public:
  Fl_Counter *Calibration;
private:
  inline void cb_Calibration_i(Fl_Counter*, void*);
  static void cb_Calibration(Fl_Counter*, void*);
public:
  Fl_Counter *RTrigger;
private:
  inline void cb_RTrigger_i(Fl_Counter*, void*);
  static void cb_RTrigger(Fl_Counter*, void*);
public:
  Fl_Choice *RC_Harm_Opti;
private:
  inline void cb_RC_Harm_Opti_i(Fl_Choice*, void*);
  static void cb_RC_Harm_Opti(Fl_Choice*, void*);
  static Fl_Menu_Item menu_RC_Harm_Opti[];
public:
  Fl_Choice *RC_St_Harm_Opti;
private:
  inline void cb_RC_St_Harm_Opti_i(Fl_Choice*, void*);
  static void cb_RC_St_Harm_Opti(Fl_Choice*, void*);
  static Fl_Menu_Item menu_RC_St_Harm_Opti[];
public:
  Fl_Choice *RC_Ring_Opti;
private:
  inline void cb_RC_Ring_Opti_i(Fl_Choice*, void*);
  static void cb_RC_Ring_Opti(Fl_Choice*, void*);
  static Fl_Menu_Item menu_RC_Ring_Opti[];
public:
  Fl_Choice *Har_Downsample;
private:
  inline void cb_Har_Downsample_i(Fl_Choice*, void*);
  static void cb_Har_Downsample(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Har_Downsample[];
public:
  Fl_Choice *Har_Down_Qua;
private:
  inline void cb_Har_Down_Qua_i(Fl_Choice*, void*);
  static void cb_Har_Down_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Har_Up_Qua;
private:
  inline void cb_Har_Up_Qua_i(Fl_Choice*, void*);
  static void cb_Har_Up_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Rev_Downsample;
private:
  inline void cb_Rev_Downsample_i(Fl_Choice*, void*);
  static void cb_Rev_Downsample(Fl_Choice*, void*);
public:
  Fl_Choice *Rev_Down_Qua;
private:
  inline void cb_Rev_Down_Qua_i(Fl_Choice*, void*);
  static void cb_Rev_Down_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Rev_Up_Qua;
private:
  inline void cb_Rev_Up_Qua_i(Fl_Choice*, void*);
  static void cb_Rev_Up_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Con_Downsample;
private:
  inline void cb_Con_Downsample_i(Fl_Choice*, void*);
  static void cb_Con_Downsample(Fl_Choice*, void*);
public:
  Fl_Choice *Con_Down_Qua;
private:
  inline void cb_Con_Down_Qua_i(Fl_Choice*, void*);
  static void cb_Con_Down_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Con_Up_Qua;
private:
  inline void cb_Con_Up_Qua_i(Fl_Choice*, void*);
  static void cb_Con_Up_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Seq_Downsample;
private:
  inline void cb_Seq_Downsample_i(Fl_Choice*, void*);
  static void cb_Seq_Downsample(Fl_Choice*, void*);
public:
  Fl_Choice *Seq_Down_Qua;
private:
  inline void cb_Seq_Down_Qua_i(Fl_Choice*, void*);
  static void cb_Seq_Down_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Seq_Up_Qua;
private:
  inline void cb_Seq_Up_Qua_i(Fl_Choice*, void*);
  static void cb_Seq_Up_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Shi_Downsample;
private:
  inline void cb_Shi_Downsample_i(Fl_Choice*, void*);
  static void cb_Shi_Downsample(Fl_Choice*, void*);
public:
  Fl_Choice *Shi_Down_Qua;
private:
  inline void cb_Shi_Down_Qua_i(Fl_Choice*, void*);
  static void cb_Shi_Down_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Shi_Up_Qua;
private:
  inline void cb_Shi_Up_Qua_i(Fl_Choice*, void*);
  static void cb_Shi_Up_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Voc_Downsample;
private:
  inline void cb_Voc_Downsample_i(Fl_Choice*, void*);
  static void cb_Voc_Downsample(Fl_Choice*, void*);
public:
  Fl_Choice *Voc_Down_Qua;
private:
  inline void cb_Voc_Down_Qua_i(Fl_Choice*, void*);
  static void cb_Voc_Down_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Voc_Up_Qua;
private:
  inline void cb_Voc_Up_Qua_i(Fl_Choice*, void*);
  static void cb_Voc_Up_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Ste_Downsample;
private:
  inline void cb_Ste_Downsample_i(Fl_Choice*, void*);
  static void cb_Ste_Downsample(Fl_Choice*, void*);
public:
  Fl_Choice *Ste_Down_Qua;
private:
  inline void cb_Ste_Down_Qua_i(Fl_Choice*, void*);
  static void cb_Ste_Down_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Ste_Up_Qua;
private:
  inline void cb_Ste_Up_Qua_i(Fl_Choice*, void*);
  static void cb_Ste_Up_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Wave_Amo;
private:
  inline void cb_Wave_Amo_i(Fl_Choice*, void*);
  static void cb_Wave_Amo(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Wave_Amo[];
public:
  Fl_Choice *Wave_Down_Qua;
private:
  inline void cb_Wave_Down_Qua_i(Fl_Choice*, void*);
  static void cb_Wave_Down_Qua(Fl_Choice*, void*);
public:
  Fl_Choice *Wave_Up_Qua;
private:
  inline void cb_Wave_Up_Qua_i(Fl_Choice*, void*);
  static void cb_Wave_Up_Qua(Fl_Choice*, void*);
public:
  Fl_Box *Recognize_Label;
  Fl_Group *MIDI_SET;
  Fl_Box *Fondo8;
  Fl_Check_Button *D_A_Connect;
private:
  inline void cb_D_A_Connect_i(Fl_Check_Button*, void*);
  static void cb_D_A_Connect(Fl_Check_Button*, void*);
public:
  Fl_Browser *BMidiIn;
private:
  inline void cb_BMidiIn_i(Fl_Browser*, void*);
  static void cb_BMidiIn(Fl_Browser*, void*);
public:
  Fl_Counter *Midi_In_Counter;
private:
  inline void cb_Midi_In_Counter_i(Fl_Counter*, void*);
  static void cb_Midi_In_Counter(Fl_Counter*, void*);
public:
  Fl_Counter *Har_In_Counter;
private:
  inline void cb_Har_In_Counter_i(Fl_Counter*, void*);
  static void cb_Har_In_Counter(Fl_Counter*, void*);
public:
  Fl_Counter *Stereo_Har_In_Counter;
private:
  inline void cb_Stereo_Har_In_Counter_i(Fl_Counter*, void*);
  static void cb_Stereo_Har_In_Counter(Fl_Counter*, void*);
public:
  Fl_Group *wMIDI;
  Fl_Check_Button *Mw0;
private:
  inline void cb_Mw0_i(Fl_Check_Button*, void*);
  static void cb_Mw0(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *Mw1;
private:
  inline void cb_Mw1_i(Fl_Check_Button*, void*);
  static void cb_Mw1(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *AAssign;
private:
  inline void cb_AAssign_i(Fl_Check_Button*, void*);
  static void cb_AAssign(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *MTable;
private:
  inline void cb_MTable_i(Fl_Check_Button*, void*);
  static void cb_MTable(Fl_Check_Button*, void*);
public:
  Fl_Scroll *scroll;
  Fl_Group *JACK_SET;
  Fl_Box *Fondo9;
  Fl_Check_Button *D_J_Connect;
private:
  inline void cb_D_J_Connect_i(Fl_Check_Button*, void*);
  static void cb_D_J_Connect(Fl_Check_Button*, void*);
public:
  Fl_Browser *JackCo;
  Fl_Check_Button *D_IJ_Connect;
private:
  inline void cb_D_IJ_Connect_i(Fl_Check_Button*, void*);
  static void cb_D_IJ_Connect(Fl_Check_Button*, void*);
public:
  Fl_Browser *JackIn;
  Fl_Group *MISC_SET;
  Fl_Box *Fondo10;
  Fl_Input *Username;
private:
  inline void cb_Username_i(Fl_Input*, void*);
  static void cb_Username(Fl_Input*, void*);
public:
  Fl_Check_Button *MES_DIS;
private:
  inline void cb_MES_DIS_i(Fl_Check_Button*, void*);
  static void cb_MES_DIS(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *T_TIMEOUT;
private:
  inline void cb_T_TIMEOUT_i(Fl_Check_Button*, void*);
  static void cb_T_TIMEOUT(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *ENA_TOOL;
private:
  inline void cb_ENA_TOOL_i(Fl_Check_Button*, void*);
  static void cb_ENA_TOOL(Fl_Check_Button*, void*);
public:
  Fl_Group *BANK_SET;
  Fl_Box *Fondo11;
  Fl_File_Input *BFiname;
  Fl_Button *BF_Browser;
private:
  inline void cb_BF_Browser_i(Fl_Button*, void*);
  static void cb_BF_Browser(Fl_Button*, void*);
public:
  Fl_File_Input *Udir;
  Fl_Button *UD_Browser;
private:
  inline void cb_UD_Browser_i(Fl_Button*, void*);
  static void cb_UD_Browser(Fl_Button*, void*);
public:
  Fl_Double_Window *MIDILearn;
private:
  inline void cb_MIDILearn_i(Fl_Double_Window*, void*);
  static void cb_MIDILearn(Fl_Double_Window*, void*);
public:
  Fl_Box *Fondo4;
  Fl_Browser *Epar;
private:
  inline void cb_Epar_i(Fl_Browser*, void*);
  static void cb_Epar(Fl_Browser*, void*);
public:
  Fl_Button *GMM;
private:
  inline void cb_GMM_i(Fl_Button*, void*);
  static void cb_GMM(Fl_Button*, void*);
public:
  Fl_Browser *TPresets;
  Fl_Button *CopyF;
private:
  inline void cb_CopyF_i(Fl_Button*, void*);
  static void cb_CopyF(Fl_Button*, void*);
public:
  Fl_Button *CopyT;
private:
  inline void cb_CopyT_i(Fl_Button*, void*);
  static void cb_CopyT(Fl_Button*, void*);
public:
  Fl_Group *Ares;
  Fl_Box *Ar1;
  Fl_Box *Ar2;
  Fl_Box *Ar3;
  Fl_Box *Ar4;
  Fl_Box *Ar5;
  Fl_Box *Ar6;
  Fl_Box *Ar7;
  Fl_Box *Ar8;
  Fl_Box *Ar9;
  Fl_Box *Ar10;
  Fl_Box *Ar11;
  Fl_Box *Ar12;
  Fl_Box *Ar13;
  Fl_Box *Ar14;
  Fl_Box *Ar15;
  Fl_Box *Ar16;
  Fl_Box *Ar17;
  Fl_Box *Ar18;
  Fl_Box *Ar19;
  Fl_Box *Ar20;
  Fl_Button *ClearA;
private:
  inline void cb_ClearA_i(Fl_Button*, void*);
  static void cb_ClearA(Fl_Button*, void*);
public:
  Fl_Button *ClearP;
private:
  inline void cb_ClearP_i(Fl_Button*, void*);
  static void cb_ClearP(Fl_Button*, void*);
public:
  Fl_Button *Assign;
private:
  inline void cb_Assign_i(Fl_Button*, void*);
  static void cb_Assign(Fl_Button*, void*);
public:
  Fl_Button *AssignA;
private:
  inline void cb_AssignA_i(Fl_Button*, void*);
  static void cb_AssignA(Fl_Button*, void*);
public:
  Fl_Button *CancelRec;
private:
  inline void cb_CancelRec_i(Fl_Button*, void*);
  static void cb_CancelRec(Fl_Button*, void*);
public:
  Fl_Value_Input *Disp_Control;
private:
  inline void cb_Disp_Control_i(Fl_Value_Input*, void*);
  static void cb_Disp_Control(Fl_Value_Input*, void*);
public:
  Fl_Button *CopyTAll;
private:
  inline void cb_CopyTAll_i(Fl_Button*, void*);
  static void cb_CopyTAll(Fl_Button*, void*);
public:
  Fl_Button *CloseML;
private:
  inline void cb_CloseML_i(Fl_Button*, void*);
  static void cb_CloseML(Fl_Button*, void*);
public:
  Fl_Group *Filters_ML;
  Fl_Button *M_fil_all;
private:
  inline void cb_M_fil_all_i(Fl_Button*, void*);
  static void cb_M_fil_all(Fl_Button*, void*);
public:
  Fl_Button *M_fil_current;
private:
  inline void cb_M_fil_current_i(Fl_Button*, void*);
  static void cb_M_fil_current(Fl_Button*, void*);
public:
  Fl_Double_Window *AboutWin;
private:
  inline void cb_AboutWin_i(Fl_Double_Window*, void*);
  static void cb_AboutWin(Fl_Double_Window*, void*);
public:
  Fl_Box *AB_Title;
  Fl_Box *AB_SubTitle;
  Fl_Box *About_Version;
  Fl_Box *AB_url;
  Fl_Box *AB_Authors;
  Fl_Box *AB_A1;
  Fl_Box *AB_A2;
  Fl_Box *AB_A3;
private:
  inline void cb_LICENSE_i(Fl_Button*, void*);
  static void cb_LICENSE(Fl_Button*, void*);
  inline void cb_OK_i(Fl_Button*, void*);
  static void cb_OK(Fl_Button*, void*);
public:
  Fl_Box *AB_A4;
  Fl_Double_Window *Trigger;
private:
  inline void cb_Trigger_i(Fl_Double_Window*, void*);
  static void cb_Trigger(Fl_Double_Window*, void*);
public:
  Fl_Box *Fondo5;
  Fl_Box *ACI_LABEL;
  NewVum *aux_vu;
  Fl_Choice *aux_source;
private:
  inline void cb_aux_source_i(Fl_Choice*, void*);
  static void cb_aux_source(Fl_Choice*, void*);
  static Fl_Menu_Item menu_aux_source[];
public:
  SliderW *aux_gain;
private:
  inline void cb_aux_gain_i(SliderW*, void*);
  static void cb_aux_gain(SliderW*, void*);
public:
  SliderW *aux_thres;
private:
  inline void cb_aux_thres_i(SliderW*, void*);
  static void cb_aux_thres(SliderW*, void*);
public:
  Fl_Value_Input *aux_midi;
private:
  inline void cb_aux_midi_i(Fl_Value_Input*, void*);
  static void cb_aux_midi(Fl_Value_Input*, void*);
public:
  SliderW *aux_min;
private:
  inline void cb_aux_min_i(SliderW*, void*);
  static void cb_aux_min(SliderW*, void*);
public:
  SliderW *aux_max;
private:
  inline void cb_aux_max_i(SliderW*, void*);
  static void cb_aux_max(SliderW*, void*);
public:
  RKRGUI(int argc, char**argv,RKR *rkr_);
  void Background_Color_Change(Fl_Color bcolor);
  void Label_Color_Change(Fl_Color bcolor);
  void Buttons_Color_Change(Fl_Color bcolor);
  void Leds_Color_Change(Fl_Color bcolor);
  void put_icon(Fl_Window* window);
  void load_stat();
  void save_stat(int whati);
  void Put_Loaded();
  static void tick(void* v);
  static void preset_click(Fl_Button* o, void* v);
  inline void preset_click_i(Fl_Button* o, void*);
  void make_window_banks();
  void reordena();
  void show_help();
  void show_lic();
  void MiraClientes();
  void MiraConfig();
  void BankWin_Label(char *filename);
  void is_modified();
  void Put_Loaded_Bank();
  void Chord(int eff);
  void ActMIDI();
  void ActOnOff();
  void light_preset(int npreset);
  void unlight_preset(int npreset);
  void PutBackground();
  void chfsize(int value);
  void adjustfont();
  void ChangeActives();
  void findpos(int num, int value, Fl_Widget*);
  void Put_Skin(int last);
  void FillML(int type);
  void DisAssigns();
  void Prepare_Order();
  void Show_Next_Time();
  void update_looper();
  void UpdateTGUI();
  void ActACI();
  int Busca_Eff(int num);
  void Fill_Avail(int filter);
  void highlight();
  int search_but(int x, int y);
  void ScanDir();
  static int prevnext(int e);
  bool install_signal_handlers();
  static void sigterm_handler(int sig);
  static void check_signals(void *usrPtr);
  void getMIDIControl(int num);
  void PrepareML();
  inline void addpreset(Fl_Widget *w, int num);
  void add_name(Fl_Widget *w, char *name);
  Fl_Widget * FindWidget(int num);
  void ReadIntPresets();
  inline void delpreset(Fl_Widget *w, int num);
  void Prep_Reorden(int source, int dest);
  void make_table_window();
  static void bank_click(Fl_Choice* o, void* v);
  inline void bank_click_i(Fl_Choice* o, void*);
  static void p_click(Fl_Choice* o, void* v);
  inline void p_click_i(Fl_Choice* o, void*);
  void fill_mptable(int num,int value);
  void mtfillvalue(int num,int value);
  void Put_MidiTable();
  void RandomPreset();
  void drag_effect();
  int AddBankName(const char *name);
  void ClearBankNames();
};
#endif
