// generated by Fast Light User Interface Designer (fluid) version 1.0304

#ifndef derelict_gui_h
#define derelict_gui_h
#include <FL/Fl.H>
#include "RKR_Light_Button.h"
#include "RKR_Check_Button.h"
#include "RKR_Choice.h"
#include "RKR_GUI_Effect.h"
#include "RKR_Slider.h"
#include "../process.h"
#include "rakarrack.h"
#include "common_gui_menu.h"

class DerelictGui : public RKR_Gui_Effect {
public:
  DerelictGui(int X, int Y, int W, int H, const char *L = 0);
  RKR_Light_Button *derelict_activar;
private:
  inline void cb_derelict_activar_i(RKR_Light_Button*, void*);
  static void cb_derelict_activar(RKR_Light_Button*, void*);
public:
  RKR_Choice *derelict_preset;
private:
  inline void cb_derelict_preset_i(RKR_Choice*, void*);
  static void cb_derelict_preset(RKR_Choice*, void*);
  static Fl_Menu_Item menu_derelict_preset[];
public:
  RKR_Slider *derelict_WD;
private:
  inline void cb_derelict_WD_i(RKR_Slider*, void*);
  static void cb_derelict_WD(RKR_Slider*, void*);
public:
  RKR_Slider *derelict_LRc;
private:
  inline void cb_derelict_LRc_i(RKR_Slider*, void*);
  static void cb_derelict_LRc(RKR_Slider*, void*);
public:
  RKR_Slider *derelict_drive;
private:
  inline void cb_derelict_drive_i(RKR_Slider*, void*);
  static void cb_derelict_drive(RKR_Slider*, void*);
public:
  RKR_Slider *derelict_level;
private:
  inline void cb_derelict_level_i(RKR_Slider*, void*);
  static void cb_derelict_level(RKR_Slider*, void*);
public:
  RKR_Choice *derelict_tipo;
private:
  inline void cb_derelict_tipo_i(RKR_Choice*, void*);
  static void cb_derelict_tipo(RKR_Choice*, void*);
public:
  RKR_Check_Button *derelict_neg;
private:
  inline void cb_derelict_neg_i(RKR_Check_Button*, void*);
  static void cb_derelict_neg(RKR_Check_Button*, void*);
public:
  RKR_Slider *derelict_st;
private:
  inline void cb_derelict_st_i(RKR_Slider*, void*);
  static void cb_derelict_st(RKR_Slider*, void*);
public:
  RKR_Slider *derelict_oct;
private:
  inline void cb_derelict_oct_i(RKR_Slider*, void*);
  static void cb_derelict_oct(RKR_Slider*, void*);
public:
  RKR_Slider *derelict_pan;
private:
  inline void cb_derelict_pan_i(RKR_Slider*, void*);
  static void cb_derelict_pan(RKR_Slider*, void*);
public:
  RKR_Check_Button *derelict_pf;
private:
  inline void cb_derelict_pf_i(RKR_Check_Button*, void*);
  static void cb_derelict_pf(RKR_Check_Button*, void*);
public:
  RKR_Slider *derelict_lpf;
private:
  inline void cb_derelict_lpf_i(RKR_Slider*, void*);
  static void cb_derelict_lpf(RKR_Slider*, void*);
public:
  RKR_Slider *derelict_hpf;
private:
  inline void cb_derelict_hpf_i(RKR_Slider*, void*);
  static void cb_derelict_hpf(RKR_Slider*, void*);
  CommonGuiMenu *m_dist_menu; 
};
#endif
