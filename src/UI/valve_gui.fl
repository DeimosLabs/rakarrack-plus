# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class ValveGui {
  user_data 1 open selected
  xywh {1550 57 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button valve_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Bypass[EFX_VALVE]);
 return;
}
m_process->EFX_Bypass[EFX_VALVE]=(int)o->value();
if((int) o->value()==0)
m_process->Rack_Effects[EFX_VALVE]->cleanup();
m_parent->findpos(EFX_VALVE,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x33 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice valve_preset {
    label Preset
    user_data 12019
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12019))m_process->Rack_Effects[EFX_VALVE]->setpreset((int)o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_VALVE]; i++)
{
    parameter_refresh(i);
};}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label {Valve 1}
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label {Valve 2}
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label {Valve 3}
      xywh {52 52 36 21} labelsize 10
    }
    MenuItem {} {
      label {Valve 4}
      xywh {62 62 36 21} labelsize 10
    }
  }
  Fl_Value_Slider valve_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Valve_DryWet);
 return;
} 
m_process->Rack_Effects[EFX_VALVE]->changepar(Valve_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 31 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider valve_LRc {
    label {L/R Cross}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Valve_LR_Cross);
 return;
} 
m_process->Rack_Effects[EFX_VALVE]->changepar(Valve_LR_Cross,(int)(o->value()));}
    xywh {56 44 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider valve_pan {
    label Pan
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Valve_Pan);
 return;
} 
m_process->Rack_Effects[EFX_VALVE]->changepar(Valve_Pan,(int)(o->value()+64));}
    xywh {56 57 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider valve_level {
    label Level
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Valve_Level);
 return;
} 
m_process->Rack_Effects[EFX_VALVE]->changepar(Valve_Level,(int)o->value());}
    xywh {56 71 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider valve_drive {
    label Drive
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Valve_Drive);
 return;
} 
m_process->Rack_Effects[EFX_VALVE]->changepar(Valve_Drive,(int)o->value());}
    xywh {56 84 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button valve_ed {
    label {Extra Dist.}
    user_data 2
    callback {m_process->Rack_Effects[EFX_VALVE]->changepar(Valve_Ex_Dist,(int)o->value());}
    xywh {15 96 72 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Value_Slider valve_Q {
    label {Dist.}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Valve_Distortion);
 return;
} 
m_process->Rack_Effects[EFX_VALVE]->changepar(Valve_Distortion,(int)o->value());}
    tooltip Distortion xywh {56 112 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider valve_Pre {
    label Presence
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Valve_Presence);
 return;
} 
m_process->Rack_Effects[EFX_VALVE]->changepar(Valve_Presence,(int)o->value());}
    xywh {56 127 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button valve_pf {
    label {Pre Filter}
    user_data 2
    callback {m_process->Rack_Effects[EFX_VALVE]->changepar(Valve_Prefilter,(int)o->value());}
    xywh {5 139 62 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button valve_st {
    label Stereo
    user_data 2
    callback {m_process->Rack_Effects[EFX_VALVE]->changepar(Valve_Stereo,(int)o->value());}
    xywh {65 139 50 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button valve_neg {
    label {Neg.}
    user_data 2
    callback {m_process->Rack_Effects[EFX_VALVE]->changepar(Valve_Negate,(int)o->value());}
    xywh {114 139 40 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Value_Slider valve_lpf {
    label LPF
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Valve_LPF);
 return;
} 
m_process->Rack_Effects[EFX_VALVE]->changepar(Valve_LPF,(int)o->value());}
    xywh {56 156 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 26000 step 1 value 20000 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider valve_hpf {
    label HPF
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Valve_HPF);
 return;
} 
m_process->Rack_Effects[EFX_VALVE]->changepar(Valve_HPF,(int)o->value());}
    xywh {56 169 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 20000 step 1 value 20 textcolor 7
    class RKR_Slider
  }
  Function {parameter_refresh(int index)} {return_type void
  } {
    code {switch (index)
    {
    case Valve_DryWet:
        valve_WD->value(Dry_Wet(m_process->Rack_Effects[EFX_VALVE]->getpar(Valve_DryWet)));
        break;
    case Valve_Pan:
        valve_pan->value(m_process->Rack_Effects[EFX_VALVE]->getpar(Valve_Pan)-64);
        break;
    case Valve_LR_Cross:
        valve_LRc->value(m_process->Rack_Effects[EFX_VALVE]->getpar(Valve_LR_Cross));
        break;
    case Valve_Drive:
        valve_drive->value(m_process->Rack_Effects[EFX_VALVE]->getpar(Valve_Drive));
        break;
    case Valve_Level:
        valve_level->value(m_process->Rack_Effects[EFX_VALVE]->getpar(Valve_Level));
        break;
    case Valve_Negate:
        valve_neg->value(m_process->Rack_Effects[EFX_VALVE]->getpar(Valve_Negate));
        break;
    case Valve_LPF:
        valve_lpf->value(m_process->Rack_Effects[EFX_VALVE]->getpar(Valve_LPF));
        break;
    case Valve_HPF:
        valve_hpf->value(m_process->Rack_Effects[EFX_VALVE]->getpar(Valve_HPF));
        break;
    case Valve_Stereo:
        valve_st->value(m_process->Rack_Effects[EFX_VALVE]->getpar(Valve_Stereo));
        break;
    case Valve_Prefilter:
        valve_pf->value(m_process->Rack_Effects[EFX_VALVE]->getpar(Valve_Prefilter));
        break;
    case Valve_Distortion:
        valve_Q->value(m_process->Rack_Effects[EFX_VALVE]->getpar(Valve_Distortion));
        break;
    case Valve_Ex_Dist:
        valve_ed->value(m_process->Rack_Effects[EFX_VALVE]->getpar(Valve_Ex_Dist));
        break;
    case Valve_Presence:
        valve_Pre->value(m_process->Rack_Effects[EFX_VALVE]->getpar(Valve_Presence));
        break;
    }} {}
  }
}
