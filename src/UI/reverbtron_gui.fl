# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

widget_class RevtronGui {
  user_data 1 open
  xywh {1550 57 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "sliderW.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"} visible position_relative
} {
  Fl_Light_Button revtron_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(116);
 o->value(rkr->Reverbtron_Bypass);
 return;
}
rkr->Reverbtron_Bypass=(int)o->value();
if((int) o->value()==0) rkr->efx_Reverbtron->cleanup();
rgui->findpos(40,(int)o->value(),o);}
    xywh {6 4 34 18} shortcut 0x35 color 62 selection_color 1 labelsize 10 align 84 when 1
    class RKR_Light_Button
  }
  Fl_Choice revtron_preset {
    label Preset
    user_data 12040
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12040))rkr->efx_Reverbtron->setpreset((int) o->value());
revtron_pan->value(rkr->efx_Reverbtron->getpar(11)-64);
revtron_level->value(rkr->efx_Reverbtron->getpar(7));
revtron_WD->value(Dry_Wet(rkr->efx_Reverbtron->getpar(0)));
revtron_damp->value(rkr->efx_Reverbtron->getpar(6));
revtron_fnum->value(rkr->efx_Reverbtron->getpar(8));
revtron_length->value(rkr->efx_Reverbtron->getpar(3));
revtron_strech->value(rkr->efx_Reverbtron->getpar(9));
revtron_safe->value(rkr->efx_Reverbtron->getpar(2));
revtron_user->value(rkr->efx_Reverbtron->getpar(4));
revtron_user->do_callback();
revtron_fb->value(rkr->efx_Reverbtron->getpar(10));
revtron_fade->value(rkr->efx_Reverbtron->getpar(1));
revtron_idelay->value(rkr->efx_Reverbtron->getpar(5));
revtron_LPF->value(rkr->efx_Reverbtron->getpar(14));
revtron_diff->value(rkr->efx_Reverbtron->getpar(15));

revtron_es->value(rkr->efx_Reverbtron->getpar(12));
revtron_rv->value(rkr->efx_Reverbtron->getpar(13));}
    xywh {79 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label Chamber
      xywh {77 77 36 21} labelsize 10
    }
    MenuItem {} {
      label {Concrete Stairwell}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Hall
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Medium Hall}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Room
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Large Hall}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Guitar
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Studio
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Cathedral
      xywh {0 0 36 21} labelsize 9
    }
  }
  Fl_Value_Slider revtron_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(339);
 return;
}
rkr->efx_Reverbtron->changepar(0,Dry_Wet((int)(o->value())));}
    xywh {56 25 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider revtron_pan {
    label Pan
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(340);
 return;
}
rkr->efx_Reverbtron->changepar(11,(int)(o->value()+64));}
    xywh {56 37 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider revtron_level {
    label Level
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(341);
 return;
}
rkr->efx_Reverbtron->changepar(7,(int)o->value());}
    xywh {56 49 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider revtron_damp {
    label Damp
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(342);
 return;
}
rkr->efx_Reverbtron->changepar(6,(int)o->value());}
    xywh {56 61 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider revtron_fb {
    label Feedback
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(343);
 return;
}
rkr->efx_Reverbtron->changepar(10,(int)o->value());}
    xywh {56 73 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider revtron_length {
    label Length
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(344);
 return;
}
rkr->efx_Reverbtron->changepar(3,(int)o->value());}
    xywh {56 85 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 20 maximum 1500 step 1 value 100 textcolor 7
    class SliderW
  }
  Fl_Value_Slider revtron_strech {
    label Stretch
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(345);
 return;
}
rkr->efx_Reverbtron->changepar(9,(int)o->value());}
    tooltip {Time Stretch} xywh {56 97 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum -64 maximum 64 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider revtron_idelay {
    label {I. Del}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(346);
 return;
}
rkr->efx_Reverbtron->changepar(5,(int)o->value());}
    tooltip {Initial Delay} xywh {56 109 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 maximum 500 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider revtron_fade {
    label Fade
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(347);
 return;
}
rkr->efx_Reverbtron->changepar(1,(int)o->value());}
    xywh {56 121 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider revtron_diff {
    label Diffusion
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(442);
 return;
}
rkr->efx_Reverbtron->changepar(15,(int)o->value());}
    xywh {56 133 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider revtron_LPF {
    label LPF
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(443);
 return;
}
rkr->efx_Reverbtron->changepar(14,(int)o->value());}
    tooltip {Lowpass Filter} xywh {56 145 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 20 maximum 26000 step 1 value 20 textcolor 7
    class SliderW
  }
  Fl_Check_Button revtron_rv {
    label Sh
    user_data 2
    callback {rkr->efx_Reverbtron->changepar(13,(int)o->value());}
    xywh {2 151 30 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button revtron_es {
    label ES
    user_data 2
    callback {rkr->efx_Reverbtron->changepar(12,(int)o->value());}
    xywh {2 164 29 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button revtron_safe {
    label Safe
    user_data 2
    callback {rkr->efx_Reverbtron->changepar(2,(int)o->value());}
    xywh {30 154 41 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button revtron_user {
    label User
    user_data 2
    callback {rkr->efx_Reverbtron->changepar(4,(int)o->value());

if((int)o->value())B_rvb->activate(); else B_rvb->deactivate();}
    xywh {67 154 39 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Button B_rvb {
    label Browse
    user_data 2
    callback {char *filename;
filename=fl_file_chooser("Load rvb File:","(*.rvb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rvb");
strcpy(rkr->efx_Reverbtron->Filename,filename);

if(!rkr->efx_Reverbtron->setfile(USERFILE))
{
    fl_alert("Error loading %s file!\\n", filename);
}} selected
    xywh {106 156 46 10} labelsize 10 deactivate
    class RKR_Button
  }
  Fl_Choice revtron_fnum {
    label File
    user_data 12
    callback {rkr->efx_Reverbtron->changepar(8,(int)o->value());}
    xywh {51 168 101 14} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label Chamber
      xywh {54 54 36 21} labelsize 10
    }
    MenuItem {} {
      label {Conc. Stair}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Hall
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Med Hall}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Large Room}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Large Hall}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Guitar Ambience}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Studio
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Twilight
      xywh {10 10 36 21} labelsize 10
    }
    MenuItem {} {
      label {Santa Lucia}
      xywh {0 0 36 21} labelsize 10
    }
  }
}
