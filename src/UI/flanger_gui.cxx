// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "flanger_gui.h"

void FlangerGui::cb_flanger_activar_i(Fl_Light_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(116);
 o->value(rkr->Flanger_Bypass);
 return;
}
rkr->Flanger_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Flanger->cleanup();
rgui->findpos(7,(int)o->value(),o);
}
void FlangerGui::cb_flanger_activar(Fl_Light_Button* o, void* v) {
  ((FlangerGui*)(o->parent()))->cb_flanger_activar_i(o,v);
}

void FlangerGui::cb_flanger_preset_i(Fl_Choice* o, void* v) {
  long long ud= (long long) v;
if((ud==0)||(ud==12007))rkr->efx_Flanger->setpreset(1,(int)(o->value()+5));
flanger_WD->value(Dry_Wet(rkr->efx_Flanger->getpar(0)));
flanger_pan->value(rkr->efx_Flanger->getpar(1)-64);
flanger_freq->value(rkr->efx_Flanger->getpar(2));
flanger_rnd->value(rkr->efx_Flanger->getpar(3));
flanger_lfotype->value(rkr->efx_Flanger->getpar(4));
flanger_stdf->value(rkr->efx_Flanger->getpar(5));
flanger_dpth->value(rkr->efx_Flanger->getpar(6));
flanger_delay->value(rkr->efx_Flanger->getpar(7));
flanger_fb->value(rkr->efx_Flanger->getpar(8));
flanger_LR->value(rkr->efx_Flanger->getpar(9)-64);
flanger_subs->value(rkr->efx_Flanger->getpar(11));
flanger_awesome->value(rkr->efx_Flanger->getpar(12));
}
void FlangerGui::cb_flanger_preset(Fl_Choice* o, void* v) {
  ((FlangerGui*)(o->parent()))->cb_flanger_preset_i(o,v);
}

Fl_Menu_Item FlangerGui::menu_flanger_preset[] = {
 {"Flange 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Flange 2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Flange 3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Flange 4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Flange 5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void FlangerGui::cb_flanger_WD_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(53);
 return;
} 
rkr->efx_Flanger->changepar(0,Dry_Wet((int)(o->value())));
}
void FlangerGui::cb_flanger_WD(SliderW* o, void* v) {
  ((FlangerGui*)(o->parent()))->cb_flanger_WD_i(o,v);
}

void FlangerGui::cb_flanger_pan_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(51);
 return;
} 
rkr->efx_Flanger->changepar(1,(int)(o->value()+64));
}
void FlangerGui::cb_flanger_pan(SliderW* o, void* v) {
  ((FlangerGui*)(o->parent()))->cb_flanger_pan_i(o,v);
}

void FlangerGui::cb_flanger_freq_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(73);
 return;
} 
rkr->efx_Flanger->changepar(2,(int)o->value());
}
void FlangerGui::cb_flanger_freq(SliderW* o, void* v) {
  ((FlangerGui*)(o->parent()))->cb_flanger_freq_i(o,v);
}

void FlangerGui::cb_flanger_rnd_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(106);
 return;
} 
rkr->efx_Flanger->changepar(3,(int)o->value());
}
void FlangerGui::cb_flanger_rnd(SliderW* o, void* v) {
  ((FlangerGui*)(o->parent()))->cb_flanger_rnd_i(o,v);
}

void FlangerGui::cb_flanger_lfotype_i(Fl_Choice* o, void*) {
  rkr->efx_Flanger->changepar(4,(int)o->value());
}
void FlangerGui::cb_flanger_lfotype(Fl_Choice* o, void* v) {
  ((FlangerGui*)(o->parent()))->cb_flanger_lfotype_i(o,v);
}

void FlangerGui::cb_flanger_subs_i(Fl_Check_Button* o, void*) {
  rkr->efx_Flanger->changepar(11,(int)o->value());
}
void FlangerGui::cb_flanger_subs(Fl_Check_Button* o, void* v) {
  ((FlangerGui*)(o->parent()))->cb_flanger_subs_i(o,v);
}

void FlangerGui::cb_flanger_awesome_i(Fl_Check_Button* o, void*) {
  rkr->efx_Flanger->changepar(12,(int)o->value());
}
void FlangerGui::cb_flanger_awesome(Fl_Check_Button* o, void* v) {
  ((FlangerGui*)(o->parent()))->cb_flanger_awesome_i(o,v);
}

void FlangerGui::cb_flanger_stdf_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(100);
 return;
} 
rkr->efx_Flanger->changepar(5,(int)o->value());
}
void FlangerGui::cb_flanger_stdf(SliderW* o, void* v) {
  ((FlangerGui*)(o->parent()))->cb_flanger_stdf_i(o,v);
}

void FlangerGui::cb_flanger_dpth_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(22);
 return;
} 
rkr->efx_Flanger->changepar(6,(int)o->value());
}
void FlangerGui::cb_flanger_dpth(SliderW* o, void* v) {
  ((FlangerGui*)(o->parent()))->cb_flanger_dpth_i(o,v);
}

void FlangerGui::cb_flanger_delay_i(SliderW* o, void*) {
  rkr->efx_Flanger->changepar(7,(int)o->value());
}
void FlangerGui::cb_flanger_delay(SliderW* o, void* v) {
  ((FlangerGui*)(o->parent()))->cb_flanger_delay_i(o,v);
}

void FlangerGui::cb_flanger_fb_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(80);
 return;
} 
rkr->efx_Flanger->changepar(8,(int)o->value());
}
void FlangerGui::cb_flanger_fb(SliderW* o, void* v) {
  ((FlangerGui*)(o->parent()))->cb_flanger_fb_i(o,v);
}

void FlangerGui::cb_flanger_LR_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(92);
 return;
} 
rkr->efx_Flanger->changepar(9,(int)(o->value()+64));
}
void FlangerGui::cb_flanger_LR(SliderW* o, void* v) {
  ((FlangerGui*)(o->parent()))->cb_flanger_LR_i(o,v);
}
FlangerGui::FlangerGui(int X, int Y, int W, int H, const char *L)
  : Fl_Group(0, 0, W, H, L) {
this->box(FL_UP_BOX);
this->color(FL_FOREGROUND_COLOR);
this->selection_color(FL_FOREGROUND_COLOR);
this->user_data((void*)(1));
this->align(Fl_Align(96|FL_ALIGN_INSIDE));
{ flanger_activar = new Fl_Light_Button(5, 4, 34, 18, "On");
  flanger_activar->shortcut(0x38);
  flanger_activar->color((Fl_Color)62);
  flanger_activar->selection_color((Fl_Color)1);
  flanger_activar->labelsize(10);
  flanger_activar->callback((Fl_Callback*)cb_flanger_activar, (void*)(2));
  flanger_activar->align(Fl_Align(68|FL_ALIGN_INSIDE));
  flanger_activar->when(FL_WHEN_CHANGED);
} // Fl_Light_Button* flanger_activar
{ flanger_preset = new Fl_Choice(77, 4, 76, 18, "Preset");
  flanger_preset->down_box(FL_BORDER_BOX);
  flanger_preset->selection_color(FL_FOREGROUND_COLOR);
  flanger_preset->labelsize(10);
  flanger_preset->labelcolor(FL_BACKGROUND2_COLOR);
  flanger_preset->textsize(10);
  flanger_preset->textcolor(FL_BACKGROUND2_COLOR);
  flanger_preset->callback((Fl_Callback*)cb_flanger_preset, (void*)(12007));
  flanger_preset->when(FL_WHEN_RELEASE_ALWAYS);
  flanger_preset->menu(menu_flanger_preset);
} // Fl_Choice* flanger_preset
{ flanger_WD = new SliderW(52, 29, 100, 10, "Dry/Wet");
  flanger_WD->type(5);
  flanger_WD->box(FL_FLAT_BOX);
  flanger_WD->color((Fl_Color)178);
  flanger_WD->selection_color((Fl_Color)62);
  flanger_WD->labeltype(FL_NORMAL_LABEL);
  flanger_WD->labelfont(0);
  flanger_WD->labelsize(10);
  flanger_WD->labelcolor(FL_BACKGROUND2_COLOR);
  flanger_WD->maximum(127);
  flanger_WD->step(1);
  flanger_WD->textcolor(FL_BACKGROUND2_COLOR);
  flanger_WD->callback((Fl_Callback*)cb_flanger_WD);
  flanger_WD->align(Fl_Align(FL_ALIGN_LEFT));
  flanger_WD->when(FL_WHEN_CHANGED);
} // SliderW* flanger_WD
{ flanger_pan = new SliderW(52, 41, 100, 10, "Pan");
  flanger_pan->type(5);
  flanger_pan->box(FL_FLAT_BOX);
  flanger_pan->color((Fl_Color)178);
  flanger_pan->selection_color((Fl_Color)62);
  flanger_pan->labeltype(FL_NORMAL_LABEL);
  flanger_pan->labelfont(0);
  flanger_pan->labelsize(10);
  flanger_pan->labelcolor(FL_BACKGROUND2_COLOR);
  flanger_pan->minimum(-64);
  flanger_pan->maximum(63);
  flanger_pan->step(1);
  flanger_pan->textcolor(FL_BACKGROUND2_COLOR);
  flanger_pan->callback((Fl_Callback*)cb_flanger_pan);
  flanger_pan->align(Fl_Align(FL_ALIGN_LEFT));
  flanger_pan->when(FL_WHEN_CHANGED);
} // SliderW* flanger_pan
{ flanger_freq = new SliderW(52, 53, 100, 10, "Tempo");
  flanger_freq->type(5);
  flanger_freq->box(FL_FLAT_BOX);
  flanger_freq->color((Fl_Color)178);
  flanger_freq->selection_color((Fl_Color)62);
  flanger_freq->labeltype(FL_NORMAL_LABEL);
  flanger_freq->labelfont(0);
  flanger_freq->labelsize(10);
  flanger_freq->labelcolor(FL_BACKGROUND2_COLOR);
  flanger_freq->minimum(1);
  flanger_freq->maximum(600);
  flanger_freq->step(1);
  flanger_freq->textcolor(FL_BACKGROUND2_COLOR);
  flanger_freq->callback((Fl_Callback*)cb_flanger_freq);
  flanger_freq->align(Fl_Align(FL_ALIGN_LEFT));
  flanger_freq->when(FL_WHEN_CHANGED);
} // SliderW* flanger_freq
{ flanger_rnd = new SliderW(52, 65, 100, 10, "Rnd");
  flanger_rnd->type(5);
  flanger_rnd->box(FL_FLAT_BOX);
  flanger_rnd->color((Fl_Color)178);
  flanger_rnd->selection_color((Fl_Color)62);
  flanger_rnd->labeltype(FL_NORMAL_LABEL);
  flanger_rnd->labelfont(0);
  flanger_rnd->labelsize(10);
  flanger_rnd->labelcolor(FL_BACKGROUND2_COLOR);
  flanger_rnd->maximum(127);
  flanger_rnd->step(1);
  flanger_rnd->textcolor(FL_BACKGROUND2_COLOR);
  flanger_rnd->callback((Fl_Callback*)cb_flanger_rnd);
  flanger_rnd->align(Fl_Align(FL_ALIGN_LEFT));
  flanger_rnd->when(FL_WHEN_CHANGED);
} // SliderW* flanger_rnd
{ Fl_Choice* o = flanger_lfotype = new Fl_Choice(63, 77, 72, 16, "LFO Type");
  flanger_lfotype->down_box(FL_BORDER_BOX);
  flanger_lfotype->selection_color(FL_FOREGROUND_COLOR);
  flanger_lfotype->labelsize(10);
  flanger_lfotype->labelcolor(FL_BACKGROUND2_COLOR);
  flanger_lfotype->textsize(10);
  flanger_lfotype->textcolor(FL_BACKGROUND2_COLOR);
  flanger_lfotype->callback((Fl_Callback*)cb_flanger_lfotype);
  o->menu(m_lfo_menu->get_lfo_type());
} // Fl_Choice* flanger_lfotype
{ flanger_subs = new Fl_Check_Button(32, 94, 62, 15, "Subtract");
  flanger_subs->down_box(FL_BORDER_BOX);
  flanger_subs->labelsize(10);
  flanger_subs->labelcolor(FL_BACKGROUND2_COLOR);
  flanger_subs->callback((Fl_Callback*)cb_flanger_subs, (void*)(2));
} // Fl_Check_Button* flanger_subs
{ flanger_awesome = new Fl_Check_Button(94, 94, 58, 15, "Intense");
  flanger_awesome->down_box(FL_BORDER_BOX);
  flanger_awesome->labelsize(10);
  flanger_awesome->labelcolor(FL_BACKGROUND2_COLOR);
  flanger_awesome->callback((Fl_Callback*)cb_flanger_awesome, (void*)(2));
} // Fl_Check_Button* flanger_awesome
{ flanger_stdf = new SliderW(52, 115, 100, 10, "St.df");
  flanger_stdf->type(5);
  flanger_stdf->box(FL_FLAT_BOX);
  flanger_stdf->color((Fl_Color)178);
  flanger_stdf->selection_color((Fl_Color)62);
  flanger_stdf->labeltype(FL_NORMAL_LABEL);
  flanger_stdf->labelfont(0);
  flanger_stdf->labelsize(10);
  flanger_stdf->labelcolor(FL_BACKGROUND2_COLOR);
  flanger_stdf->maximum(127);
  flanger_stdf->step(1);
  flanger_stdf->textcolor(FL_BACKGROUND2_COLOR);
  flanger_stdf->callback((Fl_Callback*)cb_flanger_stdf);
  flanger_stdf->align(Fl_Align(FL_ALIGN_LEFT));
  flanger_stdf->when(FL_WHEN_CHANGED);
} // SliderW* flanger_stdf
{ flanger_dpth = new SliderW(52, 128, 100, 10, "Depth");
  flanger_dpth->type(5);
  flanger_dpth->box(FL_FLAT_BOX);
  flanger_dpth->color((Fl_Color)178);
  flanger_dpth->selection_color((Fl_Color)62);
  flanger_dpth->labeltype(FL_NORMAL_LABEL);
  flanger_dpth->labelfont(0);
  flanger_dpth->labelsize(10);
  flanger_dpth->labelcolor(FL_BACKGROUND2_COLOR);
  flanger_dpth->maximum(127);
  flanger_dpth->step(1);
  flanger_dpth->textcolor(FL_BACKGROUND2_COLOR);
  flanger_dpth->callback((Fl_Callback*)cb_flanger_dpth);
  flanger_dpth->align(Fl_Align(FL_ALIGN_LEFT));
  flanger_dpth->when(FL_WHEN_CHANGED);
} // SliderW* flanger_dpth
{ flanger_delay = new SliderW(52, 141, 100, 10, "Delay");
  flanger_delay->type(5);
  flanger_delay->box(FL_FLAT_BOX);
  flanger_delay->color((Fl_Color)178);
  flanger_delay->selection_color((Fl_Color)62);
  flanger_delay->labeltype(FL_NORMAL_LABEL);
  flanger_delay->labelfont(0);
  flanger_delay->labelsize(10);
  flanger_delay->labelcolor(FL_BACKGROUND2_COLOR);
  flanger_delay->maximum(127);
  flanger_delay->step(1);
  flanger_delay->textcolor(FL_BACKGROUND2_COLOR);
  flanger_delay->callback((Fl_Callback*)cb_flanger_delay);
  flanger_delay->align(Fl_Align(FL_ALIGN_LEFT));
  flanger_delay->when(FL_WHEN_CHANGED);
} // SliderW* flanger_delay
{ flanger_fb = new SliderW(52, 154, 100, 10, "Fb");
  flanger_fb->type(5);
  flanger_fb->box(FL_FLAT_BOX);
  flanger_fb->color((Fl_Color)178);
  flanger_fb->selection_color((Fl_Color)62);
  flanger_fb->labeltype(FL_NORMAL_LABEL);
  flanger_fb->labelfont(0);
  flanger_fb->labelsize(10);
  flanger_fb->labelcolor(FL_BACKGROUND2_COLOR);
  flanger_fb->maximum(127);
  flanger_fb->step(1);
  flanger_fb->textcolor(FL_BACKGROUND2_COLOR);
  flanger_fb->callback((Fl_Callback*)cb_flanger_fb);
  flanger_fb->align(Fl_Align(FL_ALIGN_LEFT));
  flanger_fb->when(FL_WHEN_CHANGED);
} // SliderW* flanger_fb
{ flanger_LR = new SliderW(52, 168, 100, 10, "L/R.Cr");
  flanger_LR->type(5);
  flanger_LR->box(FL_FLAT_BOX);
  flanger_LR->color((Fl_Color)178);
  flanger_LR->selection_color((Fl_Color)62);
  flanger_LR->labeltype(FL_NORMAL_LABEL);
  flanger_LR->labelfont(0);
  flanger_LR->labelsize(10);
  flanger_LR->labelcolor(FL_BACKGROUND2_COLOR);
  flanger_LR->minimum(-64);
  flanger_LR->maximum(63);
  flanger_LR->step(1);
  flanger_LR->textcolor(FL_BACKGROUND2_COLOR);
  flanger_LR->callback((Fl_Callback*)cb_flanger_LR);
  flanger_LR->align(Fl_Align(FL_ALIGN_LEFT));
  flanger_LR->when(FL_WHEN_CHANGED);
} // SliderW* flanger_LR
position(X, Y);
end();
}
