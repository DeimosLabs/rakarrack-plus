# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class {\#include "common_gui_menu.h"} PanGui {
  user_data 1 open
  xywh {1333 108 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  code3 {\#include "common_gui_menu.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button pan_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Multi_On_Off);
 o->value(rkr->EFX_Bypass[EFX_PAN]);
 return;
}
rkr->EFX_Bypass[EFX_PAN]=(int)o->value();
if((int) o->value()==0)
rkr->Rack_Effects[EFX_PAN]->cleanup();
rgui->findpos(EFX_PAN,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x36 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice pan_preset {
    label Preset
    user_data 12013
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12013))rkr->Rack_Effects[EFX_PAN]->setpreset((int) o->value());
pan_WD->value(Dry_Wet(rkr->Rack_Effects[EFX_PAN]->getpar(Pan_DryWet)));
pan_pan->value(rkr->Rack_Effects[EFX_PAN]->getpar(Pan_Pan)-64);
pan_freq->value(rkr->Rack_Effects[EFX_PAN]->getpar(Pan_LFO_Tempo));
pan_rnd->value(rkr->Rack_Effects[EFX_PAN]->getpar(Pan_LFO_Random));
pan_lfotype->value(rkr->Rack_Effects[EFX_PAN]->getpar(Pan_LFO_Type));
pan_stdf->value(rkr->Rack_Effects[EFX_PAN]->getpar(Pan_LFO_Stereo));
pan_extra->value(rkr->Rack_Effects[EFX_PAN]->getpar(Pan_Ex_St_Amt));
pan_autopan->value(rkr->Rack_Effects[EFX_PAN]->getpar(Pan_AutoPan));
pan_extraon->value(rkr->Rack_Effects[EFX_PAN]->getpar(Pan_Enable_Extra));} selected
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label AutoPan
      xywh {62 62 36 21} labelsize 10
    }
    MenuItem {} {
      label {Extra Stereo}
      xywh {62 62 36 21} labelsize 10
    }
  }
  Fl_Value_Slider pan_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Pan_DryWet);
 return;
} 
rkr->Rack_Effects[EFX_PAN]->changepar(Pan_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 29 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider pan_pan {
    label Pan
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Pan_Pan);
 return;
} 
rkr->Rack_Effects[EFX_PAN]->changepar(Pan_Pan,(int)(o->value()+64));}
    xywh {56 44 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button pan_autopan {
    label AutoPan
    user_data 2
    callback {rkr->Rack_Effects[EFX_PAN]->changepar(Pan_AutoPan,(int)o->value())}
    xywh {35 56 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Value_Slider pan_freq {
    label Tempo
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Pan_LFO_Tempo);
 return;
} 
rkr->Rack_Effects[EFX_PAN]->changepar(Pan_LFO_Tempo,(int)o->value());}
    xywh {56 73 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider pan_rnd {
    label Random
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Pan_LFO_Random);
 return;
} 
rkr->Rack_Effects[EFX_PAN]->changepar(Pan_LFO_Random,(int)o->value());}
    xywh {56 85 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Choice pan_lfotype {
    label {LFO Type}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Pan_LFO_Type);
 return;
} 

rkr->Rack_Effects[EFX_PAN]->changepar(Pan_LFO_Type,(int)o->value());} open
    xywh {78 103 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    code0 {o->menu(m_lfo_menu->get_lfo_type());}
    class RKR_Choice
  } {}
  Fl_Value_Slider pan_stdf {
    label {Stereo Df}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Pan_LFO_Stereo);
 return;
} 
rkr->Rack_Effects[EFX_PAN]->changepar(Pan_LFO_Stereo,(int)o->value());}
    tooltip {LFO L/R Delay} xywh {56 124 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button pan_extraon {
    label {Extra Stereo}
    user_data 2
    callback {rkr->Rack_Effects[EFX_PAN]->changepar(Pan_Enable_Extra,(int)o->value())}
    tooltip {Enable Extra Stereo} xywh {35 140 82 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Value_Slider pan_extra {
    label {E.Stereo}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Pan_Ex_St_Amt);
 return;
}
rkr->Rack_Effects[EFX_PAN]->changepar(Pan_Ex_St_Amt,(int)o->value());}
    tooltip {Extra Stereo Amount} xywh {56 161 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  decl {CommonGuiMenu *m_lfo_menu;} {private local
  }
}
