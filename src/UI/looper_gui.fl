# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Box.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

widget_class LooperGui {
  user_data 1 open
  xywh {1550 57 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"} visible position_relative
} {
  Fl_Light_Button looper_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Multi_On_Off);
 o->value(rkr->Looper_Bypass);
 return;
}
rkr->Looper_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Looper->cleanup();
rgui->findpos(30,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x35 color 62 selection_color 1 labelsize 10 align 84 when 1
    class RKR_Light_Button
  }
  Fl_Choice looper_preset {
    label Preset
    user_data 12030
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12030))rkr->efx_Looper->setpreset((int) o->value());
looper_WD->value(Dry_Wet(rkr->efx_Looper->getpar(Looper_DryWet)));
looper_play->value(rkr->efx_Looper->getpar(Looper_Play));
looper_record->value(rkr->efx_Looper->getpar(Looper_Record));
looper_rv->value(rkr->efx_Looper->getpar(Looper_Reverse));
looper_ap->value(rkr->efx_Looper->getpar(Looper_AutoPlay));
looper_level1->value(rkr->efx_Looper->getpar(Looper_Level_1));
looper_level2->value(rkr->efx_Looper->getpar(Looper_Level_2));

looper_t1->value(rkr->efx_Looper->getpar(Looper_Track_1));
looper_t2->value(rkr->efx_Looper->getpar(Looper_Track_2));
looper_r1->value(rkr->efx_Looper->getpar(Looper_Rec_1));
looper_r2->value(rkr->efx_Looper->getpar(Looper_Rec_2));
looper_lnk->value(rkr->efx_Looper->getpar(Looper_Link));
looper_Tempo->value(rkr->efx_Looper->getpar(Looper_Tempo));
looper_bar->value(rkr->efx_Looper->getpar(Looper_Bar));
looper_ms->value(rkr->efx_Looper->getpar(Looper_M_S));}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label Looper
      xywh {67 67 36 21} labelsize 10
    }
    MenuItem {} {
      label Reverse
      xywh {0 0 36 21} labelsize 10
    }
  }
  Fl_Value_Slider looper_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Looper_DryWet);
 return;
}
rkr->efx_Looper->changepar(Looper_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 25 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider looper_level1 {
    label {Level 1}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Looper_Level_1);
 return;
}
rkr->efx_Looper->changepar(Looper_Level_1,(int)o->value());}
    xywh {56 37 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider looper_level2 {
    label {Level 2}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Looper_Level_2);
 return;
}
rkr->efx_Looper->changepar(Looper_Level_2,(int)o->value());}
    xywh {56 49 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider looper_Tempo {
    label Tempo
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Looper_Tempo);
 return;
}
rkr->efx_Looper->changepar(Looper_Tempo,(int)o->value());}
    xywh {56 61 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 20 maximum 380 step 1 value 100 textcolor 7
    class RKR_Slider
  }
  Fl_Choice looper_bar {
    label {Time Sig.}
    callback {rkr->efx_Looper->changepar(Looper_Bar,(int)o->value());} open
    xywh {57 73 40 15} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {o->menu(m_looper_bar->get_time_sig());}
    class RKR_Choice
  } {}
  Fl_Choice looper_ms {
    label MS
    callback {rkr->efx_Looper->changepar(Looper_M_S,(int)o->value());} open selected
    xywh {121 73 29 15} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {o->menu(m_looper_ms->get_metronome_sound());}
    class RKR_Choice
  } {}
  Fl_Check_Button looper_rv {
    label Reverse
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Looper_Reverse);
 return;
}
rkr->efx_Looper->changepar(Looper_Reverse,(int)o->value())}
    tooltip {Play Loop in Reverse} xywh {8 89 61 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button looper_ap {
    label {Auto Play}
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Looper_AutoPlay);
 return;
}
rkr->efx_Looper->changepar(Looper_AutoPlay,(int)o->value())}
    xywh {78 89 67 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Box Box_Play {
    label {Play/Stop}
    xywh {4 103 52 14} labelsize 10 labelcolor 7
    code0 {o->set_label_offset(0);}
    class RKR_Box
  }
  Fl_Box Box_P {
    label Pause
    xywh {58 103 44 14} labelsize 10 labelcolor 7
    code0 {o->set_label_offset(0);}
    class RKR_Box
  }
  Fl_Box {} {
    label Record
    xywh {109 103 44 14} labelsize 10 labelcolor 7
    code0 {o->set_label_offset(0);}
    class RKR_Box
  }
  Fl_Button looper_play {
    label {@|>}
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Looper_Play);
 return;
}
rkr->efx_Looper->changepar(Looper_Play,(int)o->value());
rgui->update_looper();}
    tooltip {Play - Shortcut 'F5'} xywh {8 117 44 22} type Toggle shortcut 0xffc2
    code0 {o->set_label_offset(4);}
    class RKR_Button
  }
  Fl_Button looper_stop {
    label {@||}
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Looper_Stop);
 return;
}
rkr->efx_Looper->changepar(Looper_Stop,(int)o->value());
rgui->update_looper();}
    tooltip {Stop - Shortcut 'F6'} xywh {59 117 44 22} type Toggle shortcut 0xffc3
    code0 {o->set_label_offset(4);}
    class RKR_Button
  }
  Fl_Button looper_record {
    label {@circle}
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Looper_Record);
 return;
}
rkr->efx_Looper->changepar(Looper_Record,(int)o->value());
rgui->update_looper();}
    xywh {109 117 44 22} type Toggle labelcolor 1
    code0 {o->set_label_offset(4);}
    class RKR_Button
  }
  Fl_Box {} {
    label Track
    xywh {71 149 39 14} labelsize 10 labelcolor 7
    code0 {o->set_label_offset(0);}
    class RKR_Box
  }
  Fl_Check_Button looper_r1 {
    label R1
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Looper_Rec_1);
 return;
}
rkr->efx_Looper->changepar(Looper_Rec_1,(int)o->value())}
    tooltip {Record on Track 1} xywh {8 153 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 1
    class RKR_Check_Button
  }
  Fl_Check_Button looper_r2 {
    label R2
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Looper_Rec_2);
 return;
}
rkr->efx_Looper->changepar(Looper_Rec_2,(int)o->value())}
    tooltip {Record on Track 2} xywh {27 153 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 1
    class RKR_Check_Button
  }
  Fl_Button looper_t1 {
    label 1
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Looper_Track_1);
 return;
}
rkr->efx_Looper->changepar(Looper_Track_1,(int)o->value());
rgui->update_looper();}
    tooltip {Enable Play, Stop, Record on Track 1} xywh {111 147 18 18} type Toggle labelsize 10 align 16
    class RKR_Button
  }
  Fl_Button looper_t2 {
    label 2
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Looper_Track_2);
 return;
}
rkr->efx_Looper->changepar(Looper_Track_2,(int)o->value());
rgui->update_looper();}
    tooltip {Enable Play, Stop, Record on Track 2} xywh {134 147 18 18} type Toggle labelsize 10 align 16
    class RKR_Button
  }
  Fl_Check_Button looper_lnk {
    label Lnk
    user_data 2
    callback {rkr->efx_Looper->changepar(Looper_Link,(int)o->value())}
    tooltip {Link track 1 and track 2 with the same length} xywh {27 167 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7 align 4
    class RKR_Check_Button
  }
  Fl_Button looper_clear {
    label Clear
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Looper_Clear);
 return;
}
rkr->efx_Looper->changepar(Looper_Clear,(int)o->value());
rgui->update_looper();}
    tooltip {Erase the Selected Track} xywh {46 165 43 14} labelsize 10
    class RKR_Button
  }
  Fl_Check_Button looper_mt {
    label M
    user_data 2
    callback {rkr->efx_Looper->changepar(Looper_Metro,(int)o->value())}
    tooltip Metronome xywh {93 167 27 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Box L_TimePos {
    xywh {121 166 35 14} box DOWN_BOX align 84
    class RKR_Box
  }
  decl {CommonGuiMenu *m_looper_bar;} {private local
  }
  decl {CommonGuiMenu *m_looper_ms;} {private local
  }
}
