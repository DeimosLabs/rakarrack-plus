// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "shelf_gui.h"

void ShelfGui::cb_shelf_activar_i(RKR_Light_Button* o, void*) {
  if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Bypass[EFX_SHELFBOOST]);
 return;
}
m_process->EFX_Bypass[EFX_SHELFBOOST]=(int)o->value();
if((int) o->value()==0)
m_process->Rack_Effects[EFX_SHELFBOOST]->cleanup();
m_parent->findpos(EFX_SHELFBOOST,(int)o->value(),o);
}
void ShelfGui::cb_shelf_activar(RKR_Light_Button* o, void* v) {
  ((ShelfGui*)(o->parent()))->cb_shelf_activar_i(o,v);
}

void ShelfGui::cb_shelf_preset_i(RKR_Choice* o, void* v) {
  long long ud= (long long) v;
if((ud==0)||(ud==UD_PRESET_SHELFBOOST))
    m_process->Rack_Effects[EFX_SHELFBOOST]->setpreset((int) o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_SHELFBOOST]; i++)
{
    parameter_refresh(i);
};
}
void ShelfGui::cb_shelf_preset(RKR_Choice* o, void* v) {
  ((ShelfGui*)(o->parent()))->cb_shelf_preset_i(o,v);
}

Fl_Menu_Item ShelfGui::menu_shelf_preset[] = {
 {"Treble", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Mid", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Bass", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Distortion 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void ShelfGui::cb_shelf_gain_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Shelf_Gain);
 return;
}
m_process->Rack_Effects[EFX_SHELFBOOST]->changepar(Shelf_Gain,(int)o->value());
}
void ShelfGui::cb_shelf_gain(RKR_Slider* o, void* v) {
  ((ShelfGui*)(o->parent()))->cb_shelf_gain_i(o,v);
}

void ShelfGui::cb_shelf_level_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Shelf_Level);
 return;
}
m_process->Rack_Effects[EFX_SHELFBOOST]->changepar(Shelf_Level,(int)o->value());
}
void ShelfGui::cb_shelf_level(RKR_Slider* o, void* v) {
  ((ShelfGui*)(o->parent()))->cb_shelf_level_i(o,v);
}

void ShelfGui::cb_shelf_freq1_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Shelf_Tone);
 return;
}
m_process->Rack_Effects[EFX_SHELFBOOST]->changepar(Shelf_Tone,(int)o->value());
}
void ShelfGui::cb_shelf_freq1(RKR_Slider* o, void* v) {
  ((ShelfGui*)(o->parent()))->cb_shelf_freq1_i(o,v);
}

void ShelfGui::cb_shelf_q1_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Shelf_Presence);
 return;
}
m_process->Rack_Effects[EFX_SHELFBOOST]->changepar(Shelf_Presence,(int)o->value());
}
void ShelfGui::cb_shelf_q1(RKR_Slider* o, void* v) {
  ((ShelfGui*)(o->parent()))->cb_shelf_q1_i(o,v);
}

void ShelfGui::cb_shelf_mode_i(RKR_Check_Button* o, void*) {
  m_process->Rack_Effects[EFX_SHELFBOOST]->changepar(Shelf_Stereo,(int)o->value());
}
void ShelfGui::cb_shelf_mode(RKR_Check_Button* o, void* v) {
  ((ShelfGui*)(o->parent()))->cb_shelf_mode_i(o,v);
}
ShelfGui::ShelfGui(int X, int Y, int W, int H, const char *L)
  : RKR_Gui_Effect(0, 0, W, H, L) {
this->box(FL_UP_BOX);
this->color(FL_FOREGROUND_COLOR);
this->selection_color(FL_FOREGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->align(Fl_Align(96|FL_ALIGN_INSIDE));
this->when(FL_WHEN_RELEASE);
{ RKR_Light_Button* o = shelf_activar = new RKR_Light_Button(5, 4, 34, 18, "On");
  shelf_activar->box(FL_UP_BOX);
  shelf_activar->shortcut(0x31);
  shelf_activar->color((Fl_Color)62);
  shelf_activar->selection_color((Fl_Color)1);
  shelf_activar->labeltype(FL_NORMAL_LABEL);
  shelf_activar->labelfont(0);
  shelf_activar->labelsize(10);
  shelf_activar->labelcolor(FL_FOREGROUND_COLOR);
  shelf_activar->callback((Fl_Callback*)cb_shelf_activar);
  shelf_activar->align(Fl_Align(68|FL_ALIGN_INSIDE));
  shelf_activar->when(FL_WHEN_CHANGED);
  activate_effect = o;
} // RKR_Light_Button* shelf_activar
{ RKR_Choice* o = shelf_preset = new RKR_Choice(77, 4, 76, 18, "Preset");
  shelf_preset->box(FL_FLAT_BOX);
  shelf_preset->down_box(FL_BORDER_BOX);
  shelf_preset->color(FL_BACKGROUND_COLOR);
  shelf_preset->selection_color(FL_FOREGROUND_COLOR);
  shelf_preset->labeltype(FL_NORMAL_LABEL);
  shelf_preset->labelfont(0);
  shelf_preset->labelsize(10);
  shelf_preset->labelcolor(FL_BACKGROUND2_COLOR);
  shelf_preset->textsize(10);
  shelf_preset->textcolor(FL_BACKGROUND2_COLOR);
  shelf_preset->callback((Fl_Callback*)cb_shelf_preset, (void*)(UD_PRESET_SHELFBOOST));
  shelf_preset->align(Fl_Align(FL_ALIGN_LEFT));
  shelf_preset->when(FL_WHEN_RELEASE_ALWAYS);
  shelf_preset->menu(menu_shelf_preset);
  preset_choice = o;
} // RKR_Choice* shelf_preset
{ shelf_gain = new RKR_Slider(56, 66, 100, 10, "Gain");
  shelf_gain->type(5);
  shelf_gain->box(FL_FLAT_BOX);
  shelf_gain->color((Fl_Color)178);
  shelf_gain->selection_color((Fl_Color)62);
  shelf_gain->labeltype(FL_NORMAL_LABEL);
  shelf_gain->labelfont(0);
  shelf_gain->labelsize(10);
  shelf_gain->labelcolor(FL_BACKGROUND2_COLOR);
  shelf_gain->maximum(127);
  shelf_gain->step(1);
  shelf_gain->textcolor(FL_BACKGROUND2_COLOR);
  shelf_gain->callback((Fl_Callback*)cb_shelf_gain);
  shelf_gain->align(Fl_Align(FL_ALIGN_LEFT));
  shelf_gain->when(FL_WHEN_CHANGED);
} // RKR_Slider* shelf_gain
{ shelf_level = new RKR_Slider(56, 86, 100, 10, "Level");
  shelf_level->type(5);
  shelf_level->box(FL_FLAT_BOX);
  shelf_level->color((Fl_Color)178);
  shelf_level->selection_color((Fl_Color)62);
  shelf_level->labeltype(FL_NORMAL_LABEL);
  shelf_level->labelfont(0);
  shelf_level->labelsize(10);
  shelf_level->labelcolor(FL_BACKGROUND2_COLOR);
  shelf_level->minimum(1);
  shelf_level->maximum(127);
  shelf_level->step(1);
  shelf_level->value(32);
  shelf_level->textcolor(FL_BACKGROUND2_COLOR);
  shelf_level->callback((Fl_Callback*)cb_shelf_level);
  shelf_level->align(Fl_Align(FL_ALIGN_LEFT));
  shelf_level->when(FL_WHEN_CHANGED);
} // RKR_Slider* shelf_level
{ shelf_freq1 = new RKR_Slider(56, 106, 100, 10, "Tone");
  shelf_freq1->type(5);
  shelf_freq1->box(FL_FLAT_BOX);
  shelf_freq1->color((Fl_Color)178);
  shelf_freq1->selection_color((Fl_Color)62);
  shelf_freq1->labeltype(FL_NORMAL_LABEL);
  shelf_freq1->labelfont(0);
  shelf_freq1->labelsize(10);
  shelf_freq1->labelcolor(FL_BACKGROUND2_COLOR);
  shelf_freq1->minimum(220);
  shelf_freq1->maximum(16000);
  shelf_freq1->step(1);
  shelf_freq1->value(1000);
  shelf_freq1->textcolor(FL_BACKGROUND2_COLOR);
  shelf_freq1->callback((Fl_Callback*)cb_shelf_freq1);
  shelf_freq1->align(Fl_Align(FL_ALIGN_LEFT));
  shelf_freq1->when(FL_WHEN_CHANGED);
} // RKR_Slider* shelf_freq1
{ shelf_q1 = new RKR_Slider(56, 126, 100, 10, "Presence");
  shelf_q1->type(5);
  shelf_q1->box(FL_FLAT_BOX);
  shelf_q1->color((Fl_Color)178);
  shelf_q1->selection_color((Fl_Color)62);
  shelf_q1->labeltype(FL_NORMAL_LABEL);
  shelf_q1->labelfont(0);
  shelf_q1->labelsize(10);
  shelf_q1->labelcolor(FL_BACKGROUND2_COLOR);
  shelf_q1->minimum(-64);
  shelf_q1->maximum(64);
  shelf_q1->step(1);
  shelf_q1->textcolor(FL_BACKGROUND2_COLOR);
  shelf_q1->callback((Fl_Callback*)cb_shelf_q1);
  shelf_q1->align(Fl_Align(FL_ALIGN_LEFT));
  shelf_q1->when(FL_WHEN_CHANGED);
} // RKR_Slider* shelf_q1
{ shelf_mode = new RKR_Check_Button(13, 153, 54, 15, "Stereo");
  shelf_mode->box(FL_NO_BOX);
  shelf_mode->down_box(FL_BORDER_BOX);
  shelf_mode->color(FL_BACKGROUND_COLOR);
  shelf_mode->selection_color(FL_FOREGROUND_COLOR);
  shelf_mode->labeltype(FL_NORMAL_LABEL);
  shelf_mode->labelfont(0);
  shelf_mode->labelsize(10);
  shelf_mode->labelcolor(FL_BACKGROUND2_COLOR);
  shelf_mode->callback((Fl_Callback*)cb_shelf_mode);
  shelf_mode->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
  shelf_mode->when(FL_WHEN_RELEASE);
} // RKR_Check_Button* shelf_mode
position(X, Y);
end();
}

void ShelfGui::parameter_refresh(int index) {
  switch (index)
      {
      case Shelf_Gain:
          shelf_gain->value(m_process->Rack_Effects[EFX_SHELFBOOST]->getpar(Shelf_Gain));
          break;
      case Shelf_Presence:
          shelf_q1->value(m_process->Rack_Effects[EFX_SHELFBOOST]->getpar(Shelf_Presence));
          break;
      case Shelf_Tone:
          shelf_freq1->value(m_process->Rack_Effects[EFX_SHELFBOOST]->getpar(Shelf_Tone));
          break;
      case Shelf_Stereo:
          shelf_mode->value(m_process->Rack_Effects[EFX_SHELFBOOST]->getpar(Shelf_Stereo));
          break;
      case Shelf_Level:
          shelf_level->value(m_process->Rack_Effects[EFX_SHELFBOOST]->getpar(Shelf_Level));
          break;
      }
}
