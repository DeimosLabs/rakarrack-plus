// generated by Fast Light User Interface Designer (fluid) version 1.0304

#ifndef ring_gui_h
#define ring_gui_h
#include <FL/Fl.H>
#include "RKR_Light_Button.h"
#include "RKR_Check_Button.h"
#include <FL/Fl_Group.H>
#include "sliderW.h"
#include "../process.h"
#include "rakarrack.h"
#include <FL/Fl_Choice.H>

class RingGui : public Fl_Group {
public:
  RingGui(int X, int Y, int W, int H, const char *L = 0);
  RKR_Light_Button *ring_activar;
private:
  inline void cb_ring_activar_i(RKR_Light_Button*, void*);
  static void cb_ring_activar(RKR_Light_Button*, void*);
public:
  Fl_Choice *ring_preset;
private:
  inline void cb_ring_preset_i(Fl_Choice*, void*);
  static void cb_ring_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_ring_preset[];
public:
  SliderW *ring_WD;
private:
  inline void cb_ring_WD_i(SliderW*, void*);
  static void cb_ring_WD(SliderW*, void*);
public:
  SliderW *ring_LRc;
private:
  inline void cb_ring_LRc_i(SliderW*, void*);
  static void cb_ring_LRc(SliderW*, void*);
public:
  SliderW *ring_input;
private:
  inline void cb_ring_input_i(SliderW*, void*);
  static void cb_ring_input(SliderW*, void*);
public:
  SliderW *ring_level;
private:
  inline void cb_ring_level_i(SliderW*, void*);
  static void cb_ring_level(SliderW*, void*);
public:
  SliderW *ring_pan;
private:
  inline void cb_ring_pan_i(SliderW*, void*);
  static void cb_ring_pan(SliderW*, void*);
public:
  RKR_Check_Button *ring_st;
private:
  inline void cb_ring_st_i(RKR_Check_Button*, void*);
  static void cb_ring_st(RKR_Check_Button*, void*);
public:
  RKR_Check_Button *ring_afreq;
private:
  inline void cb_ring_afreq_i(RKR_Check_Button*, void*);
  static void cb_ring_afreq(RKR_Check_Button*, void*);
public:
  SliderW *ring_depth;
private:
  inline void cb_ring_depth_i(SliderW*, void*);
  static void cb_ring_depth(SliderW*, void*);
public:
  SliderW *ring_freq;
private:
  inline void cb_ring_freq_i(SliderW*, void*);
  static void cb_ring_freq(SliderW*, void*);
public:
  SliderW *ring_sin;
private:
  inline void cb_ring_sin_i(SliderW*, void*);
  static void cb_ring_sin(SliderW*, void*);
public:
  SliderW *ring_tri;
private:
  inline void cb_ring_tri_i(SliderW*, void*);
  static void cb_ring_tri(SliderW*, void*);
public:
  SliderW *ring_saw;
private:
  inline void cb_ring_saw_i(SliderW*, void*);
  static void cb_ring_saw(SliderW*, void*);
public:
  SliderW *ring_squ;
private:
  inline void cb_ring_squ_i(SliderW*, void*);
  static void cb_ring_squ(SliderW*, void*);
};
#endif
