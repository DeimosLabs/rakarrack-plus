// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "reverb_gui.h"

void ReverbGui::cb_reverb_activar_i(RKR_Light_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(116);
 o->value(rkr->Reverb_Bypass);
 return;
}
rkr->Reverb_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Rev->cleanup();
rgui->findpos(8,(int)o->value(),o);
}
void ReverbGui::cb_reverb_activar(RKR_Light_Button* o, void* v) {
  ((ReverbGui*)(o->parent()))->cb_reverb_activar_i(o,v);
}

void ReverbGui::cb_reverb_preset_i(RKR_Choice* o, void* v) {
  rkr->Reverb_Bypass=0;
long long ud= (long long) v;
if((ud==0)||(ud==12008))rkr->efx_Rev->setpreset((int) o->value());
reverb_WD->value(Dry_Wet(rkr->efx_Rev->getpar(Reverb_DryWet)));
reverb_pan->value(rkr->efx_Rev->getpar(Reverb_Pan)-64);
reverb_time->value(rkr->efx_Rev->getpar(Reverb_Time));
reverb_ldel->value(rkr->efx_Rev->getpar(Reverb_I_Delay));
reverb_ldelft->value(rkr->efx_Rev->getpar(Reverb_Delay_FB));
reverb_LPF->value(rkr->efx_Rev->getpar(Reverb_LPF));
reverb_HPF->value(rkr->efx_Rev->getpar(Reverb_HPF));
reverb_damp->value(rkr->efx_Rev->getpar(Reverb_Damp));
reverb_RS->value(rkr->efx_Rev->getpar(Reverb_Room));
reverb_type->value(rkr->efx_Rev->getpar(Reverb_Type));
if((int)reverb_activar->value())rkr->Reverb_Bypass=1;
}
void ReverbGui::cb_reverb_preset(RKR_Choice* o, void* v) {
  ((ReverbGui*)(o->parent()))->cb_reverb_preset_i(o,v);
}

Fl_Menu_Item ReverbGui::menu_reverb_preset[] = {
 {"Cathedral 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Cathedral 2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Cathedral 3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Hall 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Hall 2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Room 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Room 2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Basement", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Tunnel", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Echoed 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Echoed 2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Very Long 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Very Long 2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void ReverbGui::cb_reverb_WD_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(57);
 return;
} 
rkr->efx_Rev->changepar(Reverb_DryWet,Dry_Wet((int)(o->value())));
}
void ReverbGui::cb_reverb_WD(RKR_Slider* o, void* v) {
  ((ReverbGui*)(o->parent()))->cb_reverb_WD_i(o,v);
}

void ReverbGui::cb_reverb_pan_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(63);
 return;
} 
rkr->efx_Rev->changepar(Reverb_Pan,(int)(o->value()+64));
}
void ReverbGui::cb_reverb_pan(RKR_Slider* o, void* v) {
  ((ReverbGui*)(o->parent()))->cb_reverb_pan_i(o,v);
}

void ReverbGui::cb_reverb_time_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(437);
 return;
}
rkr->efx_Rev->changepar(Reverb_Time,(int)o->value());
}
void ReverbGui::cb_reverb_time(RKR_Slider* o, void* v) {
  ((ReverbGui*)(o->parent()))->cb_reverb_time_i(o,v);
}

void ReverbGui::cb_reverb_ldel_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(438);
 return;
}
rkr->efx_Rev->changepar(Reverb_I_Delay,(int)o->value());
}
void ReverbGui::cb_reverb_ldel(RKR_Slider* o, void* v) {
  ((ReverbGui*)(o->parent()))->cb_reverb_ldel_i(o,v);
}

void ReverbGui::cb_reverb_ldelft_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(439);
 return;
}
rkr->efx_Rev->changepar(Reverb_Delay_FB,(int)o->value());
}
void ReverbGui::cb_reverb_ldelft(RKR_Slider* o, void* v) {
  ((ReverbGui*)(o->parent()))->cb_reverb_ldelft_i(o,v);
}

void ReverbGui::cb_reverb_type_i(RKR_Choice* o, void*) {
  rkr->efx_Rev->changepar(Reverb_Type,(int)o->value());
}
void ReverbGui::cb_reverb_type(RKR_Choice* o, void* v) {
  ((ReverbGui*)(o->parent()))->cb_reverb_type_i(o,v);
}

void ReverbGui::cb_Random_i(Fl_Menu_*, void*) {
  rkr->efx_Rev->changepar(Reverb_Type,1);
}
void ReverbGui::cb_Random(Fl_Menu_* o, void* v) {
  ((ReverbGui*)(o->parent()))->cb_Random_i(o,v);
}

Fl_Menu_Item ReverbGui::menu_reverb_type[] = {
 {"Freeverb", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Random", 0,  (Fl_Callback*)ReverbGui::cb_Random, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void ReverbGui::cb_reverb_RS_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(440);
 return;
}
rkr->Reverb_Bypass=0;
rkr->efx_Rev->changepar(Reverb_Room,(int)o->value());
if((int)reverb_activar->value())rkr->Reverb_Bypass=1;
}
void ReverbGui::cb_reverb_RS(RKR_Slider* o, void* v) {
  ((ReverbGui*)(o->parent()))->cb_reverb_RS_i(o,v);
}

void ReverbGui::cb_reverb_LPF_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(87);
 return;
} 
rkr->efx_Rev->changepar(Reverb_LPF,(int)o->value());
}
void ReverbGui::cb_reverb_LPF(RKR_Slider* o, void* v) {
  ((ReverbGui*)(o->parent()))->cb_reverb_LPF_i(o,v);
}

void ReverbGui::cb_reverb_HPF_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(90);
 return;
} 
rkr->efx_Rev->changepar(Reverb_HPF,(int)o->value());
}
void ReverbGui::cb_reverb_HPF(RKR_Slider* o, void* v) {
  ((ReverbGui*)(o->parent()))->cb_reverb_HPF_i(o,v);
}

void ReverbGui::cb_reverb_damp_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(441);
 return;
}
rkr->efx_Rev->changepar(Reverb_Damp,(int)o->value());
}
void ReverbGui::cb_reverb_damp(RKR_Slider* o, void* v) {
  ((ReverbGui*)(o->parent()))->cb_reverb_damp_i(o,v);
}
ReverbGui::ReverbGui(int X, int Y, int W, int H, const char *L)
  : Fl_Group(0, 0, W, H, L) {
this->box(FL_UP_BOX);
this->color(FL_FOREGROUND_COLOR);
this->selection_color(FL_FOREGROUND_COLOR);
this->user_data((void*)(1));
this->align(Fl_Align(96|FL_ALIGN_INSIDE));
{ reverb_activar = new RKR_Light_Button(5, 4, 34, 18, "On");
  reverb_activar->box(FL_UP_BOX);
  reverb_activar->shortcut(0x39);
  reverb_activar->color((Fl_Color)62);
  reverb_activar->selection_color((Fl_Color)1);
  reverb_activar->labeltype(FL_NORMAL_LABEL);
  reverb_activar->labelfont(0);
  reverb_activar->labelsize(10);
  reverb_activar->labelcolor(FL_FOREGROUND_COLOR);
  reverb_activar->callback((Fl_Callback*)cb_reverb_activar, (void*)(2));
  reverb_activar->align(Fl_Align(68|FL_ALIGN_INSIDE));
  reverb_activar->when(FL_WHEN_CHANGED);
} // RKR_Light_Button* reverb_activar
{ reverb_preset = new RKR_Choice(77, 4, 76, 18, "Preset");
  reverb_preset->box(FL_FLAT_BOX);
  reverb_preset->down_box(FL_BORDER_BOX);
  reverb_preset->color(FL_BACKGROUND_COLOR);
  reverb_preset->selection_color(FL_FOREGROUND_COLOR);
  reverb_preset->labeltype(FL_NORMAL_LABEL);
  reverb_preset->labelfont(0);
  reverb_preset->labelsize(10);
  reverb_preset->labelcolor(FL_BACKGROUND2_COLOR);
  reverb_preset->textsize(10);
  reverb_preset->textcolor(FL_BACKGROUND2_COLOR);
  reverb_preset->callback((Fl_Callback*)cb_reverb_preset, (void*)(12008));
  reverb_preset->align(Fl_Align(FL_ALIGN_LEFT));
  reverb_preset->when(FL_WHEN_RELEASE_ALWAYS);
  reverb_preset->menu(menu_reverb_preset);
} // RKR_Choice* reverb_preset
{ reverb_WD = new RKR_Slider(56, 27, 100, 10, "Dry/Wet");
  reverb_WD->type(5);
  reverb_WD->box(FL_FLAT_BOX);
  reverb_WD->color((Fl_Color)178);
  reverb_WD->selection_color((Fl_Color)62);
  reverb_WD->labeltype(FL_NORMAL_LABEL);
  reverb_WD->labelfont(0);
  reverb_WD->labelsize(10);
  reverb_WD->labelcolor(FL_BACKGROUND2_COLOR);
  reverb_WD->maximum(127);
  reverb_WD->step(1);
  reverb_WD->textcolor(FL_BACKGROUND2_COLOR);
  reverb_WD->callback((Fl_Callback*)cb_reverb_WD);
  reverb_WD->align(Fl_Align(FL_ALIGN_LEFT));
  reverb_WD->when(FL_WHEN_CHANGED);
} // RKR_Slider* reverb_WD
{ reverb_pan = new RKR_Slider(56, 39, 100, 10, "Pan");
  reverb_pan->type(5);
  reverb_pan->box(FL_FLAT_BOX);
  reverb_pan->color((Fl_Color)178);
  reverb_pan->selection_color((Fl_Color)62);
  reverb_pan->labeltype(FL_NORMAL_LABEL);
  reverb_pan->labelfont(0);
  reverb_pan->labelsize(10);
  reverb_pan->labelcolor(FL_BACKGROUND2_COLOR);
  reverb_pan->minimum(-64);
  reverb_pan->maximum(63);
  reverb_pan->step(1);
  reverb_pan->textcolor(FL_BACKGROUND2_COLOR);
  reverb_pan->callback((Fl_Callback*)cb_reverb_pan);
  reverb_pan->align(Fl_Align(FL_ALIGN_LEFT));
  reverb_pan->when(FL_WHEN_CHANGED);
} // RKR_Slider* reverb_pan
{ reverb_time = new RKR_Slider(56, 52, 100, 10, "Time");
  reverb_time->type(5);
  reverb_time->box(FL_FLAT_BOX);
  reverb_time->color((Fl_Color)178);
  reverb_time->selection_color((Fl_Color)62);
  reverb_time->labeltype(FL_NORMAL_LABEL);
  reverb_time->labelfont(0);
  reverb_time->labelsize(10);
  reverb_time->labelcolor(FL_BACKGROUND2_COLOR);
  reverb_time->maximum(127);
  reverb_time->step(1);
  reverb_time->textcolor(FL_BACKGROUND2_COLOR);
  reverb_time->callback((Fl_Callback*)cb_reverb_time);
  reverb_time->align(Fl_Align(FL_ALIGN_LEFT));
  reverb_time->when(FL_WHEN_CHANGED);
} // RKR_Slider* reverb_time
{ reverb_ldel = new RKR_Slider(56, 64, 100, 10, "I. Del");
  reverb_ldel->tooltip("Initial Delay");
  reverb_ldel->type(5);
  reverb_ldel->box(FL_FLAT_BOX);
  reverb_ldel->color((Fl_Color)178);
  reverb_ldel->selection_color((Fl_Color)62);
  reverb_ldel->labeltype(FL_NORMAL_LABEL);
  reverb_ldel->labelfont(0);
  reverb_ldel->labelsize(10);
  reverb_ldel->labelcolor(FL_BACKGROUND2_COLOR);
  reverb_ldel->maximum(127);
  reverb_ldel->step(1);
  reverb_ldel->textcolor(FL_BACKGROUND2_COLOR);
  reverb_ldel->callback((Fl_Callback*)cb_reverb_ldel);
  reverb_ldel->align(Fl_Align(FL_ALIGN_LEFT));
  reverb_ldel->when(FL_WHEN_CHANGED);
} // RKR_Slider* reverb_ldel
{ reverb_ldelft = new RKR_Slider(56, 77, 100, 10, "Del. E/R");
  reverb_ldelft->tooltip("Initial Delay Feedback");
  reverb_ldelft->type(5);
  reverb_ldelft->box(FL_FLAT_BOX);
  reverb_ldelft->color((Fl_Color)178);
  reverb_ldelft->selection_color((Fl_Color)62);
  reverb_ldelft->labeltype(FL_NORMAL_LABEL);
  reverb_ldelft->labelfont(0);
  reverb_ldelft->labelsize(10);
  reverb_ldelft->labelcolor(FL_BACKGROUND2_COLOR);
  reverb_ldelft->maximum(127);
  reverb_ldelft->step(1);
  reverb_ldelft->textcolor(FL_BACKGROUND2_COLOR);
  reverb_ldelft->callback((Fl_Callback*)cb_reverb_ldelft);
  reverb_ldelft->align(Fl_Align(FL_ALIGN_LEFT));
  reverb_ldelft->when(FL_WHEN_CHANGED);
} // RKR_Slider* reverb_ldelft
{ reverb_type = new RKR_Choice(62, 92, 72, 16, "Type");
  reverb_type->box(FL_FLAT_BOX);
  reverb_type->down_box(FL_BORDER_BOX);
  reverb_type->color(FL_BACKGROUND_COLOR);
  reverb_type->selection_color(FL_FOREGROUND_COLOR);
  reverb_type->labeltype(FL_NORMAL_LABEL);
  reverb_type->labelfont(0);
  reverb_type->labelsize(10);
  reverb_type->labelcolor(FL_BACKGROUND2_COLOR);
  reverb_type->textsize(10);
  reverb_type->textcolor(FL_BACKGROUND2_COLOR);
  reverb_type->callback((Fl_Callback*)cb_reverb_type, (void*)(12));
  reverb_type->align(Fl_Align(FL_ALIGN_LEFT));
  reverb_type->when(FL_WHEN_RELEASE);
  reverb_type->menu(menu_reverb_type);
} // RKR_Choice* reverb_type
{ reverb_RS = new RKR_Slider(56, 116, 100, 10, "R. Size");
  reverb_RS->tooltip("Room Size");
  reverb_RS->type(5);
  reverb_RS->box(FL_FLAT_BOX);
  reverb_RS->color((Fl_Color)178);
  reverb_RS->selection_color((Fl_Color)62);
  reverb_RS->labeltype(FL_NORMAL_LABEL);
  reverb_RS->labelfont(0);
  reverb_RS->labelsize(10);
  reverb_RS->labelcolor(FL_BACKGROUND2_COLOR);
  reverb_RS->minimum(1);
  reverb_RS->maximum(127);
  reverb_RS->step(1);
  reverb_RS->value(1);
  reverb_RS->textcolor(FL_BACKGROUND2_COLOR);
  reverb_RS->callback((Fl_Callback*)cb_reverb_RS);
  reverb_RS->align(Fl_Align(FL_ALIGN_LEFT));
  reverb_RS->when(FL_WHEN_RELEASE);
} // RKR_Slider* reverb_RS
{ reverb_LPF = new RKR_Slider(56, 131, 100, 10, "LPF");
  reverb_LPF->tooltip("Lowpass Filter");
  reverb_LPF->type(5);
  reverb_LPF->box(FL_FLAT_BOX);
  reverb_LPF->color((Fl_Color)178);
  reverb_LPF->selection_color((Fl_Color)62);
  reverb_LPF->labeltype(FL_NORMAL_LABEL);
  reverb_LPF->labelfont(0);
  reverb_LPF->labelsize(10);
  reverb_LPF->labelcolor(FL_BACKGROUND2_COLOR);
  reverb_LPF->minimum(20);
  reverb_LPF->maximum(26000);
  reverb_LPF->step(1);
  reverb_LPF->value(20000);
  reverb_LPF->textcolor(FL_BACKGROUND2_COLOR);
  reverb_LPF->callback((Fl_Callback*)cb_reverb_LPF);
  reverb_LPF->align(Fl_Align(FL_ALIGN_LEFT));
  reverb_LPF->when(FL_WHEN_CHANGED);
} // RKR_Slider* reverb_LPF
{ reverb_HPF = new RKR_Slider(56, 147, 100, 10, "HPF");
  reverb_HPF->tooltip("Highpass Filter");
  reverb_HPF->type(5);
  reverb_HPF->box(FL_FLAT_BOX);
  reverb_HPF->color((Fl_Color)178);
  reverb_HPF->selection_color((Fl_Color)62);
  reverb_HPF->labeltype(FL_NORMAL_LABEL);
  reverb_HPF->labelfont(0);
  reverb_HPF->labelsize(10);
  reverb_HPF->labelcolor(FL_BACKGROUND2_COLOR);
  reverb_HPF->minimum(20);
  reverb_HPF->maximum(20000);
  reverb_HPF->step(1);
  reverb_HPF->value(20);
  reverb_HPF->textcolor(FL_BACKGROUND2_COLOR);
  reverb_HPF->callback((Fl_Callback*)cb_reverb_HPF);
  reverb_HPF->align(Fl_Align(FL_ALIGN_LEFT));
  reverb_HPF->when(FL_WHEN_CHANGED);
} // RKR_Slider* reverb_HPF
{ reverb_damp = new RKR_Slider(56, 163, 100, 10, "Damping");
  reverb_damp->type(5);
  reverb_damp->box(FL_FLAT_BOX);
  reverb_damp->color((Fl_Color)178);
  reverb_damp->selection_color((Fl_Color)62);
  reverb_damp->labeltype(FL_NORMAL_LABEL);
  reverb_damp->labelfont(0);
  reverb_damp->labelsize(10);
  reverb_damp->labelcolor(FL_BACKGROUND2_COLOR);
  reverb_damp->minimum(64);
  reverb_damp->maximum(127);
  reverb_damp->step(1);
  reverb_damp->value(64);
  reverb_damp->textcolor(FL_BACKGROUND2_COLOR);
  reverb_damp->callback((Fl_Callback*)cb_reverb_damp);
  reverb_damp->align(Fl_Align(FL_ALIGN_LEFT));
  reverb_damp->when(FL_WHEN_CHANGED);
} // RKR_Slider* reverb_damp
position(X, Y);
end();
}
