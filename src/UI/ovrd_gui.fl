# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class {\#include "common_gui_menu.h"} OvrdGui {open selected
  xywh {1703 220 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  code3 {\#include "common_gui_menu.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button ovrd_activar {
    label On
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Active[EFX_OVERDRIVE]);
 return;
}
m_process->EFX_Active[EFX_OVERDRIVE]=(int)o->value();
if((int) o->value()==0)
m_process->Rack_Effects[EFX_OVERDRIVE]->cleanup();
m_parent->findpos(EFX_OVERDRIVE,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x34 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice ovrd_preset {
    label Preset
    user_data UD_PRESET_OVERDRIVE
    callback {long long ud= (long long) v;
if((ud==0)||(ud==UD_PRESET_OVERDRIVE))
    m_process->Rack_Effects[EFX_OVERDRIVE]->setpreset((int) o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_OVERDRIVE]; i++)
{
    parameter_refresh(i);
};}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label {Overdrive 1}
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label {Overdrive 2}
      xywh {42 42 36 21} labelsize 10
    }
  }
  Fl_Value_Slider ovrd_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Overdrive_DryWet);
 return;
} 
m_process->Rack_Effects[EFX_OVERDRIVE]->changepar(Overdrive_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 35 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ovrd_LRc {
    label {L/R Cross}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Overdrive_LR_Cross);
 return;
} 
m_process->Rack_Effects[EFX_OVERDRIVE]->changepar(Overdrive_LR_Cross,(int)(o->value()));}
    xywh {56 48 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ovrd_drive {
    label Drive
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Overdrive_Drive);
 return;
} 
m_process->Rack_Effects[EFX_OVERDRIVE]->changepar(Overdrive_Drive,(int)o->value());}
    xywh {56 61 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ovrd_level {
    label Level
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Overdrive_Level);
 return;
} 
m_process->Rack_Effects[EFX_OVERDRIVE]->changepar(Overdrive_Level,(int)o->value());}
    xywh {56 75 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Choice ovrd_tipo {
    label Type
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Overdrive_Type);
 return;
} 

m_process->Rack_Effects[EFX_OVERDRIVE]->changepar(Overdrive_Type,(int)o->value());} open
    xywh {33 91 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    code0 {o->menu(m_dist_menu->get_distortion_type());}
    class RKR_Choice
  } {}
  Fl_Check_Button ovrd_neg {
    label {Neg.}
    callback {m_process->Rack_Effects[EFX_OVERDRIVE]->changepar(Overdrive_Negate,(int)o->value());}
    xywh {109 92 42 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button ovrd_st {
    label Stereo
    callback {m_process->Rack_Effects[EFX_OVERDRIVE]->changepar(Overdrive_Stereo,(int)o->value());}
    xywh {41 110 54 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Value_Slider ovrd_pan {
    label Pan
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Overdrive_Pan);
 return;
} 
m_process->Rack_Effects[EFX_OVERDRIVE]->changepar(Overdrive_Pan,(int)(o->value()+64));}
    xywh {56 125 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button ovrd_pf {
    label {Pre Filter}
    callback {m_process->Rack_Effects[EFX_OVERDRIVE]->changepar(Overdrive_Prefilter,(int)o->value());}
    xywh {41 138 68 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Value_Slider ovrd_lpf {
    label LPF
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Overdrive_LPF);
 return;
} 
m_process->Rack_Effects[EFX_OVERDRIVE]->changepar(Overdrive_LPF,(int)o->value());}
    xywh {56 157 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 26000 step 1 value 20000 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ovrd_hpf {
    label HPF
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Overdrive_HPF);
 return;
} 
m_process->Rack_Effects[EFX_OVERDRIVE]->changepar(Overdrive_HPF,(int)o->value());}
    xywh {56 169 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 20000 step 1 value 20 textcolor 7
    class RKR_Slider
  }
  decl {CommonGuiMenu *m_dist_menu;} {private local
  }
  Function {parameter_refresh(int index)} {return_type void
  } {
    code {switch (index)
    {
    case Overdrive_DryWet:
        ovrd_WD->value(Dry_Wet(m_process->Rack_Effects[EFX_OVERDRIVE]->getpar(Overdrive_DryWet)));
        break;
    case Overdrive_Pan:
        ovrd_pan->value(m_process->Rack_Effects[EFX_OVERDRIVE]->getpar(Overdrive_Pan)-64);
        break;
    case Overdrive_LR_Cross:
        ovrd_LRc->value(m_process->Rack_Effects[EFX_OVERDRIVE]->getpar(Overdrive_LR_Cross));
        break;
    case Overdrive_Drive:
        ovrd_drive->value(m_process->Rack_Effects[EFX_OVERDRIVE]->getpar(Overdrive_Drive));
        break;
    case Overdrive_Level:
        ovrd_level->value(m_process->Rack_Effects[EFX_OVERDRIVE]->getpar(Overdrive_Level));
        break;
    case Overdrive_Type:
        ovrd_tipo->value(m_process->Rack_Effects[EFX_OVERDRIVE]->getpar(Overdrive_Type));
        break;
    case Overdrive_Negate:
        ovrd_neg->value(m_process->Rack_Effects[EFX_OVERDRIVE]->getpar(Overdrive_Negate));
        break;
    case Overdrive_LPF:
        ovrd_lpf->value(m_process->Rack_Effects[EFX_OVERDRIVE]->getpar(Overdrive_LPF));
        break;
    case Overdrive_HPF:
        ovrd_hpf->value(m_process->Rack_Effects[EFX_OVERDRIVE]->getpar(Overdrive_HPF));
        break;
    case Overdrive_Stereo:
        ovrd_st->value(m_process->Rack_Effects[EFX_OVERDRIVE]->getpar(Overdrive_Stereo));
        break;
    case Overdrive_Prefilter:
        ovrd_pf->value(m_process->Rack_Effects[EFX_OVERDRIVE]->getpar(Overdrive_Prefilter));
        break;
    }} {}
  }
}
