# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class RingGui {
  user_data 1 open selected
  xywh {1550 57 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button ring_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Bypass[EFX_RING]);
 return;
}
m_process->EFX_Bypass[EFX_RING]=(int)o->value();
if((int) o->value()==0)
m_process->Rack_Effects[EFX_RING]->cleanup();
m_parent->findpos(EFX_RING,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x34 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice ring_preset {
    label Preset
    user_data 12021
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12021))m_process->Rack_Effects[EFX_RING]->setpreset((int) o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_RING]; i++)
{
    parameter_refresh(i);
};}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label Saw_Sin
      xywh {52 52 36 21} labelsize 10
    }
    MenuItem {} {
      label {E string}
      xywh {52 52 36 21} labelsize 10
    }
    MenuItem {} {
      label {A string}
      xywh {62 62 36 21} labelsize 10
    }
    MenuItem {} {
      label Dissonance
      xywh {72 72 36 21} labelsize 10
    }
    MenuItem {} {
      label {Fast Beat}
      xywh {82 82 36 21} labelsize 10
    }
    MenuItem {} {
      label {Ring Amp}
      xywh {92 92 36 21} labelsize 10
    }
  }
  Fl_Value_Slider ring_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
{
 m_parent->getMIDIControl(MC_Ring_DryWet);
 return;
} 
m_process->Rack_Effects[EFX_RING]->changepar(Ring_DryWet,Dry_Wet((int)o->value()));}
    xywh {56 29 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ring_LRc {
    label {L/R Cross}
    callback {if(Fl::event_button()==3)
{
 m_parent->getMIDIControl(MC_Ring_LR_Cross);
 return;
} 
m_process->Rack_Effects[EFX_RING]->changepar(Ring_LR_Cross,(int)o->value());}
    xywh {56 42 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ring_input {
    label Input
    callback {if(Fl::event_button()==3)
{
 m_parent->getMIDIControl(MC_Ring_Input);
 return;
} 
m_process->Rack_Effects[EFX_RING]->changepar(Ring_Input,(int)o->value());}
    xywh {56 55 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 127 step 1 value 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ring_level {
    label Level
    callback {if(Fl::event_button()==3)
{
 m_parent->getMIDIControl(MC_Ring_Level);
 return;
} 
m_process->Rack_Effects[EFX_RING]->changepar(Ring_Level,(int)o->value());}
    xywh {56 68 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ring_pan {
    label Pan
    callback {if(Fl::event_button()==3)
{
 m_parent->getMIDIControl(MC_Ring_Pan);
 return;
} 
m_process->Rack_Effects[EFX_RING]->changepar(Ring_Pan,(int)o->value());}
    xywh {56 81 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button ring_st {
    label Stereo
    user_data 2
    callback {m_process->Rack_Effects[EFX_RING]->changepar(Ring_Stereo,(int)o->value());}
    xywh {28 92 52 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button ring_afreq {
    label {Auto Freq}
    user_data 2
    callback {m_process->Rack_Effects[EFX_RING]->changepar(Ring_Auto_Freq,(int)o->value());}
    xywh {80 92 69 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Value_Slider ring_depth {
    label Depth
    callback {if(Fl::event_button()==3)
{
 m_parent->getMIDIControl(MC_Ring_Depth);
 return;
} 
m_process->Rack_Effects[EFX_RING]->changepar(Ring_Depth,(int)o->value());}
    xywh {56 106 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ring_freq {
    label Freq
    callback {if(Fl::event_button()==3)
{
 m_parent->getMIDIControl(MC_Ring_Freq);
 return;
} 
m_process->Rack_Effects[EFX_RING]->changepar(Ring_Freq,(int)o->value());}
    tooltip Frequency xywh {56 118 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 20000 step 10 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ring_sin {
    label Sine
    callback {if(Fl::event_button()==3)
{
 m_parent->getMIDIControl(MC_Ring_Sine);
 return;
} 
m_process->Rack_Effects[EFX_RING]->changepar(Ring_Sine,(int)o->value());}
    xywh {56 130 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ring_tri {
    label Triangle
    callback {if(Fl::event_button()==3)
{
 m_parent->getMIDIControl(MC_Ring_Triangle);
 return;
} 
m_process->Rack_Effects[EFX_RING]->changepar(Ring_Triangle,(int)o->value());}
    xywh {56 142 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ring_saw {
    label Sawtooth
    callback {if(Fl::event_button()==3)
{
 m_parent->getMIDIControl(MC_Ring_Saw);
 return;
} 
m_process->Rack_Effects[EFX_RING]->changepar(Ring_Saw,(int)o->value());}
    xywh {56 154 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ring_squ {
    label Square
    callback {if(Fl::event_button()==3)
{
 m_parent->getMIDIControl(MC_Ring_Square);
 return;
} 
m_process->Rack_Effects[EFX_RING]->changepar(Ring_Square,(int)o->value());}
    xywh {56 167 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 textcolor 7
    class RKR_Slider
  }
  Function {parameter_refresh(int index)} {return_type void
  } {
    code {switch (index)
    {
    case Ring_DryWet:
        ring_WD->value(Dry_Wet(m_process->Rack_Effects[EFX_RING]->getpar(Ring_DryWet)));
        break;
    case Ring_Pan:
        ring_pan->value(m_process->Rack_Effects[EFX_RING]->getpar(Ring_Pan));
        break;
    case Ring_LR_Cross:
        ring_LRc->value(m_process->Rack_Effects[EFX_RING]->getpar(Ring_LR_Cross));
        break;
    case Ring_Level:
        ring_level->value(m_process->Rack_Effects[EFX_RING]->getpar(Ring_Level));
        break;
    case Ring_Depth:
        ring_depth->value(m_process->Rack_Effects[EFX_RING]->getpar(Ring_Depth));
        break;
    case Ring_Freq:
        ring_freq->value(m_process->Rack_Effects[EFX_RING]->getpar(Ring_Freq));
        break;
    case Ring_Stereo:
        ring_st->value(m_process->Rack_Effects[EFX_RING]->getpar(Ring_Stereo));
        break;
    case Ring_Sine:
        ring_sin->value(m_process->Rack_Effects[EFX_RING]->getpar(Ring_Sine));
        break;
    case Ring_Triangle:
        ring_tri->value(m_process->Rack_Effects[EFX_RING]->getpar(Ring_Triangle));
        break;
    case Ring_Saw:
        ring_saw->value(m_process->Rack_Effects[EFX_RING]->getpar(Ring_Saw));
        break;
    case Ring_Square:
        ring_squ->value(m_process->Rack_Effects[EFX_RING]->getpar(Ring_Square));
        break;
    case Ring_Input:
        ring_input->value(m_process->Rack_Effects[EFX_RING]->getpar(Ring_Input));
        break;
    case Ring_Auto_Freq:
        ring_afreq->value(m_process->Rack_Effects[EFX_RING]->getpar(Ring_Auto_Freq));
        break;
    }} {}
  }
}
