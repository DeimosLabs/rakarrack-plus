# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

widget_class CompressGui {
  user_data 1 open
  xywh {1505 143 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "sliderW.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"} visible position_relative
} {
  Fl_Light_Button compress_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(116);
 o->value(rkr->Compressor_Bypass);
 return;
}
rkr->Compressor_Bypass=(int)o->value();
rkr->efx_Compressor->cleanup();
rgui->findpos(1,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x32 color 62 selection_color 1 labelsize 10 align 84 when 1
    class RKR_Light_Button
  }
  Fl_Choice compress_preset {
    label Preset
    user_data 12001
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12001))rkr->efx_Compressor->setpreset(1,(int) o->value());
compress_threshold->value(rkr->efx_Compressor->getpar(1));
compress_Ratio->value(rkr->efx_Compressor->getpar(2));
compress_output->value(rkr->efx_Compressor->getpar(3));
compress_ATime->value(rkr->efx_Compressor->getpar(4));
compress_RTime->value(rkr->efx_Compressor->getpar(5));
Auto_Output->value(rkr->efx_Compressor->getpar(6));
compress_Knee->value(rkr->efx_Compressor->getpar(7));
Stereo->value(rkr->efx_Compressor->getpar(8));
Peak->value(rkr->efx_Compressor->getpar(9));} open
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
  } {
    MenuItem {} {
      label {2:1}
      xywh {32 32 36 21} labelsize 10
    }
    MenuItem {} {
      label {4:1}
      xywh {32 32 36 21} labelsize 10
    }
    MenuItem {} {
      label {8:1}
      xywh {32 32 36 21} labelsize 10
    }
    MenuItem {} {
      label Limiter
      xywh {42 42 36 21} labelsize 10
    }
  }
  Fl_Value_Slider compress_ATime {
    label {A. Time}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(142);
 return;
} 
rkr->efx_Compressor->changepar(4,(int)o->value());}
    xywh {53 39 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 10 maximum 250 step 1 value 2 textcolor 7
    class SliderW
  }
  Fl_Value_Slider compress_RTime {
    label {R. Time}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(143);
 return;
} 
rkr->efx_Compressor->changepar(5, (int) o->value());}
    xywh {53 59 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 10 maximum 500 step 1 value 120 textcolor 7
    class SliderW
  }
  Fl_Value_Slider compress_Ratio {
    label Ratio
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(144);
 return;
} 
rkr->efx_Compressor->changepar(2, (int) o->value());}
    xywh {53 79 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2 maximum 42 step 1 value 2 textcolor 7
    class SliderW
  }
  Fl_Value_Slider compress_Knee {
    label Knee
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(145);
 return;
} 
rkr->efx_Compressor->changepar(7, (int) o->value());}
    xywh {53 99 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 value 3 textcolor 7
    class SliderW
  }
  Fl_Value_Slider compress_threshold {
    label Thrhold
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(146);
 return;
} 
rkr->efx_Compressor->changepar(1, (int)o->value());}
    xywh {53 119 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -60 maximum -3 step 1 value -3 textcolor 7
    class SliderW
  }
  Fl_Value_Slider compress_output {
    label Output
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(147);
 return;
} 
rkr->efx_Compressor->changepar(3,(int)o->value());}
    xywh {53 139 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -40 maximum 0 step 1 textcolor 7
    class SliderW
  }
  Fl_Check_Button Auto_Output {
    label {Auto Output}
    user_data 2
    callback {rkr->efx_Compressor->changepar(6,(int)o->value());
if ((int) o->value() == 0) compress_output->do_callback();}
    xywh {19 166 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button Stereo {
    label Stereo
    user_data 2
    callback {rkr->efx_Compressor->changepar(8,(int)o->value());
if ((int) o->value() == 0) compress_output->do_callback();}
    tooltip {Level detect Left and Right separately.  Unchecked compresses according to L/R average.} xywh {104 166 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button Peak {
    label Peak
    user_data 2
    callback {rkr->efx_Compressor->changepar(9,(int)o->value());
if ((int) o->value() == 0) compress_output->do_callback();} selected
    tooltip {Peak Mode Compression} xywh {19 153 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
}
