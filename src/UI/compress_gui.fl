# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class CompressGui {open selected
  xywh {1667 73 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button compress_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Bypass[EFX_COMPRESSOR]);
 return;
}
m_process->EFX_Bypass[EFX_COMPRESSOR]=(int)o->value();
m_process->Rack_Effects[EFX_COMPRESSOR]->cleanup();
m_parent->findpos(EFX_COMPRESSOR,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x32 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice compress_preset {
    label Preset
    user_data UD_PRESET_COMPRESSOR
    callback {long long ud= (long long) v;
if((ud==0)||(ud==UD_PRESET_COMPRESSOR))
    m_process->Rack_Effects[EFX_COMPRESSOR]->setpreset((int) o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_COMPRESSOR]; i++)
{
    parameter_refresh(i);
};}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label {2:1}
      xywh {32 32 36 21} labelsize 10
    }
    MenuItem {} {
      label {4:1}
      xywh {32 32 36 21} labelsize 10
    }
    MenuItem {} {
      label {8:1}
      xywh {32 32 36 21} labelsize 10
    }
    MenuItem {} {
      label Limiter
      xywh {42 42 36 21} labelsize 10
    }
  }
  Fl_Value_Slider compress_ATime {
    label {A. Time}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Compress_Attack);
 return;
} 
m_process->Rack_Effects[EFX_COMPRESSOR]->changepar(Compress_Attack,(int)o->value());}
    xywh {56 39 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 10 maximum 250 step 1 value 2 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider compress_RTime {
    label {R. Time}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Compress_Release);
 return;
} 
m_process->Rack_Effects[EFX_COMPRESSOR]->changepar(Compress_Release, (int) o->value());}
    xywh {56 59 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 10 maximum 500 step 1 value 120 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider compress_Ratio {
    label Ratio
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Compress_Ratio);
 return;
} 
m_process->Rack_Effects[EFX_COMPRESSOR]->changepar(Compress_Ratio, (int) o->value());}
    xywh {56 79 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2 maximum 42 step 1 value 2 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider compress_Knee {
    label Knee
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Compress_Knee);
 return;
} 
m_process->Rack_Effects[EFX_COMPRESSOR]->changepar(Compress_Knee, (int) o->value());}
    xywh {56 99 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 100 step 1 value 3 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider compress_threshold {
    label Threshold
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Compress_Threshold);
 return;
} 
m_process->Rack_Effects[EFX_COMPRESSOR]->changepar(Compress_Threshold, (int)o->value());}
    xywh {56 119 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -60 maximum -3 step 1 value -3 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider compress_output {
    label Output
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Compress_Output);
 return;
} 
m_process->Rack_Effects[EFX_COMPRESSOR]->changepar(Compress_Output,(int)o->value());}
    xywh {56 139 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -40 maximum 0 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button Auto_Output {
    label {Auto Output}
    user_data 2
    callback {m_process->Rack_Effects[EFX_COMPRESSOR]->changepar(Compress_Auto_Out,(int)o->value());}
    xywh {19 166 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button Stereo {
    label Stereo
    user_data 2
    callback {m_process->Rack_Effects[EFX_COMPRESSOR]->changepar(Compress_Stereo,(int)o->value());}
    tooltip {Level detect Left and Right separately.  Unchecked compresses according to L/R average.} xywh {104 166 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button Peak {
    label Peak
    user_data 2
    callback {m_process->Rack_Effects[EFX_COMPRESSOR]->changepar(Compress_Peak,(int)o->value());}
    tooltip {Peak Mode Compression} xywh {19 153 15 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Function {parameter_refresh(int index)} {return_type void
  } {
    code {switch (index)
    {
    case Compress_Threshold:
        compress_threshold->value(m_process->Rack_Effects[EFX_COMPRESSOR]->getpar(Compress_Threshold));
        break;
    case Compress_Ratio:
        compress_Ratio->value(m_process->Rack_Effects[EFX_COMPRESSOR]->getpar(Compress_Ratio));
        break;
    case Compress_Output:
        compress_output->value(m_process->Rack_Effects[EFX_COMPRESSOR]->getpar(Compress_Output));
        break;
    case Compress_Attack:
        compress_ATime->value(m_process->Rack_Effects[EFX_COMPRESSOR]->getpar(Compress_Attack));
        break;
    case Compress_Release:
        compress_RTime->value(m_process->Rack_Effects[EFX_COMPRESSOR]->getpar(Compress_Release));
        break;
    case Compress_Auto_Out:
        Auto_Output->value(m_process->Rack_Effects[EFX_COMPRESSOR]->getpar(Compress_Auto_Out));
        break;
    case Compress_Knee:
        compress_Knee->value(m_process->Rack_Effects[EFX_COMPRESSOR]->getpar(Compress_Knee));
        break;
    case Compress_Stereo:
        Stereo->value(m_process->Rack_Effects[EFX_COMPRESSOR]->getpar(Compress_Stereo));
        break;
    case Compress_Peak:
        Peak->value(m_process->Rack_Effects[EFX_COMPRESSOR]->getpar(Compress_Peak));
        break;
    }} {}
  }
}
