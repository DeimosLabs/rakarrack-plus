# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class {\#include "common_gui_menu.h"} VibeGui {open selected
  xywh {1550 56 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  code3 {\#include "common_gui_menu.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button vibe_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Bypass[EFX_VIBE]);
 return;
}
m_process->EFX_Bypass[EFX_VIBE]=(int)o->value();
if((int) o->value()==0)
m_process->Rack_Effects[EFX_VIBE]->cleanup();
m_parent->findpos(EFX_VIBE,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x38 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice vibe_preset {
    label Preset
    user_data UD_PRESET_VIBE
    callback {long long ud= (long long) v;
if((ud==0)||(ud==UD_PRESET_VIBE))
    m_process->Rack_Effects[EFX_VIBE]->setpreset((int)o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_VIBE]; i++)
{
    parameter_refresh(i);
};}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label Classic
      xywh {82 82 36 21} labelsize 10
    }
    MenuItem {} {
      label {Stereo Classic}
      xywh {82 82 36 21} labelsize 10
    }
    MenuItem {} {
      label {Wide Vibe}
      xywh {10 10 36 21} labelsize 10
    }
    MenuItem {} {
      label {Classic Chorus}
      xywh {10 10 36 21} labelsize 10
    }
    MenuItem {} {
      label {Vibe Chorus}
      xywh {10 10 36 21} labelsize 10
    }
    MenuItem {} {
      label {Lush Chorus}
      xywh {10 10 36 21} labelsize 10
    }
    MenuItem {} {
      label {Sick Phaser}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Warble
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Vibe 9}
      xywh {10 10 36 21} labelsize 10
    }
  }
  Fl_Value_Slider vibe_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Vibe_DryWet);
 return;
}
m_process->Rack_Effects[EFX_VIBE]->changepar(Vibe_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 29 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider vibe_width {
    label Width
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Vibe_Width);
 return;
}
m_process->Rack_Effects[EFX_VIBE]->changepar(Vibe_Width,(int)o->value());}
    xywh {56 42 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider vibe_dpth {
    label Depth
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Vibe_Depth);
 return;
}
m_process->Rack_Effects[EFX_VIBE]->changepar(Vibe_Depth,(int)o->value());}
    xywh {56 55 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider vibe_freq {
    label Tempo
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Vibe_LFO_Tempo);
 return;
}
m_process->Rack_Effects[EFX_VIBE]->changepar(Vibe_LFO_Tempo,(int)o->value());}
    xywh {56 68 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider vibe_rnd {
    label Random
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Vibe_LFO_Random);
 return;
}
m_process->Rack_Effects[EFX_VIBE]->changepar(Vibe_LFO_Random,(int)o->value());}
    xywh {56 81 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Choice vibe_lfotype {
    label {LFO Type}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Vibe_LFO_Type);
 return;
}

m_process->Rack_Effects[EFX_VIBE]->changepar(Vibe_LFO_Type,(int)o->value());}
    xywh {78 96 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    code0 {o->menu(m_lfo_menu->get_lfo_type());}
    class RKR_Choice
  } {}
  Fl_Value_Slider vibe_stdf {
    label {Stereo Df}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Vibe_LFO_Stereo);
 return;
}
m_process->Rack_Effects[EFX_VIBE]->changepar(Vibe_LFO_Stereo,(int)o->value());}
    tooltip {LFO L/R Delay} xywh {56 118 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider vibe_fb {
    label Feedback
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Vibe_Feedback);
 return;
}
m_process->Rack_Effects[EFX_VIBE]->changepar(Vibe_Feedback,(int)(o->value()+64));}
    xywh {56 131 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider vibe_LR {
    label {L/R Cross}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Vibe_LR_Cross);
 return;
}
m_process->Rack_Effects[EFX_VIBE]->changepar(Vibe_LR_Cross,(int)(o->value()));}
    xywh {56 144 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 128 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider vibe_pan {
    label Pan
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Vibe_Pan);
 return;
}
m_process->Rack_Effects[EFX_VIBE]->changepar(Vibe_Pan,(int)(o->value()+64));}
    xywh {56 157 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button vibe_stereo {
    label Stereo
    user_data 2
    callback {m_process->Rack_Effects[EFX_VIBE]->changepar(Vibe_Stereo,(int)o->value())}
    xywh {103 169 43 14} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  decl {CommonGuiMenu *m_lfo_menu;} {private local
  }
  Function {parameter_refresh(int index)} {return_type void
  } {
    code {switch (index)
    {
    case Vibe_Width:
        vibe_width->value(m_process->Rack_Effects[EFX_VIBE]->getpar(Vibe_Width));
        break;
    case Vibe_LFO_Tempo:
        vibe_freq->value(m_process->Rack_Effects[EFX_VIBE]->getpar(Vibe_LFO_Tempo));
        break;
    case Vibe_LFO_Random:
        vibe_rnd->value(m_process->Rack_Effects[EFX_VIBE]->getpar(Vibe_LFO_Random));
        break;
    case Vibe_LFO_Type:
        vibe_lfotype->value(m_process->Rack_Effects[EFX_VIBE]->getpar(Vibe_LFO_Type));
        break;
    case Vibe_LFO_Stereo:
        vibe_stdf->value(m_process->Rack_Effects[EFX_VIBE]->getpar(Vibe_LFO_Stereo));
        break;
    case Vibe_Pan:
        vibe_pan->value(m_process->Rack_Effects[EFX_VIBE]->getpar(Vibe_Pan)-64);
        break;
    case Vibe_DryWet:
        vibe_WD->value(Dry_Wet(m_process->Rack_Effects[EFX_VIBE]->getpar(Vibe_DryWet)));
        break;
    case Vibe_Feedback:
        vibe_fb->value(m_process->Rack_Effects[EFX_VIBE]->getpar(Vibe_Feedback)-64);
        break;
    case Vibe_Depth:
        vibe_dpth->value(m_process->Rack_Effects[EFX_VIBE]->getpar(Vibe_Depth));
        break;
    case Vibe_LR_Cross:
        vibe_LR->value(m_process->Rack_Effects[EFX_VIBE]->getpar(Vibe_LR_Cross));
        break;
    case Vibe_Stereo:
        vibe_stereo->value(m_process->Rack_Effects[EFX_VIBE]->getpar(Vibe_Stereo));
        break;
    }} {}
  }
  Function {tap_tempo_update()} {return_type void
  } {
    code {vibe_freq->value(m_process->Rack_Effects[EFX_VIBE]->getpar(Vibe_LFO_Tempo));} {}
  }
}
