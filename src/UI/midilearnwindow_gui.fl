# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Box.h"} {public global
}

decl {\#include "RKR_Browser.h"} {public global
}

decl {\#include "RKR_Button.h"} {public global
}

decl {\#include "RKR_Value_Input.h"} {public global
}

widget_class MidiLearnWindowGui {open selected
  xywh {24 108 640 480} type Double color 22 selection_color 7 resizable
  code0 {\#include "rakarrack.h"}
  code1 {this->m_process = NULL;}
  code2 {this->m_parent = NULL;}
  class Fl_Double_Window visible
} {
  Function {initialize(RKR *_rkr,RKRGUI *_rgui )} {open C return_type void
  } {
    code {m_process = _rkr;
m_parent= _rgui;} {}
  }
  Fl_Box Fondo4 {
    xywh {1 1 640 480}
  }
  Fl_Box midi_learn {
    label {MIDI Learn}
    xywh {250 18 134 32} labelsize 23
    code0 {o->set_label_offset(13); // 10 - 23}
    class RKR_Box
  }
  Fl_Browser Epar {
    user_data UD_RKR_Browser_Search
    callback {m_parent->DisAssigns();}
    xywh {10 58 201 348} type Hold textcolor 7
    class RKR_Browser
  }
  Fl_Button GMM {
    label {Get MIDI Message}
    callback {m_process->ControlGet=0;
m_process->CountWait=0;
m_process->RControl=1;}
    xywh {10 445 135 30}
    code0 {o->set_label_offset(4);}
    code1 {o->set_button_type(BUTTON_MIDI_GET);}
    class RKR_Button
  }
  Fl_Browser TPresets {
    user_data UD_RKR_Browser_Search
    xywh {430 61 201 348} type Hold when 3 textcolor 7
    class RKR_Browser
  }
  Fl_Button CopyF {
    label {Copy from: }
    callback {memcpy(m_process->XUserMIDI,m_process->Bank[TPresets->value()].XUserMIDI,sizeof(m_process->XUserMIDI));
  m_parent->DisAssigns();}
    xywh {430 20 95 30}
    code0 {o->set_label_offset(4);}
    class RKR_Button
  }
  Fl_Button CopyT {
    label {Copy to: }
    callback {memcpy(m_process->Bank[TPresets->value()].XUserMIDI,m_process->XUserMIDI, sizeof(m_process->XUserMIDI));}
    xywh {535 20 95 30}
    code0 {o->set_label_offset(4);}
    class RKR_Button
  }
  Fl_Group Ares {
    xywh {215 60 205 180} box THIN_DOWN_BOX align 80
    class RKR_Group
  } {
    Fl_Box Ar1 {
      xywh {220 65 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar2 {
      xywh {270 65 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar3 {
      xywh {320 65 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar4 {
      xywh {370 65 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar5 {
      xywh {220 100 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar6 {
      xywh {270 100 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar7 {
      xywh {320 100 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar8 {
      xywh {370 100 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar9 {
      xywh {220 135 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar10 {
      xywh {270 135 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar11 {
      xywh {320 135 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar12 {
      xywh {370 135 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar13 {
      xywh {220 170 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar14 {
      xywh {270 170 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar15 {
      xywh {320 170 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar16 {
      xywh {370 170 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar17 {
      xywh {220 205 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar18 {
      xywh {270 205 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar19 {
      xywh {320 205 45 30} box DOWN_BOX
      class RKR_Box
    }
    Fl_Box Ar20 {
      xywh {370 205 45 30} box DOWN_BOX
      class RKR_Box
    }
  }
  Fl_Button ClearA {
    label {Clear Assignements}
    callback {int i, j,k;
int the_one;

if (m_process->ML_filter==0)
 the_one = m_process->mc_efx_params[(int)Epar->value()-1].MC_params_index;
 else
 the_one = m_process->ML_clist[(int)Epar->value()-1];


for(i=0; i<128; i++)
  {
    for(j=0;j<20;j++)
      {
         if (m_process->XUserMIDI[i][j] == the_one)
           {
             for(k=j+1;k<20;k++) m_process->XUserMIDI[i][k-1]=m_process->XUserMIDI[i][k];
             m_process->XUserMIDI[i][19]=0;             
           }
       
       }  
   }
   
    m_parent->DisAssigns();}
    xywh {245 250 150 30}
    code0 {o->set_label_offset(4);}
    class RKR_Button
  }
  Fl_Button ClearP {
    label {Clear Preset}
    callback {memset(m_process->XUserMIDI, 0, sizeof(m_process->XUserMIDI));
    m_parent->DisAssigns();}
    xywh {245 285 150 30}
    code0 {o->set_label_offset(4);}
    class RKR_Button
  }
  Fl_Button Assign {
    label Assign
    callback {int i;

int the_one = 0;

if((int)Epar->value()-1 >= 0)
{
    if (m_process->ML_filter==0)
        the_one = m_process->mc_efx_params[(int)Epar->value()-1].MC_params_index;
    else
        the_one = m_process->ML_clist[(int)Epar->value()-1];
}

for(i=0;i<20;i++)

 {
    if(m_process->XUserMIDI[(int)Disp_Control->value()][i] == the_one) return;

    if(m_process->XUserMIDI[(int)Disp_Control->value()][i] ==0)
       {
         m_process->XUserMIDI[(int)Disp_Control->value()][i]=the_one;
         break;
        }
 }
 
 
    m_parent->DisAssigns();}
    xywh {112 20 98 30}
    code0 {o->set_label_offset(4);}
    class RKR_Button
  }
  Fl_Button AssignA {
    label {Assign to All}
    callback {int i,j;
int the_one = 0;

if((int)Epar->value()-1 >= 0)
{
    if (m_process->ML_filter==0)
        the_one = m_process->mc_efx_params[(int)Epar->value()-1].MC_params_index;
    else
        the_one = m_process->ML_clist[(int)Epar->value()-1];
}

for(j=1;j<61;j++)

{
for(i=0;i<20;i++)

 {
    if(m_process->Bank[j].XUserMIDI[(int)Disp_Control->value()][i] == the_one) break;

    if(m_process->Bank[j].XUserMIDI[(int)Disp_Control->value()][i] ==0)
       {
         m_process->Bank[j].XUserMIDI[(int)Disp_Control->value()][i]=the_one;
         break;
        }
 }
 
} 

Assign->do_callback();}
    xywh {10 20 98 30}
    code0 {o->set_label_offset(4);}
    class RKR_Button
  }
  Fl_Button CancelRec {
    label Cancel
    callback {m_process->RControl = 0;
GMM->color(global_fore_color);
GMM->redraw();}
    xywh {200 450 60 20}
    code0 {o->set_label_offset(4);}
    class RKR_Button
  }
  Fl_Value_Input Disp_Control {
    callback {if(o->value()> 127) o->value(127);
if(o->value()< 1) o->value(1);}
    xywh {155 445 40 30} minimum 1 maximum 127 step 1 value 1 textcolor 7
    code0 {o->set_text_offset(4);}
    class RKR_Value_Input
  }
  Fl_Button CopyTAll {
    label {Copy to All}
    callback {int i;
for(i=1;i<61;i++) memcpy(m_process->Bank[i].XUserMIDI,m_process->XUserMIDI, sizeof(m_process->XUserMIDI));}
    xywh {480 412 150 30}
    code0 {o->set_label_offset(4);}
    class RKR_Button
  }
  Fl_Button CloseML {
    label Close
    callback {do_callback();}
    xywh {480 445 150 30}
    code0 {o->set_label_offset(4);}
    class RKR_Button
  }
  Fl_Group Filters_ML {
    xywh {10 410 200 31} box DOWN_BOX
    class RKR_Group
  } {
    Fl_Button M_fil_all {
      label All
      callback {m_process->ML_filter=0;
      m_parent->FillML();}
      xywh {16 415 89 20} type Radio
      code0 {o->set_label_offset(4);}
      class RKR_Button
    }
    Fl_Button M_fil_current {
      label Current
      callback {m_process->ML_filter=1;
      m_parent->FillML();}
      xywh {113 415 89 20} type Radio
      code0 {o->set_label_offset(4);}
      class RKR_Button
    }
  }
  decl {RKR* m_process} {private local
  }
  decl {RKRGUI* m_parent} {private local
  }
}
