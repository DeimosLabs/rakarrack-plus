// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "ryanwah_gui.h"

void RyanwahGui::cb_ryanwah_activar_i(RKR_Light_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(116);
 o->value(rkr->RyanWah_Bypass);
 return;
}
rkr->RyanWah_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_RyanWah->cleanup();
rgui->findpos(31,(int)o->value(),o);
}
void RyanwahGui::cb_ryanwah_activar(RKR_Light_Button* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_activar_i(o,v);
}

void RyanwahGui::cb_ryanwah_preset_i(Fl_Choice* o, void* v) {
  long long ud= (long long) v;
if((ud==0)||(ud==12031))rkr->efx_RyanWah->setpreset((int) o->value());
ryanwah_WD->value(Dry_Wet(rkr->efx_RyanWah->getpar(0)));

int temp=rkr->efx_RyanWah->getpar(17);

if((temp==1) || (temp==3)) ryanwah_qm->value(1); else ryanwah_qm->value(0);
if((temp==2) || (temp==3)) ryanwah_nat->value(1); else ryanwah_nat->value(0);


ryanwah_q->value(rkr->efx_RyanWah->getpar(1));
ryanwah_freq->value(rkr->efx_RyanWah->getpar(2));
ryanwah_Rnd->value(rkr->efx_RyanWah->getpar(3));
ryanwah_lfotype->value(rkr->efx_RyanWah->getpar(4));
ryanwah_St->value(rkr->efx_RyanWah->getpar(5)-64);
ryanwah_dpth->value(rkr->efx_RyanWah->getpar(6));
ryanwah_ampsns->value(rkr->efx_RyanWah->getpar(7));
ryanwah_ampsnsinv->value(rkr->efx_RyanWah->getpar(8));
ryanwah_smooth->value(rkr->efx_RyanWah->getpar(9));
ryanwah_lp->value(rkr->efx_RyanWah->getpar(10));
ryanwah_bp->value(rkr->efx_RyanWah->getpar(11));
ryanwah_hp->value(rkr->efx_RyanWah->getpar(12));
svfilter_stages->value(rkr->efx_RyanWah->getpar(13));
ryanwah_rng->value(rkr->efx_RyanWah->getpar(14));
ryanwah_minfreq->value(rkr->efx_RyanWah->getpar(15));
ryanwah_res->value(rkr->efx_RyanWah->getpar(16));
o->value(rkr->efx_RyanWah->getpar(18));
o->redraw();
}
void RyanwahGui::cb_ryanwah_preset(Fl_Choice* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_preset_i(o,v);
}

Fl_Menu_Item RyanwahGui::menu_ryanwah_preset[] = {
 {"WahWah", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Mutron", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Phase Wah", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Phaser", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Quack Quack", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"SmoothTron", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Wah Fever", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RyanwahGui::cb_ryanwah_WD_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(256);
 return;
}
rkr->efx_RyanWah->changepar(0,Dry_Wet((int)(o->value())));
}
void RyanwahGui::cb_ryanwah_WD(SliderW* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_WD_i(o,v);
}

void RyanwahGui::cb_ryanwah_qm_i(RKR_Check_Button* o, void*) {
  if((int)o->value()) 
rkr->efx_RyanWah->Pmode +=1;
else
rkr->efx_RyanWah->Pmode -=1;
rkr->efx_RyanWah->changepar(17,rkr->efx_RyanWah->Pmode);
}
void RyanwahGui::cb_ryanwah_qm(RKR_Check_Button* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_qm_i(o,v);
}

void RyanwahGui::cb_ryanwah_lp_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(257);
 return;
}
rkr->efx_RyanWah->changepar(10,(int)o->value());
}
void RyanwahGui::cb_ryanwah_lp(SliderW* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_lp_i(o,v);
}

void RyanwahGui::cb_ryanwah_nat_i(RKR_Check_Button* o, void*) {
  if((int)o->value()) 
rkr->efx_RyanWah->Pmode +=2;
else
rkr->efx_RyanWah->Pmode -=2;
rkr->efx_RyanWah->changepar(17,rkr->efx_RyanWah->Pmode);
}
void RyanwahGui::cb_ryanwah_nat(RKR_Check_Button* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_nat_i(o,v);
}

void RyanwahGui::cb_ryanwah_bp_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(258);
 return;
}
rkr->efx_RyanWah->changepar(11,(int)o->value());
}
void RyanwahGui::cb_ryanwah_bp(SliderW* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_bp_i(o,v);
}

void RyanwahGui::cb_ryanwah_res_i(RKR_Check_Button* o, void*) {
  rkr->efx_RyanWah->changepar(16,(int)o->value());
}
void RyanwahGui::cb_ryanwah_res(RKR_Check_Button* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_res_i(o,v);
}

void RyanwahGui::cb_ryanwah_hp_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(259);
 return;
}
rkr->efx_RyanWah->changepar(12,(int)o->value());
}
void RyanwahGui::cb_ryanwah_hp(SliderW* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_hp_i(o,v);
}

void RyanwahGui::cb_svfilter_stages_i(Fl_Counter* o, void*) {
  rkr->efx_RyanWah->changepar(13,(int)o->value());
}
void RyanwahGui::cb_svfilter_stages(Fl_Counter* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_svfilter_stages_i(o,v);
}

void RyanwahGui::cb_ryanwah_lfotype_i(Fl_Choice* o, void*) {
  rkr->efx_RyanWah->changepar(4,(int)o->value());
}
void RyanwahGui::cb_ryanwah_lfotype(Fl_Choice* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_lfotype_i(o,v);
}

void RyanwahGui::cb_ryanwah_dpth_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(260);
 return;
}
rkr->efx_RyanWah->changepar(6,(int)o->value());
}
void RyanwahGui::cb_ryanwah_dpth(SliderW* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_dpth_i(o,v);
}

void RyanwahGui::cb_ryanwah_freq_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(261);
 return;
}
rkr->efx_RyanWah->changepar(2,(int)o->value());
}
void RyanwahGui::cb_ryanwah_freq(SliderW* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_freq_i(o,v);
}

void RyanwahGui::cb_ryanwah_q_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(262);
 return;
}
rkr->efx_RyanWah->changepar(1,(int)(o->value()));
}
void RyanwahGui::cb_ryanwah_q(SliderW* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_q_i(o,v);
}

void RyanwahGui::cb_ryanwah_rng_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(263);
 return;
}
rkr->efx_RyanWah->changepar(14,(int)o->value());
}
void RyanwahGui::cb_ryanwah_rng(SliderW* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_rng_i(o,v);
}

void RyanwahGui::cb_ryanwah_ampsnsinv_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(264);
 return;
}
rkr->efx_RyanWah->changepar(8,(int)o->value());
}
void RyanwahGui::cb_ryanwah_ampsnsinv(SliderW* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_ampsnsinv_i(o,v);
}

void RyanwahGui::cb_ryanwah_ampsns_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(265);
 return;
}
rkr->efx_RyanWah->changepar(7,(int)o->value());
}
void RyanwahGui::cb_ryanwah_ampsns(SliderW* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_ampsns_i(o,v);
}

void RyanwahGui::cb_ryanwah_smooth_i(RKR_Value_Input* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(266);
 return;
}
rkr->efx_RyanWah->changepar(9,(int)o->value());
}
void RyanwahGui::cb_ryanwah_smooth(RKR_Value_Input* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_smooth_i(o,v);
}

void RyanwahGui::cb_ryanwah_Rnd_i(RKR_Value_Input* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(426);
 return;
}
rkr->efx_RyanWah->changepar(3,(int)o->value());
}
void RyanwahGui::cb_ryanwah_Rnd(RKR_Value_Input* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_Rnd_i(o,v);
}

void RyanwahGui::cb_ryanwah_St_i(RKR_Value_Input* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(427);
 return;
}
rkr->efx_RyanWah->changepar(5,(int)o->value()+64);
}
void RyanwahGui::cb_ryanwah_St(RKR_Value_Input* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_St_i(o,v);
}

void RyanwahGui::cb_ryanwah_minfreq_i(RKR_Value_Input* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(428);
 return;
}
rkr->efx_RyanWah->changepar(15,(int)o->value());
}
void RyanwahGui::cb_ryanwah_minfreq(RKR_Value_Input* o, void* v) {
  ((RyanwahGui*)(o->parent()))->cb_ryanwah_minfreq_i(o,v);
}
RyanwahGui::RyanwahGui(int X, int Y, int W, int H, const char *L)
  : Fl_Group(0, 0, W, H, L) {
this->box(FL_UP_BOX);
this->color(FL_FOREGROUND_COLOR);
this->selection_color(FL_FOREGROUND_COLOR);
this->user_data((void*)(1));
this->align(Fl_Align(96|FL_ALIGN_INSIDE));
{ ryanwah_activar = new RKR_Light_Button(6, 5, 34, 18, "On");
  ryanwah_activar->box(FL_UP_BOX);
  ryanwah_activar->shortcut(0x36);
  ryanwah_activar->color((Fl_Color)62);
  ryanwah_activar->selection_color((Fl_Color)1);
  ryanwah_activar->labeltype(FL_NORMAL_LABEL);
  ryanwah_activar->labelfont(0);
  ryanwah_activar->labelsize(10);
  ryanwah_activar->labelcolor(FL_FOREGROUND_COLOR);
  ryanwah_activar->callback((Fl_Callback*)cb_ryanwah_activar, (void*)(2));
  ryanwah_activar->align(Fl_Align(68|FL_ALIGN_INSIDE));
  ryanwah_activar->when(FL_WHEN_CHANGED);
} // RKR_Light_Button* ryanwah_activar
{ ryanwah_preset = new Fl_Choice(78, 5, 76, 18, "Preset");
  ryanwah_preset->down_box(FL_BORDER_BOX);
  ryanwah_preset->selection_color(FL_FOREGROUND_COLOR);
  ryanwah_preset->labelsize(10);
  ryanwah_preset->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_preset->textsize(10);
  ryanwah_preset->textcolor(FL_BACKGROUND2_COLOR);
  ryanwah_preset->callback((Fl_Callback*)cb_ryanwah_preset, (void*)(12031));
  ryanwah_preset->when(FL_WHEN_RELEASE_ALWAYS);
  ryanwah_preset->menu(menu_ryanwah_preset);
} // Fl_Choice* ryanwah_preset
{ ryanwah_WD = new SliderW(56, 25, 100, 10, "Dry/Wet");
  ryanwah_WD->type(5);
  ryanwah_WD->box(FL_FLAT_BOX);
  ryanwah_WD->color((Fl_Color)178);
  ryanwah_WD->selection_color((Fl_Color)62);
  ryanwah_WD->labeltype(FL_NORMAL_LABEL);
  ryanwah_WD->labelfont(0);
  ryanwah_WD->labelsize(10);
  ryanwah_WD->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_WD->maximum(127);
  ryanwah_WD->step(1);
  ryanwah_WD->textcolor(FL_BACKGROUND2_COLOR);
  ryanwah_WD->callback((Fl_Callback*)cb_ryanwah_WD);
  ryanwah_WD->align(Fl_Align(FL_ALIGN_LEFT));
  ryanwah_WD->when(FL_WHEN_CHANGED);
} // SliderW* ryanwah_WD
{ ryanwah_qm = new RKR_Check_Button(18, 34, 15, 15, "M");
  ryanwah_qm->tooltip("Analog Gain Mode");
  ryanwah_qm->box(FL_NO_BOX);
  ryanwah_qm->down_box(FL_BORDER_BOX);
  ryanwah_qm->color(FL_BACKGROUND_COLOR);
  ryanwah_qm->selection_color(FL_FOREGROUND_COLOR);
  ryanwah_qm->labeltype(FL_NORMAL_LABEL);
  ryanwah_qm->labelfont(0);
  ryanwah_qm->labelsize(10);
  ryanwah_qm->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_qm->callback((Fl_Callback*)cb_ryanwah_qm, (void*)(2));
  ryanwah_qm->align(Fl_Align(FL_ALIGN_LEFT));
  ryanwah_qm->when(FL_WHEN_RELEASE);
} // RKR_Check_Button* ryanwah_qm
{ ryanwah_lp = new SliderW(56, 37, 100, 10, "LP");
  ryanwah_lp->tooltip("Lowpass Level");
  ryanwah_lp->type(5);
  ryanwah_lp->box(FL_FLAT_BOX);
  ryanwah_lp->color((Fl_Color)178);
  ryanwah_lp->selection_color((Fl_Color)62);
  ryanwah_lp->labeltype(FL_NORMAL_LABEL);
  ryanwah_lp->labelfont(0);
  ryanwah_lp->labelsize(10);
  ryanwah_lp->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_lp->minimum(-64);
  ryanwah_lp->maximum(64);
  ryanwah_lp->step(1);
  ryanwah_lp->textcolor(FL_BACKGROUND2_COLOR);
  ryanwah_lp->callback((Fl_Callback*)cb_ryanwah_lp);
  ryanwah_lp->align(Fl_Align(FL_ALIGN_LEFT));
  ryanwah_lp->when(FL_WHEN_CHANGED);
} // SliderW* ryanwah_lp
{ ryanwah_nat = new RKR_Check_Button(18, 44, 15, 15, "N");
  ryanwah_nat->tooltip("Exponential Wah");
  ryanwah_nat->box(FL_NO_BOX);
  ryanwah_nat->down_box(FL_BORDER_BOX);
  ryanwah_nat->color(FL_BACKGROUND_COLOR);
  ryanwah_nat->selection_color(FL_FOREGROUND_COLOR);
  ryanwah_nat->labeltype(FL_NORMAL_LABEL);
  ryanwah_nat->labelfont(0);
  ryanwah_nat->labelsize(10);
  ryanwah_nat->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_nat->callback((Fl_Callback*)cb_ryanwah_nat, (void*)(2));
  ryanwah_nat->align(Fl_Align(FL_ALIGN_LEFT));
  ryanwah_nat->when(FL_WHEN_RELEASE);
} // RKR_Check_Button* ryanwah_nat
{ ryanwah_bp = new SliderW(56, 49, 100, 10, "BP");
  ryanwah_bp->tooltip("Bandpass Level");
  ryanwah_bp->type(5);
  ryanwah_bp->box(FL_FLAT_BOX);
  ryanwah_bp->color((Fl_Color)178);
  ryanwah_bp->selection_color((Fl_Color)62);
  ryanwah_bp->labeltype(FL_NORMAL_LABEL);
  ryanwah_bp->labelfont(0);
  ryanwah_bp->labelsize(10);
  ryanwah_bp->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_bp->minimum(-64);
  ryanwah_bp->maximum(64);
  ryanwah_bp->step(1);
  ryanwah_bp->textcolor(FL_BACKGROUND2_COLOR);
  ryanwah_bp->callback((Fl_Callback*)cb_ryanwah_bp);
  ryanwah_bp->align(Fl_Align(FL_ALIGN_LEFT));
  ryanwah_bp->when(FL_WHEN_CHANGED);
} // SliderW* ryanwah_bp
{ ryanwah_res = new RKR_Check_Button(18, 54, 15, 15, "R");
  ryanwah_res->tooltip("Modulate Resonance");
  ryanwah_res->box(FL_NO_BOX);
  ryanwah_res->down_box(FL_BORDER_BOX);
  ryanwah_res->color(FL_BACKGROUND_COLOR);
  ryanwah_res->selection_color(FL_FOREGROUND_COLOR);
  ryanwah_res->labeltype(FL_NORMAL_LABEL);
  ryanwah_res->labelfont(0);
  ryanwah_res->labelsize(10);
  ryanwah_res->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_res->callback((Fl_Callback*)cb_ryanwah_res, (void*)(2));
  ryanwah_res->align(Fl_Align(FL_ALIGN_LEFT));
  ryanwah_res->when(FL_WHEN_RELEASE);
} // RKR_Check_Button* ryanwah_res
{ ryanwah_hp = new SliderW(56, 61, 100, 10, "HP");
  ryanwah_hp->tooltip("Highpass Level");
  ryanwah_hp->type(5);
  ryanwah_hp->box(FL_FLAT_BOX);
  ryanwah_hp->color((Fl_Color)178);
  ryanwah_hp->selection_color((Fl_Color)62);
  ryanwah_hp->labeltype(FL_NORMAL_LABEL);
  ryanwah_hp->labelfont(0);
  ryanwah_hp->labelsize(10);
  ryanwah_hp->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_hp->minimum(-64);
  ryanwah_hp->maximum(64);
  ryanwah_hp->step(1);
  ryanwah_hp->textcolor(FL_BACKGROUND2_COLOR);
  ryanwah_hp->callback((Fl_Callback*)cb_ryanwah_hp);
  ryanwah_hp->align(Fl_Align(FL_ALIGN_LEFT));
  ryanwah_hp->when(FL_WHEN_CHANGED);
} // SliderW* ryanwah_hp
{ svfilter_stages = new Fl_Counter(27, 74, 27, 12, "Stg");
  svfilter_stages->tooltip("Filter Stages");
  svfilter_stages->type(1);
  svfilter_stages->box(FL_THIN_UP_BOX);
  svfilter_stages->labelsize(10);
  svfilter_stages->labelcolor(FL_BACKGROUND2_COLOR);
  svfilter_stages->minimum(1);
  svfilter_stages->maximum(12);
  svfilter_stages->step(1);
  svfilter_stages->value(1);
  svfilter_stages->textsize(9);
  svfilter_stages->callback((Fl_Callback*)cb_svfilter_stages);
  svfilter_stages->align(Fl_Align(FL_ALIGN_LEFT));
} // Fl_Counter* svfilter_stages
{ Fl_Choice* o = ryanwah_lfotype = new Fl_Choice(80, 73, 72, 16, "LFO");
  ryanwah_lfotype->down_box(FL_BORDER_BOX);
  ryanwah_lfotype->selection_color(FL_FOREGROUND_COLOR);
  ryanwah_lfotype->labelsize(10);
  ryanwah_lfotype->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_lfotype->textsize(10);
  ryanwah_lfotype->textcolor(FL_BACKGROUND2_COLOR);
  ryanwah_lfotype->callback((Fl_Callback*)cb_ryanwah_lfotype);
  o->menu(m_lfo_menu->get_lfo_type());
} // Fl_Choice* ryanwah_lfotype
{ ryanwah_dpth = new SliderW(56, 91, 100, 10, "Depth");
  ryanwah_dpth->type(5);
  ryanwah_dpth->box(FL_FLAT_BOX);
  ryanwah_dpth->color((Fl_Color)178);
  ryanwah_dpth->selection_color((Fl_Color)62);
  ryanwah_dpth->labeltype(FL_NORMAL_LABEL);
  ryanwah_dpth->labelfont(0);
  ryanwah_dpth->labelsize(10);
  ryanwah_dpth->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_dpth->maximum(127);
  ryanwah_dpth->step(1);
  ryanwah_dpth->textcolor(FL_BACKGROUND2_COLOR);
  ryanwah_dpth->callback((Fl_Callback*)cb_ryanwah_dpth);
  ryanwah_dpth->align(Fl_Align(FL_ALIGN_LEFT));
  ryanwah_dpth->when(FL_WHEN_CHANGED);
} // SliderW* ryanwah_dpth
{ ryanwah_freq = new SliderW(56, 103, 100, 10, "Tempo");
  ryanwah_freq->type(5);
  ryanwah_freq->box(FL_FLAT_BOX);
  ryanwah_freq->color((Fl_Color)178);
  ryanwah_freq->selection_color((Fl_Color)62);
  ryanwah_freq->labeltype(FL_NORMAL_LABEL);
  ryanwah_freq->labelfont(0);
  ryanwah_freq->labelsize(10);
  ryanwah_freq->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_freq->minimum(1);
  ryanwah_freq->maximum(600);
  ryanwah_freq->step(1);
  ryanwah_freq->textcolor(FL_BACKGROUND2_COLOR);
  ryanwah_freq->callback((Fl_Callback*)cb_ryanwah_freq);
  ryanwah_freq->align(Fl_Align(FL_ALIGN_LEFT));
  ryanwah_freq->when(FL_WHEN_CHANGED);
} // SliderW* ryanwah_freq
{ ryanwah_q = new SliderW(56, 116, 100, 10, "Res.");
  ryanwah_q->tooltip("Resonance");
  ryanwah_q->type(5);
  ryanwah_q->box(FL_FLAT_BOX);
  ryanwah_q->color((Fl_Color)178);
  ryanwah_q->selection_color((Fl_Color)62);
  ryanwah_q->labeltype(FL_NORMAL_LABEL);
  ryanwah_q->labelfont(0);
  ryanwah_q->labelsize(10);
  ryanwah_q->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_q->minimum(1);
  ryanwah_q->maximum(127);
  ryanwah_q->step(1);
  ryanwah_q->textcolor(FL_BACKGROUND2_COLOR);
  ryanwah_q->callback((Fl_Callback*)cb_ryanwah_q);
  ryanwah_q->align(Fl_Align(FL_ALIGN_LEFT));
  ryanwah_q->when(FL_WHEN_CHANGED);
} // SliderW* ryanwah_q
{ ryanwah_rng = new SliderW(56, 128, 100, 10, "Range");
  ryanwah_rng->tooltip("Sweep Range");
  ryanwah_rng->type(5);
  ryanwah_rng->box(FL_FLAT_BOX);
  ryanwah_rng->color((Fl_Color)178);
  ryanwah_rng->selection_color((Fl_Color)62);
  ryanwah_rng->labeltype(FL_NORMAL_LABEL);
  ryanwah_rng->labelfont(0);
  ryanwah_rng->labelsize(10);
  ryanwah_rng->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_rng->minimum(10);
  ryanwah_rng->maximum(6000);
  ryanwah_rng->step(1);
  ryanwah_rng->textcolor(FL_BACKGROUND2_COLOR);
  ryanwah_rng->callback((Fl_Callback*)cb_ryanwah_rng);
  ryanwah_rng->align(Fl_Align(FL_ALIGN_LEFT));
  ryanwah_rng->when(FL_WHEN_CHANGED);
} // SliderW* ryanwah_rng
{ ryanwah_ampsnsinv = new SliderW(56, 140, 100, 10, "Wah");
  ryanwah_ampsnsinv->type(5);
  ryanwah_ampsnsinv->box(FL_FLAT_BOX);
  ryanwah_ampsnsinv->color((Fl_Color)178);
  ryanwah_ampsnsinv->selection_color((Fl_Color)62);
  ryanwah_ampsnsinv->labeltype(FL_NORMAL_LABEL);
  ryanwah_ampsnsinv->labelfont(0);
  ryanwah_ampsnsinv->labelsize(10);
  ryanwah_ampsnsinv->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_ampsnsinv->maximum(127);
  ryanwah_ampsnsinv->step(1);
  ryanwah_ampsnsinv->textcolor(FL_BACKGROUND2_COLOR);
  ryanwah_ampsnsinv->callback((Fl_Callback*)cb_ryanwah_ampsnsinv);
  ryanwah_ampsnsinv->align(Fl_Align(FL_ALIGN_LEFT));
  ryanwah_ampsnsinv->when(FL_WHEN_CHANGED);
} // SliderW* ryanwah_ampsnsinv
{ ryanwah_ampsns = new SliderW(56, 152, 100, 10, "E. Sens");
  ryanwah_ampsns->tooltip("Envelope Sensitivity");
  ryanwah_ampsns->type(5);
  ryanwah_ampsns->box(FL_FLAT_BOX);
  ryanwah_ampsns->color((Fl_Color)178);
  ryanwah_ampsns->selection_color((Fl_Color)62);
  ryanwah_ampsns->labeltype(FL_NORMAL_LABEL);
  ryanwah_ampsns->labelfont(0);
  ryanwah_ampsns->labelsize(10);
  ryanwah_ampsns->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_ampsns->minimum(-64);
  ryanwah_ampsns->maximum(64);
  ryanwah_ampsns->step(1);
  ryanwah_ampsns->textcolor(FL_BACKGROUND2_COLOR);
  ryanwah_ampsns->callback((Fl_Callback*)cb_ryanwah_ampsns);
  ryanwah_ampsns->align(Fl_Align(FL_ALIGN_LEFT));
  ryanwah_ampsns->when(FL_WHEN_CHANGED);
} // SliderW* ryanwah_ampsns
{ ryanwah_smooth = new RKR_Value_Input(13, 165, 23, 15, "S");
  ryanwah_smooth->tooltip("Envelope Smoothing");
  ryanwah_smooth->box(FL_DOWN_BOX);
  ryanwah_smooth->color(FL_BACKGROUND2_COLOR);
  ryanwah_smooth->selection_color(FL_SELECTION_COLOR);
  ryanwah_smooth->labeltype(FL_NORMAL_LABEL);
  ryanwah_smooth->labelfont(0);
  ryanwah_smooth->labelsize(10);
  ryanwah_smooth->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_smooth->maximum(127);
  ryanwah_smooth->step(1);
  ryanwah_smooth->textsize(10);
  ryanwah_smooth->textcolor(FL_BACKGROUND2_COLOR);
  ryanwah_smooth->callback((Fl_Callback*)cb_ryanwah_smooth);
  ryanwah_smooth->align(Fl_Align(FL_ALIGN_LEFT));
  ryanwah_smooth->when(FL_WHEN_CHANGED);
} // RKR_Value_Input* ryanwah_smooth
{ ryanwah_Rnd = new RKR_Value_Input(51, 165, 23, 15, "R");
  ryanwah_Rnd->tooltip("LFO Randomness");
  ryanwah_Rnd->box(FL_DOWN_BOX);
  ryanwah_Rnd->color(FL_BACKGROUND2_COLOR);
  ryanwah_Rnd->selection_color(FL_SELECTION_COLOR);
  ryanwah_Rnd->labeltype(FL_NORMAL_LABEL);
  ryanwah_Rnd->labelfont(0);
  ryanwah_Rnd->labelsize(10);
  ryanwah_Rnd->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_Rnd->maximum(127);
  ryanwah_Rnd->step(1);
  ryanwah_Rnd->textsize(10);
  ryanwah_Rnd->textcolor(FL_BACKGROUND2_COLOR);
  ryanwah_Rnd->callback((Fl_Callback*)cb_ryanwah_Rnd);
  ryanwah_Rnd->align(Fl_Align(FL_ALIGN_LEFT));
  ryanwah_Rnd->when(FL_WHEN_CHANGED);
} // RKR_Value_Input* ryanwah_Rnd
{ ryanwah_St = new RKR_Value_Input(90, 165, 23, 15, "D");
  ryanwah_St->tooltip("LFO L/R Delay");
  ryanwah_St->box(FL_DOWN_BOX);
  ryanwah_St->color(FL_BACKGROUND2_COLOR);
  ryanwah_St->selection_color(FL_SELECTION_COLOR);
  ryanwah_St->labeltype(FL_NORMAL_LABEL);
  ryanwah_St->labelfont(0);
  ryanwah_St->labelsize(10);
  ryanwah_St->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_St->minimum(-64);
  ryanwah_St->maximum(63);
  ryanwah_St->step(1);
  ryanwah_St->textsize(10);
  ryanwah_St->textcolor(FL_BACKGROUND2_COLOR);
  ryanwah_St->callback((Fl_Callback*)cb_ryanwah_St);
  ryanwah_St->align(Fl_Align(FL_ALIGN_LEFT));
  ryanwah_St->when(FL_WHEN_CHANGED);
} // RKR_Value_Input* ryanwah_St
{ ryanwah_minfreq = new RKR_Value_Input(127, 165, 26, 15, "F");
  ryanwah_minfreq->tooltip("Starting Frequency");
  ryanwah_minfreq->box(FL_DOWN_BOX);
  ryanwah_minfreq->color(FL_BACKGROUND2_COLOR);
  ryanwah_minfreq->selection_color(FL_SELECTION_COLOR);
  ryanwah_minfreq->labeltype(FL_NORMAL_LABEL);
  ryanwah_minfreq->labelfont(0);
  ryanwah_minfreq->labelsize(10);
  ryanwah_minfreq->labelcolor(FL_BACKGROUND2_COLOR);
  ryanwah_minfreq->minimum(30);
  ryanwah_minfreq->maximum(800);
  ryanwah_minfreq->step(1);
  ryanwah_minfreq->value(450);
  ryanwah_minfreq->textsize(10);
  ryanwah_minfreq->textcolor(FL_BACKGROUND2_COLOR);
  ryanwah_minfreq->callback((Fl_Callback*)cb_ryanwah_minfreq);
  ryanwah_minfreq->align(Fl_Align(FL_ALIGN_LEFT));
  ryanwah_minfreq->when(FL_WHEN_CHANGED);
} // RKR_Value_Input* ryanwah_minfreq
position(X, Y);
end();
}
