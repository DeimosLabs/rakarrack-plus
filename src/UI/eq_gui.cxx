// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "eq_gui.h"

void EqGui::cb_eq_activar_i(RKR_Light_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Multi_On_Off);
 o->value(rkr->EFX_Bypass[EFX_EQ]);
 return;
} 
rkr->EFX_Bypass[EFX_EQ]=(int)o->value();
if((int) o->value()==0)
rkr->Rack_Effects[EFX_EQ]->cleanup();
rgui->findpos(EFX_EQ,(int)o->value(),o);
}
void EqGui::cb_eq_activar(RKR_Light_Button* o, void* v) {
  ((EqGui*)(o->parent()))->cb_eq_activar_i(o,v);
}

void EqGui::cb_eq_preset_i(RKR_Choice* o, void* v) {
  long long ud= (long long) v;
if((ud==0)||(ud==12000))rkr->Rack_Effects[EFX_EQ]->setpreset((int)o->value());

for (int i = 0; i < rkr->EFX_Param_Size[EFX_EQ]; i++)
{
    parameter_refresh(i);
};
}
void EqGui::cb_eq_preset(RKR_Choice* o, void* v) {
  ((EqGui*)(o->parent()))->cb_eq_preset_i(o,v);
}

Fl_Menu_Item EqGui::menu_eq_preset[] = {
 {"Plain", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Pop", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Jazz", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void EqGui::cb_eq_Gain_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_EQ_Gain);
 return;
} 
rkr->Rack_Effects[EFX_EQ]->changepar(EQ_Gain,(int)(o->value()+64));
}
void EqGui::cb_eq_Gain(RKR_Slider* o, void* v) {
  ((EqGui*)(o->parent()))->cb_eq_Gain_i(o,v);
}

void EqGui::cb_eq_Q_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_EQ_Q);
 return;
}

rkr->Rack_Effects[EFX_EQ]->changepar(EQ_Q,(int)(o->value()+64));
}
void EqGui::cb_eq_Q(RKR_Slider* o, void* v) {
  ((EqGui*)(o->parent()))->cb_eq_Q_i(o,v);
}

void EqGui::cb_eq_1_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_EQ_31_HZ);
 return;
} 
rkr->Rack_Effects[EFX_EQ]->changepar(EQ_31_HZ,(int)(o->value()+64));
}
void EqGui::cb_eq_1(RKR_Slider* o, void* v) {
  ((EqGui*)(o->parent()))->cb_eq_1_i(o,v);
}

void EqGui::cb_eq_2_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_EQ_63_HZ);
 return;
} 
rkr->Rack_Effects[EFX_EQ]->changepar(EQ_63_HZ,(int)(o->value()+64));
}
void EqGui::cb_eq_2(RKR_Slider* o, void* v) {
  ((EqGui*)(o->parent()))->cb_eq_2_i(o,v);
}

void EqGui::cb_eq_3_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_EQ_125_HZ);
 return;
} 
rkr->Rack_Effects[EFX_EQ]->changepar(EQ_125_HZ,(int)(o->value()+64));
}
void EqGui::cb_eq_3(RKR_Slider* o, void* v) {
  ((EqGui*)(o->parent()))->cb_eq_3_i(o,v);
}

void EqGui::cb_eq_4_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_EQ_250_HZ);
 return;
} 
rkr->Rack_Effects[EFX_EQ]->changepar(EQ_250_HZ,(int)(o->value()+64));
}
void EqGui::cb_eq_4(RKR_Slider* o, void* v) {
  ((EqGui*)(o->parent()))->cb_eq_4_i(o,v);
}

void EqGui::cb_eq_5_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_EQ_500_HZ);
 return;
} 
rkr->Rack_Effects[EFX_EQ]->changepar(EQ_500_HZ,(int)(o->value()+64));
}
void EqGui::cb_eq_5(RKR_Slider* o, void* v) {
  ((EqGui*)(o->parent()))->cb_eq_5_i(o,v);
}

void EqGui::cb_eq_6_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_EQ_1_KHZ);
 return;
} 
rkr->Rack_Effects[EFX_EQ]->changepar(EQ_1_KHZ,(int)(o->value()+64));
}
void EqGui::cb_eq_6(RKR_Slider* o, void* v) {
  ((EqGui*)(o->parent()))->cb_eq_6_i(o,v);
}

void EqGui::cb_eq_7_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_EQ_2_KHZ);
 return;
} 
rkr->Rack_Effects[EFX_EQ]->changepar(EQ_2_KHZ,(int)(o->value()+64));
}
void EqGui::cb_eq_7(RKR_Slider* o, void* v) {
  ((EqGui*)(o->parent()))->cb_eq_7_i(o,v);
}

void EqGui::cb_eq_8_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_EQ_4_KHZ);
 return;
} 
rkr->Rack_Effects[EFX_EQ]->changepar(EQ_4_KHZ,(int)(o->value()+64));
}
void EqGui::cb_eq_8(RKR_Slider* o, void* v) {
  ((EqGui*)(o->parent()))->cb_eq_8_i(o,v);
}

void EqGui::cb_eq_9_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_EQ_8_KHZ);
 return;
} 
rkr->Rack_Effects[EFX_EQ]->changepar(EQ_8_KHZ,(int)(o->value()+64));
}
void EqGui::cb_eq_9(RKR_Slider* o, void* v) {
  ((EqGui*)(o->parent()))->cb_eq_9_i(o,v);
}

void EqGui::cb_eq_10_i(RKR_Slider* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_EQ_16_KHZ);
 return;
} 
rkr->Rack_Effects[EFX_EQ]->changepar(EQ_16_KHZ,(int)(o->value()+64));
}
void EqGui::cb_eq_10(RKR_Slider* o, void* v) {
  ((EqGui*)(o->parent()))->cb_eq_10_i(o,v);
}
EqGui::EqGui(int X, int Y, int W, int H, const char *L)
  : RKR_Gui_Effect(0, 0, W, H, L) {
this->box(FL_UP_BOX);
this->color(FL_FOREGROUND_COLOR);
this->selection_color(FL_FOREGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->user_data((void*)(1));
this->align(Fl_Align(96|FL_ALIGN_INSIDE));
this->when(FL_WHEN_RELEASE);
{ RKR_Light_Button* o = eq_activar = new RKR_Light_Button(5, 2, 34, 18, "On");
  eq_activar->box(FL_UP_BOX);
  eq_activar->shortcut(0x31);
  eq_activar->color((Fl_Color)62);
  eq_activar->selection_color((Fl_Color)1);
  eq_activar->labeltype(FL_NORMAL_LABEL);
  eq_activar->labelfont(0);
  eq_activar->labelsize(10);
  eq_activar->labelcolor(FL_FOREGROUND_COLOR);
  eq_activar->callback((Fl_Callback*)cb_eq_activar, (void*)(2));
  eq_activar->align(Fl_Align(68|FL_ALIGN_INSIDE));
  eq_activar->when(FL_WHEN_CHANGED);
  activate_effect = o;
} // RKR_Light_Button* eq_activar
{ RKR_Choice* o = eq_preset = new RKR_Choice(77, 2, 76, 18, "Preset");
  eq_preset->box(FL_FLAT_BOX);
  eq_preset->down_box(FL_BORDER_BOX);
  eq_preset->color(FL_BACKGROUND_COLOR);
  eq_preset->selection_color(FL_FOREGROUND_COLOR);
  eq_preset->labeltype(FL_NORMAL_LABEL);
  eq_preset->labelfont(0);
  eq_preset->labelsize(10);
  eq_preset->labelcolor(FL_BACKGROUND2_COLOR);
  eq_preset->textsize(10);
  eq_preset->textcolor(FL_BACKGROUND2_COLOR);
  eq_preset->callback((Fl_Callback*)cb_eq_preset, (void*)(12000));
  eq_preset->align(Fl_Align(FL_ALIGN_LEFT));
  eq_preset->when(FL_WHEN_RELEASE_ALWAYS);
  eq_preset->menu(menu_eq_preset);
  preset_choice = o;
} // RKR_Choice* eq_preset
{ eq_Gain = new RKR_Slider(56, 24, 100, 10, "Gain");
  eq_Gain->type(5);
  eq_Gain->box(FL_FLAT_BOX);
  eq_Gain->color((Fl_Color)178);
  eq_Gain->selection_color((Fl_Color)62);
  eq_Gain->labeltype(FL_NORMAL_LABEL);
  eq_Gain->labelfont(0);
  eq_Gain->labelsize(10);
  eq_Gain->labelcolor(FL_BACKGROUND2_COLOR);
  eq_Gain->minimum(-64);
  eq_Gain->maximum(63);
  eq_Gain->step(1);
  eq_Gain->textcolor(FL_BACKGROUND2_COLOR);
  eq_Gain->callback((Fl_Callback*)cb_eq_Gain);
  eq_Gain->align(Fl_Align(FL_ALIGN_LEFT));
  eq_Gain->when(FL_WHEN_CHANGED);
} // RKR_Slider* eq_Gain
{ eq_Q = new RKR_Slider(56, 37, 100, 10, "Q");
  eq_Q->tooltip("Resonance");
  eq_Q->type(5);
  eq_Q->box(FL_FLAT_BOX);
  eq_Q->color((Fl_Color)178);
  eq_Q->selection_color((Fl_Color)62);
  eq_Q->labeltype(FL_NORMAL_LABEL);
  eq_Q->labelfont(0);
  eq_Q->labelsize(10);
  eq_Q->labelcolor(FL_BACKGROUND2_COLOR);
  eq_Q->minimum(-64);
  eq_Q->maximum(63);
  eq_Q->step(1);
  eq_Q->textcolor(FL_BACKGROUND2_COLOR);
  eq_Q->callback((Fl_Callback*)cb_eq_Q);
  eq_Q->align(Fl_Align(FL_ALIGN_LEFT));
  eq_Q->when(FL_WHEN_CHANGED);
} // RKR_Slider* eq_Q
{ eq_1 = new RKR_Slider(56, 56, 100, 10, "31 Hz");
  eq_1->type(5);
  eq_1->box(FL_FLAT_BOX);
  eq_1->color((Fl_Color)178);
  eq_1->selection_color((Fl_Color)62);
  eq_1->labeltype(FL_NORMAL_LABEL);
  eq_1->labelfont(0);
  eq_1->labelsize(10);
  eq_1->labelcolor(FL_BACKGROUND2_COLOR);
  eq_1->minimum(-64);
  eq_1->maximum(63);
  eq_1->step(1);
  eq_1->textcolor(FL_BACKGROUND2_COLOR);
  eq_1->callback((Fl_Callback*)cb_eq_1);
  eq_1->align(Fl_Align(FL_ALIGN_LEFT));
  eq_1->when(FL_WHEN_CHANGED);
} // RKR_Slider* eq_1
{ eq_2 = new RKR_Slider(56, 68, 100, 10, "63 Hz");
  eq_2->type(5);
  eq_2->box(FL_FLAT_BOX);
  eq_2->color((Fl_Color)178);
  eq_2->selection_color((Fl_Color)62);
  eq_2->labeltype(FL_NORMAL_LABEL);
  eq_2->labelfont(0);
  eq_2->labelsize(10);
  eq_2->labelcolor(FL_BACKGROUND2_COLOR);
  eq_2->minimum(-64);
  eq_2->maximum(63);
  eq_2->step(1);
  eq_2->textcolor(FL_BACKGROUND2_COLOR);
  eq_2->callback((Fl_Callback*)cb_eq_2);
  eq_2->align(Fl_Align(FL_ALIGN_LEFT));
  eq_2->when(FL_WHEN_CHANGED);
} // RKR_Slider* eq_2
{ eq_3 = new RKR_Slider(56, 80, 100, 10, "125 Hz");
  eq_3->type(5);
  eq_3->box(FL_FLAT_BOX);
  eq_3->color((Fl_Color)178);
  eq_3->selection_color((Fl_Color)62);
  eq_3->labeltype(FL_NORMAL_LABEL);
  eq_3->labelfont(0);
  eq_3->labelsize(10);
  eq_3->labelcolor(FL_BACKGROUND2_COLOR);
  eq_3->minimum(-64);
  eq_3->maximum(63);
  eq_3->step(1);
  eq_3->textcolor(FL_BACKGROUND2_COLOR);
  eq_3->callback((Fl_Callback*)cb_eq_3);
  eq_3->align(Fl_Align(FL_ALIGN_LEFT));
  eq_3->when(FL_WHEN_CHANGED);
} // RKR_Slider* eq_3
{ eq_4 = new RKR_Slider(56, 93, 100, 10, "250 Hz");
  eq_4->type(5);
  eq_4->box(FL_FLAT_BOX);
  eq_4->color((Fl_Color)178);
  eq_4->selection_color((Fl_Color)62);
  eq_4->labeltype(FL_NORMAL_LABEL);
  eq_4->labelfont(0);
  eq_4->labelsize(10);
  eq_4->labelcolor(FL_BACKGROUND2_COLOR);
  eq_4->minimum(-64);
  eq_4->maximum(63);
  eq_4->step(1);
  eq_4->textcolor(FL_BACKGROUND2_COLOR);
  eq_4->callback((Fl_Callback*)cb_eq_4);
  eq_4->align(Fl_Align(FL_ALIGN_LEFT));
  eq_4->when(FL_WHEN_CHANGED);
} // RKR_Slider* eq_4
{ eq_5 = new RKR_Slider(56, 105, 100, 10, "500 Hz");
  eq_5->type(5);
  eq_5->box(FL_FLAT_BOX);
  eq_5->color((Fl_Color)178);
  eq_5->selection_color((Fl_Color)62);
  eq_5->labeltype(FL_NORMAL_LABEL);
  eq_5->labelfont(0);
  eq_5->labelsize(10);
  eq_5->labelcolor(FL_BACKGROUND2_COLOR);
  eq_5->minimum(-64);
  eq_5->maximum(63);
  eq_5->step(1);
  eq_5->textcolor(FL_BACKGROUND2_COLOR);
  eq_5->callback((Fl_Callback*)cb_eq_5);
  eq_5->align(Fl_Align(FL_ALIGN_LEFT));
  eq_5->when(FL_WHEN_CHANGED);
} // RKR_Slider* eq_5
{ eq_6 = new RKR_Slider(56, 117, 100, 10, "1 Khz");
  eq_6->type(5);
  eq_6->box(FL_FLAT_BOX);
  eq_6->color((Fl_Color)178);
  eq_6->selection_color((Fl_Color)62);
  eq_6->labeltype(FL_NORMAL_LABEL);
  eq_6->labelfont(0);
  eq_6->labelsize(10);
  eq_6->labelcolor(FL_BACKGROUND2_COLOR);
  eq_6->minimum(-64);
  eq_6->maximum(63);
  eq_6->step(1);
  eq_6->textcolor(FL_BACKGROUND2_COLOR);
  eq_6->callback((Fl_Callback*)cb_eq_6);
  eq_6->align(Fl_Align(FL_ALIGN_LEFT));
  eq_6->when(FL_WHEN_CHANGED);
} // RKR_Slider* eq_6
{ eq_7 = new RKR_Slider(56, 130, 100, 10, "2 Khz");
  eq_7->type(5);
  eq_7->box(FL_FLAT_BOX);
  eq_7->color((Fl_Color)178);
  eq_7->selection_color((Fl_Color)62);
  eq_7->labeltype(FL_NORMAL_LABEL);
  eq_7->labelfont(0);
  eq_7->labelsize(10);
  eq_7->labelcolor(FL_BACKGROUND2_COLOR);
  eq_7->minimum(-64);
  eq_7->maximum(63);
  eq_7->step(1);
  eq_7->textcolor(FL_BACKGROUND2_COLOR);
  eq_7->callback((Fl_Callback*)cb_eq_7);
  eq_7->align(Fl_Align(FL_ALIGN_LEFT));
  eq_7->when(FL_WHEN_CHANGED);
} // RKR_Slider* eq_7
{ eq_8 = new RKR_Slider(56, 142, 100, 10, "4 Khz");
  eq_8->type(5);
  eq_8->box(FL_FLAT_BOX);
  eq_8->color((Fl_Color)178);
  eq_8->selection_color((Fl_Color)62);
  eq_8->labeltype(FL_NORMAL_LABEL);
  eq_8->labelfont(0);
  eq_8->labelsize(10);
  eq_8->labelcolor(FL_BACKGROUND2_COLOR);
  eq_8->minimum(-64);
  eq_8->maximum(63);
  eq_8->step(1);
  eq_8->textcolor(FL_BACKGROUND2_COLOR);
  eq_8->callback((Fl_Callback*)cb_eq_8);
  eq_8->align(Fl_Align(FL_ALIGN_LEFT));
  eq_8->when(FL_WHEN_CHANGED);
} // RKR_Slider* eq_8
{ eq_9 = new RKR_Slider(56, 154, 100, 10, "8 Khz");
  eq_9->type(5);
  eq_9->box(FL_FLAT_BOX);
  eq_9->color((Fl_Color)178);
  eq_9->selection_color((Fl_Color)62);
  eq_9->labeltype(FL_NORMAL_LABEL);
  eq_9->labelfont(0);
  eq_9->labelsize(10);
  eq_9->labelcolor(FL_BACKGROUND2_COLOR);
  eq_9->minimum(-64);
  eq_9->maximum(63);
  eq_9->step(1);
  eq_9->textcolor(FL_BACKGROUND2_COLOR);
  eq_9->callback((Fl_Callback*)cb_eq_9);
  eq_9->align(Fl_Align(FL_ALIGN_LEFT));
  eq_9->when(FL_WHEN_CHANGED);
} // RKR_Slider* eq_9
{ eq_10 = new RKR_Slider(56, 165, 100, 10, "16 Khz");
  eq_10->type(5);
  eq_10->box(FL_FLAT_BOX);
  eq_10->color((Fl_Color)178);
  eq_10->selection_color((Fl_Color)62);
  eq_10->labeltype(FL_NORMAL_LABEL);
  eq_10->labelfont(0);
  eq_10->labelsize(10);
  eq_10->labelcolor(FL_BACKGROUND2_COLOR);
  eq_10->minimum(-64);
  eq_10->maximum(63);
  eq_10->step(1);
  eq_10->textcolor(FL_BACKGROUND2_COLOR);
  eq_10->callback((Fl_Callback*)cb_eq_10);
  eq_10->align(Fl_Align(FL_ALIGN_LEFT));
  eq_10->when(FL_WHEN_CHANGED);
} // RKR_Slider* eq_10
position(X, Y);
end();
}

void EqGui::parameter_refresh(int index) {
  switch(index)
      {
      case EQ_Gain:
          eq_Gain->value(rkr->Rack_Effects[EFX_EQ]->getpar(EQ_Gain)-64);
          break;
      case EQ_Q:
          eq_Q->value(rkr->Rack_Effects[EFX_EQ]->getpar(EQ_Q)-64);
          break;
      case EQ_31_HZ:
          eq_1->value(rkr->Rack_Effects[EFX_EQ]->getpar(EQ_31_HZ)-64);
          break;
      case EQ_63_HZ:
          eq_2->value(rkr->Rack_Effects[EFX_EQ]->getpar(EQ_63_HZ)-64);
          break;
      case EQ_125_HZ:
          eq_3->value(rkr->Rack_Effects[EFX_EQ]->getpar(EQ_125_HZ)-64);
          break;
      case EQ_250_HZ:
          eq_4->value(rkr->Rack_Effects[EFX_EQ]->getpar(EQ_250_HZ)-64);
          break;
      case EQ_500_HZ:
          eq_5->value(rkr->Rack_Effects[EFX_EQ]->getpar(EQ_500_HZ)-64);
          break;
      case EQ_1_KHZ:
          eq_6->value(rkr->Rack_Effects[EFX_EQ]->getpar(EQ_1_KHZ)-64);
          break;
      case EQ_2_KHZ:
          eq_7->value(rkr->Rack_Effects[EFX_EQ]->getpar(EQ_2_KHZ)-64);
          break;
      case EQ_4_KHZ:
          eq_8->value(rkr->Rack_Effects[EFX_EQ]->getpar(EQ_4_KHZ)-64);
          break;
      case EQ_8_KHZ:
          eq_9->value(rkr->Rack_Effects[EFX_EQ]->getpar(EQ_8_KHZ)-64);
          break;
      case EQ_16_KHZ:
          eq_10->value(rkr->Rack_Effects[EFX_EQ]->getpar(EQ_16_KHZ)-64);
          break;
      }
}
