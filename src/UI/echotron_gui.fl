# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Counter.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

widget_class {\#include "common_gui_menu.h"} EchotronGui {
  user_data 1 open
  xywh {1576 112 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  code3 {\#include "common_gui_menu.h"} visible position_relative
} {
  Fl_Light_Button echotron_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Multi_On_Off);
 o->value(rkr->EFX_Bypass[EFX_ECHOTRON]);
 return;
}
rkr->EFX_Bypass[EFX_ECHOTRON]=(int)o->value();
if((int) o->value()==0) rkr->Rack_Effects[EFX_ECHOTRON]->cleanup();
rgui->findpos(EFX_ECHOTRON,(int)o->value(),o);}
    xywh {6 4 34 18} shortcut 0x35 color 62 selection_color 1 labelsize 10 align 84 when 1
    class RKR_Light_Button
  }
  Fl_Choice echotron_preset {
    label Preset
    user_data 12041
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12041))rkr->Rack_Effects[EFX_ECHOTRON]->setpreset((int) o->value());
echotron_pan->value(rkr->Rack_Effects[EFX_ECHOTRON]->getpar(Echotron_Pan)-64);
echotron_WD->value(Dry_Wet(rkr->Rack_Effects[EFX_ECHOTRON]->getpar(Echotron_DryWet)));
echotron_damp->value(rkr->Rack_Effects[EFX_ECHOTRON]->getpar(Echotron_Damp));
echotron_fnum->value(rkr->Rack_Effects[EFX_ECHOTRON]->getpar(Echotron_Set_File));
echotron_user->value(rkr->Rack_Effects[EFX_ECHOTRON]->getpar(Echotron_User_File));
echotron_user->do_callback();
echotron_fb->value(rkr->Rack_Effects[EFX_ECHOTRON]->getpar(Echotron_Feedback));
echotron_tempo->value(rkr->Rack_Effects[EFX_ECHOTRON]->getpar(Echotron_Tempo));
echotron_lfotype->value(rkr->Rack_Effects[EFX_ECHOTRON]->getpar(Echotron_LFO_Type));
echotron_width->value(rkr->Rack_Effects[EFX_ECHOTRON]->getpar(Echotron_LFO_Width));
echotron_deep->value(rkr->Rack_Effects[EFX_ECHOTRON]->getpar(Echotron_Depth)-64);
echotron_lrcross->value(rkr->Rack_Effects[EFX_ECHOTRON]->getpar(Echotron_LR_Cross)-64);
echotron_stdf->value(rkr->Rack_Effects[EFX_ECHOTRON]->getpar(Echotron_LFO_Stereo));
echotron_af->value(rkr->Rack_Effects[EFX_ECHOTRON]->getpar(Echotron_Filters));
echotron_mf->value(rkr->Rack_Effects[EFX_ECHOTRON]->getpar(Echotron_Mod_Filter));
echotron_md->value(rkr->Rack_Effects[EFX_ECHOTRON]->getpar(Echotron_Mod_Delay));
echotron_length->value(rkr->Rack_Effects[EFX_ECHOTRON]->getpar(Echotron_Taps));

Echotron *Efx_Echotron = static_cast<Echotron*>(rkr->Rack_Effects[EFX_ECHOTRON]);
echotron_length->maximum(Efx_Echotron->get_file_length());}
    xywh {79 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label Summer
      xywh {87 87 36 21} labelsize 10
    }
    MenuItem {} {
      label Ambience
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Arranjer
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Suction
      xywh {10 10 36 21} labelsize 10
    }
    MenuItem {} {
      label SuctionFlange
      xywh {20 20 36 21} labelsize 10
    }
    MenuItem {} {
      label Soft
      xywh {97 97 36 21} labelsize 10
    }
  }
  Fl_Value_Slider echotron_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echotron_DryWet);
 return;
}
rkr->Rack_Effects[EFX_ECHOTRON]->changepar(Echotron_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 25 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echotron_pan {
    label Pan
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echotron_Pan);
 return;
}
rkr->Rack_Effects[EFX_ECHOTRON]->changepar(Echotron_Pan,(int)(o->value()+64));}
    xywh {56 37 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echotron_tempo {
    label Tempo
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echotron_Tempo);
 return;
}
rkr->Rack_Effects[EFX_ECHOTRON]->changepar(Echotron_Tempo,(int)o->value());}
    xywh {56 49 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum 1 maximum 600 step 1 value 60 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echotron_damp {
    label Damp
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echotron_Damp);
 return;
}
rkr->Rack_Effects[EFX_ECHOTRON]->changepar(Echotron_Damp,(int)o->value());}
    xywh {56 61 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echotron_fb {
    label Feedback
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echotron_Feedback);
 return;
}
rkr->Rack_Effects[EFX_ECHOTRON]->changepar(Echotron_Feedback,(int)o->value());}
    xywh {56 73 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echotron_lrcross {
    label {L/R Cross}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echotron_LR_Cross);
 return;
}
rkr->Rack_Effects[EFX_ECHOTRON]->changepar(Echotron_LR_Cross,(int)(o->value()+64));}
    xywh {56 85 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echotron_width {
    label Width
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echotron_LFO_Width);
 return;
}
rkr->Rack_Effects[EFX_ECHOTRON]->changepar(Echotron_LFO_Width,(int)o->value());}
    xywh {56 97 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echotron_deep {
    label Depth
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echotron_Depth);
 return;
}
rkr->Rack_Effects[EFX_ECHOTRON]->changepar(Echotron_Depth,((int)o->value()+64));}
    xywh {56 109 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 when 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider echotron_stdf {
    label {Stereo Df}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echotron_LFO_Stereo);
 return;
}
rkr->Rack_Effects[EFX_ECHOTRON]->changepar(Echotron_LFO_Stereo,(int)o->value());}
    xywh {56 121 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Check_Button echotron_af {
    label AF
    user_data 2
    callback {rkr->Rack_Effects[EFX_ECHOTRON]->changepar(Echotron_Filters,(int)o->value());}
    xywh {2 136 32 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Choice echotron_lfotype {
    label {LFO Type}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echotron_LFO_Type);
 return;
}

rkr->Rack_Effects[EFX_ECHOTRON]->changepar(Echotron_LFO_Type,(int)o->value());} open
    xywh {88 135 64 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    code0 {o->menu(m_lfo_menu->get_lfo_type());}
    class RKR_Choice
  } {}
  Fl_Check_Button echotron_mf {
    label MF
    user_data 2
    callback {rkr->Rack_Effects[EFX_ECHOTRON]->changepar(Echotron_Mod_Filter,(int)o->value());}
    xywh {2 151 33 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button echotron_md {
    label MD
    user_data 2
    callback {rkr->Rack_Effects[EFX_ECHOTRON]->changepar(Echotron_Mod_Delay,(int)o->value());}
    xywh {33 151 34 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Check_Button echotron_user {
    label User
    user_data 2
    callback {rkr->Rack_Effects[EFX_ECHOTRON]->changepar(Echotron_User_File,(int)o->value());

if((int)o->value())B_ech->activate(); else B_ech->deactivate();}
    xywh {67 154 39 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Button B_ech {
    label Browse
    user_data 2
    callback {char *filename;
filename=fl_file_chooser("Load dly File:","(*.dly)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".dly");

Echotron *Efx_Echotron = static_cast<Echotron*>(rkr->Rack_Effects[EFX_ECHOTRON]);
strcpy(Efx_Echotron->Filename,filename);

if(!Efx_Echotron->setfile(USERFILE))
{
    fl_alert("Error loading %s file!\\n", filename);
}

echotron_length->value(Efx_Echotron->getpar(Echotron_Taps));

echotron_length->maximum(Efx_Echotron->get_file_length());} selected
    xywh {106 156 46 10} labelsize 10 deactivate
    class RKR_Button
  }
  Fl_Counter echotron_length {
    label {\#}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Echotron_Taps);
 return;
}
rkr->Rack_Effects[EFX_ECHOTRON]->changepar(Echotron_Taps,(int)o->value());}
    xywh {16 167 48 12} type Simple labelsize 10 labelcolor 7 align 4 when 4 minimum 1 maximum 127 step 1 value 1 textsize 9
    code0 {o->set_text_offset(-1);}
    class RKR_Counter
  }
  Fl_Choice echotron_fnum {
    label File
    user_data 12
    callback {rkr->Rack_Effects[EFX_ECHOTRON]->changepar(Echotron_Set_File,(int)o->value());
echotron_length->value(rkr->Rack_Effects[EFX_ECHOTRON]->getpar(Echotron_Taps));

Echotron *Efx_Echotron = static_cast<Echotron*>(rkr->Rack_Effects[EFX_ECHOTRON]);
echotron_length->maximum(Efx_Echotron->get_file_length());}
    xywh {88 168 64 14} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label SwingPong
      xywh {64 64 36 21} labelsize 10
    }
    MenuItem {} {
      label {Short Delays}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Flange + Echo}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label Comb
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label EchoFlange
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Filtered Echo}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Notch-Wah}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Multi-Chorus}
      xywh {10 10 36 21} labelsize 10
    }
    MenuItem {} {
      label PingPong
      xywh {20 20 36 21} labelsize 10
    }
    MenuItem {} {
      label {90-Shifter}
      xywh {30 30 36 21} labelsize 10
    }
    MenuItem {} {
      label {Basic LR Delay}
      xywh {40 40 36 21} labelsize 10
    }
  }
  decl {CommonGuiMenu *m_lfo_menu;} {private local
  }
}
