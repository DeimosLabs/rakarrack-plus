# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
widget_class ShifterGui {
  user_data 1 open
  xywh {1550 56 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "sliderW.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"} visible position_relative
} {
  Fl_Light_Button shifter_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(116);
 o->value(rkr->Shifter_Bypass);
 return;
}
rkr->Shifter_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Shifter->cleanup();
rgui->findpos(38,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x30 color 62 selection_color 1 labelsize 10 when 1
  }
  Fl_Choice shifter_preset {
    label Preset
    user_data 12038
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12038))rkr->efx_Shifter->setpreset((int)o->value());
shifter_WD->value(Dry_Wet(rkr->efx_Shifter->getpar(0)));
shifter_pan->value(rkr->efx_Shifter->getpar(1)-64);
shifter_gain->value(rkr->efx_Shifter->getpar(2)-64);
shifter_int->value(rkr->efx_Shifter->getpar(6));
shifter_attack->value(rkr->efx_Shifter->getpar(3));
shifter_decay->value(rkr->efx_Shifter->getpar(4));
shifter_thre->value(rkr->efx_Shifter->getpar(5));
shifter_ud->value(rkr->efx_Shifter->getpar(7));
shifter_whammy->value(rkr->efx_Shifter->getpar(9));

shifter_mode->value(rkr->efx_Shifter->getpar(8));} open
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
  } {
    MenuItem {} {
      label Fast
      xywh {10 10 45 26} labelsize 10
    }
    MenuItem {} {
      label {Slow Up}
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label {Slow Down}
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label Chorus
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Trig. Chorus}
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Shifter 6}
      xywh {10 10 36 21} labelsize 10
    }
  }
  Fl_Value_Slider shifter_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(326);
 return;
}
rkr->efx_Shifter->changepar(0,Dry_Wet((int)(o->value())));}
    xywh {53 30 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider shifter_int {
    label Interval
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(327);
 return;
}
rkr->Shifter_Bypass=0;
rkr->efx_Shifter->changepar(6,(int)o->value());
if((int)shifter_activar->value())rkr->Shifter_Bypass=1;}
    xywh {53 43 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 12 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider shifter_gain {
    label Gain
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(328);
 return;
}
rkr->efx_Shifter->changepar(2,(int)(o->value()+64));}
    xywh {53 58 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider shifter_pan {
    label Pan
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(329);
 return;
}
rkr->efx_Shifter->changepar(1,(int)(o->value()+64));}
    xywh {53 71 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class SliderW
  }
  Fl_Value_Slider shifter_attack {
    label Attack
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(330);
 return;
}
rkr->efx_Shifter->changepar(3,(int)o->value());}
    xywh {53 88 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 2000 step 1 value 100 textcolor 7
    class SliderW
  }
  Fl_Value_Slider shifter_decay {
    label Decay
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(331);
 return;
}
rkr->efx_Shifter->changepar(4,(int)o->value());}
    xywh {53 101 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 2000 step 1 value 100 textcolor 7
    class SliderW
  }
  Fl_Value_Slider shifter_thre {
    label Thrhold
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(332);
 return;
}
rkr->efx_Shifter->changepar(5,(int)o->value());} selected
    tooltip Threshold xywh {53 114 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -70 maximum 20 step 1 value 20 textcolor 7
    class SliderW
  }
  Fl_Check_Button shifter_ud {
    label Down
    user_data 2
    callback {rkr->efx_Shifter->changepar(7,(int)o->value())}
    xywh {51 128 49 14} down_box BORDER_BOX labelsize 10 labelcolor 7
  }
  Fl_Value_Slider shifter_whammy {
    label Whammy
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(333);
 return;
}
rkr->efx_Shifter->changepar(9,(int)o->value());}
    xywh {53 145 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 9 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class SliderW
  }
  Fl_Choice shifter_mode {
    label Mode
    user_data 12
    callback {rkr->efx_Shifter->changepar(8,(int)o->value())}
    xywh {43 165 78 13} down_box BORDER_BOX labelsize 9 labelcolor 7 textsize 9 textcolor 7
  } {
    MenuItem {} {
      label Trigger
      xywh {10 10 36 21} labelsize 9
    }
    MenuItem {} {
      label Whammy
      xywh {0 0 36 21} labelsize 9
    }
    MenuItem {} {
      label Portamento
      xywh {10 10 36 21} labelsize 9
    }
  }
}
