// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "settingswindow_gui.h"

void SettingsWindowGui::cb_scheme_ch_i(Fl_Choice* o, void*) {
  switch ((int)o->value())

{

  case 0:

Fl::scheme("");
Fl::redraw();
break;

  case 1:

Fl::scheme("none");
Fl::redraw();
break;

  case 2:

Fl::scheme("gtk+");
Fl::redraw();
break;

  case 3:

Fl::scheme("plastic");
Fl::redraw();
break;

};
}
void SettingsWindowGui::cb_scheme_ch(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_scheme_ch_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_scheme_ch[] = {
 {"X11", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"fltk", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"gtk+", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"plastic", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_Font_Bro_i(Fl_Browser* o, void*) {
  m_rkr->font = (int)o->value()-1;
m_rgui->chfsize(0);
}
void SettingsWindowGui::cb_Font_Bro(Fl_Browser* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Font_Bro_i(o,v);
}

void SettingsWindowGui::cb_FSless_i(Fl_Button*, void*) {
  m_rkr->relfontsize--;
m_rgui->chfsize(-1);
}
void SettingsWindowGui::cb_FSless(Fl_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_FSless_i(o,v);
}

void SettingsWindowGui::cb_FSplus_i(Fl_Button*, void*) {
  m_rkr->relfontsize++;
m_rgui->chfsize(1);
}
void SettingsWindowGui::cb_FSplus(Fl_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_FSplus_i(o,v);
}

void SettingsWindowGui::cb_FSReset_i(Fl_Button*, void*) {
  int size = m_rkr->relfontsize;
  m_rkr->relfontsize=0;
  m_rgui->chfsize(-size);
}
void SettingsWindowGui::cb_FSReset(Fl_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_FSReset_i(o,v);
}

void SettingsWindowGui::cb_B_C_i(Fl_Button*, void*) {
  uchar r,g,b;

Fl::get_color(fore_color,r,g,b);
if (!fl_color_chooser("rakarrak buttons color:",r,g,b)) return;
fore_color=fl_rgb_color(r,g,b);
m_rgui->Buttons_Color_Change(fore_color);
}
void SettingsWindowGui::cb_B_C(Fl_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_B_C_i(o,v);
}

void SettingsWindowGui::cb_A_C_i(Fl_Button*, void*) {
  uchar r,g,b;
Fl::get_color(label_color,r,g,b);
if (!fl_color_chooser("rakarrack label color:",r,g,b)) return;
label_color=fl_rgb_color(r,g,b);
m_rgui->Label_Color_Change(label_color);
}
void SettingsWindowGui::cb_A_C(Fl_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_A_C_i(o,v);
}

void SettingsWindowGui::cb_L_C_i(Fl_Button*, void*) {
  uchar r,g,b;
Fl::get_color(leds_color,r,g,b);
if (!fl_color_chooser("rakarrack leds color:",r,g,b)) return;
leds_color=fl_rgb_color(r,g,b);
m_rgui->Leds_Color_Change(leds_color);
}
void SettingsWindowGui::cb_L_C(Fl_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_L_C_i(o,v);
}

void SettingsWindowGui::cb_K_C_i(Fl_Button*, void*) {
  uchar r,g,b;
Fl::get_color(back_color,r,g,b);
if (!fl_color_chooser("rakarrack back color:",r,g,b)) return;
back_color=fl_rgb_color(r,g,b);
m_rgui->Background_Color_Change(back_color);
}
void SettingsWindowGui::cb_K_C(Fl_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_K_C_i(o,v);
}

void SettingsWindowGui::cb_Enable_Back_i(Fl_Check_Button* o, void*) {
  m_rkr->EnableBackgroundImage=(int) o->value();
m_rgui->PutBackground();
}
void SettingsWindowGui::cb_Enable_Back(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Enable_Back_i(o,v);
}

void SettingsWindowGui::cb_BI_Browser_i(Fl_Button*, void*) {
  char *filename;
filename=fl_file_chooser("Browse:","(*.png)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".png");
BackFiname->value(filename);
strcpy(m_rkr->BackgroundImage,filename);
m_rgui->PutBackground();
}
void SettingsWindowGui::cb_BI_Browser(Fl_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_BI_Browser_i(o,v);
}

void SettingsWindowGui::cb_Enable_DeacHide_i(Fl_Check_Button* o, void*) {
  m_rkr->deachide=(int) o->value();
  m_rgui->reordena();
}
void SettingsWindowGui::cb_Enable_DeacHide(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Enable_DeacHide_i(o,v);
}

void SettingsWindowGui::cb_INSTATE_i(Fl_Check_Button* o, void*) {
  m_rkr->init_state=(int) o->value();
}
void SettingsWindowGui::cb_INSTATE(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_INSTATE_i(o,v);
}

void SettingsWindowGui::cb_Filter_DC_i(Fl_Check_Button* o, void*) {
  m_rkr->DC_Offset=(int) o->value();
}
void SettingsWindowGui::cb_Filter_DC(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Filter_DC_i(o,v);
}

void SettingsWindowGui::cb_Pre_Serve_i(Fl_Check_Button* o, void*) {
  m_rkr->actuvol=(int) o->value();
}
void SettingsWindowGui::cb_Pre_Serve(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Pre_Serve_i(o,v);
}

void SettingsWindowGui::cb_Update_TAP_i(Fl_Check_Button* o, void*) {
  m_rkr->Tap_Updated = (int) o->value();
}
void SettingsWindowGui::cb_Update_TAP(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Update_TAP_i(o,v);
}

void SettingsWindowGui::cb_UPSAMPLE_C_i(Fl_Check_Button* o, void*) {
  m_rkr->upsample=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_UPSAMPLE_C(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_UPSAMPLE_C_i(o,v);
}

void SettingsWindowGui::cb_Upr_Amo_i(Fl_Choice* o, void*) {
  m_rkr->UpAmo =(int) o->value();

m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Upr_Amo(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Upr_Amo_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_Upr_Amo[] = {
 {"x2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x6", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x7", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x9", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x10", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x11", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x12", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_Upr_Qual_i(Fl_Choice* o, void*) {
  m_rkr->UpQual =(int) o->value();

m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Upr_Qual(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Upr_Qual_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_Upr_Qual[] = {
 {"Best", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Medium", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Fastest", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Zero Order", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Linear", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_Downr_Qual_i(Fl_Choice* o, void*) {
  m_rkr->DownQual =(int) o->value();

m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Downr_Qual(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Downr_Qual_i(o,v);
}

void SettingsWindowGui::cb_L_SIZE_i(Fl_Counter* o, void*) {
  m_rkr->looper_size=o->value();
if(!m_rkr->m_displayed)
{
m_rgui->Show_Next_Time();
m_rkr->m_displayed=1;
};
}
void SettingsWindowGui::cb_L_SIZE(Fl_Counter* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_L_SIZE_i(o,v);
}

void SettingsWindowGui::cb_LM_Volume_i(Fl_Counter* o, void*) {
  m_rkr->Metro_Vol=(int)o->value();
m_rkr->efx_Looper->setmvol(m_rkr->Metro_Vol);
}
void SettingsWindowGui::cb_LM_Volume(Fl_Counter* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_LM_Volume_i(o,v);
}

void SettingsWindowGui::cb_Har_Qual_i(Fl_Choice* o, void*) {
  int i = (int) o->value();

switch(i)
{
     case 0:
       m_rkr->HarQual=4;
       break;
     case 1:
       m_rkr->HarQual=8;
       break;
     case 2:
       m_rkr->HarQual=16;	
	break;
     case 3:
       m_rkr->HarQual=32;	
	break;

		
}


m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Har_Qual(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Har_Qual_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_Har_Qual[] = {
 {"4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"16", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"32", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_Ste_Qual_i(Fl_Choice* o, void*) {
  int i = (int) o->value();

switch(i)
{
     case 0:
       m_rkr->SteQual=4;
       break;
     case 1:
       m_rkr->SteQual=8;
       break;
     case 2:
       m_rkr->SteQual=16;	
	break;
     case 3:
       m_rkr->SteQual=32;	
	break;

		
}


m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Ste_Qual(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Ste_Qual_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_Ste_Qual[] = {
 {"4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"16", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"32", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_Voc_Bands_i(Fl_Choice* o, void*) {
  switch((int)o->value())
{
  case 0:
  m_rkr->VocBands = 16;
  break;

  case 1:
  m_rkr->VocBands = 32;
  break;

  case 2:
  m_rkr->VocBands = 64;
  break;

  case 3:
  m_rkr->VocBands = 128;
  break;

  case 4:
  m_rkr->VocBands = 256;
  break;

}

m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Voc_Bands(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Voc_Bands_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_Voc_Bands[] = {
 {"16", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"32", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"64", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"128", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"256", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_FLPosition_i(Fl_Check_Button* o, void*) {
  m_rkr->flpos=(int)o->value();
}
void SettingsWindowGui::cb_FLPosition(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_FLPosition_i(o,v);
}

void SettingsWindowGui::cb_DB6B_i(Fl_Check_Button* o, void*) {
  m_rkr->db6booster=(int)o->value();
}
void SettingsWindowGui::cb_DB6B(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_DB6B_i(o,v);
}

void SettingsWindowGui::cb_Calibration_i(Fl_Counter* o, void*) {
  m_rkr->aFreq=o->value();
m_rkr->HarmRecNote->update_freqs(m_rkr->aFreq);
m_rkr->StHarmRecNote->update_freqs(m_rkr->aFreq);
m_rkr->RingRecNote->update_freqs(m_rkr->aFreq);
}
void SettingsWindowGui::cb_Calibration(Fl_Counter* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Calibration_i(o,v);
}

void SettingsWindowGui::cb_RTrigger_i(Fl_Counter* o, void*) {
  m_rkr->rtrig = o->value();
m_rkr->HarmRecNote->trigfact = o->value();
m_rkr->StHarmRecNote->trigfact = o->value();
m_rkr->RingRecNote->trigfact = o->value();
}
void SettingsWindowGui::cb_RTrigger(Fl_Counter* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_RTrigger_i(o,v);
}

void SettingsWindowGui::cb_RC_Harm_Opti_i(Fl_Choice* o, void*) {
  m_rkr->RCOpti_Harm =(int) o->value();

switch(m_rkr->RCOpti_Harm)
  {
  
  
    case 0:
    	m_rkr->HarmRecNote->setlpf(5500);
    	m_rkr->HarmRecNote->sethpf(80);
    	break;
    	

    case 1:
    	m_rkr->HarmRecNote->setlpf(4500);
    	m_rkr->HarmRecNote->sethpf(80);
    	break;
    	
    case 2:
    	m_rkr->HarmRecNote->setlpf(3000);
    	m_rkr->HarmRecNote->sethpf(300);
    	break;

};
}
void SettingsWindowGui::cb_RC_Harm_Opti(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_RC_Harm_Opti_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_RC_Harm_Opti[] = {
 {"Normal", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Guitar", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Voice", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_RC_St_Harm_Opti_i(Fl_Choice* o, void*) {
  m_rkr->RCOpti_Stereo =(int) o->value();

switch(m_rkr->RCOpti_Stereo)
  {
  
  
    case 0:
    	m_rkr->StHarmRecNote->setlpf(5500);
    	m_rkr->StHarmRecNote->sethpf(80);
    	break;
    	

    case 1:
    	m_rkr->StHarmRecNote->setlpf(4500);
    	m_rkr->StHarmRecNote->sethpf(80);
    	break;
    	
    case 2:
    	m_rkr->StHarmRecNote->setlpf(3000);
    	m_rkr->StHarmRecNote->sethpf(300);
    	break;

};
}
void SettingsWindowGui::cb_RC_St_Harm_Opti(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_RC_St_Harm_Opti_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_RC_St_Harm_Opti[] = {
 {"Normal", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Guitar", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Voice", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_RC_Ring_Opti_i(Fl_Choice* o, void*) {
  m_rkr->RCOpti_Ring =(int) o->value();

switch(m_rkr->RCOpti_Ring)
  {
  
  
    case 0:
    	m_rkr->RingRecNote->setlpf(5500);
    	m_rkr->RingRecNote->sethpf(80);
    	break;
    	

    case 1:
    	m_rkr->RingRecNote->setlpf(4500);
    	m_rkr->RingRecNote->sethpf(80);
    	break;
    	
    case 2:
    	m_rkr->RingRecNote->setlpf(3000);
    	m_rkr->RingRecNote->sethpf(300);
    	break;

};
}
void SettingsWindowGui::cb_RC_Ring_Opti(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_RC_Ring_Opti_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_RC_Ring_Opti[] = {
 {"Normal", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Guitar", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Voice", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_Har_Downsample_i(Fl_Choice* o, void*) {
  m_rkr->Har_Down=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Har_Downsample(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Har_Downsample_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_Har_Downsample[] = {
 {"Normal", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"96000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"48000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"44100", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"32000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"22050", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"16000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"12000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"8000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"4000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_Har_Down_Qua_i(Fl_Choice* o, void*) {
  m_rkr->Har_D_Q=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Har_Down_Qua(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Har_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Har_Up_Qua_i(Fl_Choice* o, void*) {
  m_rkr->Har_U_Q=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Har_Up_Qua(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Har_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_Rev_Downsample_i(Fl_Choice* o, void*) {
  m_rkr->Rev_Down=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Rev_Downsample(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Rev_Downsample_i(o,v);
}

void SettingsWindowGui::cb_Rev_Down_Qua_i(Fl_Choice* o, void*) {
  m_rkr->Rev_D_Q=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Rev_Down_Qua(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Rev_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Rev_Up_Qua_i(Fl_Choice* o, void*) {
  m_rkr->Rev_U_Q=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Rev_Up_Qua(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Rev_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_Con_Downsample_i(Fl_Choice* o, void*) {
  m_rkr->Con_Down=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Con_Downsample(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Con_Downsample_i(o,v);
}

void SettingsWindowGui::cb_Con_Down_Qua_i(Fl_Choice* o, void*) {
  m_rkr->Con_D_Q=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Con_Down_Qua(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Con_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Con_Up_Qua_i(Fl_Choice* o, void*) {
  m_rkr->Con_U_Q=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Con_Up_Qua(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Con_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_Seq_Downsample_i(Fl_Choice* o, void*) {
  m_rkr->Seq_Down=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Seq_Downsample(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Seq_Downsample_i(o,v);
}

void SettingsWindowGui::cb_Seq_Down_Qua_i(Fl_Choice* o, void*) {
  m_rkr->Seq_D_Q=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Seq_Down_Qua(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Seq_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Seq_Up_Qua_i(Fl_Choice* o, void*) {
  m_rkr->Seq_U_Q=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Seq_Up_Qua(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Seq_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_Shi_Downsample_i(Fl_Choice* o, void*) {
  m_rkr->Shi_Down=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Shi_Downsample(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Shi_Downsample_i(o,v);
}

void SettingsWindowGui::cb_Shi_Down_Qua_i(Fl_Choice* o, void*) {
  m_rkr->Shi_D_Q=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Shi_Down_Qua(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Shi_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Shi_Up_Qua_i(Fl_Choice* o, void*) {
  m_rkr->Shi_U_Q=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Shi_Up_Qua(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Shi_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_Voc_Downsample_i(Fl_Choice* o, void*) {
  m_rkr->Voc_Down=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Voc_Downsample(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Voc_Downsample_i(o,v);
}

void SettingsWindowGui::cb_Voc_Down_Qua_i(Fl_Choice* o, void*) {
  m_rkr->Voc_D_Q=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Voc_Down_Qua(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Voc_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Voc_Up_Qua_i(Fl_Choice* o, void*) {
  m_rkr->Voc_U_Q=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Voc_Up_Qua(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Voc_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_Ste_Downsample_i(Fl_Choice* o, void*) {
  m_rkr->Ste_Down=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Ste_Downsample(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Ste_Downsample_i(o,v);
}

void SettingsWindowGui::cb_Ste_Down_Qua_i(Fl_Choice* o, void*) {
  m_rkr->Ste_D_Q=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Ste_Down_Qua(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Ste_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Ste_Up_Qua_i(Fl_Choice* o, void*) {
  m_rkr->Ste_U_Q=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Ste_Up_Qua(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Ste_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_Wave_Amo_i(Fl_Choice* o, void*) {
  m_rkr->Wave_res_amount=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Wave_Amo(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Wave_Amo_i(o,v);
}

Fl_Menu_Item SettingsWindowGui::menu_Wave_Amo[] = {
 {"Normal", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x12", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SettingsWindowGui::cb_Wave_Down_Qua_i(Fl_Choice* o, void*) {
  m_rkr->Wave_down_q=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Wave_Down_Qua(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Wave_Down_Qua_i(o,v);
}

void SettingsWindowGui::cb_Wave_Up_Qua_i(Fl_Choice* o, void*) {
  m_rkr->Wave_up_q=(int)o->value();
m_rgui->Show_Next_Time();
}
void SettingsWindowGui::cb_Wave_Up_Qua(Fl_Choice* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Wave_Up_Qua_i(o,v);
}

void SettingsWindowGui::cb_D_A_Connect_i(Fl_Check_Button* o, void*) {
  m_rkr->aconnect_MI=(int) o->value();

if (m_rkr->aconnect_MI) BMidiIn->activate();
else BMidiIn->deactivate();
}
void SettingsWindowGui::cb_D_A_Connect(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_D_A_Connect_i(o,v);
}

void SettingsWindowGui::cb_BMidiIn_i(Fl_Browser* o, void*) {
  int valor;
valor = (int) o->value();
if(o->text(valor) != NULL)
strcpy(m_rkr->MID,o->text(valor));
else return;
o->select(valor,1);
m_rkr->Conecta();
}
void SettingsWindowGui::cb_BMidiIn(Fl_Browser* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_BMidiIn_i(o,v);
}

void SettingsWindowGui::cb_Midi_In_Counter_i(Fl_Counter* o, void*) {
  m_rkr->MidiCh=(int)o->value()-1;
}
void SettingsWindowGui::cb_Midi_In_Counter(Fl_Counter* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Midi_In_Counter_i(o,v);
}

void SettingsWindowGui::cb_Har_In_Counter_i(Fl_Counter* o, void*) {
  m_rkr->HarCh=(int)o->value()-1;
}
void SettingsWindowGui::cb_Har_In_Counter(Fl_Counter* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Har_In_Counter_i(o,v);
}

void SettingsWindowGui::cb_Stereo_Har_In_Counter_i(Fl_Counter* o, void*) {
  m_rkr->StereoHarCh=(int)o->value()-1;
}
void SettingsWindowGui::cb_Stereo_Har_In_Counter(Fl_Counter* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Stereo_Har_In_Counter_i(o,v);
}

void SettingsWindowGui::cb_Mw0_i(Fl_Check_Button*, void*) {
  m_rkr->MIDIway=0;
m_rgui->ML_Menu->deactivate();
}
void SettingsWindowGui::cb_Mw0(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_Mw0_i(o,v);
}

void SettingsWindowGui::cb_Mw1_i(Fl_Check_Button*, void*) {
  m_rkr->MIDIway=1;
m_rgui->ML_Menu->activate();
}
void SettingsWindowGui::cb_Mw1(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()->parent()))->cb_Mw1_i(o,v);
}

void SettingsWindowGui::cb_AAssign_i(Fl_Check_Button* o, void*) {
  m_rkr->autoassign=o->value();
}
void SettingsWindowGui::cb_AAssign(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_AAssign_i(o,v);
}

void SettingsWindowGui::cb_MTable_i(Fl_Check_Button* o, void*) {
  m_rkr->midi_table=o->value();
if(m_rkr->midi_table) scroll->activate(); else 
scroll->deactivate();
}
void SettingsWindowGui::cb_MTable(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_MTable_i(o,v);
}

void SettingsWindowGui::cb_D_J_Connect_i(Fl_Check_Button* o, void*) {
  m_rkr->aconnect_JA=(int) o->value();
if (m_rkr->aconnect_JA) JackCo->activate();
else JackCo->deactivate();
}
void SettingsWindowGui::cb_D_J_Connect(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_D_J_Connect_i(o,v);
}

void SettingsWindowGui::cb_D_IJ_Connect_i(Fl_Check_Button* o, void*) {
  m_rkr->aconnect_JIA=(int) o->value();
if (m_rkr->aconnect_JIA) JackIn->activate();
else JackIn->deactivate();
}
void SettingsWindowGui::cb_D_IJ_Connect(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_D_IJ_Connect_i(o,v);
}

void SettingsWindowGui::cb_Username_i(Fl_Input* o, void*) {
  m_rkr->UserRealName=(char*) o->value();
}
void SettingsWindowGui::cb_Username(Fl_Input* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_Username_i(o,v);
}

void SettingsWindowGui::cb_MES_DIS_i(Fl_Check_Button* o, void*) {
  m_rkr->mess_dis=(int) o->value();
}
void SettingsWindowGui::cb_MES_DIS(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_MES_DIS_i(o,v);
}

void SettingsWindowGui::cb_T_TIMEOUT_i(Fl_Check_Button* o, void*) {
  m_rkr->t_timeout=(int) o->value();
}
void SettingsWindowGui::cb_T_TIMEOUT(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_T_TIMEOUT_i(o,v);
}

void SettingsWindowGui::cb_ENA_TOOL_i(Fl_Check_Button* o, void*) {
  m_rkr->ena_tool=(int) o->value();
Fl_Tooltip::enable(m_rkr->ena_tool);
}
void SettingsWindowGui::cb_ENA_TOOL(Fl_Check_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_ENA_TOOL_i(o,v);
}

void SettingsWindowGui::cb_BF_Browser_i(Fl_Button*, void*) {
  char *filename;
filename=fl_file_chooser("Browse:","(*.rkrb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkrb");
BFiname->value(filename);
strcpy(m_rkr->BankFilename,filename);
}
void SettingsWindowGui::cb_BF_Browser(Fl_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_BF_Browser_i(o,v);
}

void SettingsWindowGui::cb_UD_Browser_i(Fl_Button*, void*) {
  char *dir;
dir=fl_dir_chooser("Browse:",NULL,0);
if (dir==NULL) return;
Udir->value(dir);
strcpy(m_rkr->UDirFilename,dir);
m_rgui->ScanDir();
}
void SettingsWindowGui::cb_UD_Browser(Fl_Button* o, void* v) {
  ((SettingsWindowGui*)(o->parent()->parent()->parent()))->cb_UD_Browser_i(o,v);
}
SettingsWindowGui::SettingsWindowGui(int X, int Y, int W, int H, const char *L)
  : Fl_Double_Window(X, Y, W, H, L) {
  _SettingsWindowGui();
}

SettingsWindowGui::SettingsWindowGui(int W, int H, const char *L)
  : Fl_Double_Window(0, 0, W, H, L) {
  clear_flag(16);
  _SettingsWindowGui();
}

SettingsWindowGui::SettingsWindowGui()
  : Fl_Double_Window(0, 0, 640, 580, 0) {
  clear_flag(16);
  _SettingsWindowGui();
}

void SettingsWindowGui::_SettingsWindowGui() {
this->box(FL_FLAT_BOX);
this->color(FL_BACKGROUND_COLOR);
this->selection_color(FL_BACKGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->align(Fl_Align(FL_ALIGN_TOP));
this->when(FL_WHEN_RELEASE);
{ Fondo2 = new Fl_Box(1, 1, 640, 580);
} // Fl_Box* Fondo2
{ STabs = new Fl_Tabs(0, 0, 636, 606);
  STabs->user_data((void*)(1));
  { Look = new Fl_Group(5, 26, 630, 554, "Look");
    Look->box(FL_DOWN_FRAME);
    Look->labelfont(1);
    Look->labelcolor(FL_BACKGROUND2_COLOR);
    Look->user_data((void*)(1));
    Look->align(Fl_Align(FL_ALIGN_LEFT));
    { Fondo6 = new Fl_Box(5, 26, 630, 554);
    } // Fl_Box* Fondo6
    { scheme_ch = new Fl_Choice(60, 50, 88, 20, "Schema");
      scheme_ch->down_box(FL_BORDER_BOX);
      scheme_ch->labelsize(11);
      scheme_ch->labelcolor(FL_BACKGROUND2_COLOR);
      scheme_ch->textsize(12);
      scheme_ch->textcolor(FL_BACKGROUND2_COLOR);
      scheme_ch->callback((Fl_Callback*)cb_scheme_ch);
      scheme_ch->menu(menu_scheme_ch);
    } // Fl_Choice* scheme_ch
    { Font_Bro = new Fl_Browser(20, 100, 400, 225, "Font");
      Font_Bro->type(1);
      Font_Bro->labelsize(11);
      Font_Bro->labelcolor(FL_BACKGROUND2_COLOR);
      Font_Bro->callback((Fl_Callback*)cb_Font_Bro);
      Font_Bro->align(Fl_Align(FL_ALIGN_TOP));
      Font_Bro->when(FL_WHEN_CHANGED);
    } // Fl_Browser* Font_Bro
    { FSLabel = new Fl_Box(10, 333, 60, 17, "Font Size");
      FSLabel->labelsize(11);
      FSLabel->labelcolor(FL_BACKGROUND2_COLOR);
    } // Fl_Box* FSLabel
    { FSless = new Fl_Button(78, 330, 30, 20, "-");
      FSless->callback((Fl_Callback*)cb_FSless, (void*)(77));
    } // Fl_Button* FSless
    { FSplus = new Fl_Button(113, 330, 30, 20, "+");
      FSplus->callback((Fl_Callback*)cb_FSplus, (void*)(77));
    } // Fl_Button* FSplus
    { FSReset = new Fl_Button(148, 330, 57, 20, "Reset");
      FSReset->callback((Fl_Callback*)cb_FSReset, (void*)(77));
    } // Fl_Button* FSReset
    { CLLabel = new Fl_Box(10, 358, 40, 19, "Colors");
      CLLabel->labelsize(11);
      CLLabel->labelcolor(FL_BACKGROUND2_COLOR);
    } // Fl_Box* CLLabel
    { B_C = new Fl_Button(15, 380, 90, 25, "Buttons");
      B_C->callback((Fl_Callback*)cb_B_C, (void*)(77));
    } // Fl_Button* B_C
    { A_C = new Fl_Button(120, 380, 90, 25, "Labels");
      A_C->callback((Fl_Callback*)cb_A_C, (void*)(77));
    } // Fl_Button* A_C
    { L_C = new Fl_Button(225, 380, 90, 25, "Leds");
      L_C->callback((Fl_Callback*)cb_L_C, (void*)(77));
    } // Fl_Button* L_C
    { K_C = new Fl_Button(330, 380, 90, 25, "Background");
      K_C->callback((Fl_Callback*)cb_K_C, (void*)(77));
    } // Fl_Button* K_C
    { Enable_Back = new Fl_Check_Button(162, 409, 23, 20, "Enable Background Image");
      Enable_Back->down_box(FL_DOWN_BOX);
      Enable_Back->labelsize(11);
      Enable_Back->labelcolor(FL_BACKGROUND2_COLOR);
      Enable_Back->callback((Fl_Callback*)cb_Enable_Back);
      Enable_Back->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* Enable_Back
    { BackFiname = new Fl_File_Input(10, 445, 390, 30, "Background Image");
      BackFiname->labelsize(11);
      BackFiname->labelcolor(FL_BACKGROUND2_COLOR);
      BackFiname->textsize(12);
      BackFiname->textcolor(FL_BACKGROUND2_COLOR);
      BackFiname->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_File_Input* BackFiname
    { BI_Browser = new Fl_Button(410, 455, 65, 20, "Browse");
      BI_Browser->callback((Fl_Callback*)cb_BI_Browser, (void*)(77));
    } // Fl_Button* BI_Browser
    { Enable_DeacHide = new Fl_Check_Button(169, 500, 23, 20, "Hide Unused Effect Widgets");
      Enable_DeacHide->down_box(FL_DOWN_BOX);
      Enable_DeacHide->labelsize(11);
      Enable_DeacHide->labelcolor(FL_BACKGROUND2_COLOR);
      Enable_DeacHide->callback((Fl_Callback*)cb_Enable_DeacHide);
      Enable_DeacHide->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* Enable_DeacHide
    Look->end();
  } // Fl_Group* Look
  { AUDIO_SET = new Fl_Group(0, 26, 635, 554, "Audio");
    AUDIO_SET->box(FL_DOWN_FRAME);
    AUDIO_SET->labelfont(1);
    AUDIO_SET->labelcolor(FL_BACKGROUND2_COLOR);
    AUDIO_SET->user_data((void*)(1));
    AUDIO_SET->align(Fl_Align(FL_ALIGN_LEFT));
    AUDIO_SET->hide();
    { Fondo7 = new Fl_Box(0, 26, 635, 554);
    } // Fl_Box* Fondo7
    { INSTATE = new Fl_Check_Button(96, 29, 23, 20, "FX On at start");
      INSTATE->down_box(FL_DOWN_BOX);
      INSTATE->labelsize(11);
      INSTATE->labelcolor(FL_BACKGROUND2_COLOR);
      INSTATE->callback((Fl_Callback*)cb_INSTATE);
      INSTATE->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* INSTATE
    { Filter_DC = new Fl_Check_Button(135, 53, 23, 20, "Filter Input DC Offset");
      Filter_DC->down_box(FL_DOWN_BOX);
      Filter_DC->labelsize(11);
      Filter_DC->labelcolor(FL_BACKGROUND2_COLOR);
      Filter_DC->callback((Fl_Callback*)cb_Filter_DC);
      Filter_DC->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* Filter_DC
    { Pre_Serve = new Fl_Check_Button(259, 77, 21, 20, "Preserve Gain/Master when Preset change");
      Pre_Serve->down_box(FL_DOWN_BOX);
      Pre_Serve->labelsize(11);
      Pre_Serve->labelcolor(FL_BACKGROUND2_COLOR);
      Pre_Serve->callback((Fl_Callback*)cb_Pre_Serve);
      Pre_Serve->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* Pre_Serve
    { Update_TAP = new Fl_Check_Button(239, 100, 21, 20, "Update TapTempo when Preset change");
      Update_TAP->down_box(FL_DOWN_BOX);
      Update_TAP->labelsize(11);
      Update_TAP->labelcolor(FL_BACKGROUND2_COLOR);
      Update_TAP->callback((Fl_Callback*)cb_Update_TAP);
      Update_TAP->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* Update_TAP
    { UPSAMPLE_C = new Fl_Check_Button(83, 124, 23, 20, "Upsampling");
      UPSAMPLE_C->down_box(FL_DOWN_BOX);
      UPSAMPLE_C->labelsize(11);
      UPSAMPLE_C->labelcolor(FL_BACKGROUND2_COLOR);
      UPSAMPLE_C->callback((Fl_Callback*)cb_UPSAMPLE_C);
      UPSAMPLE_C->align(Fl_Align(FL_ALIGN_LEFT));
      UPSAMPLE_C->when(FL_WHEN_CHANGED);
    } // Fl_Check_Button* UPSAMPLE_C
    { Upr_Amo = new Fl_Choice(145, 126, 47, 18, "Amount");
      Upr_Amo->down_box(FL_BORDER_BOX);
      Upr_Amo->labelsize(10);
      Upr_Amo->labelcolor(FL_BACKGROUND2_COLOR);
      Upr_Amo->textsize(10);
      Upr_Amo->textcolor(FL_BACKGROUND2_COLOR);
      Upr_Amo->callback((Fl_Callback*)cb_Upr_Amo);
      Upr_Amo->menu(menu_Upr_Amo);
    } // Fl_Choice* Upr_Amo
    { Upr_Qual = new Fl_Choice(217, 126, 72, 18, "Up");
      Upr_Qual->down_box(FL_BORDER_BOX);
      Upr_Qual->labelsize(10);
      Upr_Qual->labelcolor(FL_BACKGROUND2_COLOR);
      Upr_Qual->textsize(10);
      Upr_Qual->textcolor(FL_BACKGROUND2_COLOR);
      Upr_Qual->callback((Fl_Callback*)cb_Upr_Qual);
      Upr_Qual->menu(menu_Upr_Qual);
    } // Fl_Choice* Upr_Qual
    { Fl_Choice* o = Downr_Qual = new Fl_Choice(329, 126, 73, 18, "Down");
      Downr_Qual->down_box(FL_BORDER_BOX);
      Downr_Qual->labelsize(10);
      Downr_Qual->labelcolor(FL_BACKGROUND2_COLOR);
      Downr_Qual->textsize(10);
      Downr_Qual->textcolor(FL_BACKGROUND2_COLOR);
      Downr_Qual->callback((Fl_Callback*)cb_Downr_Qual);
      o->menu(menu_Upr_Qual);
    } // Fl_Choice* Downr_Qual
    { L_SIZE = new Fl_Counter(133, 149, 47, 18, "Looper Size Seconds     ");
      L_SIZE->type(1);
      L_SIZE->labelsize(10);
      L_SIZE->labelcolor(FL_BACKGROUND2_COLOR);
      L_SIZE->minimum(0.5);
      L_SIZE->maximum(30);
      L_SIZE->step(0.5);
      L_SIZE->value(0.5);
      L_SIZE->textsize(10);
      L_SIZE->callback((Fl_Callback*)cb_L_SIZE);
      L_SIZE->align(Fl_Align(FL_ALIGN_LEFT));
      L_SIZE->when(FL_WHEN_RELEASE);
    } // Fl_Counter* L_SIZE
    { LM_Volume = new Fl_Counter(338, 149, 47, 18, "Looper Metronome Volume  ");
      LM_Volume->type(1);
      LM_Volume->labelsize(10);
      LM_Volume->labelcolor(FL_BACKGROUND2_COLOR);
      LM_Volume->minimum(0);
      LM_Volume->maximum(100);
      LM_Volume->step(1);
      LM_Volume->value(50);
      LM_Volume->textsize(10);
      LM_Volume->callback((Fl_Callback*)cb_LM_Volume);
      LM_Volume->align(Fl_Align(FL_ALIGN_LEFT));
      LM_Volume->when(FL_WHEN_RELEASE);
    } // Fl_Counter* LM_Volume
    { Har_Qual = new Fl_Choice(132, 173, 47, 18, "Harmonizer Quality      ");
      Har_Qual->down_box(FL_BORDER_BOX);
      Har_Qual->labelsize(10);
      Har_Qual->labelcolor(FL_BACKGROUND2_COLOR);
      Har_Qual->textsize(10);
      Har_Qual->textcolor(FL_BACKGROUND2_COLOR);
      Har_Qual->callback((Fl_Callback*)cb_Har_Qual);
      Har_Qual->menu(menu_Har_Qual);
    } // Fl_Choice* Har_Qual
    { Ste_Qual = new Fl_Choice(296, 173, 47, 18, "StereoHarm Quality");
      Ste_Qual->down_box(FL_BORDER_BOX);
      Ste_Qual->labelsize(10);
      Ste_Qual->labelcolor(FL_BACKGROUND2_COLOR);
      Ste_Qual->textsize(10);
      Ste_Qual->textcolor(FL_BACKGROUND2_COLOR);
      Ste_Qual->callback((Fl_Callback*)cb_Ste_Qual);
      Ste_Qual->menu(menu_Ste_Qual);
    } // Fl_Choice* Ste_Qual
    { Voc_Bands = new Fl_Choice(132, 196, 47, 18, "Vocoder Bands              ");
      Voc_Bands->down_box(FL_BORDER_BOX);
      Voc_Bands->labelsize(10);
      Voc_Bands->labelcolor(FL_BACKGROUND2_COLOR);
      Voc_Bands->textsize(10);
      Voc_Bands->textcolor(FL_BACKGROUND2_COLOR);
      Voc_Bands->callback((Fl_Callback*)cb_Voc_Bands);
      Voc_Bands->menu(menu_Voc_Bands);
    } // Fl_Choice* Voc_Bands
    { FLPosition = new Fl_Check_Button(186, 222, 23, 20, "Limiter before Output Volume");
      FLPosition->down_box(FL_DOWN_BOX);
      FLPosition->labelsize(11);
      FLPosition->labelcolor(FL_BACKGROUND2_COLOR);
      FLPosition->callback((Fl_Callback*)cb_FLPosition);
      FLPosition->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* FLPosition
    { DB6B = new Fl_Check_Button(324, 222, 23, 20, "+6dB Final Limiter ");
      DB6B->down_box(FL_DOWN_BOX);
      DB6B->labelsize(11);
      DB6B->labelcolor(FL_BACKGROUND2_COLOR);
      DB6B->callback((Fl_Callback*)cb_DB6B);
      DB6B->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* DB6B
    { Calibration = new Fl_Counter(120, 249, 116, 21, "Tuner Calibration A4 ");
      Calibration->labelsize(10);
      Calibration->labelcolor(FL_BACKGROUND2_COLOR);
      Calibration->minimum(420);
      Calibration->maximum(460);
      Calibration->value(440);
      Calibration->textsize(10);
      Calibration->callback((Fl_Callback*)cb_Calibration);
      Calibration->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Counter* Calibration
    { Fl_Counter* o = RTrigger = new Fl_Counter(367, 249, 116, 21, "Recognize Note Trigger");
      RTrigger->labelsize(10);
      RTrigger->labelcolor(FL_BACKGROUND2_COLOR);
      RTrigger->minimum(0.01);
      RTrigger->maximum(0.99);
      RTrigger->step(0.01);
      RTrigger->value(0.6);
      RTrigger->textsize(10);
      RTrigger->callback((Fl_Callback*)cb_RTrigger);
      RTrigger->align(Fl_Align(FL_ALIGN_LEFT));
      o->lstep(0.1);
    } // Fl_Counter* RTrigger
    { RC_Harm_Opti = new Fl_Choice(165, 297, 72, 18, "Harmonizer");
      RC_Harm_Opti->down_box(FL_BORDER_BOX);
      RC_Harm_Opti->labelsize(10);
      RC_Harm_Opti->labelcolor(FL_BACKGROUND2_COLOR);
      RC_Harm_Opti->textsize(10);
      RC_Harm_Opti->textcolor(FL_BACKGROUND2_COLOR);
      RC_Harm_Opti->callback((Fl_Callback*)cb_RC_Harm_Opti);
      RC_Harm_Opti->align(Fl_Align(FL_ALIGN_TOP));
      RC_Harm_Opti->menu(menu_RC_Harm_Opti);
    } // Fl_Choice* RC_Harm_Opti
    { RC_St_Harm_Opti = new Fl_Choice(265, 297, 72, 18, "Stereo Harmonizer");
      RC_St_Harm_Opti->down_box(FL_BORDER_BOX);
      RC_St_Harm_Opti->labelsize(10);
      RC_St_Harm_Opti->labelcolor(FL_BACKGROUND2_COLOR);
      RC_St_Harm_Opti->textsize(10);
      RC_St_Harm_Opti->textcolor(FL_BACKGROUND2_COLOR);
      RC_St_Harm_Opti->callback((Fl_Callback*)cb_RC_St_Harm_Opti);
      RC_St_Harm_Opti->align(Fl_Align(FL_ALIGN_TOP));
      RC_St_Harm_Opti->menu(menu_RC_St_Harm_Opti);
    } // Fl_Choice* RC_St_Harm_Opti
    { RC_Ring_Opti = new Fl_Choice(365, 297, 72, 18, "Ring");
      RC_Ring_Opti->down_box(FL_BORDER_BOX);
      RC_Ring_Opti->labelsize(10);
      RC_Ring_Opti->labelcolor(FL_BACKGROUND2_COLOR);
      RC_Ring_Opti->textsize(10);
      RC_Ring_Opti->textcolor(FL_BACKGROUND2_COLOR);
      RC_Ring_Opti->callback((Fl_Callback*)cb_RC_Ring_Opti);
      RC_Ring_Opti->align(Fl_Align(FL_ALIGN_TOP));
      RC_Ring_Opti->menu(menu_RC_Ring_Opti);
    } // Fl_Choice* RC_Ring_Opti
    { Har_Downsample = new Fl_Choice(145, 336, 70, 18, "Harmonizer Downsample ");
      Har_Downsample->down_box(FL_BORDER_BOX);
      Har_Downsample->labelsize(10);
      Har_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
      Har_Downsample->textsize(10);
      Har_Downsample->textcolor(FL_BACKGROUND2_COLOR);
      Har_Downsample->callback((Fl_Callback*)cb_Har_Downsample);
      Har_Downsample->menu(menu_Har_Downsample);
    } // Fl_Choice* Har_Downsample
    { Fl_Choice* o = Har_Down_Qua = new Fl_Choice(250, 336, 72, 18, "Down");
      Har_Down_Qua->down_box(FL_BORDER_BOX);
      Har_Down_Qua->labelsize(10);
      Har_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Har_Down_Qua->textsize(10);
      Har_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Har_Down_Qua->callback((Fl_Callback*)cb_Har_Down_Qua);
      o->menu(menu_Upr_Qual);
    } // Fl_Choice* Har_Down_Qua
    { Fl_Choice* o = Har_Up_Qua = new Fl_Choice(343, 336, 72, 18, "Up");
      Har_Up_Qua->down_box(FL_BORDER_BOX);
      Har_Up_Qua->labelsize(10);
      Har_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Har_Up_Qua->textsize(10);
      Har_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Har_Up_Qua->callback((Fl_Callback*)cb_Har_Up_Qua);
      o->menu(menu_Upr_Qual);
    } // Fl_Choice* Har_Up_Qua
    { Fl_Choice* o = Rev_Downsample = new Fl_Choice(145, 359, 70, 18, "Reverbtron Downsample  ");
      Rev_Downsample->down_box(FL_BORDER_BOX);
      Rev_Downsample->labelsize(10);
      Rev_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
      Rev_Downsample->textsize(10);
      Rev_Downsample->textcolor(FL_BACKGROUND2_COLOR);
      Rev_Downsample->callback((Fl_Callback*)cb_Rev_Downsample);
      o->menu(menu_Har_Downsample);
    } // Fl_Choice* Rev_Downsample
    { Fl_Choice* o = Rev_Down_Qua = new Fl_Choice(250, 359, 72, 18, "Down");
      Rev_Down_Qua->down_box(FL_BORDER_BOX);
      Rev_Down_Qua->labelsize(10);
      Rev_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Rev_Down_Qua->textsize(10);
      Rev_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Rev_Down_Qua->callback((Fl_Callback*)cb_Rev_Down_Qua);
      o->menu(menu_Upr_Qual);
    } // Fl_Choice* Rev_Down_Qua
    { Fl_Choice* o = Rev_Up_Qua = new Fl_Choice(343, 359, 72, 18, "Up");
      Rev_Up_Qua->down_box(FL_BORDER_BOX);
      Rev_Up_Qua->labelsize(10);
      Rev_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Rev_Up_Qua->textsize(10);
      Rev_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Rev_Up_Qua->callback((Fl_Callback*)cb_Rev_Up_Qua);
      o->menu(menu_Upr_Qual);
    } // Fl_Choice* Rev_Up_Qua
    { Fl_Choice* o = Con_Downsample = new Fl_Choice(145, 382, 70, 18, "Convolotron Downsample");
      Con_Downsample->down_box(FL_BORDER_BOX);
      Con_Downsample->labelsize(10);
      Con_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
      Con_Downsample->textsize(10);
      Con_Downsample->textcolor(FL_BACKGROUND2_COLOR);
      Con_Downsample->callback((Fl_Callback*)cb_Con_Downsample);
      o->menu(menu_Har_Downsample);
    } // Fl_Choice* Con_Downsample
    { Fl_Choice* o = Con_Down_Qua = new Fl_Choice(250, 382, 72, 18, "Down");
      Con_Down_Qua->down_box(FL_BORDER_BOX);
      Con_Down_Qua->labelsize(10);
      Con_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Con_Down_Qua->textsize(10);
      Con_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Con_Down_Qua->callback((Fl_Callback*)cb_Con_Down_Qua);
      o->menu(menu_Upr_Qual);
    } // Fl_Choice* Con_Down_Qua
    { Fl_Choice* o = Con_Up_Qua = new Fl_Choice(343, 382, 72, 18, "Up");
      Con_Up_Qua->down_box(FL_BORDER_BOX);
      Con_Up_Qua->labelsize(10);
      Con_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Con_Up_Qua->textsize(10);
      Con_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Con_Up_Qua->callback((Fl_Callback*)cb_Con_Up_Qua);
      o->menu(menu_Upr_Qual);
    } // Fl_Choice* Con_Up_Qua
    { Fl_Choice* o = Seq_Downsample = new Fl_Choice(145, 405, 70, 18, "Sequence Downsample    ");
      Seq_Downsample->down_box(FL_BORDER_BOX);
      Seq_Downsample->labelsize(10);
      Seq_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
      Seq_Downsample->textsize(10);
      Seq_Downsample->textcolor(FL_BACKGROUND2_COLOR);
      Seq_Downsample->callback((Fl_Callback*)cb_Seq_Downsample);
      o->menu(menu_Har_Downsample);
    } // Fl_Choice* Seq_Downsample
    { Fl_Choice* o = Seq_Down_Qua = new Fl_Choice(250, 405, 72, 18, "Down");
      Seq_Down_Qua->down_box(FL_BORDER_BOX);
      Seq_Down_Qua->labelsize(10);
      Seq_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Seq_Down_Qua->textsize(10);
      Seq_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Seq_Down_Qua->callback((Fl_Callback*)cb_Seq_Down_Qua);
      o->menu(menu_Upr_Qual);
    } // Fl_Choice* Seq_Down_Qua
    { Fl_Choice* o = Seq_Up_Qua = new Fl_Choice(343, 405, 72, 18, "Up");
      Seq_Up_Qua->down_box(FL_BORDER_BOX);
      Seq_Up_Qua->labelsize(10);
      Seq_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Seq_Up_Qua->textsize(10);
      Seq_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Seq_Up_Qua->callback((Fl_Callback*)cb_Seq_Up_Qua);
      o->menu(menu_Upr_Qual);
    } // Fl_Choice* Seq_Up_Qua
    { Fl_Choice* o = Shi_Downsample = new Fl_Choice(145, 428, 70, 18, "Shifter Downsample         ");
      Shi_Downsample->down_box(FL_BORDER_BOX);
      Shi_Downsample->labelsize(10);
      Shi_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
      Shi_Downsample->textsize(10);
      Shi_Downsample->textcolor(FL_BACKGROUND2_COLOR);
      Shi_Downsample->callback((Fl_Callback*)cb_Shi_Downsample);
      o->menu(menu_Har_Downsample);
    } // Fl_Choice* Shi_Downsample
    { Fl_Choice* o = Shi_Down_Qua = new Fl_Choice(250, 428, 72, 18, "Down");
      Shi_Down_Qua->down_box(FL_BORDER_BOX);
      Shi_Down_Qua->labelsize(10);
      Shi_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Shi_Down_Qua->textsize(10);
      Shi_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Shi_Down_Qua->callback((Fl_Callback*)cb_Shi_Down_Qua);
      o->menu(menu_Upr_Qual);
    } // Fl_Choice* Shi_Down_Qua
    { Fl_Choice* o = Shi_Up_Qua = new Fl_Choice(343, 428, 72, 18, "Up");
      Shi_Up_Qua->down_box(FL_BORDER_BOX);
      Shi_Up_Qua->labelsize(10);
      Shi_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Shi_Up_Qua->textsize(10);
      Shi_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Shi_Up_Qua->callback((Fl_Callback*)cb_Shi_Up_Qua);
      o->menu(menu_Upr_Qual);
    } // Fl_Choice* Shi_Up_Qua
    { Fl_Choice* o = Voc_Downsample = new Fl_Choice(145, 452, 70, 18, "Vocoder Downsample      ");
      Voc_Downsample->down_box(FL_BORDER_BOX);
      Voc_Downsample->labelsize(10);
      Voc_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
      Voc_Downsample->textsize(10);
      Voc_Downsample->textcolor(FL_BACKGROUND2_COLOR);
      Voc_Downsample->callback((Fl_Callback*)cb_Voc_Downsample);
      o->menu(menu_Har_Downsample);
    } // Fl_Choice* Voc_Downsample
    { Fl_Choice* o = Voc_Down_Qua = new Fl_Choice(250, 452, 72, 18, "Down");
      Voc_Down_Qua->down_box(FL_BORDER_BOX);
      Voc_Down_Qua->labelsize(10);
      Voc_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Voc_Down_Qua->textsize(10);
      Voc_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Voc_Down_Qua->callback((Fl_Callback*)cb_Voc_Down_Qua);
      o->menu(menu_Upr_Qual);
    } // Fl_Choice* Voc_Down_Qua
    { Fl_Choice* o = Voc_Up_Qua = new Fl_Choice(343, 452, 72, 18, "Up");
      Voc_Up_Qua->down_box(FL_BORDER_BOX);
      Voc_Up_Qua->labelsize(10);
      Voc_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Voc_Up_Qua->textsize(10);
      Voc_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Voc_Up_Qua->callback((Fl_Callback*)cb_Voc_Up_Qua);
      o->menu(menu_Upr_Qual);
    } // Fl_Choice* Voc_Up_Qua
    { Fl_Choice* o = Ste_Downsample = new Fl_Choice(145, 477, 70, 18, "StereoHarm Downsample");
      Ste_Downsample->down_box(FL_BORDER_BOX);
      Ste_Downsample->labelsize(10);
      Ste_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
      Ste_Downsample->textsize(10);
      Ste_Downsample->textcolor(FL_BACKGROUND2_COLOR);
      Ste_Downsample->callback((Fl_Callback*)cb_Ste_Downsample);
      o->menu(menu_Har_Downsample);
    } // Fl_Choice* Ste_Downsample
    { Fl_Choice* o = Ste_Down_Qua = new Fl_Choice(250, 477, 72, 18, "Down");
      Ste_Down_Qua->down_box(FL_BORDER_BOX);
      Ste_Down_Qua->labelsize(10);
      Ste_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Ste_Down_Qua->textsize(10);
      Ste_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Ste_Down_Qua->callback((Fl_Callback*)cb_Ste_Down_Qua);
      o->menu(menu_Upr_Qual);
    } // Fl_Choice* Ste_Down_Qua
    { Fl_Choice* o = Ste_Up_Qua = new Fl_Choice(343, 477, 72, 18, "Up");
      Ste_Up_Qua->down_box(FL_BORDER_BOX);
      Ste_Up_Qua->labelsize(10);
      Ste_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Ste_Up_Qua->textsize(10);
      Ste_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Ste_Up_Qua->callback((Fl_Callback*)cb_Ste_Up_Qua);
      o->menu(menu_Upr_Qual);
    } // Fl_Choice* Ste_Up_Qua
    { Wave_Amo = new Fl_Choice(145, 527, 70, 18, "Waveshape Resampling   ");
      Wave_Amo->down_box(FL_BORDER_BOX);
      Wave_Amo->labelsize(10);
      Wave_Amo->labelcolor(FL_BACKGROUND2_COLOR);
      Wave_Amo->textsize(10);
      Wave_Amo->textcolor(FL_BACKGROUND2_COLOR);
      Wave_Amo->callback((Fl_Callback*)cb_Wave_Amo);
      Wave_Amo->menu(menu_Wave_Amo);
    } // Fl_Choice* Wave_Amo
    { Fl_Choice* o = Wave_Down_Qua = new Fl_Choice(252, 527, 72, 18, "Down");
      Wave_Down_Qua->down_box(FL_BORDER_BOX);
      Wave_Down_Qua->labelsize(10);
      Wave_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Wave_Down_Qua->textsize(10);
      Wave_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Wave_Down_Qua->callback((Fl_Callback*)cb_Wave_Down_Qua);
      o->menu(menu_Upr_Qual);
    } // Fl_Choice* Wave_Down_Qua
    { Fl_Choice* o = Wave_Up_Qua = new Fl_Choice(345, 527, 72, 18, "Up");
      Wave_Up_Qua->down_box(FL_BORDER_BOX);
      Wave_Up_Qua->labelsize(10);
      Wave_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
      Wave_Up_Qua->textsize(10);
      Wave_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
      Wave_Up_Qua->callback((Fl_Callback*)cb_Wave_Up_Qua);
      o->menu(menu_Upr_Qual);
    } // Fl_Choice* Wave_Up_Qua
    { Recognize_Label = new Fl_Box(10, 298, 150, 17, "Recognize Note Optimization");
      Recognize_Label->labelsize(10);
      Recognize_Label->user_data((void*)(7));
      Recognize_Label->when(FL_WHEN_NEVER);
    } // Fl_Box* Recognize_Label
    AUDIO_SET->end();
  } // Fl_Group* AUDIO_SET
  { MIDI_SET = new Fl_Group(5, 26, 630, 554, "MIDI");
    MIDI_SET->box(FL_DOWN_FRAME);
    MIDI_SET->labelfont(1);
    MIDI_SET->labelcolor(FL_BACKGROUND2_COLOR);
    MIDI_SET->user_data((void*)(1));
    MIDI_SET->align(Fl_Align(FL_ALIGN_LEFT));
    MIDI_SET->hide();
    { Fondo8 = new Fl_Box(5, 26, 630, 554);
    } // Fl_Box* Fondo8
    { D_A_Connect = new Fl_Check_Button(135, 38, 105, 20, "Auto Connect MIDI In");
      D_A_Connect->down_box(FL_DOWN_BOX);
      D_A_Connect->labelsize(11);
      D_A_Connect->labelcolor(FL_BACKGROUND2_COLOR);
      D_A_Connect->callback((Fl_Callback*)cb_D_A_Connect);
      D_A_Connect->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* D_A_Connect
    { BMidiIn = new Fl_Browser(15, 72, 190, 111, "ALSA Sequencer Ports");
      BMidiIn->type(2);
      BMidiIn->selection_color(FL_FOREGROUND_COLOR);
      BMidiIn->labelsize(11);
      BMidiIn->labelcolor(FL_BACKGROUND2_COLOR);
      BMidiIn->textsize(12);
      BMidiIn->textcolor(FL_BACKGROUND2_COLOR);
      BMidiIn->callback((Fl_Callback*)cb_BMidiIn);
      BMidiIn->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Browser* BMidiIn
    { Midi_In_Counter = new Fl_Counter(103, 198, 60, 24, "Receive Channel");
      Midi_In_Counter->type(1);
      Midi_In_Counter->color((Fl_Color)25);
      Midi_In_Counter->labelsize(10);
      Midi_In_Counter->labelcolor(FL_BACKGROUND2_COLOR);
      Midi_In_Counter->minimum(1);
      Midi_In_Counter->maximum(16);
      Midi_In_Counter->step(1);
      Midi_In_Counter->value(1);
      Midi_In_Counter->textsize(11);
      Midi_In_Counter->callback((Fl_Callback*)cb_Midi_In_Counter);
      Midi_In_Counter->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Counter* Midi_In_Counter
    { Har_In_Counter = new Fl_Counter(162, 235, 60, 24, "Harmonizer Receive Channel");
      Har_In_Counter->type(1);
      Har_In_Counter->color((Fl_Color)25);
      Har_In_Counter->labelsize(10);
      Har_In_Counter->labelcolor(FL_BACKGROUND2_COLOR);
      Har_In_Counter->minimum(1);
      Har_In_Counter->maximum(16);
      Har_In_Counter->step(1);
      Har_In_Counter->value(1);
      Har_In_Counter->textsize(11);
      Har_In_Counter->callback((Fl_Callback*)cb_Har_In_Counter);
      Har_In_Counter->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Counter* Har_In_Counter
    { Stereo_Har_In_Counter = new Fl_Counter(200, 276, 60, 24, "Stereo Harmonizer Receive Channel");
      Stereo_Har_In_Counter->type(1);
      Stereo_Har_In_Counter->color((Fl_Color)25);
      Stereo_Har_In_Counter->labelsize(10);
      Stereo_Har_In_Counter->labelcolor(FL_BACKGROUND2_COLOR);
      Stereo_Har_In_Counter->minimum(1);
      Stereo_Har_In_Counter->maximum(16);
      Stereo_Har_In_Counter->step(1);
      Stereo_Har_In_Counter->value(1);
      Stereo_Har_In_Counter->textsize(11);
      Stereo_Har_In_Counter->callback((Fl_Callback*)cb_Stereo_Har_In_Counter);
      Stereo_Har_In_Counter->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Counter* Stereo_Har_In_Counter
    { wMIDI = new Fl_Group(15, 325, 273, 23, "MIDI implementation");
      wMIDI->box(FL_DOWN_FRAME);
      wMIDI->labelsize(10);
      wMIDI->labelcolor(FL_BACKGROUND2_COLOR);
      wMIDI->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { Mw0 = new Fl_Check_Button(72, 327, 18, 18, "Default");
        Mw0->type(102);
        Mw0->down_box(FL_DOWN_BOX);
        Mw0->labelsize(11);
        Mw0->labelcolor(FL_BACKGROUND2_COLOR);
        Mw0->callback((Fl_Callback*)cb_Mw0);
        Mw0->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Check_Button* Mw0
      { Mw1 = new Fl_Check_Button(183, 327, 18, 18, "MIDI Learn");
        Mw1->type(102);
        Mw1->down_box(FL_DOWN_BOX);
        Mw1->labelsize(11);
        Mw1->labelcolor(FL_BACKGROUND2_COLOR);
        Mw1->callback((Fl_Callback*)cb_Mw1);
        Mw1->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Check_Button* Mw1
      wMIDI->end();
    } // Fl_Group* wMIDI
    { AAssign = new Fl_Check_Button(134, 359, 16, 15, "Auto Assign MIDI Learn");
      AAssign->down_box(FL_DOWN_BOX);
      AAssign->labelsize(10);
      AAssign->labelcolor(FL_BACKGROUND2_COLOR);
      AAssign->callback((Fl_Callback*)cb_AAssign);
      AAssign->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* AAssign
    { MTable = new Fl_Check_Button(157, 377, 16, 15, "MIDI Program Change Table");
      MTable->down_box(FL_DOWN_BOX);
      MTable->labelsize(10);
      MTable->labelcolor(FL_BACKGROUND2_COLOR);
      MTable->callback((Fl_Callback*)cb_MTable);
      MTable->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* MTable
    { scroll = new Fl_Scroll(15, 360, 585, 162);
      scroll->type(6);
      scroll->user_data((void*)(5000));
      scroll->end();
    } // Fl_Scroll* scroll
    MIDI_SET->end();
  } // Fl_Group* MIDI_SET
  { JACK_SET = new Fl_Group(5, 26, 630, 554, "Jack");
    JACK_SET->box(FL_DOWN_FRAME);
    JACK_SET->labelfont(1);
    JACK_SET->labelcolor(FL_BACKGROUND2_COLOR);
    JACK_SET->user_data((void*)(1));
    JACK_SET->align(Fl_Align(FL_ALIGN_LEFT));
    JACK_SET->hide();
    { Fondo9 = new Fl_Box(5, 26, 630, 554);
    } // Fl_Box* Fondo9
    { D_J_Connect = new Fl_Check_Button(114, 40, 25, 20, "Auto Connect Out");
      D_J_Connect->down_box(FL_DOWN_BOX);
      D_J_Connect->labelsize(11);
      D_J_Connect->labelcolor(FL_BACKGROUND2_COLOR);
      D_J_Connect->callback((Fl_Callback*)cb_D_J_Connect);
      D_J_Connect->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* D_J_Connect
    { JackCo = new Fl_Browser(10, 72, 235, 138, "Output Ports");
      JackCo->type(3);
      JackCo->selection_color(FL_FOREGROUND_COLOR);
      JackCo->labelsize(11);
      JackCo->labelcolor(FL_BACKGROUND2_COLOR);
      JackCo->textsize(12);
      JackCo->textcolor(FL_BACKGROUND2_COLOR);
      JackCo->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Browser* JackCo
    { D_IJ_Connect = new Fl_Check_Button(104, 228, 25, 20, "Auto Connect In");
      D_IJ_Connect->down_box(FL_DOWN_BOX);
      D_IJ_Connect->labelsize(11);
      D_IJ_Connect->labelcolor(FL_BACKGROUND2_COLOR);
      D_IJ_Connect->callback((Fl_Callback*)cb_D_IJ_Connect);
      D_IJ_Connect->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* D_IJ_Connect
    { JackIn = new Fl_Browser(10, 259, 235, 131, "Input Ports");
      JackIn->type(3);
      JackIn->selection_color(FL_FOREGROUND_COLOR);
      JackIn->labelsize(11);
      JackIn->labelcolor(FL_BACKGROUND2_COLOR);
      JackIn->textsize(12);
      JackIn->textcolor(FL_BACKGROUND2_COLOR);
      JackIn->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Browser* JackIn
    JACK_SET->end();
  } // Fl_Group* JACK_SET
  { MISC_SET = new Fl_Group(5, 26, 630, 554, "Misc");
    MISC_SET->box(FL_DOWN_FRAME);
    MISC_SET->labelfont(1);
    MISC_SET->labelcolor(FL_BACKGROUND2_COLOR);
    MISC_SET->user_data((void*)(1));
    MISC_SET->align(Fl_Align(FL_ALIGN_LEFT));
    MISC_SET->hide();
    { Fondo10 = new Fl_Box(5, 26, 630, 554);
    } // Fl_Box* Fondo10
    { Username = new Fl_Input(80, 32, 240, 21, "Username:");
      Username->labelsize(11);
      Username->labelcolor(FL_BACKGROUND2_COLOR);
      Username->textsize(11);
      Username->textcolor(FL_BACKGROUND2_COLOR);
      Username->callback((Fl_Callback*)cb_Username);
    } // Fl_Input* Username
    { MES_DIS = new Fl_Check_Button(132, 68, 21, 20, "Disable Warnings    ");
      MES_DIS->down_box(FL_DOWN_BOX);
      MES_DIS->labelsize(11);
      MES_DIS->labelcolor(FL_BACKGROUND2_COLOR);
      MES_DIS->callback((Fl_Callback*)cb_MES_DIS);
      MES_DIS->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* MES_DIS
    { T_TIMEOUT = new Fl_Check_Button(132, 88, 21, 20, "Tap Tempo Timeout");
      T_TIMEOUT->down_box(FL_DOWN_BOX);
      T_TIMEOUT->labelsize(11);
      T_TIMEOUT->labelcolor(FL_BACKGROUND2_COLOR);
      T_TIMEOUT->callback((Fl_Callback*)cb_T_TIMEOUT);
      T_TIMEOUT->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* T_TIMEOUT
    { ENA_TOOL = new Fl_Check_Button(132, 108, 21, 20, "Enable Tooltips       ");
      ENA_TOOL->down_box(FL_DOWN_BOX);
      ENA_TOOL->labelsize(11);
      ENA_TOOL->labelcolor(FL_BACKGROUND2_COLOR);
      ENA_TOOL->callback((Fl_Callback*)cb_ENA_TOOL);
      ENA_TOOL->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* ENA_TOOL
    MISC_SET->end();
  } // Fl_Group* MISC_SET
  { BANK_SET = new Fl_Group(5, 26, 630, 554, "Bank");
    BANK_SET->box(FL_DOWN_FRAME);
    BANK_SET->labelfont(1);
    BANK_SET->labelcolor(FL_BACKGROUND2_COLOR);
    BANK_SET->user_data((void*)(1));
    BANK_SET->align(Fl_Align(FL_ALIGN_LEFT));
    BANK_SET->hide();
    { Fondo11 = new Fl_Box(5, 26, 630, 554);
    } // Fl_Box* Fondo11
    { BFiname = new Fl_File_Input(20, 50, 390, 30, "Bank Filename");
      BFiname->labelsize(11);
      BFiname->labelcolor(FL_BACKGROUND2_COLOR);
      BFiname->textsize(12);
      BFiname->textcolor(FL_BACKGROUND2_COLOR);
      BFiname->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_File_Input* BFiname
    { BF_Browser = new Fl_Button(415, 60, 65, 20, "Browse");
      BF_Browser->callback((Fl_Callback*)cb_BF_Browser, (void*)(77));
    } // Fl_Button* BF_Browser
    { Udir = new Fl_File_Input(20, 102, 390, 30, "User Directory");
      Udir->labelsize(11);
      Udir->labelcolor(FL_BACKGROUND2_COLOR);
      Udir->textsize(12);
      Udir->textcolor(FL_BACKGROUND2_COLOR);
      Udir->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_File_Input* Udir
    { UD_Browser = new Fl_Button(415, 112, 65, 20, "Browse");
      UD_Browser->callback((Fl_Callback*)cb_UD_Browser, (void*)(77));
    } // Fl_Button* UD_Browser
    BANK_SET->end();
  } // Fl_Group* BANK_SET
  STabs->end();
} // Fl_Tabs* STabs
this->m_rkr = NULL;
this->m_rgui = NULL;
end();
}

void SettingsWindowGui::initialize(RKR *_rkr,RKRGUI *_rgui ) {
  m_rkr = _rkr;
  m_rgui= _rgui;
}

Fl_Menu_Item * SettingsWindowGui::get_menu_Har_Downsample() {
  return menu_Har_Downsample;
}
