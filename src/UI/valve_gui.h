// generated by Fast Light User Interface Designer (fluid) version 1.0304

#ifndef valve_gui_h
#define valve_gui_h
#include <FL/Fl.H>
#include "RKR_Light_Button.h"
#include "RKR_Check_Button.h"
#include "RKR_Choice.h"
#include "RKR_GUI_Effect.h"
#include "RKR_Slider.h"
#include "../process.h"
#include "rakarrack.h"

class ValveGui : public RKR_Gui_Effect {
public:
  ValveGui(int X, int Y, int W, int H, const char *L = 0);
  RKR_Light_Button *valve_activar;
private:
  inline void cb_valve_activar_i(RKR_Light_Button*, void*);
  static void cb_valve_activar(RKR_Light_Button*, void*);
public:
  RKR_Choice *valve_preset;
private:
  inline void cb_valve_preset_i(RKR_Choice*, void*);
  static void cb_valve_preset(RKR_Choice*, void*);
  static Fl_Menu_Item menu_valve_preset[];
public:
  RKR_Slider *valve_WD;
private:
  inline void cb_valve_WD_i(RKR_Slider*, void*);
  static void cb_valve_WD(RKR_Slider*, void*);
public:
  RKR_Slider *valve_LRc;
private:
  inline void cb_valve_LRc_i(RKR_Slider*, void*);
  static void cb_valve_LRc(RKR_Slider*, void*);
public:
  RKR_Slider *valve_pan;
private:
  inline void cb_valve_pan_i(RKR_Slider*, void*);
  static void cb_valve_pan(RKR_Slider*, void*);
public:
  RKR_Slider *valve_level;
private:
  inline void cb_valve_level_i(RKR_Slider*, void*);
  static void cb_valve_level(RKR_Slider*, void*);
public:
  RKR_Slider *valve_drive;
private:
  inline void cb_valve_drive_i(RKR_Slider*, void*);
  static void cb_valve_drive(RKR_Slider*, void*);
public:
  RKR_Check_Button *valve_ed;
private:
  inline void cb_valve_ed_i(RKR_Check_Button*, void*);
  static void cb_valve_ed(RKR_Check_Button*, void*);
public:
  RKR_Slider *valve_Q;
private:
  inline void cb_valve_Q_i(RKR_Slider*, void*);
  static void cb_valve_Q(RKR_Slider*, void*);
public:
  RKR_Slider *valve_Pre;
private:
  inline void cb_valve_Pre_i(RKR_Slider*, void*);
  static void cb_valve_Pre(RKR_Slider*, void*);
public:
  RKR_Check_Button *valve_pf;
private:
  inline void cb_valve_pf_i(RKR_Check_Button*, void*);
  static void cb_valve_pf(RKR_Check_Button*, void*);
public:
  RKR_Check_Button *valve_st;
private:
  inline void cb_valve_st_i(RKR_Check_Button*, void*);
  static void cb_valve_st(RKR_Check_Button*, void*);
public:
  RKR_Check_Button *valve_neg;
private:
  inline void cb_valve_neg_i(RKR_Check_Button*, void*);
  static void cb_valve_neg(RKR_Check_Button*, void*);
public:
  RKR_Slider *valve_lpf;
private:
  inline void cb_valve_lpf_i(RKR_Slider*, void*);
  static void cb_valve_lpf(RKR_Slider*, void*);
public:
  RKR_Slider *valve_hpf;
private:
  inline void cb_valve_hpf_i(RKR_Slider*, void*);
  static void cb_valve_hpf(RKR_Slider*, void*);
public:
  void parameter_refresh(int index);
};
#endif
