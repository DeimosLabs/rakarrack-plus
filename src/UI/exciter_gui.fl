# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class ExciterGui {open selected
  xywh {1550 57 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button exciter_activar {
    label On
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Bypass[EFX_EXCITER]);
 return;
}
m_process->EFX_Bypass[EFX_EXCITER]=(int)o->value();
if((int) o->value()==0)
m_process->Rack_Effects[EFX_EXCITER]->cleanup();
m_parent->findpos(EFX_EXCITER,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x31 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice exciter_preset {
    label Preset
    user_data UD_PRESET_EXCITER
    callback {long long ud= (long long) v;
if((ud==0)||(ud==UD_PRESET_EXCITER))
    m_process->Rack_Effects[EFX_EXCITER]->setpreset((int) o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_EXCITER]; i++)
{
    parameter_refresh(i);
};}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label Plain
      xywh {22 22 36 21} labelsize 10
    }
    MenuItem {} {
      label Loudness
      xywh {0 0 36 21} labelsize 10
    }
    MenuItem {} {
      label {Exciter 1}
      xywh {22 22 36 21} labelsize 10
    }
    MenuItem {} {
      label {Exciter 2}
      xywh {22 22 36 21} labelsize 10
    }
    MenuItem {} {
      label {Exciter 3}
      xywh {32 32 36 21} labelsize 10
    }
  }
  Fl_Value_Slider ex_Gain {
    label Gain
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Exciter_Gain);
 return;
} 
m_process->Rack_Effects[EFX_EXCITER]->changepar(Exciter_Gain,(int)o->value());}
    xywh {53 25 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ex_lfreq {
    label LPF
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Exciter_LPF);
 return;
} 
m_process->Rack_Effects[EFX_EXCITER]->changepar(Exciter_LPF,(int)o->value());}
    xywh {53 37 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 26000 step 1 value 20000 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ex_hfreq {
    label HPF
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Exciter_HPF);
 return;
} 
m_process->Rack_Effects[EFX_EXCITER]->changepar(Exciter_HPF,(int)o->value());}
    xywh {53 49 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 20000 step 1 value 20 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ex_1 {
    label {Har 1}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Exciter_Harm_1);
 return;
} 
m_process->Rack_Effects[EFX_EXCITER]->changepar(Exciter_Harm_1,(int)o->value());}
    xywh {53 61 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ex_2 {
    label {Har 2}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Exciter_Harm_2);
 return;
} 
m_process->Rack_Effects[EFX_EXCITER]->changepar(Exciter_Harm_2,(int)o->value());}
    xywh {53 73 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ex_3 {
    label {Har 3}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Exciter_Harm_3);
 return;
} 
m_process->Rack_Effects[EFX_EXCITER]->changepar(Exciter_Harm_3,(int)o->value());}
    xywh {53 85 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ex_4 {
    label {Har 4}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Exciter_Harm_4);
 return;
} 
m_process->Rack_Effects[EFX_EXCITER]->changepar(Exciter_Harm_4,(int)o->value());}
    xywh {53 97 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ex_5 {
    label {Har 5}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Exciter_Harm_5);
 return;
} 
m_process->Rack_Effects[EFX_EXCITER]->changepar(Exciter_Harm_5,(int)o->value());}
    xywh {53 109 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ex_6 {
    label {Har 6}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Exciter_Harm_6);
 return;
} 
m_process->Rack_Effects[EFX_EXCITER]->changepar(Exciter_Harm_6,(int)o->value());}
    xywh {53 121 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ex_7 {
    label {Har 7}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Exciter_Harm_7);
 return;
} 
m_process->Rack_Effects[EFX_EXCITER]->changepar(Exciter_Harm_7,(int)o->value());}
    xywh {53 134 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ex_8 {
    label {Har 8}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Exciter_Harm_8);
 return;
} 
m_process->Rack_Effects[EFX_EXCITER]->changepar(Exciter_Harm_8,(int)o->value());}
    xywh {53 146 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ex_9 {
    label {Har 9}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Exciter_Harm_9);
 return;
} 
m_process->Rack_Effects[EFX_EXCITER]->changepar(Exciter_Harm_9,(int)o->value());}
    xywh {53 158 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider ex_10 {
    label {Har 10}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Exciter_Harm_10);
 return;
} 
m_process->Rack_Effects[EFX_EXCITER]->changepar(Exciter_Harm_10,(int)o->value());}
    xywh {53 169 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 64 step 1 textcolor 7
    class RKR_Slider
  }
  Function {parameter_refresh(int index)} {open return_type void
  } {
    code {switch (index)
    {
    case Exciter_Gain:
        ex_Gain->value(m_process->Rack_Effects[EFX_EXCITER]->getpar(Exciter_Gain));
        break;
    case Exciter_Harm_1:
        ex_1->value(m_process->Rack_Effects[EFX_EXCITER]->getpar(Exciter_Harm_1));
        break;
    case Exciter_Harm_2:
        ex_2->value(m_process->Rack_Effects[EFX_EXCITER]->getpar(Exciter_Harm_2));
        break;
    case Exciter_Harm_3:
        ex_3->value(m_process->Rack_Effects[EFX_EXCITER]->getpar(Exciter_Harm_3));
        break;
    case Exciter_Harm_4:
        ex_4->value(m_process->Rack_Effects[EFX_EXCITER]->getpar(Exciter_Harm_4));
        break;
    case Exciter_Harm_5:
        ex_5->value(m_process->Rack_Effects[EFX_EXCITER]->getpar(Exciter_Harm_5));
        break;
    case Exciter_Harm_6:
        ex_6->value(m_process->Rack_Effects[EFX_EXCITER]->getpar(Exciter_Harm_6));
        break;
    case Exciter_Harm_7:
        ex_7->value(m_process->Rack_Effects[EFX_EXCITER]->getpar(Exciter_Harm_7));
        break;
    case Exciter_Harm_8:
        ex_8->value(m_process->Rack_Effects[EFX_EXCITER]->getpar(Exciter_Harm_8));
        break;
    case Exciter_Harm_9:
        ex_9->value(m_process->Rack_Effects[EFX_EXCITER]->getpar(Exciter_Harm_9));
        break;
    case Exciter_Harm_10:
        ex_10->value(m_process->Rack_Effects[EFX_EXCITER]->getpar(Exciter_Harm_10));
        break;
    case Exciter_LPF:
        ex_lfreq->value(m_process->Rack_Effects[EFX_EXCITER]->getpar(Exciter_LPF));
        break;
    case Exciter_HPF:
        ex_hfreq->value(m_process->Rack_Effects[EFX_EXCITER]->getpar(Exciter_HPF));
        break;
    }} {}
  }
}
