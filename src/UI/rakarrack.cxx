// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "rakarrack.h"
#include "../icono_rakarrack_128x128.xpm"
Fl_Tiled_Image *back; 
Fl_Color leds_color; 
Fl_Color back_color; 
Fl_Color fore_color; 
Fl_Color label_color; 
RKR *rkr; // extern global
static Fl_Widget *old; 
static int last_tecla; 
static int drag; 
static int at; 
static int nt; 
static int tta; 
static Pixmap p, mask; 
static XWMHints *hints = NULL; 
static volatile int got_sigint = 0; 
static volatile int got_sigusr1 = 0; 

void RKRGUI::cb_Principal_i(Fl_Double_Window*, void*) {
  is_modified();
save_stat(0);

Pexitprogram=1;
}
void RKRGUI::cb_Principal(Fl_Double_Window* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_Principal_i(o,v);
}

void RKRGUI::cb_Menu_New_i(Fl_Menu_*, void*) {
  S_new->do_callback();
}
void RKRGUI::cb_Menu_New(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Menu_New_i(o,v);
}

void RKRGUI::cb_Load_Preset_i(Fl_Menu_*, void*) {
  L_preset->do_callback();
}
void RKRGUI::cb_Load_Preset(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Load_Preset_i(o,v);
}

void RKRGUI::cb_Save_Preset_i(Fl_Menu_*, void*) {
  S_preset->do_callback();
}
void RKRGUI::cb_Save_Preset(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Save_Preset_i(o,v);
}

void RKRGUI::cb_Load_Bank_M_i(Fl_Menu_* o, void*) {
  Load_Bank->do_callback(o);
}
void RKRGUI::cb_Load_Bank_M(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Load_Bank_M_i(o,v);
}

void RKRGUI::cb_Save_Bank_M_i(Fl_Menu_* o, void*) {
  Save_Bank->do_callback(o);
}
void RKRGUI::cb_Save_Bank_M(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Save_Bank_M_i(o,v);
}

void RKRGUI::cb_Load_Skin_i(Fl_Menu_*, void*) {
  char *filename;
filename=fl_file_chooser("Load Skin:","(*.rkrs)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkrs");
int last = rkr->relfontsize;
rkr->loadskin(filename);
Put_Skin(last);
}
void RKRGUI::cb_Load_Skin(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Load_Skin_i(o,v);
}

void RKRGUI::cb_Save_Skin_i(Fl_Menu_*, void*) {
  char *filename;
#define EXT ".rkrs"
filename=fl_file_chooser("Save Skin:","(*" EXT")","",0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
#undef EXT

rkr->slabel_color = (int) label_color;
rkr->sback_color = (int) back_color;
rkr->sfore_color = (int) fore_color;
rkr->sleds_color = (int) leds_color;
rkr->sh = (int) Principal->h();
rkr->sschema = scheme_ch->value();


rkr->saveskin(filename);
}
void RKRGUI::cb_Save_Skin(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Save_Skin_i(o,v);
}

void RKRGUI::cb_Load_MTable_i(Fl_Menu_*, void*) {
  char *filename;
filename=fl_file_chooser("Load MIDI Table:","(*.rmt)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rmt");
rkr->loadmiditable(filename);
Put_MidiTable();
}
void RKRGUI::cb_Load_MTable(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Load_MTable_i(o,v);
}

void RKRGUI::cb_Save_MTable_i(Fl_Menu_*, void*) {
  char *filename;
#define EXT ".rmt"
filename=fl_file_chooser("Save MIDI Table:","(*" EXT")","",0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
#undef EXT
rkr->savemiditable(filename);
}
void RKRGUI::cb_Save_MTable(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Save_MTable_i(o,v);
}

void RKRGUI::cb_ConvertReverb_i(Fl_Menu_*, void*) {
  char *filename;
char name[70];
memset(name,0, sizeof(name));
sprintf(name,"%s %s",rkr->jackcliname, VERSION);

filename=fl_file_chooser("Convert Reverb IR File:","(*.wav)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".wav");
rkr->ConvertReverbFile(filename);
rkr->Message(1,name, "Please, now use Reverbtron to load the new '.rvb' file");
}
void RKRGUI::cb_ConvertReverb(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_ConvertReverb_i(o,v);
}

void RKRGUI::cb_ImportPresets_i(Fl_Menu_*, void*) {
  char *filename;
filename=fl_file_chooser("Import Internal Presets:","(*)",NULL,0);
if (filename==NULL) return;
rkr->MergeIntPreset(filename);
Show_Next_Time();
}
void RKRGUI::cb_ImportPresets(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_ImportPresets_i(o,v);
}

void RKRGUI::cb_salir_i(Fl_Menu_*, void*) {
  Principal->do_callback();
}
void RKRGUI::cb_salir(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_salir_i(o,v);
}

void RKRGUI::cb_Bank_Menu_i(Fl_Menu_*, void*) {
  B_preset->do_callback();
}
void RKRGUI::cb_Bank_Menu(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Bank_Menu_i(o,v);
}

void RKRGUI::cb_Ajustes_i(Fl_Menu_*, void*) {
  if(!Settings->visible())
{
MiraClientes();
MiraConfig();
Settings->show();
put_icon(Settings);
}
else
Settings->hide();
}
void RKRGUI::cb_Ajustes(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Ajustes_i(o,v);
}

void RKRGUI::cb_ML_Menu_i(Fl_Menu_*, void*) {
  if(!MIDILearn->visible())
{
rkr->comemouse=0;
PrepareML();
}
else
MIDILearn->hide();
}
void RKRGUI::cb_ML_Menu(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_ML_Menu_i(o,v);
}

void RKRGUI::cb_ACI_Menu_i(Fl_Menu_*, void*) {
  if(!Trigger->visible())
{
Trigger->show();
rkr->ACI_Bypass = 1;
put_icon(Trigger);
rkr->old_a_sum = 0.0;
rkr->val_a_sum = 0.0;
}
else
{
Trigger->hide();
rkr->ACI_Bypass = 0;
};
}
void RKRGUI::cb_ACI_Menu(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_ACI_Menu_i(o,v);
}

void RKRGUI::cb_Fullscreen_i(Fl_Menu_*, void*) {
  if(Principal->fullscreen_active())
    Principal->fullscreen_off();
  else
    Principal->fullscreen();
}
void RKRGUI::cb_Fullscreen(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Fullscreen_i(o,v);
}

void RKRGUI::cb_Contenido_i(Fl_Menu_*, void*) {
  show_help();
}
void RKRGUI::cb_Contenido(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Contenido_i(o,v);
}

void RKRGUI::cb_Acerca_de_i(Fl_Menu_*, void*) {
  int x,y;

x = Principal->x()+((Principal->w()-420)/2);
y = Principal->y()+((Principal->h()-230)/2);

AboutWin->position(x,y);
AboutWin->show();
put_icon(AboutWin);
}
void RKRGUI::cb_Acerca_de(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Acerca_de_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_MenuP[] = {
 {"&File", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {"New", 0x6e,  (Fl_Callback*)RKRGUI::cb_Menu_New, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Load Preset", 0x6c,  (Fl_Callback*)RKRGUI::cb_Load_Preset, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Preset", 0x73,  (Fl_Callback*)RKRGUI::cb_Save_Preset, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Load &Bank", 0,  (Fl_Callback*)RKRGUI::cb_Load_Bank_M, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Save B&ank", 0,  (Fl_Callback*)RKRGUI::cb_Save_Bank_M, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Load S&kin", 0,  (Fl_Callback*)RKRGUI::cb_Load_Skin, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Sk&in", 0,  (Fl_Callback*)RKRGUI::cb_Save_Skin, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Load MIDI Table", 0,  (Fl_Callback*)RKRGUI::cb_Load_MTable, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Save MIDI Table", 0,  (Fl_Callback*)RKRGUI::cb_Save_MTable, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"&Convert Reverb IR File", 0,  (Fl_Callback*)RKRGUI::cb_ConvertReverb, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Import Internal Presets", 0,  (Fl_Callback*)RKRGUI::cb_ImportPresets, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Exit", 0x78,  (Fl_Callback*)RKRGUI::cb_salir, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {0,0,0,0,0,0,0,0,0},
 {"&Bank", 0x62,  (Fl_Callback*)RKRGUI::cb_Bank_Menu, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"&Settings", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Preferences", 0x69,  (Fl_Callback*)RKRGUI::cb_Ajustes, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {"MIDI Learn", 0x65,  (Fl_Callback*)RKRGUI::cb_ML_Menu, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {"ACI", 0x61,  (Fl_Callback*)RKRGUI::cb_ACI_Menu, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Fullscreen", 0xffc9,  (Fl_Callback*)RKRGUI::cb_Fullscreen, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Help", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {"Help Contents", 0xffbe,  (Fl_Callback*)RKRGUI::cb_Contenido, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {"About...", 0,  (Fl_Callback*)RKRGUI::cb_Acerca_de, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* RKRGUI::Archivo = RKRGUI::menu_MenuP + 0;
Fl_Menu_Item* RKRGUI::Menu_New = RKRGUI::menu_MenuP + 1;
Fl_Menu_Item* RKRGUI::Load_Preset = RKRGUI::menu_MenuP + 2;
Fl_Menu_Item* RKRGUI::Save_Preset = RKRGUI::menu_MenuP + 3;
Fl_Menu_Item* RKRGUI::Load_Bank_M = RKRGUI::menu_MenuP + 4;
Fl_Menu_Item* RKRGUI::Save_Bank_M = RKRGUI::menu_MenuP + 5;
Fl_Menu_Item* RKRGUI::Load_Skin = RKRGUI::menu_MenuP + 6;
Fl_Menu_Item* RKRGUI::Save_Skin = RKRGUI::menu_MenuP + 7;
Fl_Menu_Item* RKRGUI::Load_MTable = RKRGUI::menu_MenuP + 8;
Fl_Menu_Item* RKRGUI::Save_MTable = RKRGUI::menu_MenuP + 9;
Fl_Menu_Item* RKRGUI::ConvertReverb = RKRGUI::menu_MenuP + 10;
Fl_Menu_Item* RKRGUI::ImportPresets = RKRGUI::menu_MenuP + 11;
Fl_Menu_Item* RKRGUI::salir = RKRGUI::menu_MenuP + 12;
Fl_Menu_Item* RKRGUI::Bank_Menu = RKRGUI::menu_MenuP + 14;
Fl_Menu_Item* RKRGUI::Ajustes = RKRGUI::menu_MenuP + 16;
Fl_Menu_Item* RKRGUI::ML_Menu = RKRGUI::menu_MenuP + 17;
Fl_Menu_Item* RKRGUI::ACI_Menu = RKRGUI::menu_MenuP + 18;
Fl_Menu_Item* RKRGUI::Ayuda = RKRGUI::menu_MenuP + 21;
Fl_Menu_Item* RKRGUI::Contenido = RKRGUI::menu_MenuP + 22;
Fl_Menu_Item* RKRGUI::Acerca_de = RKRGUI::menu_MenuP + 23;

void RKRGUI::cb_MT_i(Fl_Box*, void*) {
  highlight();
drag_effect();
check_signals(this);

if (rkr->Tuner_Bypass)
{

if(rkr->efx_Tuner->note_actual != rkr->note_old)
{
char notas[3];
sprintf(notas,"%-2s",rkr->efx_Tuner->notes[rkr->efx_Tuner->note_actual]);
WNote->copy_label(notas);
rkr->note_old=rkr->efx_Tuner->note_actual;
}

if(rkr->efx_Tuner->nfreq != rkr->nfreq_old)
{
char refreq[60];
sprintf(refreq,"%8.3f",rkr->efx_Tuner->nfreq);
WRfreq->copy_label(refreq);
rkr->nfreq_old=rkr->efx_Tuner->nfreq;
}

//if(rkr->efx_Tuner->afreq != rkr->afreq_old)
if(fabsf(rkr->efx_Tuner->afreq-rkr->afreq_old)>.2f)
{
char nofreq[60];
sprintf(nofreq,"%8.3f",rkr->efx_Tuner->afreq);
if (abs(rkr->efx_Tuner->cents)>5) WNfreq->labelcolor(FL_RED); else WNfreq->labelcolor(label_color);
WNfreq->copy_label(nofreq);
rkr->afreq_old=rkr->efx_Tuner->afreq;
}

if(rkr->efx_Tuner->afreq==0.0f)
{
 char notas[3];
 sprintf(notas,"  ");
 WNote->copy_label(notas);
} 


if(rkr->efx_Tuner->cents != rkr->cents_old)
{
tuner_bar->value(rkr->efx_Tuner->cents);
rkr->cents_old=rkr->efx_Tuner->cents;
}

}



if (Principal->w() != rkr->resolution) adjustfont();


if(stecla==1)
{
 if(rkr->Selected_Preset<60) 
 {
 Preset_Counter->value(rkr->Selected_Preset+1);
 Preset_Counter->do_callback();
 }
 stecla=0;
}


if(stecla==2)
{
 if(rkr->Selected_Preset>1) 
 {
 Preset_Counter->value(rkr->Selected_Preset-1);
 Preset_Counter->do_callback();
 }
 
 
 stecla=0;
}

if(stecla==3)
{ 
 
 if(Nivel_Salida->value()>-50) 
 {
  Nivel_Salida->value(Nivel_Salida->value()-1);
  Nivel_Salida->do_callback();
  Nivel_Salida->redraw();
 } 
  
  
  
 stecla=0;
}   


if(stecla==4)
{ 
 
 if(Nivel_Salida->value()<50) 
 {
  Nivel_Salida->value(Nivel_Salida->value()+1);
  Nivel_Salida->do_callback();
  Nivel_Salida->redraw();
 } 
 stecla=0;
}   


if(stecla==5)
{
 update_looper();
 stecla=0;
} 



if (preset!=1000)
{

if(!rkr->midi_table)
{
 Preset_Counter->value(preset);
 Preset_Counter->do_callback();
}
else
{
 if(rkr->a_bank != rkr->M_table[preset].bank)
  {
    switch(rkr->M_table[preset].bank)
    
     {
       case 0:
       L_B1->do_callback();
       break;

       case 1:
       L_B2->do_callback();
       break;
     
       case 2:
       L_B3->do_callback();
       break;

       case 3:
       L_B4->do_callback();
       break;
     
     
     }   
   }
 Preset_Counter->value(rkr->M_table[preset].preset+1);
 Preset_Counter->do_callback();

}

 preset=1000;
}




ActMIDI();
if(rkr->ACI_Bypass) ActACI();

rkr->cpufp++;
if(rkr->cpufp==40)
{
char tmp[8];
memset(tmp,0, sizeof(tmp));
sprintf(tmp,"%5.2f%%",rkr->cpuload);
CPULOAD->copy_label(tmp);
rkr->cpufp=0;
}




if(rkr->numpc)
{
  if (rkr->numpi) P_IN_ST->show(); else P_IN_ST->hide();
  if (rkr->numpo) P_OUT_ST->show(); else P_OUT_ST->hide();
  if (rkr->numpa) P_AUX_ST->show(); else P_AUX_ST->hide();
  if (rkr->numpmi) P_MIN_ST->show(); else P_MIN_ST->hide();
  if (rkr->numpmo) P_MOUT_ST->show(); else P_MOUT_ST->hide();
  rkr->numpc = 0;
}    

if(error_num>0) rkr->Error_Handle(error_num);

if(rkr->Tap_Bypass)
{
   

  if((rkr->Tap_Display==1) && (rkr->Tap_Selection > 0))
   {
     T_DIS->value(rkr->Tap_TempoSet);
     UpdateTGUI();
     rkr->Tap_Display=0;
   }  

  if(rkr->Tap_Display==2)
   {
     rkr->Tap_Display=0;
     Tap_activar->value(0);
     Tap_activar->do_callback();
   }  

 
}



if (rkr->Bypass)
{ 
  if (rkr->val_il_sum != rkr->old_il_sum)
  {
  input_vul->value(rkr->val_il_sum);
  rkr->old_il_sum=rkr->val_il_sum;
  }
  
  if (rkr->val_ir_sum != rkr->old_ir_sum)
  {
  input_vur->value(rkr->val_ir_sum);
  rkr->old_ir_sum=rkr->val_ir_sum;
  }

  if (rkr->val_vl_sum != rkr->old_vl_sum)
  {
  output_vul->value(rkr->val_vl_sum);
  rkr->old_vl_sum=rkr->val_vl_sum;
  }

  if (rkr->val_vr_sum != rkr->old_vr_sum)
  {
  output_vur->value(rkr->val_vr_sum);
  rkr->old_vr_sum=rkr->val_vr_sum;
  }


if(rkr->efx_FLimiter->clipping)
{
CLIP_LED->color(FL_RED);
CLIP_LED->redraw();
}
else
{
CLIP_LED->color(fl_darker(FL_RED));
CLIP_LED->redraw();
}

if(rkr->efx_FLimiter->limit)
{
LMT_LED->color(leds_color);
LMT_LED->redraw();
}
else
{
LMT_LED->color(fl_darker(leds_color));
LMT_LED->redraw();
}

rkr->efx_FLimiter->clipping=0;
rkr->efx_FLimiter->limit=0;


if(rkr->checkforaux())
{
 if(VOCODER->vu_vu->value()!=rkr->efx_Vocoder->vulevel)
 VOCODER->vu_vu->value(rkr->efx_Vocoder->vulevel);
}

if (Sco->get_scope_ON())
  {
   Sco->redraw();
  }
else { nt = 1;}

if (nt)
  { 
  nt = 0;
  Sco->hide();
  Tuner->show();
  Tuner->redraw();
 }  


if (Analy->get_analyzer_ON())
{ 
 at++;
 if(at==3)
   { Analy->redraw();
     at=0; 
   }
}
else
{
  at=0;
  tta=1;
}

if(tta)
{
 tta=0;
 Analy->hide();
 Etit->show();
 Etit->redraw();
}  



if(rkr->Looper_Bypass)
{
  if((rkr->efx_Looper->Pplay) && (!rkr->efx_Looper->Pstop))
   {
     if(looper_lqua != rkr->efx_Looper->looper_qua)
         
         {
           looper_lqua = rkr->efx_Looper->looper_qua;
           char tmp[16]; 
           memset(tmp,0,sizeof(tmp));
           sprintf(tmp,"%d/%d",rkr->efx_Looper->looper_bar,rkr->efx_Looper->looper_qua);
           LOOPER->L_TimePos->copy_label(tmp);
         }
   
   }
   
   
   
 }


}


if ((rkr->Metro_Bypass) && (MetroSound->value()==0))
{
  if ((!rkr->M_Metronome->markctr) && ((int) Metro_Led->color() != (int) fl_lighter(FL_RED)))
  
     {
       Metro_Led->color(fl_lighter(FL_RED));
       Metro_Led->redraw();
     }  
  
  if ((rkr->M_Metronome->markctr) && ( (int) Metro_Led->color() != (int) fl_darker(FL_RED)))   
     {  
     Metro_Led->color(fl_darker(FL_RED));
     Metro_Led->redraw();
     } 
}


if (rkr->MIDIConverter_Bypass)
{
  if ((rkr->efx_MIDIConverter->hay) && ( (int) Mled->color() != (int) fl_lighter(FL_RED)))
  
     {
       Mled->color(fl_lighter(FL_RED));
       Mled->redraw();
     }  
  
  if ((!rkr->efx_MIDIConverter->hay) && ( (int) Mled->color() != (int) fl_darker(FL_RED)))   
     {  
     Mled->color(fl_darker(FL_RED));
     Mled->redraw();
     } 
}


if (rkr->Harmonizer_Bypass)
{

    if((rkr->efx_Har->PSELECT)|| (rkr->efx_Har->PMIDI))
     {

    if (rkr->RC_Harm->cc) 
    {
    HAR->har_chordname->copy_label(rkr->RC_Harm->NombreAcorde);
    rkr->RC_Harm->cc=0;
    HAR->har_chordname->redraw(); 
    rkr->RC_Harm->Vamos(0,rkr->efx_Har->Pinterval-12,rkr->HarmRecNote->reconota); 
    rkr->efx_Har->r_ratio = rkr->RC_Harm->r__ratio[0];//pass the found ratio     
    }
     }

}

if (rkr->StereoHarm_Bypass)
{

    if((rkr->efx_StereoHarm->PSELECT)|| (rkr->efx_StereoHarm->PMIDI))
     {

    if (rkr->RC_Stereo_Harm->cc) 
    {
    SHAR->shar_chordname->copy_label(rkr->RC_Stereo_Harm->NombreAcorde);
    rkr->RC_Stereo_Harm->cc=0;
    SHAR->shar_chordname->redraw(); 
    rkr->RC_Stereo_Harm->Vamos(1,rkr->efx_StereoHarm->Pintervall-12,rkr->StHarmRecNote->reconota);      
    rkr->RC_Stereo_Harm->Vamos(2,rkr->efx_StereoHarm->Pintervalr-12,rkr->StHarmRecNote->reconota);      
    rkr->efx_StereoHarm->r_ratiol = rkr->RC_Stereo_Harm->r__ratio[1];
    rkr->efx_StereoHarm->r_ratior = rkr->RC_Stereo_Harm->r__ratio[2];

    }
     }

}


if (rkr->RControl)
{ 
   rkr->CountWait++;
   if (rkr->CountWait==25)
      {
        GMM->color(leds_color);
        GMM->redraw();
       } 
        
   if (rkr->CountWait==50)
       {
         GMM->color(fore_color); 
         GMM->redraw();
         rkr->CountWait=0;
       } 
      

  if (rkr->ControlGet != 0)
    {
      rkr->RControl = 0;
      Disp_Control->value(rkr->ControlGet);
      Disp_Control->redraw();
      GMM->color(fore_color);
      GMM->redraw();
      if((rkr->comemouse) && (rkr->autoassign))
       {
        rkr->comemouse=0;
        Assign->do_callback();   
          
       }
      
      
    }   
};
}
void RKRGUI::cb_MT(Fl_Box* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_MT_i(o,v);
}

void RKRGUI::cb_TITTLE_L_i(Fl_Button*, void*) {
  if(rkr->Bypass)
{
Tuner->hide();
Sco->show();
Sco->set_scope_ON(true);
Fl::focus(Open_Order);
};
}
void RKRGUI::cb_TITTLE_L(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_TITTLE_L_i(o,v);
}

void RKRGUI::cb_cband_activar_i(Fl_Light_Button* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->CompBand_Bypass);
 return;
}
rkr->CompBand_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_CompBand->cleanup();
findpos(43,(int)o->value(),o);
}
void RKRGUI::cb_cband_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_cband_activar_i(o,v);
}

void RKRGUI::cb_cband_preset_i(Fl_Choice* o, void* v) {
  long long ud= (long long) v;
if((ud==0)||(ud==12043))rkr->efx_CompBand->setpreset((int)o->value());
cband_WD->value(rkr->efx_CompBand->getpar(0)-64);
cband_Lratio->value(rkr->efx_CompBand->getpar(1));
cband_MLratio->value(rkr->efx_CompBand->getpar(2));
cband_MHratio->value(rkr->efx_CompBand->getpar(3));
cband_Hratio->value(rkr->efx_CompBand->getpar(4));
cband_Lthres->value(rkr->efx_CompBand->getpar(5));
cband_MLthres->value(rkr->efx_CompBand->getpar(6));
cband_MHthres->value(rkr->efx_CompBand->getpar(7));
cband_Hthres->value(rkr->efx_CompBand->getpar(8));
cband_cross1->value(rkr->efx_CompBand->getpar(9));
cband_cross2->value(rkr->efx_CompBand->getpar(10));
cband_cross3->value(rkr->efx_CompBand->getpar(11));
cband_cross3->value(rkr->efx_CompBand->getpar(11));
cband_gain->value(rkr->efx_CompBand->getpar(12));
}
void RKRGUI::cb_cband_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_cband_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_cband_preset[] = {
 {"Good Start", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Loudness", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Loudness 2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_cband_WD_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(368);
 return;
}
rkr->efx_CompBand->changepar(0,(int)(o->value()+64));
}
void RKRGUI::cb_cband_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_cband_WD_i(o,v);
}

void RKRGUI::cb_cband_gain_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(369);
 return;
}
rkr->efx_CompBand->changepar(12,(int)o->value());
}
void RKRGUI::cb_cband_gain(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_cband_gain_i(o,v);
}

void RKRGUI::cb_cband_Lratio_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(370);
 return;
}
rkr->efx_CompBand->changepar(1, (int) o->value());
}
void RKRGUI::cb_cband_Lratio(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_cband_Lratio_i(o,v);
}

void RKRGUI::cb_cband_MLratio_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(371);
 return;
}
rkr->efx_CompBand->changepar(2, (int) o->value());
}
void RKRGUI::cb_cband_MLratio(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_cband_MLratio_i(o,v);
}

void RKRGUI::cb_cband_MHratio_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(372);
 return;
}
rkr->efx_CompBand->changepar(3, (int) o->value());
}
void RKRGUI::cb_cband_MHratio(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_cband_MHratio_i(o,v);
}

void RKRGUI::cb_cband_Hratio_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(373);
 return;
}
rkr->efx_CompBand->changepar(4, (int) o->value());
}
void RKRGUI::cb_cband_Hratio(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_cband_Hratio_i(o,v);
}

void RKRGUI::cb_cband_Lthres_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(374);
 return;
}
rkr->efx_CompBand->changepar(5, (int)o->value());
}
void RKRGUI::cb_cband_Lthres(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_cband_Lthres_i(o,v);
}

void RKRGUI::cb_cband_MLthres_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(375);
 return;
}
rkr->efx_CompBand->changepar(6, (int)o->value());
}
void RKRGUI::cb_cband_MLthres(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_cband_MLthres_i(o,v);
}

void RKRGUI::cb_cband_MHthres_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(376);
 return;
}
rkr->efx_CompBand->changepar(7, (int)o->value());
}
void RKRGUI::cb_cband_MHthres(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_cband_MHthres_i(o,v);
}

void RKRGUI::cb_cband_Hthres_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(377);
 return;
}
rkr->efx_CompBand->changepar(8, (int)o->value());
}
void RKRGUI::cb_cband_Hthres(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_cband_Hthres_i(o,v);
}

void RKRGUI::cb_cband_cross1_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(378);
 return;
}
rkr->efx_CompBand->changepar(9,(int)o->value());
}
void RKRGUI::cb_cband_cross1(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_cband_cross1_i(o,v);
}

void RKRGUI::cb_cband_cross2_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(379);
 return;
}
rkr->efx_CompBand->changepar(10,(int)o->value());
}
void RKRGUI::cb_cband_cross2(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_cband_cross2_i(o,v);
}

void RKRGUI::cb_cband_cross3_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(380);
 return;
}
rkr->efx_CompBand->changepar(11,(int)o->value());
}
void RKRGUI::cb_cband_cross3(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_cband_cross3_i(o,v);
}

void RKRGUI::cb_otrem_activar_i(Fl_Light_Button* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Opticaltrem_Bypass);
 return;
}
rkr->Opticaltrem_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Opticaltrem->cleanup();
findpos(44,(int)o->value(),o);
}
void RKRGUI::cb_otrem_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_otrem_activar_i(o,v);
}

void RKRGUI::cb_otrem_preset_i(Fl_Choice* o, void* v) {
  long long ud= (long long) v;
if((ud==0)||(ud==12044))rkr->efx_Opticaltrem->setpreset((int)o->value());
otrem_dpth->value(rkr->efx_Opticaltrem->getpar(0));
otrem_freq->value(rkr->efx_Opticaltrem->getpar(1));
otrem_rnd->value(rkr->efx_Opticaltrem->getpar(2));
otrem_lfotype->value(rkr->efx_Opticaltrem->getpar(3));
otrem_stdf->value(rkr->efx_Opticaltrem->getpar(4));
otrem_pan->value(rkr->efx_Opticaltrem->getpar(5)-64);
otrem_invert->value(rkr->efx_Opticaltrem->getpar(6));
}
void RKRGUI::cb_otrem_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_otrem_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_otrem_preset[] = {
 {"Fast", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Trem 2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Hard Pan", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Soft Pan", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Ramp Down", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Hard Ramp", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_otrem_dpth_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(381);
 return;
}
rkr->efx_Opticaltrem->changepar(0,(int)o->value());
}
void RKRGUI::cb_otrem_dpth(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_otrem_dpth_i(o,v);
}

void RKRGUI::cb_otrem_freq_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(382);
 return;
}
rkr->efx_Opticaltrem->changepar(1,(int)o->value());
}
void RKRGUI::cb_otrem_freq(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_otrem_freq_i(o,v);
}

void RKRGUI::cb_otrem_rnd_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(383);
 return;
}
rkr->efx_Opticaltrem->changepar(2,(int)o->value());
}
void RKRGUI::cb_otrem_rnd(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_otrem_rnd_i(o,v);
}

void RKRGUI::cb_otrem_lfotype_i(Fl_Choice* o, void*) {
  rkr->efx_Opticaltrem->changepar(3,(int)o->value());
}
void RKRGUI::cb_otrem_lfotype(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_otrem_lfotype_i(o,v);
}

void RKRGUI::cb_otrem_stdf_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(384);
 return;
}
rkr->efx_Opticaltrem->changepar(4,(int)o->value());
}
void RKRGUI::cb_otrem_stdf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_otrem_stdf_i(o,v);
}

void RKRGUI::cb_otrem_pan_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(385);
 return;
}
rkr->efx_Opticaltrem->changepar(5,(int)(o->value()+64));
}
void RKRGUI::cb_otrem_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_otrem_pan_i(o,v);
}

void RKRGUI::cb_otrem_invert_i(Fl_Check_Button* o, void*) {
  rkr->efx_Opticaltrem->changepar(6,(int)o->value());
}
void RKRGUI::cb_otrem_invert(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_otrem_invert_i(o,v);
}

void RKRGUI::cb_vibe_activar_i(Fl_Light_Button* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(116);
 o->value(rkr->Vibe_Bypass);
 return;
}
rkr->Vibe_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Vibe->cleanup();
findpos(45,(int)o->value(),o);
}
void RKRGUI::cb_vibe_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_vibe_activar_i(o,v);
}

void RKRGUI::cb_vibe_preset_i(Fl_Choice* o, void* v) {
  long long ud= (long long) v;
if((ud==0)||(ud==12045))rkr->efx_Vibe->setpreset((int)o->value());
vibe_WD->value(rkr->efx_Vibe->getpar(6)-64);
vibe_width->value(rkr->efx_Vibe->getpar(0));
vibe_dpth->value(rkr->efx_Vibe->getpar(8));
vibe_freq->value(rkr->efx_Vibe->getpar(1));
vibe_rnd->value(rkr->efx_Vibe->getpar(2));
vibe_lfotype->value(rkr->efx_Vibe->getpar(3));
vibe_stdf->value(rkr->efx_Vibe->getpar(4));
vibe_pan->value(rkr->efx_Vibe->getpar(5)-64);
vibe_fb->value(rkr->efx_Vibe->getpar(7)-64);
vibe_LR->value(rkr->efx_Vibe->getpar(9)-64);
vibe_stereo->value(rkr->efx_Vibe->getpar(10));
}
void RKRGUI::cb_vibe_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_vibe_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_vibe_preset[] = {
 {"Classic", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Stereo Classic", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Wide Vibe", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Classic Chorus", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Vibe Chorus", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Lush Chorus", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Sick Phaser", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Warble", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_vibe_WD_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(386);
 return;
}
rkr->efx_Vibe->changepar(6,(int)(o->value())+64);
}
void RKRGUI::cb_vibe_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_vibe_WD_i(o,v);
}

void RKRGUI::cb_vibe_width_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(387);
 return;
}
rkr->efx_Vibe->changepar(0,(int)o->value());
}
void RKRGUI::cb_vibe_width(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_vibe_width_i(o,v);
}

void RKRGUI::cb_vibe_dpth_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(388);
 return;
}
rkr->efx_Vibe->changepar(8,(int)o->value());
}
void RKRGUI::cb_vibe_dpth(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_vibe_dpth_i(o,v);
}

void RKRGUI::cb_vibe_freq_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(389);
 return;
}
rkr->efx_Vibe->changepar(1,(int)o->value());
}
void RKRGUI::cb_vibe_freq(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_vibe_freq_i(o,v);
}

void RKRGUI::cb_vibe_rnd_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(390);
 return;
}
rkr->efx_Vibe->changepar(2,(int)o->value());
}
void RKRGUI::cb_vibe_rnd(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_vibe_rnd_i(o,v);
}

void RKRGUI::cb_vibe_lfotype_i(Fl_Choice* o, void*) {
  rkr->efx_Vibe->changepar(3,(int)o->value());
}
void RKRGUI::cb_vibe_lfotype(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_vibe_lfotype_i(o,v);
}

void RKRGUI::cb_vibe_stdf_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(391);
 return;
}
rkr->efx_Vibe->changepar(4,(int)o->value());
}
void RKRGUI::cb_vibe_stdf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_vibe_stdf_i(o,v);
}

void RKRGUI::cb_vibe_fb_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(392);
 return;
}
rkr->efx_Vibe->changepar(7,(int)(o->value()+64));
}
void RKRGUI::cb_vibe_fb(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_vibe_fb_i(o,v);
}

void RKRGUI::cb_vibe_LR_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(393);
 return;
}
rkr->efx_Vibe->changepar(9,(int)(o->value()+64));
}
void RKRGUI::cb_vibe_LR(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_vibe_LR_i(o,v);
}

void RKRGUI::cb_vibe_pan_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(394);
 return;
}
rkr->efx_Vibe->changepar(5,(int)(o->value()+64));
}
void RKRGUI::cb_vibe_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_vibe_pan_i(o,v);
}

void RKRGUI::cb_vibe_stereo_i(Fl_Check_Button* o, void*) {
  rkr->efx_Vibe->changepar(10,(int)o->value());
}
void RKRGUI::cb_vibe_stereo(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_vibe_stereo_i(o,v);
}

void RKRGUI::cb_infinity_activar_i(Fl_Light_Button* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(116); 
 o->value(rkr->Infinity_Bypass);
 return;
} 
rkr->Infinity_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Infinity->cleanup();
findpos(46,(int)o->value(),o);
}
void RKRGUI::cb_infinity_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_activar_i(o,v);
}

void RKRGUI::cb_infinity_preset_i(Fl_Choice* o, void* v) {
  long long ud= (long long) v;
if((ud==0)||(ud==12046))rkr->efx_Infinity->setpreset((int) o->value());
infinity_WD->value(rkr->efx_Infinity->getpar(0)-64);
infinity_Q->value(rkr->efx_Infinity->getpar(9));
infinity_1->value(rkr->efx_Infinity->getpar(1));
infinity_2->value(rkr->efx_Infinity->getpar(2));
infinity_3->value(rkr->efx_Infinity->getpar(3));
infinity_4->value(rkr->efx_Infinity->getpar(4));
infinity_5->value(rkr->efx_Infinity->getpar(5));
infinity_6->value(rkr->efx_Infinity->getpar(6));
infinity_7->value(rkr->efx_Infinity->getpar(7));
infinity_8->value(rkr->efx_Infinity->getpar(8));
infinity_start->value(rkr->efx_Infinity->getpar(10));
infinity_end->value(rkr->efx_Infinity->getpar(11));
infinity_rate->value(rkr->efx_Infinity->getpar(12));
infinity_stdf->value(rkr->efx_Infinity->getpar(13));
infinity_subdiv->value(rkr->efx_Infinity->getpar(14));
infinity_pan->value(rkr->efx_Infinity->getpar(15));
infinity_rev->value(rkr->efx_Infinity->getpar(16));
infinity_stages->value(rkr->efx_Infinity->getpar(17));
}
void RKRGUI::cb_infinity_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_infinity_preset[] = {
 {"Basic", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Rising Comb", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Falling Comb", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Laser", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Doppler", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Detune", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Dizzy Sailor", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Stereo Phaser", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Corkscrew", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"FreqeeVox", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_infinity_WD_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(395);
 return;
} 
rkr->efx_Infinity->changepar(0,(int)(o->value()+64));
}
void RKRGUI::cb_infinity_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_WD_i(o,v);
}

void RKRGUI::cb_infinity_Q_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(396);
 return;
}
rkr->efx_Infinity->changepar(9,(int)o->value());
}
void RKRGUI::cb_infinity_Q(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_Q_i(o,v);
}

void RKRGUI::cb_infinity_1_i(Fl_Value_Input* o, void*) {
  rkr->efx_Infinity->changepar(1,(int)o->value());
}
void RKRGUI::cb_infinity_1(Fl_Value_Input* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_1_i(o,v);
}

void RKRGUI::cb_infinity_2_i(Fl_Value_Input* o, void*) {
  rkr->efx_Infinity->changepar(2,(int)o->value());
}
void RKRGUI::cb_infinity_2(Fl_Value_Input* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_2_i(o,v);
}

void RKRGUI::cb_infinity_3_i(Fl_Value_Input* o, void*) {
  rkr->efx_Infinity->changepar(3,(int)o->value());
}
void RKRGUI::cb_infinity_3(Fl_Value_Input* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_3_i(o,v);
}

void RKRGUI::cb_infinity_4_i(Fl_Value_Input* o, void*) {
  rkr->efx_Infinity->changepar(4,(int)o->value());
}
void RKRGUI::cb_infinity_4(Fl_Value_Input* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_4_i(o,v);
}

void RKRGUI::cb_infinity_5_i(Fl_Value_Input* o, void*) {
  rkr->efx_Infinity->changepar(5,(int)o->value());
}
void RKRGUI::cb_infinity_5(Fl_Value_Input* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_5_i(o,v);
}

void RKRGUI::cb_infinity_6_i(Fl_Value_Input* o, void*) {
  rkr->efx_Infinity->changepar(6,(int)o->value());
}
void RKRGUI::cb_infinity_6(Fl_Value_Input* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_6_i(o,v);
}

void RKRGUI::cb_infinity_7_i(Fl_Value_Input* o, void*) {
  rkr->efx_Infinity->changepar(7,(int)o->value());
}
void RKRGUI::cb_infinity_7(Fl_Value_Input* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_7_i(o,v);
}

void RKRGUI::cb_infinity_8_i(Fl_Value_Input* o, void*) {
  rkr->efx_Infinity->changepar(8,(int)o->value());
}
void RKRGUI::cb_infinity_8(Fl_Value_Input* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_8_i(o,v);
}

void RKRGUI::cb_infinity_rev_i(Fl_Check_Button* o, void*) {
  rkr->efx_Infinity->changepar(16,(int)o->value());
}
void RKRGUI::cb_infinity_rev(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_rev_i(o,v);
}

void RKRGUI::cb_infinity_stages_i(Fl_Counter* o, void*) {
  rkr->efx_Infinity->changepar(17,(int)o->value());
}
void RKRGUI::cb_infinity_stages(Fl_Counter* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_stages_i(o,v);
}

void RKRGUI::cb_infinity_pan_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(397);
 return;
} 
rkr->efx_Infinity->changepar(15,(int)o->value());
}
void RKRGUI::cb_infinity_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_pan_i(o,v);
}

void RKRGUI::cb_infinity_stdf_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(398);
 return;
} 
rkr->efx_Infinity->changepar(13,(int)o->value());
}
void RKRGUI::cb_infinity_stdf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_stdf_i(o,v);
}

void RKRGUI::cb_infinity_start_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(399);
 return;
} 
rkr->efx_Infinity->changepar(10,(int)o->value());
}
void RKRGUI::cb_infinity_start(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_start_i(o,v);
}

void RKRGUI::cb_infinity_end_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(400);
 return;
} 
rkr->efx_Infinity->changepar(11,(int)o->value());
}
void RKRGUI::cb_infinity_end(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_end_i(o,v);
}

void RKRGUI::cb_infinity_rate_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(401);
 return;
} 
rkr->efx_Infinity->changepar(12,(int)o->value());
}
void RKRGUI::cb_infinity_rate(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_rate_i(o,v);
}

void RKRGUI::cb_infinity_subdiv_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(402);
 return;
} 
rkr->efx_Infinity->changepar(14,(int)o->value());
}
void RKRGUI::cb_infinity_subdiv(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_infinity_subdiv_i(o,v);
}

void RKRGUI::cb_tuner_activar_i(Fl_Light_Button* o, void*) {
  rkr->Tuner_Bypass=(int)o->value();
tuner_bar->value(-32);
WNote->copy_label("");
WRfreq->copy_label("");
WNfreq->copy_label("");
ChangeActives();
TUNER_LABEL->redraw_label();
}
void RKRGUI::cb_tuner_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_tuner_activar_i(o,v);
}

void RKRGUI::cb_ActivarGeneral_i(Fl_Light_Button* o, void*) {
  rkr->Bypass=o->value();
rkr->val_il_sum=-50.0;
rkr->val_ir_sum=-50.0;

rkr->val_vl_sum=-50.0;
rkr->val_vr_sum=-50.0;

rkr->old_vl_sum=-50.0;
rkr->old_vr_sum=-50.0;

rkr->old_il_sum=-50.0;
rkr->old_ir_sum=-50.0;

input_vul->value(-50.0);
input_vur->value(-50.0);

output_vul->value(-50.0);
output_vur->value(-50.0);


ChangeActives();  
LABEL_IO->redraw_label();

if (!o->value())
   {
    rkr->OnCounter = 0;
    if (rkr->Tuner_Bypass)
        {
           tuner_activar->value(0);
           tuner_activar->do_callback();
        } 
    if (rkr->MIDIConverter_Bypass)  
        {
            midi_activar->value(0);
            midi_activar->do_callback();
        }
             
rkr->cleanup_efx();

};
}
void RKRGUI::cb_ActivarGeneral(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ActivarGeneral_i(o,v);
}

void RKRGUI::cb_BostBut_i(Fl_Button* o, void*) {
  if(o->value()) rkr->booster = dB2rap(10);
else rkr->booster=1.0f;
}
void RKRGUI::cb_BostBut(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_BostBut_i(o,v);
}

void RKRGUI::cb_Balance_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(12);
 return;
} 
rkr->Fraction_Bypass=(float)(o->value()/100.0f);
}
void RKRGUI::cb_Balance(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Balance_i(o,v);
}

void RKRGUI::cb_Nivel_Entrada_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(14);
 return;
} 
rkr->Input_Gain=(float)((o->value()+50)/100.0);
rkr->calculavol(1);
}
void RKRGUI::cb_Nivel_Entrada(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Nivel_Entrada_i(o,v);
}

void RKRGUI::cb_Nivel_Salida_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 getMIDIControl(7);
 return;
} 

rkr->Master_Volume=(float)((o->value()+50)/100.0);
rkr->calculavol(2);
}
void RKRGUI::cb_Nivel_Salida(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Nivel_Salida_i(o,v);
}

void RKRGUI::cb_midi_activar_i(Fl_Light_Button* o, void*) {
  if ((int)o->value()==0)
{ 
rkr->efx_MIDIConverter->panic();
  Mled->color(fl_darker(FL_RED));
  Mled->redraw();
}


rkr->MIDIConverter_Bypass=(int)o->value();
Midi_out_Counter->do_callback();

ChangeActives();
MIDI_LABEL->redraw_label();
}
void RKRGUI::cb_midi_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_midi_activar_i(o,v);
}

void RKRGUI::cb_MIDIOctave_i(Fl_Choice* o, void*) {
  switch((int)o->value())
{
  case 0:
  rkr->efx_MIDIConverter->changepar(4,-2);
  break;
  
  case 1:
  rkr->efx_MIDIConverter->changepar(4,-1);
  break;

  case 2:
  rkr->efx_MIDIConverter->changepar(4,0);
  break;

  case 3:
  rkr->efx_MIDIConverter->changepar(4,1);

  break;

  case 4:
  rkr->efx_MIDIConverter->changepar(4,2);
  break;

};
}
void RKRGUI::cb_MIDIOctave(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_MIDIOctave_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_MIDIOctave[] = {
 {"-2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"-1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"0", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_Midi_out_Counter_i(Fl_Counter* o, void*) {
  rkr->efx_MIDIConverter->changepar(3, (int)o->value());
}
void RKRGUI::cb_Midi_out_Counter(Fl_Counter* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Midi_out_Counter_i(o,v);
}

void RKRGUI::cb_Use_FFT_i(Fl_Check_Button* o, void*) {
  rkr->efx_MIDIConverter->changepar(5, (int)o->value());
}
void RKRGUI::cb_Use_FFT(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Use_FFT_i(o,v);
}

void RKRGUI::cb_Trig_Adj_i(SliderW* o, void*) {
  rkr->efx_MIDIConverter->changepar(1,(int)o->value());
}
void RKRGUI::cb_Trig_Adj(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Trig_Adj_i(o,v);
}

void RKRGUI::cb_Vel_Adj_i(SliderW* o, void*) {
  rkr->efx_MIDIConverter->changepar(2,(int)o->value());
}
void RKRGUI::cb_Vel_Adj(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Vel_Adj_i(o,v);
}

void RKRGUI::cb_MIDI_LABEL_i(Fl_Box*, void*) {
  int ok;
char *filename;

#define EXT ".rkrb"
filename=fl_file_chooser("Save Bank File:","(*" EXT")",rkr->Bank_Saved,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
#undef EXT
ok=rkr->savebank(filename);
if (ok)
{
strcpy(rkr->Bank_Saved,filename);
BankWin_Label(filename);
};
}
void RKRGUI::cb_MIDI_LABEL(Fl_Box* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_MIDI_LABEL_i(o,v);
}

void RKRGUI::cb_metro_activar_i(Fl_Light_Button* o, void*) {
  if ((int)o->value()==0)
{ 
  Metro_Led->color(fl_darker(FL_RED));
  Metro_Led->redraw();
}

rkr->M_Metronome->cleanup();
rkr->Metro_Bypass=(int)o->value();


ChangeActives();
Metro_Label->redraw_label();
}
void RKRGUI::cb_metro_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_metro_activar_i(o,v);
}

void RKRGUI::cb_MetroBar_i(Fl_Choice* o, void*) {
  rkr->M_Metro_Bar=(int)o->value();

switch(rkr->M_Metro_Bar)

   {
      case 0:
      rkr->M_Metronome->set_meter(2);
      break;                    
      case 1:
      rkr->M_Metronome->set_meter(3);
      break;                    
      case 2:
      rkr->M_Metronome->set_meter(4);
      break;                    
      case 3:
      rkr->M_Metronome->set_meter(5);
      break;                    
      case 4:
      rkr->M_Metronome->set_meter(6);
      break;                    
      case 5:
      rkr->M_Metronome->set_meter(7);
      break;                    
      case 6:
      rkr->M_Metronome->set_meter(9);
      break;                    
      case 7:
      rkr->M_Metronome->set_meter(11);
      break;                    

 };
}
void RKRGUI::cb_MetroBar(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_MetroBar_i(o,v);
}

void RKRGUI::cb_Metro_Volume_i(SliderW* o, void*) {
  rkr->M_Metro_Vol=2.0f*(float)o->value()/100.0f;
}
void RKRGUI::cb_Metro_Volume(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Metro_Volume_i(o,v);
}

void RKRGUI::cb_MetroSound_i(Fl_Choice* o, void*) {
  rkr->M_Metro_Sound=(int)o->value();

switch(rkr->M_Metro_Sound)

   {
      case 0:
      MetroBar->do_callback();
      break;                    
      case 1:
      rkr->M_Metronome->set_meter(1);
      break;                    
      case 2:
      rkr->M_Metronome->set_meter(0);
      break;                    
       

 };
}
void RKRGUI::cb_MetroSound(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_MetroSound_i(o,v);
}

void RKRGUI::cb_Metro_Tempo_i(SliderW* o, void*) {
  rkr->M_Metro_Tempo=(int)o->value();
rkr->M_Metronome->set_tempo(rkr->M_Metro_Tempo);
}
void RKRGUI::cb_Metro_Tempo(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Metro_Tempo_i(o,v);
}

void RKRGUI::cb_L_B1_i(Fl_Button*, void*) {
  is_modified();
char temp[128];           
  memset (temp, 0, sizeof (temp));
  sprintf (temp, "%s/Default.rkrb", DATADIR);
int ok=rkr->loadbank(temp);
if(ok) 
{
rkr->a_bank=0;
BankWin_Label(temp);
Put_Loaded_Bank();
unlight_preset(rkr->Selected_Preset);
};
}
void RKRGUI::cb_L_B1(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_L_B1_i(o,v);
}

void RKRGUI::cb_L_B2_i(Fl_Button*, void*) {
  is_modified();
char temp[128];           
  memset (temp, 0, sizeof (temp));
  sprintf (temp, "%s/Extra.rkrb", DATADIR);
 int ok=rkr->loadbank(temp);
if(ok) 
{
rkr->a_bank=1;
BankWin_Label(temp);
Put_Loaded_Bank();
unlight_preset(rkr->Selected_Preset);
};
}
void RKRGUI::cb_L_B2(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_L_B2_i(o,v);
}

void RKRGUI::cb_L_B3_i(Fl_Button*, void*) {
  is_modified();
char temp[128];           
  memset (temp, 0, sizeof (temp));
  sprintf (temp, "%s/Extra1.rkrb", DATADIR);
 int ok=rkr->loadbank(temp);
if(ok) 
{
rkr->a_bank=2;
BankWin_Label(temp);
Put_Loaded_Bank();
unlight_preset(rkr->Selected_Preset);
};
}
void RKRGUI::cb_L_B3(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_L_B3_i(o,v);
}

void RKRGUI::cb_L_B4_i(Fl_Button*, void*) {
  is_modified();
int ok=rkr->loadbank(rkr->BankFilename);
if(ok) 
{
rkr->a_bank=3;
BankWin_Label(rkr->BankFilename);
Put_Loaded_Bank();
unlight_preset(rkr->Selected_Preset);
};
}
void RKRGUI::cb_L_B4(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_L_B4_i(o,v);
}

void RKRGUI::cb_S_new_i(Fl_Button*, void*) {
  rkr->New();
DisAssigns();
FillML(0);
Prepare_Order();
Put_Loaded();
}
void RKRGUI::cb_S_new(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_S_new_i(o,v);
}

void RKRGUI::cb_L_preset_i(Fl_Button*, void*) {
  char *filename;
filename=fl_file_chooser("Load Preset:","(*.rkr)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkr");
rkr->loadfile(filename);
Put_Loaded();
}
void RKRGUI::cb_L_preset(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_L_preset_i(o,v);
}

void RKRGUI::cb_S_preset_i(Fl_Button*, void*) {
  char *filename;
#define EXT ".rkr"
filename=fl_file_chooser("Save Preset:","(*" EXT")",rkr->Preset_Name,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
#undef EXT
rkr->savefile(filename);
}
void RKRGUI::cb_S_preset(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_S_preset_i(o,v);
}

void RKRGUI::cb_Compare_i(Fl_Light_Button* o, void*) {
  if ((int) o->value())
{
rkr->Preset_to_Bank(0);
rkr->Bank_to_Preset((int)Preset_Counter->value());
Put_Loaded();
}

else
{
 rkr->Bank_to_Preset(0);
 Put_Loaded();
};
}
void RKRGUI::cb_Compare(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Compare_i(o,v);
}

void RKRGUI::cb_B_preset_i(Fl_Button*, void*) {
  if(!BankWindow->visible())
{
if(!made) make_window_banks();
BankWindow->show();
put_icon(BankWindow);
ScanDir();
}
else
BankWindow->hide();
}
void RKRGUI::cb_B_preset(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_B_preset_i(o,v);
}

void RKRGUI::cb_WPreset_Name_i(Fl_Input* o, void*) {
  strcpy(rkr->Preset_Name,o->value());
}
void RKRGUI::cb_WPreset_Name(Fl_Input* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_WPreset_Name_i(o,v);
}

void RKRGUI::cb_Preset_Counter_i(Fl_Counter* o, void*) {
  rkr->new_bank_loaded=0;
unlight_preset(rkr->Selected_Preset);
rkr->Bank_to_Preset((int) o->value());
light_preset((int)o->value());
rkr->Selected_Preset=(int)o->value();
rkr->OnCounter=0;
FillML(0);
Prepare_Order();
Put_Loaded();
if(rkr->Tap_Updated) UpdateTGUI();
}
void RKRGUI::cb_Preset_Counter(Fl_Counter* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Preset_Counter_i(o,v);
}

void RKRGUI::cb_RandomP_i(Fl_Button*, void*) {
  RandomPreset();
}
void RKRGUI::cb_RandomP(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_RandomP_i(o,v);
}

void RKRGUI::cb_Open_Order_i(Fl_Button*, void*) {
  if (!Order->visible())
{
Prepare_Order();
rkr->deachide=0;
Order_DeacHide->value(rkr->deachide);
Order->show();
put_icon(Order);
}
else
Order->hide();
}
void RKRGUI::cb_Open_Order(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Open_Order_i(o,v);
}

void RKRGUI::cb_Etit_i(Fl_Button* o, void*) {
  if(rkr->Bypass)
{
o->hide();
Analy->show();
Analy->set_analyzer_ON(true);
};
}
void RKRGUI::cb_Etit(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Etit_i(o,v);
}

void RKRGUI::cb_HideUE_i(Fl_Button* o, void*) {
  if(rkr->deachide)
{
 rkr->deachide=0;
 o->label("Hide");
}
else
{
rkr->deachide=1;
 o->label("Show");
}
 
reordena();
}
void RKRGUI::cb_HideUE(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_HideUE_i(o,v);
}

void RKRGUI::cb_SwitchMod_i(Fl_Button*, void*) {
  if(rkr->sw_stat==0) 
{ 
  rkr->sw_stat = 1;
  Midi->hide();
  Metro->show();
}
else
 {
  rkr->sw_stat= 0;
  Metro->hide();
  Midi->show();
 };
}
void RKRGUI::cb_SwitchMod(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_SwitchMod_i(o,v);
}

void RKRGUI::cb_Tap_activar_i(Fl_Light_Button* o, void*) {
  rkr->Tap_Bypass = (int)o->value();
if(rkr->Tap_Bypass) rkr->TapTempo_Timeout(0);
ChangeActives();
TAP_LABEL->redraw_label();
}
void RKRGUI::cb_Tap_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Tap_activar_i(o,v);
}

void RKRGUI::cb_T_SEL_i(Fl_Choice* o, void*) {
  rkr->Tap_Selection=(int)o->value();
}
void RKRGUI::cb_T_SEL(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_T_SEL_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_T_SEL[] = {
 {"GUI", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"MIDI Note On", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Jack Transport", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"MTC", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Beat Tracker", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_T_SET_i(Fl_Choice* o, void*) {
  rkr->Tap_SetValue=(int)o->value();
}
void RKRGUI::cb_T_SET(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_T_SET_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_T_SET[] = {
 {"Dl. 1 LFO 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1 LFO 1/2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1 LFO 1/3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1 LFO 1/4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1 LFO 1/8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/2 LFO 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/2 LFO 1/2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/2 LFO 1/3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/2 LFO 1/4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/2 LFO 1/8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/3 LFO 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/3 LFO 1/2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/3 LFO 1/3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/3 LFO 1/4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/3 LFO 1/8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/4 LFO 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/4 LFO 1/2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/4 LFO 1/3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/4 LFO 1/4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/4 LFO 1/8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/8 LFO 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/8 LFO 1/2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/8 LFO 1/3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/8 LFO 1/4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"Dl. 1/8 LFO 1/8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_T_Apply_i(Fl_Button*, void*) {
  if((rkr->Tap_Bypass) && (rkr->Tap_TempoSet>0))
{
rkr->Update_tempo();
UpdateTGUI();
};
}
void RKRGUI::cb_T_Apply(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_T_Apply_i(o,v);
}

void RKRGUI::cb_T_BUT_i(Fl_Button*, void*) {
  if((rkr->Tap_Bypass) && ( rkr->Tap_Selection==0))
{
T_DIS->value(rkr->TapTempo());
UpdateTGUI();
};
}
void RKRGUI::cb_T_BUT(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_T_BUT_i(o,v);
}

void RKRGUI::cb_T_DIS_i(Fl_Value_Input* o, void*) {
  if(o->value()> 360) o->value(360);
if(o->value()< 20) o->value(20);
if(rkr->Tap_Bypass)
{
rkr->Tap_TempoSet=(int)o->value();
rkr->Update_tempo();
UpdateTGUI();
};
}
void RKRGUI::cb_T_DIS(Fl_Value_Input* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_T_DIS_i(o,v);
}

void RKRGUI::cb_BankWindow_i(Fl_Double_Window* o, void*) {
  o->hide();
save_stat(1);
}
void RKRGUI::cb_BankWindow(Fl_Double_Window* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_BankWindow_i(o,v);
}

void RKRGUI::cb_NewB_i(Fl_Menu_*, void*) {
  rkr->New_Bank();
Put_Loaded_Bank();
BankWindow->redraw();
}
void RKRGUI::cb_NewB(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_NewB_i(o,v);
}

void RKRGUI::cb_Load_Bank_i(Fl_Menu_*, void*) {
  int ok;
char *filename;
is_modified();
filename=fl_file_chooser("Load Bank File:","(*.rkrb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkrb");
ok=rkr->loadbank(filename);
if(ok) 
{
BankWin_Label(filename);
Put_Loaded_Bank();
AddBankName(filename);
if(rkr->CheckOldBank(filename)==0)
{
        char nombre[64];
        char *filepart;
        memset(nombre,0,sizeof(nombre));
        filepart = strrchr(filename,'/')+1;
        strncpy(nombre,filepart,strlen(filepart)-5);
        CH_UB->add((const char *)nombre, 0, (Fl_Callback *)cb_CH_UB, (void *)filename, 0);
}
};
}
void RKRGUI::cb_Load_Bank(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Load_Bank_i(o,v);
}

void RKRGUI::cb_Save_Bank_i(Fl_Menu_*, void*) {
  MIDI_LABEL->do_callback();
}
void RKRGUI::cb_Save_Bank(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Save_Bank_i(o,v);
}

void RKRGUI::cb_Convert_Old_Bank_i(Fl_Menu_*, void*) {
  char *filename;
char name[70];
memset(name,0, sizeof(name));
sprintf(name,"%s %s",rkr->jackcliname, VERSION);

filename=fl_file_chooser("Convert Old Bank File:","(*.rkrb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkrb");

if(rkr->CheckOldBank(filename))
{
rkr->ConvertOldFile(filename);
rkr->Message(1,name, "Please, now try to load the new files");
}
else
rkr->Message(1, name, "This file has already the new format");
}
void RKRGUI::cb_Convert_Old_Bank(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Convert_Old_Bank_i(o,v);
}

void RKRGUI::cb_salirB_i(Fl_Menu_*, void*) {
  BankWindow->do_callback();
}
void RKRGUI::cb_salirB(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_salirB_i(o,v);
}

void RKRGUI::cb_ContenidoB_i(Fl_Menu_*, void*) {
  show_help();
}
void RKRGUI::cb_ContenidoB(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_ContenidoB_i(o,v);
}

void RKRGUI::cb_Acerca_deB_i(Fl_Menu_*, void*) {
  int x,y;

x = BankWindow->x()+((BankWindow->w()-420)/2);
y = BankWindow->y()+((BankWindow->h()-230)/2);

AboutWin->position(x,y);
AboutWin->show();
put_icon(AboutWin);
}
void RKRGUI::cb_Acerca_deB(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Acerca_deB_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_MenuB[] = {
 {"&File", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {"&New", 0,  (Fl_Callback*)RKRGUI::cb_NewB, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"&Load Bank", 0,  (Fl_Callback*)RKRGUI::cb_Load_Bank, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"&Save Bank", 0,  (Fl_Callback*)RKRGUI::cb_Save_Bank, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Convert &Old Bank", 0,  (Fl_Callback*)RKRGUI::cb_Convert_Old_Bank, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"&Close", 0,  (Fl_Callback*)RKRGUI::cb_salirB, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {0,0,0,0,0,0,0,0,0},
 {"&Help", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {"Help &Contents", 0xffbe,  (Fl_Callback*)RKRGUI::cb_ContenidoB, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {"&About...", 0,  (Fl_Callback*)RKRGUI::cb_Acerca_deB, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 7},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* RKRGUI::ArchivoB = RKRGUI::menu_MenuB + 0;
Fl_Menu_Item* RKRGUI::NewB = RKRGUI::menu_MenuB + 1;
Fl_Menu_Item* RKRGUI::Load_Bank = RKRGUI::menu_MenuB + 2;
Fl_Menu_Item* RKRGUI::Save_Bank = RKRGUI::menu_MenuB + 3;
Fl_Menu_Item* RKRGUI::Convert_Old_Bank = RKRGUI::menu_MenuB + 4;
Fl_Menu_Item* RKRGUI::salirB = RKRGUI::menu_MenuB + 5;
Fl_Menu_Item* RKRGUI::AyudaB = RKRGUI::menu_MenuB + 7;
Fl_Menu_Item* RKRGUI::ContenidoB = RKRGUI::menu_MenuB + 8;
Fl_Menu_Item* RKRGUI::Acerca_deB = RKRGUI::menu_MenuB + 9;

void RKRGUI::cb_B_B1_i(Fl_Button*, void*) {
  L_B1->do_callback();
}
void RKRGUI::cb_B_B1(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_B_B1_i(o,v);
}

void RKRGUI::cb_B_B2_i(Fl_Button*, void*) {
  L_B2->do_callback();
}
void RKRGUI::cb_B_B2(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_B_B2_i(o,v);
}

void RKRGUI::cb_B_B3_i(Fl_Button*, void*) {
  L_B3->do_callback();
}
void RKRGUI::cb_B_B3(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_B_B3_i(o,v);
}

void RKRGUI::cb_B_B4_i(Fl_Button*, void*) {
  L_B4->do_callback();
}
void RKRGUI::cb_B_B4(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_B_B4_i(o,v);
}

void RKRGUI::cb_CH_UB_i(Fl_Choice*, void* v) {
  int ok=rkr->loadbank((char *)v);
if(ok) 
{
BankWin_Label((char *)v);
Put_Loaded_Bank();
unlight_preset(rkr->Selected_Preset);
};
}
void RKRGUI::cb_CH_UB(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_CH_UB_i(o,v);
}

void RKRGUI::cb_Order_i(Fl_Double_Window*, void*) {
  save_stat(2);
Order->hide();
}
void RKRGUI::cb_Order(Fl_Double_Window* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_Order_i(o,v);
}

void RKRGUI::cb_Pon_i(Fl_Button*, void*) {
  int i = Order_Bro->value();
int j = Avail_Bro->value();

if(!i) return;
if(!j) return;

Order_Bro->insert(i,Avail_Bro->text(j));

Avail_Bro->remove(j);
Order_Bro->remove(i+1);
Order_Bro->select(1);
rkr->new_order[i-1]=rkr->availables[j];
Fill_Avail(rkr->eff_filter);
}
void RKRGUI::cb_Pon(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Pon_i(o,v);
}

void RKRGUI::cb_Sube_i(Fl_Button*, void*) {
  int x,x1;

int i = Order_Bro->value();

Order_Bro->move(i,i-1);

i--;

if (i>0) 
{
x=rkr->new_order[i];
x1=rkr->new_order[i-1];

rkr->new_order[i]=x1;
rkr->new_order[i-1]=x;
};
}
void RKRGUI::cb_Sube(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Sube_i(o,v);
}

void RKRGUI::cb_Baja_i(Fl_Button*, void*) {
  int x,x1;

int i = Order_Bro->value();

Order_Bro->move(i,i+1);

i--;

if (i<9)
{
x=rkr->new_order[i];
x1=rkr->new_order[i+1];

rkr->new_order[i]=x1;
rkr->new_order[i+1]=x;
};
}
void RKRGUI::cb_Baja(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Baja_i(o,v);
}

void RKRGUI::cb_Fil0_i(Fl_Button*, void*) {
  rkr->eff_filter=0;
Fill_Avail(rkr->eff_filter);
}
void RKRGUI::cb_Fil0(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Fil0_i(o,v);
}

void RKRGUI::cb_Fil1_i(Fl_Button*, void*) {
  rkr->eff_filter=1;
Fill_Avail(rkr->eff_filter);
}
void RKRGUI::cb_Fil1(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Fil1_i(o,v);
}

void RKRGUI::cb_Fil2_i(Fl_Button*, void*) {
  rkr->eff_filter=2;
Fill_Avail(rkr->eff_filter);
}
void RKRGUI::cb_Fil2(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Fil2_i(o,v);
}

void RKRGUI::cb_Fil4_i(Fl_Button*, void*) {
  rkr->eff_filter=4;
Fill_Avail(rkr->eff_filter);
}
void RKRGUI::cb_Fil4(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Fil4_i(o,v);
}

void RKRGUI::cb_Fil8_i(Fl_Button*, void*) {
  rkr->eff_filter=8;
Fill_Avail(rkr->eff_filter);
}
void RKRGUI::cb_Fil8(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Fil8_i(o,v);
}

void RKRGUI::cb_Fil16_i(Fl_Button*, void*) {
  rkr->eff_filter=16;
Fill_Avail(rkr->eff_filter);
}
void RKRGUI::cb_Fil16(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Fil16_i(o,v);
}

void RKRGUI::cb_Fil32_i(Fl_Button*, void*) {
  rkr->eff_filter=32;
Fill_Avail(rkr->eff_filter);
}
void RKRGUI::cb_Fil32(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Fil32_i(o,v);
}

void RKRGUI::cb_Fil64_i(Fl_Button*, void*) {
  rkr->eff_filter=64;
Fill_Avail(rkr->eff_filter);
}
void RKRGUI::cb_Fil64(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Fil64_i(o,v);
}

void RKRGUI::cb_Fil128_i(Fl_Button*, void*) {
  rkr->eff_filter=128;
Fill_Avail(rkr->eff_filter);
}
void RKRGUI::cb_Fil128(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Fil128_i(o,v);
}

void RKRGUI::cb_Order_DeacHide_i(Fl_Check_Button* o, void*) {
  rkr->deachide=(int) o->value();
}
void RKRGUI::cb_Order_DeacHide(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Order_DeacHide_i(o,v);
}

void RKRGUI::cb_ok_order_i(Fl_Button*, void*) {
  int i;
for (i=0;i<10;i++) rkr->efx_order[i]=rkr->new_order[i];
reordena();
Order->do_callback();
}
void RKRGUI::cb_ok_order(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_ok_order_i(o,v);
}

void RKRGUI::cb_Cancel_order_i(Fl_Button*, void*) {
  int i;
for (i=0;i<10;i++) rkr->efx_order[i]=rkr->saved_order[i];
Order->do_callback();
}
void RKRGUI::cb_Cancel_order(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Cancel_order_i(o,v);
}

void RKRGUI::cb_Settings_i(Fl_Double_Window*, void*) {
  save_stat(3);
Settings->hide();
}
void RKRGUI::cb_Settings(Fl_Double_Window* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_Settings_i(o,v);
}

void RKRGUI::cb_scheme_ch_i(Fl_Choice* o, void*) {
  switch ((int)o->value())

{

  case 0:

Fl::scheme("");
Fl::redraw();
break;

  case 1:

Fl::scheme("none");
Fl::redraw();
break;

  case 2:

Fl::scheme("gtk+");
Fl::redraw();
break;

  case 3:

Fl::scheme("plastic");
Fl::redraw();
break;

};
}
void RKRGUI::cb_scheme_ch(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_scheme_ch_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_scheme_ch[] = {
 {"X11", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"fltk", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"gtk+", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"plastic", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_Font_Bro_i(Fl_Browser* o, void*) {
  rkr->font = (int)o->value()-1;
chfsize(0);
}
void RKRGUI::cb_Font_Bro(Fl_Browser* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Font_Bro_i(o,v);
}

void RKRGUI::cb_FSless_i(Fl_Button*, void*) {
  rkr->relfontsize--;
chfsize(-1);
}
void RKRGUI::cb_FSless(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_FSless_i(o,v);
}

void RKRGUI::cb_FSplus_i(Fl_Button*, void*) {
  rkr->relfontsize++;
chfsize(1);
}
void RKRGUI::cb_FSplus(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_FSplus_i(o,v);
}

void RKRGUI::cb_FSReset_i(Fl_Button*, void*) {
  rkr->relfontsize=0;
chfsize(0);
}
void RKRGUI::cb_FSReset(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_FSReset_i(o,v);
}

void RKRGUI::cb_B_C_i(Fl_Button*, void*) {
  uchar r,g,b;

Fl::get_color(fore_color,r,g,b);
if (!fl_color_chooser("rakarrak buttons color:",r,g,b)) return;
fore_color=fl_rgb_color(r,g,b);
Buttons_Color_Change(fore_color);
}
void RKRGUI::cb_B_C(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_B_C_i(o,v);
}

void RKRGUI::cb_A_C_i(Fl_Button*, void*) {
  uchar r,g,b;
Fl::get_color(label_color,r,g,b);
if (!fl_color_chooser("rakarrack label color:",r,g,b)) return;
label_color=fl_rgb_color(r,g,b);
Label_Color_Change(label_color);
}
void RKRGUI::cb_A_C(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_A_C_i(o,v);
}

void RKRGUI::cb_L_C_i(Fl_Button*, void*) {
  uchar r,g,b;
Fl::get_color(leds_color,r,g,b);
if (!fl_color_chooser("rakarrack leds color:",r,g,b)) return;
leds_color=fl_rgb_color(r,g,b);
Leds_Color_Change(leds_color);
}
void RKRGUI::cb_L_C(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_L_C_i(o,v);
}

void RKRGUI::cb_K_C_i(Fl_Button*, void*) {
  uchar r,g,b;
Fl::get_color(back_color,r,g,b);
if (!fl_color_chooser("rakarrack back color:",r,g,b)) return;
back_color=fl_rgb_color(r,g,b);
Background_Color_Change(back_color);
}
void RKRGUI::cb_K_C(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_K_C_i(o,v);
}

void RKRGUI::cb_Enable_Back_i(Fl_Check_Button* o, void*) {
  rkr->EnableBackgroundImage=(int) o->value();
PutBackground();
}
void RKRGUI::cb_Enable_Back(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Enable_Back_i(o,v);
}

void RKRGUI::cb_BI_Browser_i(Fl_Button*, void*) {
  char *filename;
filename=fl_file_chooser("Browse:","(*.png)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".png");
BackFiname->value(filename);
strcpy(rkr->BackgroundImage,filename);
PutBackground();
}
void RKRGUI::cb_BI_Browser(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_BI_Browser_i(o,v);
}

void RKRGUI::cb_Enable_DeacHide_i(Fl_Check_Button* o, void*) {
  rkr->deachide=(int) o->value();
}
void RKRGUI::cb_Enable_DeacHide(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Enable_DeacHide_i(o,v);
}

void RKRGUI::cb_INSTATE_i(Fl_Check_Button* o, void*) {
  rkr->init_state=(int) o->value();
}
void RKRGUI::cb_INSTATE(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_INSTATE_i(o,v);
}

void RKRGUI::cb_Filter_DC_i(Fl_Check_Button* o, void*) {
  rkr->DC_Offset=(int) o->value();
}
void RKRGUI::cb_Filter_DC(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Filter_DC_i(o,v);
}

void RKRGUI::cb_Pre_Serve_i(Fl_Check_Button* o, void*) {
  rkr->actuvol=(int) o->value();
}
void RKRGUI::cb_Pre_Serve(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Pre_Serve_i(o,v);
}

void RKRGUI::cb_Update_TAP_i(Fl_Check_Button* o, void*) {
  rkr->Tap_Updated = (int) o->value();
}
void RKRGUI::cb_Update_TAP(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Update_TAP_i(o,v);
}

void RKRGUI::cb_UPSAMPLE_C_i(Fl_Check_Button* o, void*) {
  rkr->upsample=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_UPSAMPLE_C(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_UPSAMPLE_C_i(o,v);
}

void RKRGUI::cb_Upr_Amo_i(Fl_Choice* o, void*) {
  rkr->UpAmo =(int) o->value();

Show_Next_Time();
}
void RKRGUI::cb_Upr_Amo(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Upr_Amo_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_Upr_Amo[] = {
 {"x2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x3", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x5", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x6", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x7", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x9", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x10", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x11", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x12", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_Upr_Qual_i(Fl_Choice* o, void*) {
  rkr->UpQual =(int) o->value();

Show_Next_Time();
}
void RKRGUI::cb_Upr_Qual(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Upr_Qual_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_Upr_Qual[] = {
 {"Best", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Medium", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Fastest", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Zero Order", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Linear", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_Downr_Qual_i(Fl_Choice* o, void*) {
  rkr->DownQual =(int) o->value();

Show_Next_Time();
}
void RKRGUI::cb_Downr_Qual(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Downr_Qual_i(o,v);
}

void RKRGUI::cb_L_SIZE_i(Fl_Counter* o, void*) {
  rkr->looper_size=o->value();
if(!rkr->m_displayed)
{
Show_Next_Time();
rkr->m_displayed=1;
};
}
void RKRGUI::cb_L_SIZE(Fl_Counter* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_L_SIZE_i(o,v);
}

void RKRGUI::cb_LM_Volume_i(Fl_Counter* o, void*) {
  rkr->Metro_Vol=(int)o->value();
rkr->efx_Looper->setmvol(rkr->Metro_Vol);
}
void RKRGUI::cb_LM_Volume(Fl_Counter* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_LM_Volume_i(o,v);
}

void RKRGUI::cb_Har_Qual_i(Fl_Choice* o, void*) {
  int i = (int) o->value();

switch(i)
{
     case 0:
       rkr->HarQual=4;
       break;
     case 1:
       rkr->HarQual=8;
       break;
     case 2:
       rkr->HarQual=16;	
	break;
     case 3:
       rkr->HarQual=32;	
	break;

		
}


Show_Next_Time();
}
void RKRGUI::cb_Har_Qual(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Har_Qual_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_Har_Qual[] = {
 {"4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"16", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"32", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_Ste_Qual_i(Fl_Choice* o, void*) {
  int i = (int) o->value();

switch(i)
{
     case 0:
       rkr->SteQual=4;
       break;
     case 1:
       rkr->SteQual=8;
       break;
     case 2:
       rkr->SteQual=16;	
	break;
     case 3:
       rkr->SteQual=32;	
	break;

		
}


Show_Next_Time();
}
void RKRGUI::cb_Ste_Qual(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Ste_Qual_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_Ste_Qual[] = {
 {"4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"16", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"32", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_Voc_Bands_i(Fl_Choice* o, void*) {
  switch((int)o->value())
{
  case 0:
  rkr->VocBands = 16;
  break;

  case 1:
  rkr->VocBands = 32;
  break;

  case 2:
  rkr->VocBands = 64;
  break;

  case 3:
  rkr->VocBands = 128;
  break;

  case 4:
  rkr->VocBands = 256;
  break;

}

Show_Next_Time();
}
void RKRGUI::cb_Voc_Bands(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Voc_Bands_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_Voc_Bands[] = {
 {"16", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"32", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"64", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"128", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"256", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_FLPosition_i(Fl_Check_Button* o, void*) {
  rkr->flpos=(int)o->value();
}
void RKRGUI::cb_FLPosition(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_FLPosition_i(o,v);
}

void RKRGUI::cb_DB6B_i(Fl_Check_Button* o, void*) {
  rkr->db6booster=(int)o->value();
}
void RKRGUI::cb_DB6B(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_DB6B_i(o,v);
}

void RKRGUI::cb_Calibration_i(Fl_Counter* o, void*) {
  rkr->aFreq=o->value();
rkr->HarmRecNote->update_freqs(rkr->aFreq);
rkr->StHarmRecNote->update_freqs(rkr->aFreq);
rkr->RingRecNote->update_freqs(rkr->aFreq);
}
void RKRGUI::cb_Calibration(Fl_Counter* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Calibration_i(o,v);
}

void RKRGUI::cb_RTrigger_i(Fl_Counter* o, void*) {
  rkr->rtrig = o->value();
rkr->HarmRecNote->trigfact = o->value();
rkr->StHarmRecNote->trigfact = o->value();
rkr->RingRecNote->trigfact = o->value();
}
void RKRGUI::cb_RTrigger(Fl_Counter* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_RTrigger_i(o,v);
}

void RKRGUI::cb_RC_Harm_Opti_i(Fl_Choice* o, void*) {
  rkr->RCOpti_Harm =(int) o->value();

switch(rkr->RCOpti_Harm)
  {
  
  
    case 0:
    	rkr->HarmRecNote->setlpf(5500);
    	rkr->HarmRecNote->sethpf(80);
    	break;
    	

    case 1:
    	rkr->HarmRecNote->setlpf(4500);
    	rkr->HarmRecNote->sethpf(80);
    	break;
    	
    case 2:
    	rkr->HarmRecNote->setlpf(3000);
    	rkr->HarmRecNote->sethpf(300);
    	break;

};
}
void RKRGUI::cb_RC_Harm_Opti(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_RC_Harm_Opti_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_RC_Harm_Opti[] = {
 {"Normal", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Guitar", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Voice", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_RC_St_Harm_Opti_i(Fl_Choice* o, void*) {
  rkr->RCOpti_Stereo =(int) o->value();

switch(rkr->RCOpti_Stereo)
  {
  
  
    case 0:
    	rkr->StHarmRecNote->setlpf(5500);
    	rkr->StHarmRecNote->sethpf(80);
    	break;
    	

    case 1:
    	rkr->StHarmRecNote->setlpf(4500);
    	rkr->StHarmRecNote->sethpf(80);
    	break;
    	
    case 2:
    	rkr->StHarmRecNote->setlpf(3000);
    	rkr->StHarmRecNote->sethpf(300);
    	break;

};
}
void RKRGUI::cb_RC_St_Harm_Opti(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_RC_St_Harm_Opti_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_RC_St_Harm_Opti[] = {
 {"Normal", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Guitar", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Voice", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_RC_Ring_Opti_i(Fl_Choice* o, void*) {
  rkr->RCOpti_Ring =(int) o->value();

switch(rkr->RCOpti_Ring)
  {
  
  
    case 0:
    	rkr->RingRecNote->setlpf(5500);
    	rkr->RingRecNote->sethpf(80);
    	break;
    	

    case 1:
    	rkr->RingRecNote->setlpf(4500);
    	rkr->RingRecNote->sethpf(80);
    	break;
    	
    case 2:
    	rkr->RingRecNote->setlpf(3000);
    	rkr->RingRecNote->sethpf(300);
    	break;

};
}
void RKRGUI::cb_RC_Ring_Opti(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_RC_Ring_Opti_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_RC_Ring_Opti[] = {
 {"Normal", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Guitar", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Voice", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_Har_Downsample_i(Fl_Choice* o, void*) {
  rkr->Har_Down=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Har_Downsample(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Har_Downsample_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_Har_Downsample[] = {
 {"Normal", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"96000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"48000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"44100", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"32000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"22050", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"16000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"12000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"8000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"4000", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_Har_Down_Qua_i(Fl_Choice* o, void*) {
  rkr->Har_D_Q=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Har_Down_Qua(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Har_Down_Qua_i(o,v);
}

void RKRGUI::cb_Har_Up_Qua_i(Fl_Choice* o, void*) {
  rkr->Har_U_Q=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Har_Up_Qua(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Har_Up_Qua_i(o,v);
}

void RKRGUI::cb_Rev_Downsample_i(Fl_Choice* o, void*) {
  rkr->Rev_Down=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Rev_Downsample(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Rev_Downsample_i(o,v);
}

void RKRGUI::cb_Rev_Down_Qua_i(Fl_Choice* o, void*) {
  rkr->Rev_D_Q=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Rev_Down_Qua(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Rev_Down_Qua_i(o,v);
}

void RKRGUI::cb_Rev_Up_Qua_i(Fl_Choice* o, void*) {
  rkr->Rev_U_Q=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Rev_Up_Qua(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Rev_Up_Qua_i(o,v);
}

void RKRGUI::cb_Con_Downsample_i(Fl_Choice* o, void*) {
  rkr->Con_Down=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Con_Downsample(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Con_Downsample_i(o,v);
}

void RKRGUI::cb_Con_Down_Qua_i(Fl_Choice* o, void*) {
  rkr->Con_D_Q=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Con_Down_Qua(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Con_Down_Qua_i(o,v);
}

void RKRGUI::cb_Con_Up_Qua_i(Fl_Choice* o, void*) {
  rkr->Con_U_Q=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Con_Up_Qua(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Con_Up_Qua_i(o,v);
}

void RKRGUI::cb_Seq_Downsample_i(Fl_Choice* o, void*) {
  rkr->Seq_Down=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Seq_Downsample(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Seq_Downsample_i(o,v);
}

void RKRGUI::cb_Seq_Down_Qua_i(Fl_Choice* o, void*) {
  rkr->Seq_D_Q=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Seq_Down_Qua(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Seq_Down_Qua_i(o,v);
}

void RKRGUI::cb_Seq_Up_Qua_i(Fl_Choice* o, void*) {
  rkr->Seq_U_Q=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Seq_Up_Qua(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Seq_Up_Qua_i(o,v);
}

void RKRGUI::cb_Shi_Downsample_i(Fl_Choice* o, void*) {
  rkr->Shi_Down=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Shi_Downsample(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Shi_Downsample_i(o,v);
}

void RKRGUI::cb_Shi_Down_Qua_i(Fl_Choice* o, void*) {
  rkr->Shi_D_Q=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Shi_Down_Qua(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Shi_Down_Qua_i(o,v);
}

void RKRGUI::cb_Shi_Up_Qua_i(Fl_Choice* o, void*) {
  rkr->Shi_U_Q=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Shi_Up_Qua(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Shi_Up_Qua_i(o,v);
}

void RKRGUI::cb_Voc_Downsample_i(Fl_Choice* o, void*) {
  rkr->Voc_Down=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Voc_Downsample(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Voc_Downsample_i(o,v);
}

void RKRGUI::cb_Voc_Down_Qua_i(Fl_Choice* o, void*) {
  rkr->Voc_D_Q=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Voc_Down_Qua(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Voc_Down_Qua_i(o,v);
}

void RKRGUI::cb_Voc_Up_Qua_i(Fl_Choice* o, void*) {
  rkr->Voc_U_Q=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Voc_Up_Qua(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Voc_Up_Qua_i(o,v);
}

void RKRGUI::cb_Ste_Downsample_i(Fl_Choice* o, void*) {
  rkr->Ste_Down=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Ste_Downsample(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Ste_Downsample_i(o,v);
}

void RKRGUI::cb_Ste_Down_Qua_i(Fl_Choice* o, void*) {
  rkr->Ste_D_Q=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Ste_Down_Qua(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Ste_Down_Qua_i(o,v);
}

void RKRGUI::cb_Ste_Up_Qua_i(Fl_Choice* o, void*) {
  rkr->Ste_U_Q=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Ste_Up_Qua(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Ste_Up_Qua_i(o,v);
}

void RKRGUI::cb_Wave_Amo_i(Fl_Choice* o, void*) {
  rkr->Wave_res_amount=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Wave_Amo(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Wave_Amo_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_Wave_Amo[] = {
 {"Normal", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"x12", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_Wave_Down_Qua_i(Fl_Choice* o, void*) {
  rkr->Wave_down_q=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Wave_Down_Qua(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Wave_Down_Qua_i(o,v);
}

void RKRGUI::cb_Wave_Up_Qua_i(Fl_Choice* o, void*) {
  rkr->Wave_up_q=(int)o->value();
Show_Next_Time();
}
void RKRGUI::cb_Wave_Up_Qua(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Wave_Up_Qua_i(o,v);
}

void RKRGUI::cb_D_A_Connect_i(Fl_Check_Button* o, void*) {
  rkr->aconnect_MI=(int) o->value();

if (rkr->aconnect_MI) BMidiIn->activate();
else BMidiIn->deactivate();
}
void RKRGUI::cb_D_A_Connect(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_D_A_Connect_i(o,v);
}

void RKRGUI::cb_BMidiIn_i(Fl_Browser* o, void*) {
  int valor;
valor = (int) o->value();
if(o->text(valor) != NULL)
strcpy(rkr->MID,o->text(valor));
else return;
o->select(valor,1);
rkr->Conecta();
}
void RKRGUI::cb_BMidiIn(Fl_Browser* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_BMidiIn_i(o,v);
}

void RKRGUI::cb_Midi_In_Counter_i(Fl_Counter* o, void*) {
  rkr->MidiCh=(int)o->value()-1;
}
void RKRGUI::cb_Midi_In_Counter(Fl_Counter* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Midi_In_Counter_i(o,v);
}

void RKRGUI::cb_Har_In_Counter_i(Fl_Counter* o, void*) {
  rkr->HarCh=(int)o->value()-1;
}
void RKRGUI::cb_Har_In_Counter(Fl_Counter* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Har_In_Counter_i(o,v);
}

void RKRGUI::cb_Stereo_Har_In_Counter_i(Fl_Counter* o, void*) {
  rkr->StereoHarCh=(int)o->value()-1;
}
void RKRGUI::cb_Stereo_Har_In_Counter(Fl_Counter* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Stereo_Har_In_Counter_i(o,v);
}

void RKRGUI::cb_Mw0_i(Fl_Check_Button*, void*) {
  rkr->MIDIway=0;
ML_Menu->deactivate();
}
void RKRGUI::cb_Mw0(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Mw0_i(o,v);
}

void RKRGUI::cb_Mw1_i(Fl_Check_Button*, void*) {
  rkr->MIDIway=1;
ML_Menu->activate();
}
void RKRGUI::cb_Mw1(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Mw1_i(o,v);
}

void RKRGUI::cb_AAssign_i(Fl_Check_Button* o, void*) {
  rkr->autoassign=o->value();
}
void RKRGUI::cb_AAssign(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_AAssign_i(o,v);
}

void RKRGUI::cb_MTable_i(Fl_Check_Button* o, void*) {
  rkr->midi_table=o->value();
if(rkr->midi_table) scroll->activate(); else 
scroll->deactivate();
}
void RKRGUI::cb_MTable(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_MTable_i(o,v);
}

void RKRGUI::cb_D_J_Connect_i(Fl_Check_Button* o, void*) {
  rkr->aconnect_JA=(int) o->value();
if (rkr->aconnect_JA) JackCo->activate();
else JackCo->deactivate();
}
void RKRGUI::cb_D_J_Connect(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_D_J_Connect_i(o,v);
}

void RKRGUI::cb_D_IJ_Connect_i(Fl_Check_Button* o, void*) {
  rkr->aconnect_JIA=(int) o->value();
if (rkr->aconnect_JIA) JackIn->activate();
else JackIn->deactivate();
}
void RKRGUI::cb_D_IJ_Connect(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_D_IJ_Connect_i(o,v);
}

void RKRGUI::cb_Username_i(Fl_Input* o, void*) {
  rkr->UserRealName=(char*) o->value();
}
void RKRGUI::cb_Username(Fl_Input* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Username_i(o,v);
}

void RKRGUI::cb_MES_DIS_i(Fl_Check_Button* o, void*) {
  rkr->mess_dis=(int) o->value();
}
void RKRGUI::cb_MES_DIS(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_MES_DIS_i(o,v);
}

void RKRGUI::cb_T_TIMEOUT_i(Fl_Check_Button* o, void*) {
  rkr->t_timeout=(int) o->value();
}
void RKRGUI::cb_T_TIMEOUT(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_T_TIMEOUT_i(o,v);
}

void RKRGUI::cb_ENA_TOOL_i(Fl_Check_Button* o, void*) {
  rkr->ena_tool=(int) o->value();
Fl_Tooltip::enable(rkr->ena_tool);
}
void RKRGUI::cb_ENA_TOOL(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_ENA_TOOL_i(o,v);
}

void RKRGUI::cb_BF_Browser_i(Fl_Button*, void*) {
  char *filename;
filename=fl_file_chooser("Browse:","(*.rkrb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkrb");
BFiname->value(filename);
strcpy(rkr->BankFilename,filename);
}
void RKRGUI::cb_BF_Browser(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_BF_Browser_i(o,v);
}

void RKRGUI::cb_UD_Browser_i(Fl_Button*, void*) {
  char *dir;
dir=fl_dir_chooser("Browse:",NULL,0);
if (dir==NULL) return;
Udir->value(dir);
strcpy(rkr->UDirFilename,dir);
ScanDir();
}
void RKRGUI::cb_UD_Browser(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_UD_Browser_i(o,v);
}

void RKRGUI::cb_MIDILearn_i(Fl_Double_Window*, void*) {
  CancelRec->do_callback();
save_stat(5);
MIDILearn->hide();
}
void RKRGUI::cb_MIDILearn(Fl_Double_Window* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_MIDILearn_i(o,v);
}

void RKRGUI::cb_Epar_i(Fl_Browser*, void*) {
  DisAssigns();
}
void RKRGUI::cb_Epar(Fl_Browser* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Epar_i(o,v);
}

void RKRGUI::cb_GMM_i(Fl_Button*, void*) {
  rkr->ControlGet=0;
rkr->CountWait=0;
rkr->RControl=1;
}
void RKRGUI::cb_GMM(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_GMM_i(o,v);
}

void RKRGUI::cb_CopyF_i(Fl_Button*, void*) {
  memcpy(rkr->XUserMIDI,rkr->Bank[TPresets->value()].XUserMIDI,sizeof(rkr->XUserMIDI));

DisAssigns();
}
void RKRGUI::cb_CopyF(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_CopyF_i(o,v);
}

void RKRGUI::cb_CopyT_i(Fl_Button*, void*) {
  memcpy(rkr->Bank[TPresets->value()].XUserMIDI,rkr->XUserMIDI, sizeof(rkr->XUserMIDI));
}
void RKRGUI::cb_CopyT(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_CopyT_i(o,v);
}

void RKRGUI::cb_ClearA_i(Fl_Button*, void*) {
  int i, j,k;
int the_one;

if (rkr->ML_filter==0)
 the_one = rkr->efx_params[(int)Epar->value()-1].Ato;
 else
 the_one = rkr->ML_clist[(int)Epar->value()-1];


for(i=0; i<128; i++)
  {
    for(j=0;j<20;j++)
      {
         if (rkr->XUserMIDI[i][j] == the_one)
           {
             for(k=j+1;k<20;k++) rkr->XUserMIDI[i][k-1]=rkr->XUserMIDI[i][k];
             rkr->XUserMIDI[i][19]=0;             
           }
       
       }  
   }
   
DisAssigns();
}
void RKRGUI::cb_ClearA(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_ClearA_i(o,v);
}

void RKRGUI::cb_ClearP_i(Fl_Button*, void*) {
  memset(rkr->XUserMIDI, 0, sizeof(rkr->XUserMIDI));
DisAssigns();
}
void RKRGUI::cb_ClearP(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_ClearP_i(o,v);
}

void RKRGUI::cb_Assign_i(Fl_Button*, void*) {
  int i;

int the_one;

if (rkr->ML_filter==0)
 the_one = rkr->efx_params[(int)Epar->value()-1].Ato;
 else
 the_one = rkr->ML_clist[(int)Epar->value()-1];


for(i=0;i<20;i++)

 {
    if(rkr->XUserMIDI[(int)Disp_Control->value()][i] == the_one) return;

    if(rkr->XUserMIDI[(int)Disp_Control->value()][i] ==0)
       {
         rkr->XUserMIDI[(int)Disp_Control->value()][i]=the_one;
         break;
        }
 }
 
 
DisAssigns();
}
void RKRGUI::cb_Assign(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Assign_i(o,v);
}

void RKRGUI::cb_AssignA_i(Fl_Button*, void*) {
  int i,j;
int the_one;

if (rkr->ML_filter==0)
 the_one = rkr->efx_params[(int)Epar->value()-1].Ato;
 else
 the_one = rkr->ML_clist[(int)Epar->value()-1];


for(j=1;j<61;j++)

{
for(i=0;i<20;i++)

 {
    if(rkr->Bank[j].XUserMIDI[(int)Disp_Control->value()][i] == the_one) break;

    if(rkr->Bank[j].XUserMIDI[(int)Disp_Control->value()][i] ==0)
       {
         rkr->Bank[j].XUserMIDI[(int)Disp_Control->value()][i]=the_one;
         break;
        }
 }
 
} 

Assign->do_callback();
}
void RKRGUI::cb_AssignA(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_AssignA_i(o,v);
}

void RKRGUI::cb_CancelRec_i(Fl_Button*, void*) {
  rkr->RControl = 0;
GMM->color(fore_color);
GMM->redraw();
}
void RKRGUI::cb_CancelRec(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_CancelRec_i(o,v);
}

void RKRGUI::cb_Disp_Control_i(Fl_Value_Input* o, void*) {
  if(o->value()> 127) o->value(127);
if(o->value()< 1) o->value(1);
}
void RKRGUI::cb_Disp_Control(Fl_Value_Input* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Disp_Control_i(o,v);
}

void RKRGUI::cb_CopyTAll_i(Fl_Button*, void*) {
  int i;
for(i=1;i<61;i++) memcpy(rkr->Bank[i].XUserMIDI,rkr->XUserMIDI, sizeof(rkr->XUserMIDI));
}
void RKRGUI::cb_CopyTAll(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_CopyTAll_i(o,v);
}

void RKRGUI::cb_CloseML_i(Fl_Button*, void*) {
  MIDILearn->do_callback();
}
void RKRGUI::cb_CloseML(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_CloseML_i(o,v);
}

void RKRGUI::cb_M_fil_all_i(Fl_Button*, void*) {
  rkr->ML_filter=0;
FillML(0);
}
void RKRGUI::cb_M_fil_all(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_M_fil_all_i(o,v);
}

void RKRGUI::cb_M_fil_current_i(Fl_Button*, void*) {
  rkr->ML_filter=1;
FillML(0);
}
void RKRGUI::cb_M_fil_current(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_M_fil_current_i(o,v);
}

void RKRGUI::cb_AboutWin_i(Fl_Double_Window*, void*) {
  AboutWin->hide();
}
void RKRGUI::cb_AboutWin(Fl_Double_Window* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_AboutWin_i(o,v);
}

void RKRGUI::cb_LICENSE_i(Fl_Button*, void*) {
  show_lic();
}
void RKRGUI::cb_LICENSE(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_LICENSE_i(o,v);
}

void RKRGUI::cb_OK_i(Fl_Button*, void*) {
  AboutWin->hide();
}
void RKRGUI::cb_OK(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

void RKRGUI::cb_Trigger_i(Fl_Double_Window*, void*) {
  rkr->ACI_Bypass=0;
Trigger->hide();
save_stat(6);
}
void RKRGUI::cb_Trigger(Fl_Double_Window* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_Trigger_i(o,v);
}

void RKRGUI::cb_aux_source_i(Fl_Choice* o, void*) {
  rkr->Aux_Source = (int) o->value();
}
void RKRGUI::cb_aux_source(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_aux_source_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_aux_source[] = {
 {"Aux", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"L", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"R", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_aux_gain_i(SliderW* o, void*) {
  rkr->Aux_Gain = (int)o->value();
}
void RKRGUI::cb_aux_gain(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_aux_gain_i(o,v);
}

void RKRGUI::cb_aux_thres_i(SliderW* o, void*) {
  rkr->Aux_Threshold = (int) o->value();
}
void RKRGUI::cb_aux_thres(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_aux_thres_i(o,v);
}

void RKRGUI::cb_aux_midi_i(Fl_Value_Input* o, void*) {
  if(o->value()> 127) o->value(127);
if(o->value()< 1) o->value(1);
rkr->Aux_MIDI = (int)o->value();
}
void RKRGUI::cb_aux_midi(Fl_Value_Input* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_aux_midi_i(o,v);
}

void RKRGUI::cb_aux_min_i(SliderW* o, void*) {
  rkr->Aux_Minimum = (int) o->value();
}
void RKRGUI::cb_aux_min(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_aux_min_i(o,v);
}

void RKRGUI::cb_aux_max_i(SliderW* o, void*) {
  rkr->Aux_Maximum = (int) o->value();
}
void RKRGUI::cb_aux_max(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_aux_max_i(o,v);
}

Fl_Double_Window* RKRGUI::make_window() {
  { Principal = new Fl_Double_Window(800, 600);
    Principal->box(FL_DOWN_BOX);
    Principal->color(FL_FOREGROUND_COLOR);
    Principal->callback((Fl_Callback*)cb_Principal, (void*)(this));
    { fondo = new Fl_Box(1, 1, 800, 600);
      fondo->align(Fl_Align(96|FL_ALIGN_INSIDE));
    } // Fl_Box* fondo
    { MenuP = new Fl_Menu_Bar(2, 2, 518, 18);
      MenuP->box(FL_NO_BOX);
      MenuP->color((Fl_Color)178);
      MenuP->selection_color(FL_BACKGROUND2_COLOR);
      MenuP->labelcolor(FL_BACKGROUND2_COLOR);
      MenuP->textcolor(FL_BACKGROUND2_COLOR);
      MenuP->align(Fl_Align(96|FL_ALIGN_INSIDE));
      MenuP->menu(menu_MenuP);
    } // Fl_Menu_Bar* MenuP
    { MT = new Fl_Box(579, 128, 20, 22);
      MT->labelsize(18);
      MT->callback((Fl_Callback*)cb_MT);
    } // Fl_Box* MT
    { TITTLE_L = new Fl_Button(521, 2, 276, 21);
      TITTLE_L->tooltip("Click here to activate scope");
      TITTLE_L->type(1);
      TITTLE_L->box(FL_NO_BOX);
      TITTLE_L->labeltype(FL_EMBOSSED_LABEL);
      TITTLE_L->labelfont(1);
      TITTLE_L->labelsize(40);
      TITTLE_L->callback((Fl_Callback*)cb_TITTLE_L);
      TITTLE_L->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
    } // Fl_Button* TITTLE_L
    { LMT_LED = new Fl_Box(504, 8, 8, 8, "Lmt");
      LMT_LED->box(FL_DOWN_BOX);
      LMT_LED->color((Fl_Color)2);
      LMT_LED->labelsize(10);
      LMT_LED->labelcolor(FL_BACKGROUND2_COLOR);
      LMT_LED->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Box* LMT_LED
    { CLIP_LED = new Fl_Box(541, 8, 8, 8, "Clip");
      CLIP_LED->box(FL_DOWN_BOX);
      CLIP_LED->color((Fl_Color)1);
      CLIP_LED->labelsize(10);
      CLIP_LED->labelcolor(FL_BACKGROUND2_COLOR);
      CLIP_LED->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Box* CLIP_LED
    { UPS_LED = new Fl_Box(608, 8, 8, 8, "Resample");
      UPS_LED->box(FL_DOWN_BOX);
      UPS_LED->color((Fl_Color)2);
      UPS_LED->labelsize(10);
      UPS_LED->labelcolor(FL_BACKGROUND2_COLOR);
      UPS_LED->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Box* UPS_LED
    { P_MIN_ST = new Fl_Box(620, 3, 29, 20, "Midi In");
      P_MIN_ST->labelfont(1);
      P_MIN_ST->labelsize(8);
      P_MIN_ST->labelcolor(FL_BACKGROUND2_COLOR);
      P_MIN_ST->user_data((void*)(5));
      P_MIN_ST->align(Fl_Align(FL_ALIGN_WRAP));
      P_MIN_ST->hide();
    } // Fl_Box* P_MIN_ST
    { P_MOUT_ST = new Fl_Box(648, 3, 29, 20, "Midi Out");
      P_MOUT_ST->labelfont(1);
      P_MOUT_ST->labelsize(8);
      P_MOUT_ST->labelcolor(FL_BACKGROUND2_COLOR);
      P_MOUT_ST->user_data((void*)(5));
      P_MOUT_ST->align(Fl_Align(FL_ALIGN_WRAP));
      P_MOUT_ST->hide();
    } // Fl_Box* P_MOUT_ST
    { P_AUX_ST = new Fl_Box(676, 5, 32, 17, "Aux");
      P_AUX_ST->labelfont(1);
      P_AUX_ST->labelsize(10);
      P_AUX_ST->labelcolor(FL_BACKGROUND2_COLOR);
      P_AUX_ST->user_data((void*)(5));
      P_AUX_ST->hide();
    } // Fl_Box* P_AUX_ST
    { P_IN_ST = new Fl_Box(698, 5, 32, 17, "In");
      P_IN_ST->labelfont(1);
      P_IN_ST->labelsize(10);
      P_IN_ST->labelcolor(FL_BACKGROUND2_COLOR);
      P_IN_ST->user_data((void*)(5));
      P_IN_ST->hide();
    } // Fl_Box* P_IN_ST
    { P_OUT_ST = new Fl_Box(719, 5, 32, 17, "Out");
      P_OUT_ST->labelfont(1);
      P_OUT_ST->labelsize(10);
      P_OUT_ST->labelcolor(FL_BACKGROUND2_COLOR);
      P_OUT_ST->user_data((void*)(5));
      P_OUT_ST->hide();
    } // Fl_Box* P_OUT_ST
    { CPULOAD = new Fl_Box(750, 5, 45, 17);
      CPULOAD->labelsize(10);
      CPULOAD->labelcolor(FL_BACKGROUND2_COLOR);
      CPULOAD->user_data((void*)(5));
    } // Fl_Box* CPULOAD
    { Sco = new Scope(545, 25, 226, 59, "Rakarrack");
      Sco->tooltip("Click here to turn off scope");
      Sco->box(FL_NO_BOX);
      Sco->color(FL_BACKGROUND_COLOR);
      Sco->selection_color(FL_BACKGROUND_COLOR);
      Sco->labeltype(FL_EMBOSSED_LABEL);
      Sco->labelfont(1);
      Sco->labelsize(40);
      Sco->labelcolor(FL_BACKGROUND2_COLOR);
      Sco->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      Sco->when(FL_WHEN_RELEASE);
      Sco->hide();
    } // Scope* Sco
    { E1 = new Fl_Box(2, 212, 1, 1);
      E1->labelsize(18);
      E1->hide();
      E1->deactivate();
    } // Fl_Box* E1
    { E2 = new Fl_Box(162, 212, 1, 1);
      E2->labelsize(18);
      E2->hide();
      E2->deactivate();
    } // Fl_Box* E2
    { E3 = new Fl_Box(322, 212, 1, 1);
      E3->labelsize(18);
      E3->hide();
      E3->deactivate();
    } // Fl_Box* E3
    { E4 = new Fl_Box(482, 212, 1, 1);
      E4->labelsize(18);
      E4->hide();
      E4->deactivate();
    } // Fl_Box* E4
    { E5 = new Fl_Box(642, 212, 1, 1);
      E5->labelsize(18);
      E5->hide();
      E5->deactivate();
    } // Fl_Box* E5
    { E6 = new Fl_Box(2, 413, 1, 1);
      E6->labelsize(18);
      E6->hide();
      E6->deactivate();
    } // Fl_Box* E6
    { E7 = new Fl_Box(162, 413, 1, 1);
      E7->labelsize(18);
      E7->hide();
      E7->deactivate();
    } // Fl_Box* E7
    { E8 = new Fl_Box(322, 413, 1, 1);
      E8->labelsize(18);
      E8->hide();
      E8->deactivate();
    } // Fl_Box* E8
    { E9 = new Fl_Box(483, 413, 1, 1);
      E9->labelsize(18);
      E9->hide();
      E9->deactivate();
    } // Fl_Box* E9
    { E10 = new Fl_Box(642, 413, 1, 1);
      E10->labelsize(18);
      E10->hide();
      E10->deactivate();
    } // Fl_Box* E10
    { L1 = new Fl_Box(2, 195, 158, 17, "label");
      L1->labelfont(1);
      L1->labelcolor(FL_BACKGROUND2_COLOR);
      L1->user_data((void*)(770));
      L1->align(Fl_Align(FL_ALIGN_CLIP));
    } // Fl_Box* L1
    { L2 = new Fl_Box(162, 195, 158, 17, "label");
      L2->labelfont(1);
      L2->labelcolor(FL_BACKGROUND2_COLOR);
      L2->user_data((void*)(771));
      L2->align(Fl_Align(FL_ALIGN_CLIP));
    } // Fl_Box* L2
    { L3 = new Fl_Box(322, 195, 158, 17, "label");
      L3->labelfont(1);
      L3->labelcolor(FL_BACKGROUND2_COLOR);
      L3->user_data((void*)(772));
    } // Fl_Box* L3
    { L4 = new Fl_Box(482, 195, 158, 17, "label");
      L4->labelfont(1);
      L4->labelcolor(FL_BACKGROUND2_COLOR);
      L4->user_data((void*)(773));
    } // Fl_Box* L4
    { L5 = new Fl_Box(642, 195, 157, 17, "label");
      L5->labelfont(1);
      L5->labelcolor(FL_BACKGROUND2_COLOR);
      L5->user_data((void*)(774));
    } // Fl_Box* L5
    { L6 = new Fl_Box(1, 396, 158, 17, "label");
      L6->labelfont(1);
      L6->labelcolor(FL_BACKGROUND2_COLOR);
      L6->user_data((void*)(775));
    } // Fl_Box* L6
    { L7 = new Fl_Box(162, 396, 158, 17, "label");
      L7->labelfont(1);
      L7->labelcolor(FL_BACKGROUND2_COLOR);
      L7->user_data((void*)(776));
    } // Fl_Box* L7
    { L8 = new Fl_Box(322, 396, 158, 17, "label");
      L8->labelfont(1);
      L8->labelcolor(FL_BACKGROUND2_COLOR);
      L8->user_data((void*)(777));
    } // Fl_Box* L8
    { L9 = new Fl_Box(482, 396, 158, 17, "label");
      L9->labelfont(1);
      L9->labelcolor(FL_BACKGROUND2_COLOR);
      L9->user_data((void*)(778));
    } // Fl_Box* L9
    { L10 = new Fl_Box(642, 396, 154, 17, "label");
      L10->labelfont(1);
      L10->labelcolor(FL_BACKGROUND2_COLOR);
      L10->user_data((void*)(779));
    } // Fl_Box* L10
    { EQ = new EqGui(2, 212, 158, 184);
      EQ->box(FL_UP_BOX);
      EQ->color(FL_FOREGROUND_COLOR);
      EQ->selection_color(FL_FOREGROUND_COLOR);
      EQ->labeltype(FL_NORMAL_LABEL);
      EQ->labelfont(1);
      EQ->labelsize(14);
      EQ->labelcolor(FL_FOREGROUND_COLOR);
      EQ->user_data((void*)(1));
      EQ->align(Fl_Align(96|FL_ALIGN_INSIDE));
      EQ->when(FL_WHEN_RELEASE);
      EQ->hide();
      EQ->end();
    } // EqGui* EQ
    { COMPRESS = new CompressGui(161, 212, 158, 184);
      COMPRESS->box(FL_UP_BOX);
      COMPRESS->color(FL_FOREGROUND_COLOR);
      COMPRESS->selection_color(FL_FOREGROUND_COLOR);
      COMPRESS->labeltype(FL_NORMAL_LABEL);
      COMPRESS->labelfont(1);
      COMPRESS->labelsize(14);
      COMPRESS->labelcolor(FL_FOREGROUND_COLOR);
      COMPRESS->user_data((void*)(1));
      COMPRESS->align(Fl_Align(96|FL_ALIGN_INSIDE));
      COMPRESS->when(FL_WHEN_RELEASE);
      COMPRESS->hide();
      COMPRESS->end();
    } // CompressGui* COMPRESS
    { DIST = new DistGui(320, 212, 158, 184);
      DIST->box(FL_UP_BOX);
      DIST->color(FL_FOREGROUND_COLOR);
      DIST->selection_color(FL_FOREGROUND_COLOR);
      DIST->labeltype(FL_NORMAL_LABEL);
      DIST->labelfont(1);
      DIST->labelsize(14);
      DIST->labelcolor(FL_FOREGROUND_COLOR);
      DIST->user_data((void*)(1));
      DIST->align(Fl_Align(96|FL_ALIGN_INSIDE));
      DIST->when(FL_WHEN_RELEASE);
      DIST->hide();
      DIST->end();
    } // DistGui* DIST
    { OVRD = new OvrdGui(480, 212, 158, 184);
      OVRD->box(FL_UP_BOX);
      OVRD->color(FL_FOREGROUND_COLOR);
      OVRD->selection_color(FL_FOREGROUND_COLOR);
      OVRD->labeltype(FL_NORMAL_LABEL);
      OVRD->labelfont(1);
      OVRD->labelsize(14);
      OVRD->labelcolor(FL_FOREGROUND_COLOR);
      OVRD->user_data((void*)(1));
      OVRD->align(Fl_Align(96|FL_ALIGN_INSIDE));
      OVRD->when(FL_WHEN_RELEASE);
      OVRD->hide();
      OVRD->end();
    } // OvrdGui* OVRD
    { ECHO = new EchoGui(639, 212, 158, 184);
      ECHO->box(FL_UP_BOX);
      ECHO->color(FL_FOREGROUND_COLOR);
      ECHO->selection_color(FL_FOREGROUND_COLOR);
      ECHO->labeltype(FL_NORMAL_LABEL);
      ECHO->labelfont(1);
      ECHO->labelsize(14);
      ECHO->labelcolor(FL_FOREGROUND_COLOR);
      ECHO->user_data((void*)(1));
      ECHO->align(Fl_Align(96|FL_ALIGN_INSIDE));
      ECHO->when(FL_WHEN_RELEASE);
      ECHO->hide();
      ECHO->end();
    } // EchoGui* ECHO
    { CHORUS = new ChorusGui(2, 413, 158, 184);
      CHORUS->box(FL_UP_BOX);
      CHORUS->color(FL_FOREGROUND_COLOR);
      CHORUS->selection_color(FL_FOREGROUND_COLOR);
      CHORUS->labeltype(FL_NORMAL_LABEL);
      CHORUS->labelfont(1);
      CHORUS->labelsize(14);
      CHORUS->labelcolor(FL_FOREGROUND_COLOR);
      CHORUS->user_data((void*)(1));
      CHORUS->align(Fl_Align(96|FL_ALIGN_INSIDE));
      CHORUS->when(FL_WHEN_RELEASE);
      CHORUS->hide();
      CHORUS->end();
    } // ChorusGui* CHORUS
    { PHASER = new PhaserGui(161, 413, 158, 184);
      PHASER->box(FL_UP_BOX);
      PHASER->color(FL_FOREGROUND_COLOR);
      PHASER->selection_color(FL_FOREGROUND_COLOR);
      PHASER->labeltype(FL_NORMAL_LABEL);
      PHASER->labelfont(1);
      PHASER->labelsize(14);
      PHASER->labelcolor(FL_FOREGROUND_COLOR);
      PHASER->user_data((void*)(1));
      PHASER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      PHASER->when(FL_WHEN_RELEASE);
      PHASER->hide();
      PHASER->end();
    } // PhaserGui* PHASER
    { FLANGER = new FlangerGui(321, 413, 158, 184);
      FLANGER->box(FL_UP_BOX);
      FLANGER->color(FL_FOREGROUND_COLOR);
      FLANGER->selection_color(FL_FOREGROUND_COLOR);
      FLANGER->labeltype(FL_NORMAL_LABEL);
      FLANGER->labelfont(1);
      FLANGER->labelsize(14);
      FLANGER->labelcolor(FL_FOREGROUND_COLOR);
      FLANGER->user_data((void*)(1));
      FLANGER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      FLANGER->when(FL_WHEN_RELEASE);
      FLANGER->hide();
      FLANGER->end();
    } // FlangerGui* FLANGER
    { REVERB = new ReverbGui(480, 413, 158, 184);
      REVERB->box(FL_UP_BOX);
      REVERB->color(FL_FOREGROUND_COLOR);
      REVERB->selection_color(FL_FOREGROUND_COLOR);
      REVERB->labeltype(FL_NORMAL_LABEL);
      REVERB->labelfont(1);
      REVERB->labelsize(14);
      REVERB->labelcolor(FL_FOREGROUND_COLOR);
      REVERB->user_data((void*)(1));
      REVERB->align(Fl_Align(96|FL_ALIGN_INSIDE));
      REVERB->when(FL_WHEN_RELEASE);
      REVERB->hide();
      REVERB->end();
    } // ReverbGui* REVERB
    { PEQ = new PeqGui(639, 413, 158, 184);
      PEQ->box(FL_UP_BOX);
      PEQ->color(FL_FOREGROUND_COLOR);
      PEQ->selection_color(FL_FOREGROUND_COLOR);
      PEQ->labeltype(FL_NORMAL_LABEL);
      PEQ->labelfont(1);
      PEQ->labelsize(14);
      PEQ->labelcolor(FL_FOREGROUND_COLOR);
      PEQ->user_data((void*)(1));
      PEQ->align(Fl_Align(96|FL_ALIGN_INSIDE));
      PEQ->when(FL_WHEN_RELEASE);
      PEQ->hide();
      PEQ->end();
    } // PeqGui* PEQ
    { WHAWHA = new WhawhaGui(2, 212, 158, 184);
      WHAWHA->box(FL_UP_BOX);
      WHAWHA->color(FL_FOREGROUND_COLOR);
      WHAWHA->selection_color(FL_FOREGROUND_COLOR);
      WHAWHA->labeltype(FL_NORMAL_LABEL);
      WHAWHA->labelfont(1);
      WHAWHA->labelsize(14);
      WHAWHA->labelcolor(FL_FOREGROUND_COLOR);
      WHAWHA->user_data((void*)(1));
      WHAWHA->align(Fl_Align(96|FL_ALIGN_INSIDE));
      WHAWHA->when(FL_WHEN_RELEASE);
      WHAWHA->hide();
      WHAWHA->end();
    } // WhawhaGui* WHAWHA
    { ALIENWAH = new AlienwahGui(161, 212, 158, 184);
      ALIENWAH->box(FL_UP_BOX);
      ALIENWAH->color(FL_FOREGROUND_COLOR);
      ALIENWAH->selection_color(FL_FOREGROUND_COLOR);
      ALIENWAH->labeltype(FL_NORMAL_LABEL);
      ALIENWAH->labelfont(1);
      ALIENWAH->labelsize(14);
      ALIENWAH->labelcolor(FL_FOREGROUND_COLOR);
      ALIENWAH->user_data((void*)(1));
      ALIENWAH->align(Fl_Align(96|FL_ALIGN_INSIDE));
      ALIENWAH->when(FL_WHEN_RELEASE);
      ALIENWAH->hide();
      ALIENWAH->end();
    } // AlienwahGui* ALIENWAH
    { CABINET = new CabinetGui(320, 212, 158, 184);
      CABINET->box(FL_UP_BOX);
      CABINET->color(FL_FOREGROUND_COLOR);
      CABINET->selection_color(FL_FOREGROUND_COLOR);
      CABINET->labeltype(FL_NORMAL_LABEL);
      CABINET->labelfont(1);
      CABINET->labelsize(14);
      CABINET->labelcolor(FL_FOREGROUND_COLOR);
      CABINET->user_data((void*)(1));
      CABINET->align(Fl_Align(96|FL_ALIGN_INSIDE));
      CABINET->when(FL_WHEN_RELEASE);
      CABINET->hide();
      CABINET->end();
    } // CabinetGui* CABINET
    { PAN = new PanGui(480, 212, 158, 184);
      PAN->box(FL_UP_BOX);
      PAN->color(FL_FOREGROUND_COLOR);
      PAN->selection_color(FL_FOREGROUND_COLOR);
      PAN->labeltype(FL_NORMAL_LABEL);
      PAN->labelfont(1);
      PAN->labelsize(14);
      PAN->labelcolor(FL_FOREGROUND_COLOR);
      PAN->user_data((void*)(1));
      PAN->align(Fl_Align(96|FL_ALIGN_INSIDE));
      PAN->when(FL_WHEN_RELEASE);
      PAN->hide();
      PAN->end();
    } // PanGui* PAN
    { HAR = new HarGui(639, 212, 158, 184);
      HAR->box(FL_UP_BOX);
      HAR->color(FL_FOREGROUND_COLOR);
      HAR->selection_color(FL_FOREGROUND_COLOR);
      HAR->labeltype(FL_NORMAL_LABEL);
      HAR->labelfont(1);
      HAR->labelsize(14);
      HAR->labelcolor(FL_FOREGROUND_COLOR);
      HAR->user_data((void*)(1));
      HAR->align(Fl_Align(96|FL_ALIGN_INSIDE));
      HAR->when(FL_WHEN_RELEASE);
      HAR->hide();
      HAR->end();
    } // HarGui* HAR
    { MUSDELAY = new MusdelayGui(2, 413, 158, 184);
      MUSDELAY->box(FL_UP_BOX);
      MUSDELAY->color(FL_FOREGROUND_COLOR);
      MUSDELAY->selection_color(FL_FOREGROUND_COLOR);
      MUSDELAY->labeltype(FL_NORMAL_LABEL);
      MUSDELAY->labelfont(1);
      MUSDELAY->labelsize(14);
      MUSDELAY->labelcolor(FL_FOREGROUND_COLOR);
      MUSDELAY->user_data((void*)(1));
      MUSDELAY->align(Fl_Align(96|FL_ALIGN_INSIDE));
      MUSDELAY->when(FL_WHEN_RELEASE);
      MUSDELAY->hide();
      MUSDELAY->end();
    } // MusdelayGui* MUSDELAY
    { GATE = new GateGui(161, 413, 158, 184);
      GATE->box(FL_UP_BOX);
      GATE->color(FL_FOREGROUND_COLOR);
      GATE->selection_color(FL_FOREGROUND_COLOR);
      GATE->labeltype(FL_NORMAL_LABEL);
      GATE->labelfont(1);
      GATE->labelsize(14);
      GATE->labelcolor(FL_FOREGROUND_COLOR);
      GATE->user_data((void*)(1));
      GATE->align(Fl_Align(96|FL_ALIGN_INSIDE));
      GATE->when(FL_WHEN_RELEASE);
      GATE->hide();
      GATE->end();
    } // GateGui* GATE
    { NEWDIST = new NewdistGui(321, 413, 158, 184);
      NEWDIST->box(FL_UP_BOX);
      NEWDIST->color(FL_FOREGROUND_COLOR);
      NEWDIST->selection_color(FL_FOREGROUND_COLOR);
      NEWDIST->labeltype(FL_NORMAL_LABEL);
      NEWDIST->labelfont(1);
      NEWDIST->labelsize(14);
      NEWDIST->labelcolor(FL_FOREGROUND_COLOR);
      NEWDIST->user_data((void*)(1));
      NEWDIST->align(Fl_Align(96|FL_ALIGN_INSIDE));
      NEWDIST->when(FL_WHEN_RELEASE);
      NEWDIST->hide();
      NEWDIST->end();
    } // NewdistGui* NEWDIST
    { APHASER = new AphaserGui(480, 413, 158, 184);
      APHASER->box(FL_UP_BOX);
      APHASER->color(FL_FOREGROUND_COLOR);
      APHASER->selection_color(FL_FOREGROUND_COLOR);
      APHASER->labeltype(FL_NORMAL_LABEL);
      APHASER->labelfont(1);
      APHASER->labelsize(14);
      APHASER->labelcolor(FL_FOREGROUND_COLOR);
      APHASER->user_data((void*)(1));
      APHASER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      APHASER->when(FL_WHEN_RELEASE);
      APHASER->hide();
      APHASER->end();
    } // AphaserGui* APHASER
    { VALVE = new ValveGui(639, 413, 158, 184);
      VALVE->box(FL_UP_BOX);
      VALVE->color(FL_FOREGROUND_COLOR);
      VALVE->selection_color(FL_FOREGROUND_COLOR);
      VALVE->labeltype(FL_NORMAL_LABEL);
      VALVE->labelfont(1);
      VALVE->labelsize(14);
      VALVE->labelcolor(FL_FOREGROUND_COLOR);
      VALVE->user_data((void*)(1));
      VALVE->align(Fl_Align(96|FL_ALIGN_INSIDE));
      VALVE->when(FL_WHEN_RELEASE);
      VALVE->hide();
      VALVE->end();
    } // ValveGui* VALVE
    { DFLANGE = new DflangeGui(2, 212, 158, 184);
      DFLANGE->box(FL_UP_BOX);
      DFLANGE->color(FL_FOREGROUND_COLOR);
      DFLANGE->selection_color(FL_FOREGROUND_COLOR);
      DFLANGE->labeltype(FL_NORMAL_LABEL);
      DFLANGE->labelfont(1);
      DFLANGE->labelsize(14);
      DFLANGE->labelcolor(FL_FOREGROUND_COLOR);
      DFLANGE->user_data((void*)(1));
      DFLANGE->align(Fl_Align(96|FL_ALIGN_INSIDE));
      DFLANGE->when(FL_WHEN_RELEASE);
      DFLANGE->hide();
      DFLANGE->end();
    } // DflangeGui* DFLANGE
    { RING = new RingGui(161, 212, 158, 184);
      RING->box(FL_UP_BOX);
      RING->color(FL_FOREGROUND_COLOR);
      RING->selection_color(FL_FOREGROUND_COLOR);
      RING->labeltype(FL_NORMAL_LABEL);
      RING->labelfont(1);
      RING->labelsize(14);
      RING->labelcolor(FL_FOREGROUND_COLOR);
      RING->user_data((void*)(1));
      RING->align(Fl_Align(96|FL_ALIGN_INSIDE));
      RING->when(FL_WHEN_RELEASE);
      RING->hide();
      RING->end();
    } // RingGui* RING
    { EXCITER = new ExciterGui(320, 212, 158, 184);
      EXCITER->box(FL_UP_BOX);
      EXCITER->color(FL_FOREGROUND_COLOR);
      EXCITER->selection_color(FL_FOREGROUND_COLOR);
      EXCITER->labeltype(FL_NORMAL_LABEL);
      EXCITER->labelfont(1);
      EXCITER->labelsize(14);
      EXCITER->labelcolor(FL_FOREGROUND_COLOR);
      EXCITER->user_data((void*)(1));
      EXCITER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      EXCITER->when(FL_WHEN_RELEASE);
      EXCITER->hide();
      EXCITER->end();
    } // ExciterGui* EXCITER
    { MBDIST = new MbdistGui(480, 212, 158, 184);
      MBDIST->box(FL_UP_BOX);
      MBDIST->color(FL_FOREGROUND_COLOR);
      MBDIST->selection_color(FL_FOREGROUND_COLOR);
      MBDIST->labeltype(FL_NORMAL_LABEL);
      MBDIST->labelfont(1);
      MBDIST->labelsize(14);
      MBDIST->labelcolor(FL_FOREGROUND_COLOR);
      MBDIST->user_data((void*)(1));
      MBDIST->align(Fl_Align(96|FL_ALIGN_INSIDE));
      MBDIST->when(FL_WHEN_RELEASE);
      MBDIST->hide();
      MBDIST->end();
    } // MbdistGui* MBDIST
    { ARPIE = new ArpieGui(639, 212, 158, 184);
      ARPIE->box(FL_UP_BOX);
      ARPIE->color(FL_FOREGROUND_COLOR);
      ARPIE->selection_color(FL_FOREGROUND_COLOR);
      ARPIE->labeltype(FL_NORMAL_LABEL);
      ARPIE->labelfont(1);
      ARPIE->labelsize(14);
      ARPIE->labelcolor(FL_FOREGROUND_COLOR);
      ARPIE->user_data((void*)(1));
      ARPIE->align(Fl_Align(96|FL_ALIGN_INSIDE));
      ARPIE->when(FL_WHEN_RELEASE);
      ARPIE->hide();
      ARPIE->end();
    } // ArpieGui* ARPIE
    { EXPANDER = new ExpanderGui(2, 413, 158, 184);
      EXPANDER->box(FL_UP_BOX);
      EXPANDER->color(FL_FOREGROUND_COLOR);
      EXPANDER->selection_color(FL_FOREGROUND_COLOR);
      EXPANDER->labeltype(FL_NORMAL_LABEL);
      EXPANDER->labelfont(1);
      EXPANDER->labelsize(14);
      EXPANDER->labelcolor(FL_FOREGROUND_COLOR);
      EXPANDER->user_data((void*)(1));
      EXPANDER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      EXPANDER->when(FL_WHEN_RELEASE);
      EXPANDER->hide();
      EXPANDER->end();
    } // ExpanderGui* EXPANDER
    { SHUFFLE = new ShuffleGui(161, 413, 158, 184);
      SHUFFLE->box(FL_UP_BOX);
      SHUFFLE->color(FL_FOREGROUND_COLOR);
      SHUFFLE->selection_color(FL_FOREGROUND_COLOR);
      SHUFFLE->labeltype(FL_NORMAL_LABEL);
      SHUFFLE->labelfont(1);
      SHUFFLE->labelsize(14);
      SHUFFLE->labelcolor(FL_FOREGROUND_COLOR);
      SHUFFLE->user_data((void*)(1));
      SHUFFLE->align(Fl_Align(96|FL_ALIGN_INSIDE));
      SHUFFLE->when(FL_WHEN_RELEASE);
      SHUFFLE->hide();
      SHUFFLE->end();
    } // ShuffleGui* SHUFFLE
    { SYNTHFILTER = new SynthfilterGui(321, 413, 158, 184);
      SYNTHFILTER->box(FL_UP_BOX);
      SYNTHFILTER->color(FL_FOREGROUND_COLOR);
      SYNTHFILTER->selection_color(FL_FOREGROUND_COLOR);
      SYNTHFILTER->labeltype(FL_NORMAL_LABEL);
      SYNTHFILTER->labelfont(1);
      SYNTHFILTER->labelsize(14);
      SYNTHFILTER->labelcolor(FL_FOREGROUND_COLOR);
      SYNTHFILTER->user_data((void*)(1));
      SYNTHFILTER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      SYNTHFILTER->when(FL_WHEN_RELEASE);
      SYNTHFILTER->hide();
      SYNTHFILTER->end();
    } // SynthfilterGui* SYNTHFILTER
    { MBVVOL = new MbvvolGui(480, 413, 158, 184);
      MBVVOL->box(FL_UP_BOX);
      MBVVOL->color(FL_FOREGROUND_COLOR);
      MBVVOL->selection_color(FL_FOREGROUND_COLOR);
      MBVVOL->labeltype(FL_NORMAL_LABEL);
      MBVVOL->labelfont(1);
      MBVVOL->labelsize(14);
      MBVVOL->labelcolor(FL_FOREGROUND_COLOR);
      MBVVOL->user_data((void*)(1));
      MBVVOL->align(Fl_Align(96|FL_ALIGN_INSIDE));
      MBVVOL->when(FL_WHEN_RELEASE);
      MBVVOL->hide();
      MBVVOL->end();
    } // MbvvolGui* MBVVOL
    { CONVOLOTRON = new ConvoGui(639, 413, 158, 184);
      CONVOLOTRON->box(FL_UP_BOX);
      CONVOLOTRON->color(FL_FOREGROUND_COLOR);
      CONVOLOTRON->selection_color(FL_FOREGROUND_COLOR);
      CONVOLOTRON->labeltype(FL_NORMAL_LABEL);
      CONVOLOTRON->labelfont(1);
      CONVOLOTRON->labelsize(14);
      CONVOLOTRON->labelcolor(FL_FOREGROUND_COLOR);
      CONVOLOTRON->user_data((void*)(1));
      CONVOLOTRON->align(Fl_Align(96|FL_ALIGN_INSIDE));
      CONVOLOTRON->when(FL_WHEN_RELEASE);
      CONVOLOTRON->hide();
      CONVOLOTRON->end();
    } // ConvoGui* CONVOLOTRON
    { LOOPER = new LooperGui(2, 212, 158, 184);
      LOOPER->box(FL_UP_BOX);
      LOOPER->color(FL_FOREGROUND_COLOR);
      LOOPER->selection_color(FL_FOREGROUND_COLOR);
      LOOPER->labeltype(FL_NORMAL_LABEL);
      LOOPER->labelfont(1);
      LOOPER->labelsize(14);
      LOOPER->labelcolor(FL_FOREGROUND_COLOR);
      LOOPER->user_data((void*)(1));
      LOOPER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      LOOPER->when(FL_WHEN_RELEASE);
      LOOPER->hide();
      LOOPER->end();
    } // LooperGui* LOOPER
    { RYANWAH = new RyanwahGui(161, 212, 158, 184);
      RYANWAH->box(FL_UP_BOX);
      RYANWAH->color(FL_FOREGROUND_COLOR);
      RYANWAH->selection_color(FL_FOREGROUND_COLOR);
      RYANWAH->labeltype(FL_NORMAL_LABEL);
      RYANWAH->labelfont(1);
      RYANWAH->labelsize(14);
      RYANWAH->labelcolor(FL_FOREGROUND_COLOR);
      RYANWAH->user_data((void*)(1));
      RYANWAH->align(Fl_Align(96|FL_ALIGN_INSIDE));
      RYANWAH->when(FL_WHEN_RELEASE);
      RYANWAH->hide();
      RYANWAH->end();
    } // RyanwahGui* RYANWAH
    { RBECHO = new RbechoGui(320, 212, 158, 184);
      RBECHO->box(FL_UP_BOX);
      RBECHO->color(FL_FOREGROUND_COLOR);
      RBECHO->selection_color(FL_FOREGROUND_COLOR);
      RBECHO->labeltype(FL_NORMAL_LABEL);
      RBECHO->labelfont(1);
      RBECHO->labelsize(14);
      RBECHO->labelcolor(FL_FOREGROUND_COLOR);
      RBECHO->user_data((void*)(1));
      RBECHO->align(Fl_Align(96|FL_ALIGN_INSIDE));
      RBECHO->when(FL_WHEN_RELEASE);
      RBECHO->hide();
      RBECHO->end();
    } // RbechoGui* RBECHO
    { COILCRAFTER = new CoilGui(480, 212, 158, 184);
      COILCRAFTER->box(FL_UP_BOX);
      COILCRAFTER->color(FL_FOREGROUND_COLOR);
      COILCRAFTER->selection_color(FL_FOREGROUND_COLOR);
      COILCRAFTER->labeltype(FL_NORMAL_LABEL);
      COILCRAFTER->labelfont(1);
      COILCRAFTER->labelsize(14);
      COILCRAFTER->labelcolor(FL_FOREGROUND_COLOR);
      COILCRAFTER->user_data((void*)(1));
      COILCRAFTER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      COILCRAFTER->when(FL_WHEN_RELEASE);
      COILCRAFTER->hide();
      COILCRAFTER->end();
    } // CoilGui* COILCRAFTER
    { SHELFBOOST = new ShelfGui(639, 212, 158, 184);
      SHELFBOOST->box(FL_UP_BOX);
      SHELFBOOST->color(FL_FOREGROUND_COLOR);
      SHELFBOOST->selection_color(FL_FOREGROUND_COLOR);
      SHELFBOOST->labeltype(FL_NORMAL_LABEL);
      SHELFBOOST->labelfont(1);
      SHELFBOOST->labelsize(14);
      SHELFBOOST->labelcolor(FL_FOREGROUND_COLOR);
      SHELFBOOST->user_data((void*)(1));
      SHELFBOOST->align(Fl_Align(96|FL_ALIGN_INSIDE));
      SHELFBOOST->when(FL_WHEN_RELEASE);
      SHELFBOOST->hide();
      SHELFBOOST->end();
    } // ShelfGui* SHELFBOOST
    { VOCODER = new VocoderGui(2, 413, 158, 184);
      VOCODER->box(FL_UP_BOX);
      VOCODER->color(FL_FOREGROUND_COLOR);
      VOCODER->selection_color(FL_FOREGROUND_COLOR);
      VOCODER->labeltype(FL_NORMAL_LABEL);
      VOCODER->labelfont(1);
      VOCODER->labelsize(14);
      VOCODER->labelcolor(FL_FOREGROUND_COLOR);
      VOCODER->user_data((void*)(1));
      VOCODER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      VOCODER->when(FL_WHEN_RELEASE);
      VOCODER->hide();
      VOCODER->end();
    } // VocoderGui* VOCODER
    { SUSTAINER = new SustainGui(161, 413, 158, 184);
      SUSTAINER->box(FL_UP_BOX);
      SUSTAINER->color(FL_FOREGROUND_COLOR);
      SUSTAINER->selection_color(FL_FOREGROUND_COLOR);
      SUSTAINER->labeltype(FL_NORMAL_LABEL);
      SUSTAINER->labelfont(1);
      SUSTAINER->labelsize(14);
      SUSTAINER->labelcolor(FL_FOREGROUND_COLOR);
      SUSTAINER->user_data((void*)(1));
      SUSTAINER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      SUSTAINER->when(FL_WHEN_RELEASE);
      SUSTAINER->hide();
      SUSTAINER->end();
    } // SustainGui* SUSTAINER
    { SEQUENCE = new SequenceGui(321, 413, 158, 184);
      SEQUENCE->box(FL_UP_BOX);
      SEQUENCE->color(FL_FOREGROUND_COLOR);
      SEQUENCE->selection_color(FL_FOREGROUND_COLOR);
      SEQUENCE->labeltype(FL_NORMAL_LABEL);
      SEQUENCE->labelfont(1);
      SEQUENCE->labelsize(14);
      SEQUENCE->labelcolor(FL_FOREGROUND_COLOR);
      SEQUENCE->user_data((void*)(1));
      SEQUENCE->align(Fl_Align(96|FL_ALIGN_INSIDE));
      SEQUENCE->when(FL_WHEN_RELEASE);
      SEQUENCE->hide();
      SEQUENCE->end();
    } // SequenceGui* SEQUENCE
    { SHIFTER = new ShifterGui(480, 413, 158, 184);
      SHIFTER->box(FL_UP_BOX);
      SHIFTER->color(FL_FOREGROUND_COLOR);
      SHIFTER->selection_color(FL_FOREGROUND_COLOR);
      SHIFTER->labeltype(FL_NORMAL_LABEL);
      SHIFTER->labelfont(1);
      SHIFTER->labelsize(14);
      SHIFTER->labelcolor(FL_FOREGROUND_COLOR);
      SHIFTER->user_data((void*)(1));
      SHIFTER->align(Fl_Align(96|FL_ALIGN_INSIDE));
      SHIFTER->when(FL_WHEN_RELEASE);
      SHIFTER->hide();
      SHIFTER->end();
    } // ShifterGui* SHIFTER
    { STOMPBOX = new StompboxGui(639, 413, 158, 184);
      STOMPBOX->box(FL_UP_BOX);
      STOMPBOX->color(FL_FOREGROUND_COLOR);
      STOMPBOX->selection_color(FL_FOREGROUND_COLOR);
      STOMPBOX->labeltype(FL_NORMAL_LABEL);
      STOMPBOX->labelfont(1);
      STOMPBOX->labelsize(14);
      STOMPBOX->labelcolor(FL_FOREGROUND_COLOR);
      STOMPBOX->user_data((void*)(1));
      STOMPBOX->align(Fl_Align(96|FL_ALIGN_INSIDE));
      STOMPBOX->when(FL_WHEN_RELEASE);
      STOMPBOX->hide();
      STOMPBOX->end();
    } // StompboxGui* STOMPBOX
    { REVERBTRON = new RevtronGui(2, 212, 158, 184);
      REVERBTRON->box(FL_UP_BOX);
      REVERBTRON->color(FL_FOREGROUND_COLOR);
      REVERBTRON->selection_color(FL_FOREGROUND_COLOR);
      REVERBTRON->labeltype(FL_NORMAL_LABEL);
      REVERBTRON->labelfont(1);
      REVERBTRON->labelsize(14);
      REVERBTRON->labelcolor(FL_FOREGROUND_COLOR);
      REVERBTRON->user_data((void*)(1));
      REVERBTRON->align(Fl_Align(96|FL_ALIGN_INSIDE));
      REVERBTRON->when(FL_WHEN_RELEASE);
      REVERBTRON->hide();
      REVERBTRON->end();
    } // RevtronGui* REVERBTRON
    { ECHOTRON = new EchotronGui(161, 212, 158, 184);
      ECHOTRON->box(FL_UP_BOX);
      ECHOTRON->color(FL_FOREGROUND_COLOR);
      ECHOTRON->selection_color(FL_FOREGROUND_COLOR);
      ECHOTRON->labeltype(FL_NORMAL_LABEL);
      ECHOTRON->labelfont(1);
      ECHOTRON->labelsize(14);
      ECHOTRON->labelcolor(FL_FOREGROUND_COLOR);
      ECHOTRON->user_data((void*)(1));
      ECHOTRON->align(Fl_Align(96|FL_ALIGN_INSIDE));
      ECHOTRON->when(FL_WHEN_RELEASE);
      ECHOTRON->hide();
      ECHOTRON->end();
    } // EchotronGui* ECHOTRON
    { SHAR = new SharGui(320, 212, 158, 184);
      SHAR->box(FL_UP_BOX);
      SHAR->color(FL_FOREGROUND_COLOR);
      SHAR->selection_color(FL_FOREGROUND_COLOR);
      SHAR->labeltype(FL_NORMAL_LABEL);
      SHAR->labelfont(1);
      SHAR->labelsize(14);
      SHAR->labelcolor(FL_FOREGROUND_COLOR);
      SHAR->user_data((void*)(1));
      SHAR->align(Fl_Align(96|FL_ALIGN_INSIDE));
      SHAR->when(FL_WHEN_RELEASE);
      SHAR->hide();
      SHAR->end();
    } // SharGui* SHAR
    { COMPBAND = new Fl_Group(162, 211, 158, 184);
      COMPBAND->box(FL_UP_BOX);
      COMPBAND->color(FL_FOREGROUND_COLOR);
      COMPBAND->selection_color(FL_FOREGROUND_COLOR);
      COMPBAND->labelfont(1);
      COMPBAND->user_data((void*)(1));
      COMPBAND->align(Fl_Align(96|FL_ALIGN_INSIDE));
      COMPBAND->hide();
      { cband_activar = new Fl_Light_Button(167, 215, 34, 18, "On");
        cband_activar->shortcut(0x38);
        cband_activar->color((Fl_Color)62);
        cband_activar->selection_color((Fl_Color)1);
        cband_activar->labelsize(10);
        cband_activar->callback((Fl_Callback*)cb_cband_activar, (void*)(2));
        cband_activar->align(Fl_Align(68|FL_ALIGN_INSIDE));
        cband_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* cband_activar
      { cband_preset = new Fl_Choice(239, 215, 76, 18, "Preset");
        cband_preset->down_box(FL_BORDER_BOX);
        cband_preset->selection_color(FL_FOREGROUND_COLOR);
        cband_preset->labelsize(10);
        cband_preset->labelcolor(FL_BACKGROUND2_COLOR);
        cband_preset->textsize(10);
        cband_preset->textcolor(FL_BACKGROUND2_COLOR);
        cband_preset->callback((Fl_Callback*)cb_cband_preset, (void*)(12043));
        cband_preset->when(FL_WHEN_RELEASE_ALWAYS);
        cband_preset->menu(menu_cband_preset);
      } // Fl_Choice* cband_preset
      { cband_WD = new SliderW(214, 238, 100, 10, "Wet/Dry");
        cband_WD->type(5);
        cband_WD->box(FL_FLAT_BOX);
        cband_WD->color((Fl_Color)178);
        cband_WD->selection_color((Fl_Color)62);
        cband_WD->labeltype(FL_NORMAL_LABEL);
        cband_WD->labelfont(0);
        cband_WD->labelsize(10);
        cband_WD->labelcolor(FL_BACKGROUND2_COLOR);
        cband_WD->minimum(-64);
        cband_WD->maximum(64);
        cband_WD->step(1);
        cband_WD->textcolor(FL_BACKGROUND2_COLOR);
        cband_WD->callback((Fl_Callback*)cb_cband_WD);
        cband_WD->align(Fl_Align(FL_ALIGN_LEFT));
        cband_WD->when(FL_WHEN_CHANGED);
      } // SliderW* cband_WD
      { cband_gain = new SliderW(214, 250, 100, 10, "Gain");
        cband_gain->type(5);
        cband_gain->box(FL_FLAT_BOX);
        cband_gain->color((Fl_Color)178);
        cband_gain->selection_color((Fl_Color)62);
        cband_gain->labeltype(FL_NORMAL_LABEL);
        cband_gain->labelfont(0);
        cband_gain->labelsize(10);
        cband_gain->labelcolor(FL_BACKGROUND2_COLOR);
        cband_gain->maximum(127);
        cband_gain->step(1);
        cband_gain->textcolor(FL_BACKGROUND2_COLOR);
        cband_gain->callback((Fl_Callback*)cb_cband_gain);
        cband_gain->align(Fl_Align(FL_ALIGN_LEFT));
        cband_gain->when(FL_WHEN_CHANGED);
      } // SliderW* cband_gain
      { cband_Lratio = new SliderW(214, 262, 100, 10, "L Ratio");
        cband_Lratio->type(5);
        cband_Lratio->box(FL_FLAT_BOX);
        cband_Lratio->color((Fl_Color)178);
        cband_Lratio->selection_color((Fl_Color)62);
        cband_Lratio->labeltype(FL_NORMAL_LABEL);
        cband_Lratio->labelfont(0);
        cband_Lratio->labelsize(10);
        cband_Lratio->labelcolor(FL_BACKGROUND2_COLOR);
        cband_Lratio->minimum(2);
        cband_Lratio->maximum(42);
        cband_Lratio->step(1);
        cband_Lratio->value(2);
        cband_Lratio->textcolor(FL_BACKGROUND2_COLOR);
        cband_Lratio->callback((Fl_Callback*)cb_cband_Lratio);
        cband_Lratio->align(Fl_Align(FL_ALIGN_LEFT));
        cband_Lratio->when(FL_WHEN_CHANGED);
      } // SliderW* cband_Lratio
      { cband_MLratio = new SliderW(214, 274, 100, 10, "ML Ratio");
        cband_MLratio->type(5);
        cband_MLratio->box(FL_FLAT_BOX);
        cband_MLratio->color((Fl_Color)178);
        cband_MLratio->selection_color((Fl_Color)62);
        cband_MLratio->labeltype(FL_NORMAL_LABEL);
        cband_MLratio->labelfont(0);
        cband_MLratio->labelsize(10);
        cband_MLratio->labelcolor(FL_BACKGROUND2_COLOR);
        cband_MLratio->minimum(2);
        cband_MLratio->maximum(42);
        cband_MLratio->step(1);
        cband_MLratio->value(2);
        cband_MLratio->textcolor(FL_BACKGROUND2_COLOR);
        cband_MLratio->callback((Fl_Callback*)cb_cband_MLratio);
        cband_MLratio->align(Fl_Align(FL_ALIGN_LEFT));
        cband_MLratio->when(FL_WHEN_CHANGED);
      } // SliderW* cband_MLratio
      { cband_MHratio = new SliderW(214, 286, 100, 10, "MH Ratio");
        cband_MHratio->type(5);
        cband_MHratio->box(FL_FLAT_BOX);
        cband_MHratio->color((Fl_Color)178);
        cband_MHratio->selection_color((Fl_Color)62);
        cband_MHratio->labeltype(FL_NORMAL_LABEL);
        cband_MHratio->labelfont(0);
        cband_MHratio->labelsize(10);
        cband_MHratio->labelcolor(FL_BACKGROUND2_COLOR);
        cband_MHratio->minimum(2);
        cband_MHratio->maximum(42);
        cband_MHratio->step(1);
        cband_MHratio->value(2);
        cband_MHratio->textcolor(FL_BACKGROUND2_COLOR);
        cband_MHratio->callback((Fl_Callback*)cb_cband_MHratio);
        cband_MHratio->align(Fl_Align(FL_ALIGN_LEFT));
        cband_MHratio->when(FL_WHEN_CHANGED);
      } // SliderW* cband_MHratio
      { cband_Hratio = new SliderW(214, 298, 100, 10, "H Ratio");
        cband_Hratio->type(5);
        cband_Hratio->box(FL_FLAT_BOX);
        cband_Hratio->color((Fl_Color)178);
        cband_Hratio->selection_color((Fl_Color)62);
        cband_Hratio->labeltype(FL_NORMAL_LABEL);
        cband_Hratio->labelfont(0);
        cband_Hratio->labelsize(10);
        cband_Hratio->labelcolor(FL_BACKGROUND2_COLOR);
        cband_Hratio->minimum(2);
        cband_Hratio->maximum(42);
        cband_Hratio->step(1);
        cband_Hratio->value(2);
        cband_Hratio->textcolor(FL_BACKGROUND2_COLOR);
        cband_Hratio->callback((Fl_Callback*)cb_cband_Hratio);
        cband_Hratio->align(Fl_Align(FL_ALIGN_LEFT));
        cband_Hratio->when(FL_WHEN_CHANGED);
      } // SliderW* cband_Hratio
      { cband_Lthres = new SliderW(214, 310, 100, 10, "L Thres");
        cband_Lthres->type(5);
        cband_Lthres->box(FL_FLAT_BOX);
        cband_Lthres->color((Fl_Color)178);
        cband_Lthres->selection_color((Fl_Color)62);
        cband_Lthres->labeltype(FL_NORMAL_LABEL);
        cband_Lthres->labelfont(0);
        cband_Lthres->labelsize(10);
        cband_Lthres->labelcolor(FL_BACKGROUND2_COLOR);
        cband_Lthres->minimum(-70);
        cband_Lthres->maximum(24);
        cband_Lthres->step(1);
        cband_Lthres->textcolor(FL_BACKGROUND2_COLOR);
        cband_Lthres->callback((Fl_Callback*)cb_cband_Lthres);
        cband_Lthres->align(Fl_Align(FL_ALIGN_LEFT));
        cband_Lthres->when(FL_WHEN_CHANGED);
      } // SliderW* cband_Lthres
      { cband_MLthres = new SliderW(214, 322, 100, 10, "ML Thres");
        cband_MLthres->type(5);
        cband_MLthres->box(FL_FLAT_BOX);
        cband_MLthres->color((Fl_Color)178);
        cband_MLthres->selection_color((Fl_Color)62);
        cband_MLthres->labeltype(FL_NORMAL_LABEL);
        cband_MLthres->labelfont(0);
        cband_MLthres->labelsize(10);
        cband_MLthres->labelcolor(FL_BACKGROUND2_COLOR);
        cband_MLthres->minimum(-70);
        cband_MLthres->maximum(24);
        cband_MLthres->step(1);
        cband_MLthres->textcolor(FL_BACKGROUND2_COLOR);
        cband_MLthres->callback((Fl_Callback*)cb_cband_MLthres);
        cband_MLthres->align(Fl_Align(FL_ALIGN_LEFT));
        cband_MLthres->when(FL_WHEN_CHANGED);
      } // SliderW* cband_MLthres
      { cband_MHthres = new SliderW(214, 334, 100, 10, "MH Thres");
        cband_MHthres->type(5);
        cband_MHthres->box(FL_FLAT_BOX);
        cband_MHthres->color((Fl_Color)178);
        cband_MHthres->selection_color((Fl_Color)62);
        cband_MHthres->labeltype(FL_NORMAL_LABEL);
        cband_MHthres->labelfont(0);
        cband_MHthres->labelsize(10);
        cband_MHthres->labelcolor(FL_BACKGROUND2_COLOR);
        cband_MHthres->minimum(-70);
        cband_MHthres->maximum(24);
        cband_MHthres->step(1);
        cband_MHthres->textcolor(FL_BACKGROUND2_COLOR);
        cband_MHthres->callback((Fl_Callback*)cb_cband_MHthres);
        cband_MHthres->align(Fl_Align(FL_ALIGN_LEFT));
        cband_MHthres->when(FL_WHEN_CHANGED);
      } // SliderW* cband_MHthres
      { cband_Hthres = new SliderW(214, 346, 100, 10, "H Thres");
        cband_Hthres->type(5);
        cband_Hthres->box(FL_FLAT_BOX);
        cband_Hthres->color((Fl_Color)178);
        cband_Hthres->selection_color((Fl_Color)62);
        cband_Hthres->labeltype(FL_NORMAL_LABEL);
        cband_Hthres->labelfont(0);
        cband_Hthres->labelsize(10);
        cband_Hthres->labelcolor(FL_BACKGROUND2_COLOR);
        cband_Hthres->minimum(-70);
        cband_Hthres->maximum(24);
        cband_Hthres->step(1);
        cband_Hthres->textcolor(FL_BACKGROUND2_COLOR);
        cband_Hthres->callback((Fl_Callback*)cb_cband_Hthres);
        cband_Hthres->align(Fl_Align(FL_ALIGN_LEFT));
        cband_Hthres->when(FL_WHEN_CHANGED);
      } // SliderW* cband_Hthres
      { cband_cross1 = new SliderW(214, 358, 100, 10, "Cross1");
        cband_cross1->type(5);
        cband_cross1->box(FL_FLAT_BOX);
        cband_cross1->color((Fl_Color)178);
        cband_cross1->selection_color((Fl_Color)62);
        cband_cross1->labeltype(FL_NORMAL_LABEL);
        cband_cross1->labelfont(0);
        cband_cross1->labelsize(10);
        cband_cross1->labelcolor(FL_BACKGROUND2_COLOR);
        cband_cross1->minimum(20);
        cband_cross1->maximum(1000);
        cband_cross1->step(1);
        cband_cross1->textcolor(FL_BACKGROUND2_COLOR);
        cband_cross1->callback((Fl_Callback*)cb_cband_cross1);
        cband_cross1->align(Fl_Align(FL_ALIGN_LEFT));
        cband_cross1->when(FL_WHEN_CHANGED);
      } // SliderW* cband_cross1
      { cband_cross2 = new SliderW(214, 370, 100, 10, "Cross2");
        cband_cross2->type(5);
        cband_cross2->box(FL_FLAT_BOX);
        cband_cross2->color((Fl_Color)178);
        cband_cross2->selection_color((Fl_Color)62);
        cband_cross2->labeltype(FL_NORMAL_LABEL);
        cband_cross2->labelfont(0);
        cband_cross2->labelsize(10);
        cband_cross2->labelcolor(FL_BACKGROUND2_COLOR);
        cband_cross2->minimum(1000);
        cband_cross2->maximum(8000);
        cband_cross2->step(1);
        cband_cross2->textcolor(FL_BACKGROUND2_COLOR);
        cband_cross2->callback((Fl_Callback*)cb_cband_cross2);
        cband_cross2->align(Fl_Align(FL_ALIGN_LEFT));
        cband_cross2->when(FL_WHEN_CHANGED);
      } // SliderW* cband_cross2
      { cband_cross3 = new SliderW(214, 382, 100, 10, "Cross3");
        cband_cross3->type(5);
        cband_cross3->box(FL_FLAT_BOX);
        cband_cross3->color((Fl_Color)178);
        cband_cross3->selection_color((Fl_Color)62);
        cband_cross3->labeltype(FL_NORMAL_LABEL);
        cband_cross3->labelfont(0);
        cband_cross3->labelsize(10);
        cband_cross3->labelcolor(FL_BACKGROUND2_COLOR);
        cband_cross3->minimum(2000);
        cband_cross3->maximum(26000);
        cband_cross3->step(1);
        cband_cross3->textcolor(FL_BACKGROUND2_COLOR);
        cband_cross3->callback((Fl_Callback*)cb_cband_cross3);
        cband_cross3->align(Fl_Align(FL_ALIGN_LEFT));
        cband_cross3->when(FL_WHEN_CHANGED);
      } // SliderW* cband_cross3
      COMPBAND->end();
    } // Fl_Group* COMPBAND
    { OTREM = new Fl_Group(320, 211, 158, 184);
      OTREM->box(FL_UP_BOX);
      OTREM->color(FL_FOREGROUND_COLOR);
      OTREM->selection_color(FL_FOREGROUND_COLOR);
      OTREM->labelfont(1);
      OTREM->user_data((void*)(1));
      OTREM->align(Fl_Align(96|FL_ALIGN_INSIDE));
      { otrem_activar = new Fl_Light_Button(325, 217, 34, 18, "On");
        otrem_activar->shortcut(0x38);
        otrem_activar->color((Fl_Color)62);
        otrem_activar->selection_color((Fl_Color)1);
        otrem_activar->labelsize(10);
        otrem_activar->callback((Fl_Callback*)cb_otrem_activar, (void*)(2));
        otrem_activar->align(Fl_Align(68|FL_ALIGN_INSIDE));
        otrem_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* otrem_activar
      { otrem_preset = new Fl_Choice(397, 217, 76, 18, "Preset");
        otrem_preset->down_box(FL_BORDER_BOX);
        otrem_preset->selection_color(FL_FOREGROUND_COLOR);
        otrem_preset->labelsize(10);
        otrem_preset->labelcolor(FL_BACKGROUND2_COLOR);
        otrem_preset->textsize(10);
        otrem_preset->textcolor(FL_BACKGROUND2_COLOR);
        otrem_preset->callback((Fl_Callback*)cb_otrem_preset, (void*)(12044));
        otrem_preset->when(FL_WHEN_RELEASE_ALWAYS);
        otrem_preset->menu(menu_otrem_preset);
      } // Fl_Choice* otrem_preset
      { otrem_dpth = new SliderW(372, 246, 100, 10, "Depth");
        otrem_dpth->type(5);
        otrem_dpth->box(FL_FLAT_BOX);
        otrem_dpth->color((Fl_Color)178);
        otrem_dpth->selection_color((Fl_Color)62);
        otrem_dpth->labeltype(FL_NORMAL_LABEL);
        otrem_dpth->labelfont(0);
        otrem_dpth->labelsize(10);
        otrem_dpth->labelcolor(FL_BACKGROUND2_COLOR);
        otrem_dpth->maximum(127);
        otrem_dpth->step(1);
        otrem_dpth->textcolor(FL_BACKGROUND2_COLOR);
        otrem_dpth->callback((Fl_Callback*)cb_otrem_dpth);
        otrem_dpth->align(Fl_Align(FL_ALIGN_LEFT));
        otrem_dpth->when(FL_WHEN_CHANGED);
      } // SliderW* otrem_dpth
      { otrem_freq = new SliderW(372, 266, 100, 10, "Tempo");
        otrem_freq->type(5);
        otrem_freq->box(FL_FLAT_BOX);
        otrem_freq->color((Fl_Color)178);
        otrem_freq->selection_color((Fl_Color)62);
        otrem_freq->labeltype(FL_NORMAL_LABEL);
        otrem_freq->labelfont(0);
        otrem_freq->labelsize(10);
        otrem_freq->labelcolor(FL_BACKGROUND2_COLOR);
        otrem_freq->minimum(1);
        otrem_freq->maximum(600);
        otrem_freq->step(1);
        otrem_freq->textcolor(FL_BACKGROUND2_COLOR);
        otrem_freq->callback((Fl_Callback*)cb_otrem_freq);
        otrem_freq->align(Fl_Align(FL_ALIGN_LEFT));
        otrem_freq->when(FL_WHEN_CHANGED);
      } // SliderW* otrem_freq
      { otrem_rnd = new SliderW(372, 286, 100, 10, "Rnd");
        otrem_rnd->type(5);
        otrem_rnd->box(FL_FLAT_BOX);
        otrem_rnd->color((Fl_Color)178);
        otrem_rnd->selection_color((Fl_Color)62);
        otrem_rnd->labeltype(FL_NORMAL_LABEL);
        otrem_rnd->labelfont(0);
        otrem_rnd->labelsize(10);
        otrem_rnd->labelcolor(FL_BACKGROUND2_COLOR);
        otrem_rnd->maximum(127);
        otrem_rnd->step(1);
        otrem_rnd->textcolor(FL_BACKGROUND2_COLOR);
        otrem_rnd->callback((Fl_Callback*)cb_otrem_rnd);
        otrem_rnd->align(Fl_Align(FL_ALIGN_LEFT));
        otrem_rnd->when(FL_WHEN_CHANGED);
      } // SliderW* otrem_rnd
      { Fl_Choice* o = otrem_lfotype = new Fl_Choice(383, 313, 72, 16, "LFO Type");
        otrem_lfotype->down_box(FL_BORDER_BOX);
        otrem_lfotype->selection_color(FL_FOREGROUND_COLOR);
        otrem_lfotype->labelsize(10);
        otrem_lfotype->labelcolor(FL_BACKGROUND2_COLOR);
        otrem_lfotype->textsize(10);
        otrem_lfotype->textcolor(FL_BACKGROUND2_COLOR);
        otrem_lfotype->callback((Fl_Callback*)cb_otrem_lfotype);
        o->menu(CHORUS->get_menu_chorus_lfotype());
      } // Fl_Choice* otrem_lfotype
      { otrem_stdf = new SliderW(372, 340, 100, 10, "St.df");
        otrem_stdf->type(5);
        otrem_stdf->box(FL_FLAT_BOX);
        otrem_stdf->color((Fl_Color)178);
        otrem_stdf->selection_color((Fl_Color)62);
        otrem_stdf->labeltype(FL_NORMAL_LABEL);
        otrem_stdf->labelfont(0);
        otrem_stdf->labelsize(10);
        otrem_stdf->labelcolor(FL_BACKGROUND2_COLOR);
        otrem_stdf->maximum(127);
        otrem_stdf->step(1);
        otrem_stdf->textcolor(FL_BACKGROUND2_COLOR);
        otrem_stdf->callback((Fl_Callback*)cb_otrem_stdf);
        otrem_stdf->align(Fl_Align(FL_ALIGN_LEFT));
        otrem_stdf->when(FL_WHEN_CHANGED);
      } // SliderW* otrem_stdf
      { otrem_pan = new SliderW(372, 360, 100, 10, "Pan");
        otrem_pan->type(5);
        otrem_pan->box(FL_FLAT_BOX);
        otrem_pan->color((Fl_Color)178);
        otrem_pan->selection_color((Fl_Color)62);
        otrem_pan->labeltype(FL_NORMAL_LABEL);
        otrem_pan->labelfont(0);
        otrem_pan->labelsize(10);
        otrem_pan->labelcolor(FL_BACKGROUND2_COLOR);
        otrem_pan->minimum(-64);
        otrem_pan->maximum(63);
        otrem_pan->step(1);
        otrem_pan->textcolor(FL_BACKGROUND2_COLOR);
        otrem_pan->callback((Fl_Callback*)cb_otrem_pan);
        otrem_pan->align(Fl_Align(FL_ALIGN_LEFT));
        otrem_pan->when(FL_WHEN_CHANGED);
      } // SliderW* otrem_pan
      { otrem_invert = new Fl_Check_Button(428, 378, 73, 15, "Invert");
        otrem_invert->tooltip("If checked it behaves more like tube preamp trem. If unchecked it behaves lik\
e a stompbox Opto Trem");
        otrem_invert->down_box(FL_BORDER_BOX);
        otrem_invert->labelsize(10);
        otrem_invert->labelcolor(FL_BACKGROUND2_COLOR);
        otrem_invert->callback((Fl_Callback*)cb_otrem_invert, (void*)(2));
      } // Fl_Check_Button* otrem_invert
      OTREM->end();
    } // Fl_Group* OTREM
    { VIBE = new Fl_Group(480, 211, 158, 184);
      VIBE->box(FL_UP_BOX);
      VIBE->color(FL_FOREGROUND_COLOR);
      VIBE->selection_color(FL_FOREGROUND_COLOR);
      VIBE->labelfont(1);
      VIBE->user_data((void*)(1));
      VIBE->align(Fl_Align(96|FL_ALIGN_INSIDE));
      VIBE->hide();
      { vibe_activar = new Fl_Light_Button(485, 215, 34, 18, "On");
        vibe_activar->shortcut(0x38);
        vibe_activar->color((Fl_Color)62);
        vibe_activar->selection_color((Fl_Color)1);
        vibe_activar->labelsize(10);
        vibe_activar->callback((Fl_Callback*)cb_vibe_activar, (void*)(2));
        vibe_activar->align(Fl_Align(68|FL_ALIGN_INSIDE));
        vibe_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* vibe_activar
      { vibe_preset = new Fl_Choice(557, 215, 76, 18, "Preset");
        vibe_preset->down_box(FL_BORDER_BOX);
        vibe_preset->selection_color(FL_FOREGROUND_COLOR);
        vibe_preset->labelsize(10);
        vibe_preset->labelcolor(FL_BACKGROUND2_COLOR);
        vibe_preset->textsize(10);
        vibe_preset->textcolor(FL_BACKGROUND2_COLOR);
        vibe_preset->callback((Fl_Callback*)cb_vibe_preset, (void*)(12045));
        vibe_preset->when(FL_WHEN_RELEASE_ALWAYS);
        vibe_preset->menu(menu_vibe_preset);
      } // Fl_Choice* vibe_preset
      { vibe_WD = new SliderW(532, 240, 100, 10, "Wet/Dry");
        vibe_WD->type(5);
        vibe_WD->box(FL_FLAT_BOX);
        vibe_WD->color((Fl_Color)178);
        vibe_WD->selection_color((Fl_Color)62);
        vibe_WD->labeltype(FL_NORMAL_LABEL);
        vibe_WD->labelfont(0);
        vibe_WD->labelsize(10);
        vibe_WD->labelcolor(FL_BACKGROUND2_COLOR);
        vibe_WD->minimum(-64);
        vibe_WD->maximum(64);
        vibe_WD->step(1);
        vibe_WD->textcolor(FL_BACKGROUND2_COLOR);
        vibe_WD->callback((Fl_Callback*)cb_vibe_WD);
        vibe_WD->align(Fl_Align(FL_ALIGN_LEFT));
        vibe_WD->when(FL_WHEN_CHANGED);
      } // SliderW* vibe_WD
      { vibe_width = new SliderW(532, 253, 100, 10, "Width");
        vibe_width->type(5);
        vibe_width->box(FL_FLAT_BOX);
        vibe_width->color((Fl_Color)178);
        vibe_width->selection_color((Fl_Color)62);
        vibe_width->labeltype(FL_NORMAL_LABEL);
        vibe_width->labelfont(0);
        vibe_width->labelsize(10);
        vibe_width->labelcolor(FL_BACKGROUND2_COLOR);
        vibe_width->maximum(127);
        vibe_width->step(1);
        vibe_width->textcolor(FL_BACKGROUND2_COLOR);
        vibe_width->callback((Fl_Callback*)cb_vibe_width);
        vibe_width->align(Fl_Align(FL_ALIGN_LEFT));
        vibe_width->when(FL_WHEN_CHANGED);
      } // SliderW* vibe_width
      { vibe_dpth = new SliderW(532, 266, 100, 10, "Depth");
        vibe_dpth->type(5);
        vibe_dpth->box(FL_FLAT_BOX);
        vibe_dpth->color((Fl_Color)178);
        vibe_dpth->selection_color((Fl_Color)62);
        vibe_dpth->labeltype(FL_NORMAL_LABEL);
        vibe_dpth->labelfont(0);
        vibe_dpth->labelsize(10);
        vibe_dpth->labelcolor(FL_BACKGROUND2_COLOR);
        vibe_dpth->maximum(127);
        vibe_dpth->step(1);
        vibe_dpth->textcolor(FL_BACKGROUND2_COLOR);
        vibe_dpth->callback((Fl_Callback*)cb_vibe_dpth);
        vibe_dpth->align(Fl_Align(FL_ALIGN_LEFT));
        vibe_dpth->when(FL_WHEN_CHANGED);
      } // SliderW* vibe_dpth
      { vibe_freq = new SliderW(532, 279, 100, 10, "Tempo");
        vibe_freq->type(5);
        vibe_freq->box(FL_FLAT_BOX);
        vibe_freq->color((Fl_Color)178);
        vibe_freq->selection_color((Fl_Color)62);
        vibe_freq->labeltype(FL_NORMAL_LABEL);
        vibe_freq->labelfont(0);
        vibe_freq->labelsize(10);
        vibe_freq->labelcolor(FL_BACKGROUND2_COLOR);
        vibe_freq->minimum(1);
        vibe_freq->maximum(600);
        vibe_freq->step(1);
        vibe_freq->textcolor(FL_BACKGROUND2_COLOR);
        vibe_freq->callback((Fl_Callback*)cb_vibe_freq);
        vibe_freq->align(Fl_Align(FL_ALIGN_LEFT));
        vibe_freq->when(FL_WHEN_CHANGED);
      } // SliderW* vibe_freq
      { vibe_rnd = new SliderW(532, 292, 100, 10, "Rnd");
        vibe_rnd->type(5);
        vibe_rnd->box(FL_FLAT_BOX);
        vibe_rnd->color((Fl_Color)178);
        vibe_rnd->selection_color((Fl_Color)62);
        vibe_rnd->labeltype(FL_NORMAL_LABEL);
        vibe_rnd->labelfont(0);
        vibe_rnd->labelsize(10);
        vibe_rnd->labelcolor(FL_BACKGROUND2_COLOR);
        vibe_rnd->maximum(127);
        vibe_rnd->step(1);
        vibe_rnd->textcolor(FL_BACKGROUND2_COLOR);
        vibe_rnd->callback((Fl_Callback*)cb_vibe_rnd);
        vibe_rnd->align(Fl_Align(FL_ALIGN_LEFT));
        vibe_rnd->when(FL_WHEN_CHANGED);
      } // SliderW* vibe_rnd
      { Fl_Choice* o = vibe_lfotype = new Fl_Choice(543, 307, 72, 16, "LFO Type");
        vibe_lfotype->down_box(FL_BORDER_BOX);
        vibe_lfotype->selection_color(FL_FOREGROUND_COLOR);
        vibe_lfotype->labelsize(10);
        vibe_lfotype->labelcolor(FL_BACKGROUND2_COLOR);
        vibe_lfotype->textsize(10);
        vibe_lfotype->textcolor(FL_BACKGROUND2_COLOR);
        vibe_lfotype->callback((Fl_Callback*)cb_vibe_lfotype);
        o->menu(CHORUS->get_menu_chorus_lfotype());
      } // Fl_Choice* vibe_lfotype
      { vibe_stdf = new SliderW(532, 329, 100, 10, "St.df");
        vibe_stdf->type(5);
        vibe_stdf->box(FL_FLAT_BOX);
        vibe_stdf->color((Fl_Color)178);
        vibe_stdf->selection_color((Fl_Color)62);
        vibe_stdf->labeltype(FL_NORMAL_LABEL);
        vibe_stdf->labelfont(0);
        vibe_stdf->labelsize(10);
        vibe_stdf->labelcolor(FL_BACKGROUND2_COLOR);
        vibe_stdf->maximum(127);
        vibe_stdf->step(1);
        vibe_stdf->textcolor(FL_BACKGROUND2_COLOR);
        vibe_stdf->callback((Fl_Callback*)cb_vibe_stdf);
        vibe_stdf->align(Fl_Align(FL_ALIGN_LEFT));
        vibe_stdf->when(FL_WHEN_CHANGED);
      } // SliderW* vibe_stdf
      { vibe_fb = new SliderW(532, 342, 100, 10, "Fb");
        vibe_fb->type(5);
        vibe_fb->box(FL_FLAT_BOX);
        vibe_fb->color((Fl_Color)178);
        vibe_fb->selection_color((Fl_Color)62);
        vibe_fb->labeltype(FL_NORMAL_LABEL);
        vibe_fb->labelfont(0);
        vibe_fb->labelsize(10);
        vibe_fb->labelcolor(FL_BACKGROUND2_COLOR);
        vibe_fb->minimum(-64);
        vibe_fb->maximum(64);
        vibe_fb->step(1);
        vibe_fb->textcolor(FL_BACKGROUND2_COLOR);
        vibe_fb->callback((Fl_Callback*)cb_vibe_fb);
        vibe_fb->align(Fl_Align(FL_ALIGN_LEFT));
        vibe_fb->when(FL_WHEN_CHANGED);
      } // SliderW* vibe_fb
      { vibe_LR = new SliderW(532, 355, 100, 10, "L/R.Cr");
        vibe_LR->type(5);
        vibe_LR->box(FL_FLAT_BOX);
        vibe_LR->color((Fl_Color)178);
        vibe_LR->selection_color((Fl_Color)62);
        vibe_LR->labeltype(FL_NORMAL_LABEL);
        vibe_LR->labelfont(0);
        vibe_LR->labelsize(10);
        vibe_LR->labelcolor(FL_BACKGROUND2_COLOR);
        vibe_LR->minimum(-64);
        vibe_LR->maximum(64);
        vibe_LR->step(1);
        vibe_LR->textcolor(FL_BACKGROUND2_COLOR);
        vibe_LR->callback((Fl_Callback*)cb_vibe_LR);
        vibe_LR->align(Fl_Align(FL_ALIGN_LEFT));
        vibe_LR->when(FL_WHEN_CHANGED);
      } // SliderW* vibe_LR
      { vibe_pan = new SliderW(532, 368, 100, 10, "Pan");
        vibe_pan->type(5);
        vibe_pan->box(FL_FLAT_BOX);
        vibe_pan->color((Fl_Color)178);
        vibe_pan->selection_color((Fl_Color)62);
        vibe_pan->labeltype(FL_NORMAL_LABEL);
        vibe_pan->labelfont(0);
        vibe_pan->labelsize(10);
        vibe_pan->labelcolor(FL_BACKGROUND2_COLOR);
        vibe_pan->minimum(-64);
        vibe_pan->maximum(64);
        vibe_pan->step(1);
        vibe_pan->textcolor(FL_BACKGROUND2_COLOR);
        vibe_pan->callback((Fl_Callback*)cb_vibe_pan);
        vibe_pan->align(Fl_Align(FL_ALIGN_LEFT));
        vibe_pan->when(FL_WHEN_CHANGED);
      } // SliderW* vibe_pan
      { vibe_stereo = new Fl_Check_Button(583, 380, 43, 14, "Stereo");
        vibe_stereo->down_box(FL_BORDER_BOX);
        vibe_stereo->labelsize(10);
        vibe_stereo->labelcolor(FL_BACKGROUND2_COLOR);
        vibe_stereo->callback((Fl_Callback*)cb_vibe_stereo, (void*)(2));
      } // Fl_Check_Button* vibe_stereo
      VIBE->end();
    } // Fl_Group* VIBE
    { INFINIT = new Fl_Group(479, 212, 158, 184);
      INFINIT->box(FL_UP_BOX);
      INFINIT->color(FL_FOREGROUND_COLOR);
      INFINIT->selection_color(FL_FOREGROUND_COLOR);
      INFINIT->labelfont(1);
      INFINIT->user_data((void*)(1));
      INFINIT->align(Fl_Align(96|FL_ALIGN_INSIDE));
      INFINIT->hide();
      { infinity_activar = new Fl_Light_Button(487, 217, 34, 18, "On");
        infinity_activar->shortcut(0x31);
        infinity_activar->color((Fl_Color)62);
        infinity_activar->selection_color((Fl_Color)1);
        infinity_activar->labelsize(10);
        infinity_activar->callback((Fl_Callback*)cb_infinity_activar, (void*)(2));
        infinity_activar->align(Fl_Align(68|FL_ALIGN_INSIDE));
        infinity_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* infinity_activar
      { infinity_preset = new Fl_Choice(559, 217, 76, 18, "Preset");
        infinity_preset->down_box(FL_BORDER_BOX);
        infinity_preset->selection_color(FL_FOREGROUND_COLOR);
        infinity_preset->labelsize(10);
        infinity_preset->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_preset->textsize(10);
        infinity_preset->textcolor(FL_BACKGROUND2_COLOR);
        infinity_preset->callback((Fl_Callback*)cb_infinity_preset, (void*)(12046));
        infinity_preset->when(FL_WHEN_RELEASE_ALWAYS);
        infinity_preset->menu(menu_infinity_preset);
      } // Fl_Choice* infinity_preset
      { infinity_WD = new SliderW(531, 239, 100, 10, "Wet/Dry");
        infinity_WD->type(5);
        infinity_WD->box(FL_FLAT_BOX);
        infinity_WD->color((Fl_Color)178);
        infinity_WD->selection_color((Fl_Color)62);
        infinity_WD->labeltype(FL_NORMAL_LABEL);
        infinity_WD->labelfont(0);
        infinity_WD->labelsize(10);
        infinity_WD->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_WD->minimum(-64);
        infinity_WD->maximum(63);
        infinity_WD->step(1);
        infinity_WD->textcolor(FL_BACKGROUND2_COLOR);
        infinity_WD->callback((Fl_Callback*)cb_infinity_WD);
        infinity_WD->align(Fl_Align(FL_ALIGN_LEFT));
        infinity_WD->when(FL_WHEN_CHANGED);
      } // SliderW* infinity_WD
      { infinity_Q = new SliderW(531, 253, 100, 10, "Res");
        infinity_Q->type(5);
        infinity_Q->box(FL_FLAT_BOX);
        infinity_Q->color((Fl_Color)178);
        infinity_Q->selection_color((Fl_Color)62);
        infinity_Q->labeltype(FL_NORMAL_LABEL);
        infinity_Q->labelfont(0);
        infinity_Q->labelsize(10);
        infinity_Q->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_Q->minimum(-1000);
        infinity_Q->maximum(1000);
        infinity_Q->step(1);
        infinity_Q->textcolor(FL_BACKGROUND2_COLOR);
        infinity_Q->callback((Fl_Callback*)cb_infinity_Q);
        infinity_Q->align(Fl_Align(FL_ALIGN_LEFT));
        infinity_Q->when(FL_WHEN_CHANGED);
      } // SliderW* infinity_Q
      { infinity_1 = new Fl_Value_Input(495, 268, 20, 15, "1");
        infinity_1->labelsize(10);
        infinity_1->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_1->minimum(-64);
        infinity_1->maximum(64);
        infinity_1->step(1);
        infinity_1->textsize(10);
        infinity_1->textcolor(FL_BACKGROUND2_COLOR);
        infinity_1->callback((Fl_Callback*)cb_infinity_1);
      } // Fl_Value_Input* infinity_1
      { infinity_2 = new Fl_Value_Input(531, 268, 20, 15, "2");
        infinity_2->labelsize(10);
        infinity_2->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_2->minimum(-64);
        infinity_2->maximum(64);
        infinity_2->step(1);
        infinity_2->textsize(10);
        infinity_2->textcolor(FL_BACKGROUND2_COLOR);
        infinity_2->callback((Fl_Callback*)cb_infinity_2);
      } // Fl_Value_Input* infinity_2
      { infinity_3 = new Fl_Value_Input(567, 267, 20, 15, "3");
        infinity_3->labelsize(10);
        infinity_3->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_3->minimum(-64);
        infinity_3->maximum(64);
        infinity_3->step(1);
        infinity_3->textsize(10);
        infinity_3->textcolor(FL_BACKGROUND2_COLOR);
        infinity_3->callback((Fl_Callback*)cb_infinity_3);
      } // Fl_Value_Input* infinity_3
      { infinity_4 = new Fl_Value_Input(603, 267, 20, 15, "4");
        infinity_4->labelsize(10);
        infinity_4->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_4->minimum(-64);
        infinity_4->maximum(64);
        infinity_4->step(1);
        infinity_4->textsize(10);
        infinity_4->textcolor(FL_BACKGROUND2_COLOR);
        infinity_4->callback((Fl_Callback*)cb_infinity_4);
      } // Fl_Value_Input* infinity_4
      { infinity_5 = new Fl_Value_Input(495, 286, 20, 15, "5");
        infinity_5->labelsize(10);
        infinity_5->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_5->minimum(-64);
        infinity_5->maximum(64);
        infinity_5->step(1);
        infinity_5->textsize(10);
        infinity_5->textcolor(FL_BACKGROUND2_COLOR);
        infinity_5->callback((Fl_Callback*)cb_infinity_5);
      } // Fl_Value_Input* infinity_5
      { infinity_6 = new Fl_Value_Input(531, 286, 20, 15, "6");
        infinity_6->labelsize(10);
        infinity_6->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_6->minimum(-64);
        infinity_6->maximum(64);
        infinity_6->step(1);
        infinity_6->textsize(10);
        infinity_6->textcolor(FL_BACKGROUND2_COLOR);
        infinity_6->callback((Fl_Callback*)cb_infinity_6);
      } // Fl_Value_Input* infinity_6
      { infinity_7 = new Fl_Value_Input(567, 286, 20, 15, "7");
        infinity_7->labelsize(10);
        infinity_7->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_7->minimum(-64);
        infinity_7->maximum(64);
        infinity_7->step(1);
        infinity_7->textsize(10);
        infinity_7->textcolor(FL_BACKGROUND2_COLOR);
        infinity_7->callback((Fl_Callback*)cb_infinity_7);
      } // Fl_Value_Input* infinity_7
      { infinity_8 = new Fl_Value_Input(603, 286, 20, 15, "8");
        infinity_8->labelsize(10);
        infinity_8->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_8->minimum(-64);
        infinity_8->maximum(64);
        infinity_8->step(1);
        infinity_8->textsize(10);
        infinity_8->textcolor(FL_BACKGROUND2_COLOR);
        infinity_8->callback((Fl_Callback*)cb_infinity_8);
      } // Fl_Value_Input* infinity_8
      { infinity_rev = new Fl_Check_Button(485, 305, 15, 15, "Rev");
        infinity_rev->tooltip("Reverse left from right directions");
        infinity_rev->down_box(FL_BORDER_BOX);
        infinity_rev->labelsize(10);
        infinity_rev->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_rev->callback((Fl_Callback*)cb_infinity_rev, (void*)(2));
        infinity_rev->align(Fl_Align(FL_ALIGN_RIGHT));
      } // Fl_Check_Button* infinity_rev
      { infinity_stages = new Fl_Counter(569, 305, 46, 15, "Stages");
        infinity_stages->type(1);
        infinity_stages->labelsize(10);
        infinity_stages->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_stages->minimum(1);
        infinity_stages->maximum(12);
        infinity_stages->step(1);
        infinity_stages->value(1);
        infinity_stages->textsize(10);
        infinity_stages->callback((Fl_Callback*)cb_infinity_stages);
        infinity_stages->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Counter* infinity_stages
      { infinity_pan = new SliderW(531, 323, 100, 10, "AutoPan");
        infinity_pan->type(5);
        infinity_pan->box(FL_FLAT_BOX);
        infinity_pan->color((Fl_Color)178);
        infinity_pan->selection_color((Fl_Color)62);
        infinity_pan->labeltype(FL_NORMAL_LABEL);
        infinity_pan->labelfont(0);
        infinity_pan->labelsize(10);
        infinity_pan->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_pan->maximum(127);
        infinity_pan->step(1);
        infinity_pan->textcolor(FL_BACKGROUND2_COLOR);
        infinity_pan->callback((Fl_Callback*)cb_infinity_pan);
        infinity_pan->align(Fl_Align(FL_ALIGN_LEFT));
        infinity_pan->when(FL_WHEN_CHANGED);
      } // SliderW* infinity_pan
      { infinity_stdf = new SliderW(531, 335, 100, 10, "St.df");
        infinity_stdf->type(5);
        infinity_stdf->box(FL_FLAT_BOX);
        infinity_stdf->color((Fl_Color)178);
        infinity_stdf->selection_color((Fl_Color)62);
        infinity_stdf->labeltype(FL_NORMAL_LABEL);
        infinity_stdf->labelfont(0);
        infinity_stdf->labelsize(10);
        infinity_stdf->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_stdf->minimum(-64);
        infinity_stdf->maximum(64);
        infinity_stdf->step(1);
        infinity_stdf->textcolor(FL_BACKGROUND2_COLOR);
        infinity_stdf->callback((Fl_Callback*)cb_infinity_stdf);
        infinity_stdf->align(Fl_Align(FL_ALIGN_LEFT));
        infinity_stdf->when(FL_WHEN_CHANGED);
      } // SliderW* infinity_stdf
      { infinity_start = new SliderW(531, 347, 100, 10, "Start");
        infinity_start->type(5);
        infinity_start->box(FL_FLAT_BOX);
        infinity_start->color((Fl_Color)178);
        infinity_start->selection_color((Fl_Color)62);
        infinity_start->labeltype(FL_NORMAL_LABEL);
        infinity_start->labelfont(0);
        infinity_start->labelsize(10);
        infinity_start->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_start->maximum(127);
        infinity_start->step(1);
        infinity_start->textcolor(FL_BACKGROUND2_COLOR);
        infinity_start->callback((Fl_Callback*)cb_infinity_start);
        infinity_start->align(Fl_Align(FL_ALIGN_LEFT));
        infinity_start->when(FL_WHEN_CHANGED);
      } // SliderW* infinity_start
      { infinity_end = new SliderW(531, 359, 100, 10, "End");
        infinity_end->type(5);
        infinity_end->box(FL_FLAT_BOX);
        infinity_end->color((Fl_Color)178);
        infinity_end->selection_color((Fl_Color)62);
        infinity_end->labeltype(FL_NORMAL_LABEL);
        infinity_end->labelfont(0);
        infinity_end->labelsize(10);
        infinity_end->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_end->maximum(127);
        infinity_end->step(1);
        infinity_end->textcolor(FL_BACKGROUND2_COLOR);
        infinity_end->callback((Fl_Callback*)cb_infinity_end);
        infinity_end->align(Fl_Align(FL_ALIGN_LEFT));
        infinity_end->when(FL_WHEN_CHANGED);
      } // SliderW* infinity_end
      { infinity_rate = new SliderW(531, 371, 100, 10, "Tempo");
        infinity_rate->type(5);
        infinity_rate->box(FL_FLAT_BOX);
        infinity_rate->color((Fl_Color)178);
        infinity_rate->selection_color((Fl_Color)62);
        infinity_rate->labeltype(FL_NORMAL_LABEL);
        infinity_rate->labelfont(0);
        infinity_rate->labelsize(10);
        infinity_rate->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_rate->maximum(600);
        infinity_rate->step(1);
        infinity_rate->textcolor(FL_BACKGROUND2_COLOR);
        infinity_rate->callback((Fl_Callback*)cb_infinity_rate);
        infinity_rate->align(Fl_Align(FL_ALIGN_LEFT));
        infinity_rate->when(FL_WHEN_CHANGED);
      } // SliderW* infinity_rate
      { infinity_subdiv = new SliderW(531, 383, 100, 10, "Subdiv");
        infinity_subdiv->type(5);
        infinity_subdiv->box(FL_FLAT_BOX);
        infinity_subdiv->color((Fl_Color)178);
        infinity_subdiv->selection_color((Fl_Color)62);
        infinity_subdiv->labeltype(FL_NORMAL_LABEL);
        infinity_subdiv->labelfont(0);
        infinity_subdiv->labelsize(10);
        infinity_subdiv->labelcolor(FL_BACKGROUND2_COLOR);
        infinity_subdiv->minimum(-16);
        infinity_subdiv->maximum(16);
        infinity_subdiv->step(1);
        infinity_subdiv->textcolor(FL_BACKGROUND2_COLOR);
        infinity_subdiv->callback((Fl_Callback*)cb_infinity_subdiv);
        infinity_subdiv->align(Fl_Align(FL_ALIGN_LEFT));
        infinity_subdiv->when(FL_WHEN_CHANGED);
      } // SliderW* infinity_subdiv
      INFINIT->end();
    } // Fl_Group* INFINIT
    { Tuner = new Fl_Group(520, 24, 276, 58);
      Tuner->box(FL_UP_BOX);
      Tuner->color(FL_FOREGROUND_COLOR);
      Tuner->selection_color(FL_FOREGROUND_COLOR);
      Tuner->user_data((void*)(1));
      Tuner->align(Fl_Align(96|FL_ALIGN_INSIDE));
      { tuner_activar = new Fl_Light_Button(526, 28, 38, 18, "On");
        tuner_activar->tooltip("Enable Tuner - Shortcut \'T\'");
        tuner_activar->shortcut(0x74);
        tuner_activar->color((Fl_Color)62);
        tuner_activar->selection_color((Fl_Color)1);
        tuner_activar->labelsize(10);
        tuner_activar->callback((Fl_Callback*)cb_tuner_activar, (void*)(2));
        tuner_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* tuner_activar
      { TunerBar* o = tuner_bar = new TunerBar(586, 31, 205, 14);
        tuner_bar->box(FL_THIN_DOWN_BOX);
        tuner_bar->color(FL_DARK1);
        tuner_bar->selection_color(FL_RED);
        tuner_bar->labeltype(FL_NORMAL_LABEL);
        tuner_bar->labelfont(0);
        tuner_bar->labelsize(14);
        tuner_bar->labelcolor(FL_FOREGROUND_COLOR);
        tuner_bar->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        tuner_bar->when(FL_WHEN_RELEASE);
        o->minimum(-32);
        o->maximum(32);
        o->value(-32);
      } // TunerBar* tuner_bar
      { WNote = new Fl_Box(676, 57, 28, 22);
        WNote->labelfont(1);
        WNote->labelcolor(FL_BACKGROUND2_COLOR);
        WNote->user_data((void*)(7));
        WNote->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* WNote
      { WRfreq = new Fl_Box(588, 57, 76, 22);
        WRfreq->labelfont(1);
        WRfreq->labelcolor(FL_BACKGROUND2_COLOR);
        WRfreq->user_data((void*)(7));
        WRfreq->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* WRfreq
      { WNfreq = new Fl_Box(714, 57, 76, 22);
        WNfreq->labelfont(1);
        WNfreq->labelcolor(FL_BACKGROUND2_COLOR);
        WNfreq->user_data((void*)(7));
        WNfreq->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* WNfreq
      { PINCHO = new Fl_Box(673, 48, 32, 5, "@-4$8<");
        PINCHO->box(FL_FLAT_BOX);
        PINCHO->color((Fl_Color)55);
        PINCHO->labelcolor((Fl_Color)4);
        PINCHO->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* PINCHO
      { TUNER_LABEL = new Fl_Box(524, 63, 57, 14, "Tuner");
        TUNER_LABEL->labelfont(1);
        TUNER_LABEL->labelcolor(FL_BACKGROUND2_COLOR);
        TUNER_LABEL->user_data((void*)(7));
      } // Fl_Box* TUNER_LABEL
      Tuner->end();
    } // Fl_Group* Tuner
    { InOut = new Fl_Group(2, 24, 164, 170);
      InOut->box(FL_UP_BOX);
      InOut->color(FL_FOREGROUND_COLOR);
      InOut->selection_color(FL_FOREGROUND_COLOR);
      InOut->user_data((void*)(1));
      InOut->align(Fl_Align(96|FL_ALIGN_INSIDE));
      { ActivarGeneral = new Fl_Light_Button(6, 30, 52, 18, "FX On");
        ActivarGeneral->tooltip("Enable rakarrack - Shortcut \'R\'");
        ActivarGeneral->shortcut(0x72);
        ActivarGeneral->down_box(FL_BORDER_BOX);
        ActivarGeneral->color((Fl_Color)62);
        ActivarGeneral->selection_color((Fl_Color)1);
        ActivarGeneral->labelsize(10);
        ActivarGeneral->callback((Fl_Callback*)cb_ActivarGeneral, (void*)(2));
        ActivarGeneral->align(Fl_Align(68|FL_ALIGN_INSIDE));
        ActivarGeneral->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* ActivarGeneral
      { BostBut = new Fl_Button(132, 30, 30, 14, "+10dB");
        BostBut->tooltip("+10 dB Booster - Shortcut \'F10\'");
        BostBut->type(1);
        BostBut->shortcut(0xffc7);
        BostBut->color((Fl_Color)62);
        BostBut->labelsize(6);
        BostBut->callback((Fl_Callback*)cb_BostBut, (void*)(78));
      } // Fl_Button* BostBut
      { Balance = new SliderW(15, 48, 19, 126, "FX%");
        Balance->type(4);
        Balance->box(FL_FLAT_BOX);
        Balance->color(FL_FOREGROUND_COLOR);
        Balance->selection_color(FL_FOREGROUND_COLOR);
        Balance->labeltype(FL_NORMAL_LABEL);
        Balance->labelfont(0);
        Balance->labelsize(10);
        Balance->labelcolor((Fl_Color)31);
        Balance->minimum(100);
        Balance->maximum(0);
        Balance->step(1);
        Balance->value(100);
        Balance->textcolor(FL_BACKGROUND2_COLOR);
        Balance->callback((Fl_Callback*)cb_Balance);
        Balance->align(Fl_Align(FL_ALIGN_BOTTOM));
        Balance->when(FL_WHEN_CHANGED);
      } // SliderW* Balance
      { Nivel_Entrada = new SliderW(57, 48, 19, 126, "Input");
        Nivel_Entrada->type(4);
        Nivel_Entrada->box(FL_FLAT_BOX);
        Nivel_Entrada->color(FL_FOREGROUND_COLOR);
        Nivel_Entrada->selection_color(FL_FOREGROUND_COLOR);
        Nivel_Entrada->labeltype(FL_NORMAL_LABEL);
        Nivel_Entrada->labelfont(0);
        Nivel_Entrada->labelsize(10);
        Nivel_Entrada->labelcolor((Fl_Color)31);
        Nivel_Entrada->minimum(50);
        Nivel_Entrada->maximum(-50);
        Nivel_Entrada->step(1);
        Nivel_Entrada->textcolor(FL_BACKGROUND2_COLOR);
        Nivel_Entrada->callback((Fl_Callback*)cb_Nivel_Entrada);
        Nivel_Entrada->align(Fl_Align(FL_ALIGN_BOTTOM));
        Nivel_Entrada->when(FL_WHEN_CHANGED);
      } // SliderW* Nivel_Entrada
      { Nivel_Salida = new SliderW(115, 48, 19, 126, "Output");
        Nivel_Salida->tooltip("Shortcut \'F2\' decrease volume, \'F3\' Increase volume");
        Nivel_Salida->type(4);
        Nivel_Salida->box(FL_FLAT_BOX);
        Nivel_Salida->color(FL_FOREGROUND_COLOR);
        Nivel_Salida->selection_color(FL_FOREGROUND_COLOR);
        Nivel_Salida->labeltype(FL_NORMAL_LABEL);
        Nivel_Salida->labelfont(0);
        Nivel_Salida->labelsize(10);
        Nivel_Salida->labelcolor((Fl_Color)31);
        Nivel_Salida->minimum(50);
        Nivel_Salida->maximum(-50);
        Nivel_Salida->step(1);
        Nivel_Salida->textcolor(FL_BACKGROUND2_COLOR);
        Nivel_Salida->callback((Fl_Callback*)cb_Nivel_Salida);
        Nivel_Salida->align(Fl_Align(FL_ALIGN_BOTTOM));
        Nivel_Salida->when(FL_WHEN_CHANGED);
      } // SliderW* Nivel_Salida
      { input_vul = new NewVum(84, 50, 8, 122);
        input_vul->type(2);
        input_vul->box(FL_NO_BOX);
        input_vul->color((Fl_Color)178);
        input_vul->selection_color((Fl_Color)90);
        input_vul->labeltype(FL_NORMAL_LABEL);
        input_vul->labelfont(0);
        input_vul->labelsize(14);
        input_vul->labelcolor(FL_FOREGROUND_COLOR);
        input_vul->minimum(15);
        input_vul->maximum(-48);
        input_vul->step(1);
        input_vul->value(-48);
        input_vul->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        input_vul->when(FL_WHEN_NEVER);
      } // NewVum* input_vul
      { input_vur = new NewVum(93, 50, 8, 122);
        input_vur->type(2);
        input_vur->box(FL_NO_BOX);
        input_vur->color((Fl_Color)178);
        input_vur->selection_color((Fl_Color)90);
        input_vur->labeltype(FL_NORMAL_LABEL);
        input_vur->labelfont(0);
        input_vur->labelsize(14);
        input_vur->labelcolor(FL_FOREGROUND_COLOR);
        input_vur->minimum(15);
        input_vur->maximum(-48);
        input_vur->step(1);
        input_vur->value(-48);
        input_vur->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        input_vur->when(FL_WHEN_NEVER);
      } // NewVum* input_vur
      { output_vul = new NewVum(142, 50, 8, 122);
        output_vul->type(2);
        output_vul->box(FL_NO_BOX);
        output_vul->color((Fl_Color)178);
        output_vul->selection_color((Fl_Color)90);
        output_vul->labeltype(FL_NORMAL_LABEL);
        output_vul->labelfont(0);
        output_vul->labelsize(14);
        output_vul->labelcolor(FL_FOREGROUND_COLOR);
        output_vul->minimum(15);
        output_vul->maximum(-48);
        output_vul->step(1);
        output_vul->value(-48);
        output_vul->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        output_vul->when(FL_WHEN_NEVER);
      } // NewVum* output_vul
      { output_vur = new NewVum(151, 50, 8, 122);
        output_vur->type(2);
        output_vur->box(FL_NO_BOX);
        output_vur->color((Fl_Color)178);
        output_vur->selection_color((Fl_Color)90);
        output_vur->labeltype(FL_NORMAL_LABEL);
        output_vur->labelfont(0);
        output_vur->labelsize(14);
        output_vur->labelcolor(FL_FOREGROUND_COLOR);
        output_vur->minimum(15);
        output_vur->maximum(-48);
        output_vur->step(1);
        output_vur->value(-48);
        output_vur->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        output_vur->when(FL_WHEN_NEVER);
      } // NewVum* output_vur
      { LABEL_IO = new Fl_Box(60, 30, 62, 14, "In/Out");
        LABEL_IO->labelfont(1);
        LABEL_IO->labelcolor(FL_BACKGROUND2_COLOR);
        LABEL_IO->user_data((void*)(7));
        LABEL_IO->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* LABEL_IO
      InOut->end();
    } // Fl_Group* InOut
    { Midi = new Fl_Group(520, 85, 276, 52);
      Midi->box(FL_UP_BOX);
      Midi->color(FL_FOREGROUND_COLOR);
      Midi->selection_color(FL_FOREGROUND_COLOR);
      Midi->user_data((void*)(1));
      Midi->align(Fl_Align(96|FL_ALIGN_INSIDE));
      { midi_activar = new Fl_Light_Button(525, 89, 38, 18, "On");
        midi_activar->tooltip("Enable MIDI Converter - Shortcut \'M\'");
        midi_activar->shortcut(0x6d);
        midi_activar->color((Fl_Color)62);
        midi_activar->selection_color((Fl_Color)1);
        midi_activar->labelsize(10);
        midi_activar->callback((Fl_Callback*)cb_midi_activar, (void*)(2));
        midi_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* midi_activar
      { MIDIOctave = new Fl_Choice(624, 118, 37, 16, "Octave");
        MIDIOctave->down_box(FL_BORDER_BOX);
        MIDIOctave->selection_color(FL_FOREGROUND_COLOR);
        MIDIOctave->labelsize(8);
        MIDIOctave->labelcolor(FL_BACKGROUND2_COLOR);
        MIDIOctave->textsize(10);
        MIDIOctave->textcolor(FL_BACKGROUND2_COLOR);
        MIDIOctave->callback((Fl_Callback*)cb_MIDIOctave, (void*)(12));
        MIDIOctave->when(FL_WHEN_CHANGED);
        MIDIOctave->menu(menu_MIDIOctave);
      } // Fl_Choice* MIDIOctave
      { Midi_out_Counter = new Fl_Counter(601, 89, 60, 17, "Channel");
        Midi_out_Counter->type(1);
        Midi_out_Counter->color((Fl_Color)62);
        Midi_out_Counter->labelsize(9);
        Midi_out_Counter->labelcolor(FL_BACKGROUND2_COLOR);
        Midi_out_Counter->minimum(1);
        Midi_out_Counter->maximum(16);
        Midi_out_Counter->step(1);
        Midi_out_Counter->value(1);
        Midi_out_Counter->textsize(11);
        Midi_out_Counter->callback((Fl_Callback*)cb_Midi_out_Counter);
      } // Fl_Counter* Midi_out_Counter
      { Use_FFT = new Fl_Check_Button(571, 119, 15, 15, "FFT");
        Use_FFT->down_box(FL_BORDER_BOX);
        Use_FFT->labelsize(10);
        Use_FFT->labelcolor(FL_BACKGROUND2_COLOR);
        Use_FFT->callback((Fl_Callback*)cb_Use_FFT, (void*)(2));
        Use_FFT->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Check_Button* Use_FFT
      { Trig_Adj = new SliderW(667, 100, 117, 11, "Trigger");
        Trig_Adj->type(5);
        Trig_Adj->box(FL_FLAT_BOX);
        Trig_Adj->color((Fl_Color)178);
        Trig_Adj->selection_color((Fl_Color)62);
        Trig_Adj->labeltype(FL_NORMAL_LABEL);
        Trig_Adj->labelfont(0);
        Trig_Adj->labelsize(8);
        Trig_Adj->labelcolor(FL_BACKGROUND2_COLOR);
        Trig_Adj->minimum(2);
        Trig_Adj->maximum(60);
        Trig_Adj->step(1);
        Trig_Adj->textcolor(FL_BACKGROUND2_COLOR);
        Trig_Adj->callback((Fl_Callback*)cb_Trig_Adj);
        Trig_Adj->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
        Trig_Adj->when(FL_WHEN_CHANGED);
      } // SliderW* Trig_Adj
      { Vel_Adj = new SliderW(667, 119, 117, 11, "Velocity");
        Vel_Adj->type(5);
        Vel_Adj->box(FL_FLAT_BOX);
        Vel_Adj->color((Fl_Color)178);
        Vel_Adj->selection_color((Fl_Color)62);
        Vel_Adj->labeltype(FL_NORMAL_LABEL);
        Vel_Adj->labelfont(0);
        Vel_Adj->labelsize(8);
        Vel_Adj->labelcolor(FL_BACKGROUND2_COLOR);
        Vel_Adj->minimum(1);
        Vel_Adj->maximum(100);
        Vel_Adj->step(1);
        Vel_Adj->textcolor(FL_BACKGROUND2_COLOR);
        Vel_Adj->callback((Fl_Callback*)cb_Vel_Adj);
        Vel_Adj->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
        Vel_Adj->when(FL_WHEN_CHANGED);
      } // SliderW* Vel_Adj
      { Mled = new Fl_Box(571, 90, 10, 10);
        Mled->box(FL_ROUNDED_BOX);
        Mled->color(FL_RED);
        Mled->labelsize(18);
      } // Fl_Box* Mled
      { MIDI_LABEL = new Fl_Box(524, 117, 44, 14, "MIDI");
        MIDI_LABEL->labelfont(1);
        MIDI_LABEL->labelcolor(FL_BACKGROUND2_COLOR);
        MIDI_LABEL->callback((Fl_Callback*)cb_MIDI_LABEL, (void*)(7));
        MIDI_LABEL->when(FL_WHEN_NEVER);
      } // Fl_Box* MIDI_LABEL
      Midi->end();
    } // Fl_Group* Midi
    { Metro = new Fl_Group(520, 85, 276, 52);
      Metro->box(FL_UP_BOX);
      Metro->color(FL_FOREGROUND_COLOR);
      Metro->selection_color(FL_FOREGROUND_COLOR);
      Metro->user_data((void*)(1));
      Metro->align(Fl_Align(96|FL_ALIGN_INSIDE));
      { metro_activar = new Fl_Light_Button(525, 89, 38, 18, "On");
        metro_activar->tooltip("Enable Metronome - Shortcut \'M\'");
        metro_activar->shortcut(0x6d);
        metro_activar->color((Fl_Color)62);
        metro_activar->selection_color((Fl_Color)1);
        metro_activar->labelsize(10);
        metro_activar->callback((Fl_Callback*)cb_metro_activar, (void*)(2));
        metro_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* metro_activar
      { Fl_Choice* o = MetroBar = new Fl_Choice(624, 98, 37, 16, "Time Sig.");
        MetroBar->down_box(FL_BORDER_BOX);
        MetroBar->selection_color(FL_FOREGROUND_COLOR);
        MetroBar->labelsize(8);
        MetroBar->labelcolor(FL_BACKGROUND2_COLOR);
        MetroBar->textsize(10);
        MetroBar->textcolor(FL_BACKGROUND2_COLOR);
        MetroBar->callback((Fl_Callback*)cb_MetroBar, (void*)(12));
        o->menu(LOOPER->get_menu_looper_bar());
      } // Fl_Choice* MetroBar
      { Metro_Volume = new SliderW(667, 100, 117, 11, "Volume");
        Metro_Volume->type(5);
        Metro_Volume->box(FL_FLAT_BOX);
        Metro_Volume->color((Fl_Color)178);
        Metro_Volume->selection_color((Fl_Color)62);
        Metro_Volume->labeltype(FL_NORMAL_LABEL);
        Metro_Volume->labelfont(0);
        Metro_Volume->labelsize(8);
        Metro_Volume->labelcolor(FL_BACKGROUND2_COLOR);
        Metro_Volume->maximum(100);
        Metro_Volume->step(1);
        Metro_Volume->value(50);
        Metro_Volume->textcolor(FL_BACKGROUND2_COLOR);
        Metro_Volume->callback((Fl_Callback*)cb_Metro_Volume);
        Metro_Volume->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
        Metro_Volume->when(FL_WHEN_CHANGED);
      } // SliderW* Metro_Volume
      { Fl_Choice* o = MetroSound = new Fl_Choice(634, 118, 28, 16, "S");
        MetroSound->down_box(FL_BORDER_BOX);
        MetroSound->selection_color(FL_FOREGROUND_COLOR);
        MetroSound->labelsize(8);
        MetroSound->labelcolor(FL_BACKGROUND2_COLOR);
        MetroSound->textsize(10);
        MetroSound->textcolor(FL_BACKGROUND2_COLOR);
        MetroSound->callback((Fl_Callback*)cb_MetroSound, (void*)(12));
        o->menu(LOOPER->get_menu_looper_ms());
      } // Fl_Choice* MetroSound
      { Metro_Tempo = new SliderW(667, 119, 117, 11, "Tempo");
        Metro_Tempo->type(5);
        Metro_Tempo->box(FL_FLAT_BOX);
        Metro_Tempo->color((Fl_Color)178);
        Metro_Tempo->selection_color((Fl_Color)62);
        Metro_Tempo->labeltype(FL_NORMAL_LABEL);
        Metro_Tempo->labelfont(0);
        Metro_Tempo->labelsize(8);
        Metro_Tempo->labelcolor(FL_BACKGROUND2_COLOR);
        Metro_Tempo->minimum(20);
        Metro_Tempo->maximum(340);
        Metro_Tempo->step(1);
        Metro_Tempo->value(100);
        Metro_Tempo->textcolor(FL_BACKGROUND2_COLOR);
        Metro_Tempo->callback((Fl_Callback*)cb_Metro_Tempo);
        Metro_Tempo->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
        Metro_Tempo->when(FL_WHEN_CHANGED);
      } // SliderW* Metro_Tempo
      { Metro_Led = new Fl_Box(568, 90, 10, 10);
        Metro_Led->box(FL_ROUNDED_BOX);
        Metro_Led->color(FL_RED);
        Metro_Led->labelsize(18);
      } // Fl_Box* Metro_Led
      { Metro_Label = new Fl_Box(522, 117, 92, 14, "Metronome");
        Metro_Label->labelfont(1);
        Metro_Label->labelcolor(FL_BACKGROUND2_COLOR);
        Metro_Label->user_data((void*)(7));
        Metro_Label->when(FL_WHEN_NEVER);
      } // Fl_Box* Metro_Label
      Metro->end();
    } // Fl_Group* Metro
    { Presets = new Fl_Group(168, 24, 352, 170);
      Presets->box(FL_UP_BOX);
      Presets->color(FL_FOREGROUND_COLOR);
      Presets->selection_color(FL_FOREGROUND_COLOR);
      Presets->user_data((void*)(1));
      Presets->align(Fl_Align(96|FL_ALIGN_INSIDE));
      { PRESETS_LABEL = new Fl_Box(174, 28, 62, 14, "Presets");
        PRESETS_LABEL->labelfont(1);
        PRESETS_LABEL->labelcolor(FL_BACKGROUND2_COLOR);
        PRESETS_LABEL->user_data((void*)(7));
      } // Fl_Box* PRESETS_LABEL
      { L_B1 = new Fl_Button(418, 30, 22, 16, "1");
        L_B1->color((Fl_Color)62);
        L_B1->labelsize(10);
        L_B1->callback((Fl_Callback*)cb_L_B1, (void*)(77));
      } // Fl_Button* L_B1
      { L_B2 = new Fl_Button(442, 30, 22, 16, "2");
        L_B2->color((Fl_Color)62);
        L_B2->labelsize(10);
        L_B2->callback((Fl_Callback*)cb_L_B2, (void*)(77));
      } // Fl_Button* L_B2
      { L_B3 = new Fl_Button(466, 30, 22, 16, "3");
        L_B3->color((Fl_Color)62);
        L_B3->labelsize(10);
        L_B3->callback((Fl_Callback*)cb_L_B3, (void*)(77));
      } // Fl_Button* L_B3
      { L_B4 = new Fl_Button(490, 30, 22, 16, "U");
        L_B4->color((Fl_Color)62);
        L_B4->labelsize(10);
        L_B4->callback((Fl_Callback*)cb_L_B4, (void*)(77));
      } // Fl_Button* L_B4
      { S_new = new Fl_Button(174, 50, 64, 18, "New");
        S_new->tooltip("New preset - Shortcut \'N\'");
        S_new->shortcut(0x6e);
        S_new->color((Fl_Color)62);
        S_new->labelsize(12);
        S_new->callback((Fl_Callback*)cb_S_new, (void*)(77));
      } // Fl_Button* S_new
      { L_preset = new Fl_Button(240, 50, 64, 18, "Load");
        L_preset->tooltip("Open load preset window - Shortcut \'L\'");
        L_preset->shortcut(0x6c);
        L_preset->color((Fl_Color)62);
        L_preset->labelsize(12);
        L_preset->callback((Fl_Callback*)cb_L_preset, (void*)(77));
      } // Fl_Button* L_preset
      { S_preset = new Fl_Button(306, 50, 64, 18, "Save");
        S_preset->tooltip("Open save preset window - Shortcut \'S\'");
        S_preset->shortcut(0x73);
        S_preset->color((Fl_Color)62);
        S_preset->labelsize(12);
        S_preset->callback((Fl_Callback*)cb_S_preset, (void*)(77));
      } // Fl_Button* S_preset
      { Compare = new Fl_Light_Button(373, 50, 72, 18, "Compare");
        Compare->tooltip("Compare to bank preset - Shortcut \'P\'");
        Compare->shortcut(0x70);
        Compare->color((Fl_Color)62);
        Compare->selection_color((Fl_Color)1);
        Compare->labelsize(12);
        Compare->callback((Fl_Callback*)cb_Compare, (void*)(7));
        Compare->align(Fl_Align(68|FL_ALIGN_INSIDE));
        Compare->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* Compare
      { B_preset = new Fl_Button(448, 50, 64, 18, "Bank");
        B_preset->tooltip("Open bank window - Shortcut \'B\'");
        B_preset->shortcut(0x62);
        B_preset->color((Fl_Color)62);
        B_preset->labelsize(12);
        B_preset->callback((Fl_Callback*)cb_B_preset, (void*)(77));
      } // Fl_Button* B_preset
      { Fl_Input* o = WPreset_Name = new Fl_Input(174, 72, 338, 30);
        WPreset_Name->color((Fl_Color)62);
        WPreset_Name->labelcolor(FL_BACKGROUND2_COLOR);
        WPreset_Name->textsize(24);
        WPreset_Name->textcolor(FL_BACKGROUND2_COLOR);
        WPreset_Name->callback((Fl_Callback*)cb_WPreset_Name);
        WPreset_Name->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        o->maximum_size(22);
      } // Fl_Input* WPreset_Name
      { Preset_Counter = new Fl_Counter(174, 106, 60, 20, "Preset");
        Preset_Counter->tooltip("Next or previous preset - Shortcut +(plus) or -(minus)");
        Preset_Counter->type(1);
        Preset_Counter->color((Fl_Color)62);
        Preset_Counter->selection_color(FL_FOREGROUND_COLOR);
        Preset_Counter->labelsize(11);
        Preset_Counter->labelcolor(FL_BACKGROUND2_COLOR);
        Preset_Counter->minimum(1);
        Preset_Counter->maximum(60);
        Preset_Counter->step(1);
        Preset_Counter->value(1);
        Preset_Counter->textsize(11);
        Preset_Counter->callback((Fl_Callback*)cb_Preset_Counter);
      } // Fl_Counter* Preset_Counter
      { DAuthor = new Fl_Box(246, 107, 266, 18);
        DAuthor->box(FL_DOWN_BOX);
        DAuthor->color((Fl_Color)62);
        DAuthor->user_data((void*)(7));
        DAuthor->align(Fl_Align(100|FL_ALIGN_INSIDE));
      } // Fl_Box* DAuthor
      { RandomP = new Fl_Button(175, 141, 59, 14, "Random");
        RandomP->tooltip("Random Preset selection - Shortcut \'F7\'");
        RandomP->shortcut(0xffc4);
        RandomP->color((Fl_Color)62);
        RandomP->labelsize(10);
        RandomP->callback((Fl_Callback*)cb_RandomP, (void*)(77));
        RandomP->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        RandomP->when(FL_WHEN_RELEASE_ALWAYS);
      } // Fl_Button* RandomP
      { Open_Order = new Fl_Button(247, 132, 195, 24, "Put Order in your Rack");
        Open_Order->tooltip("Open preset order window - Shortcut \'O\'");
        Open_Order->shortcut(0x6f);
        Open_Order->color((Fl_Color)62);
        Open_Order->callback((Fl_Callback*)cb_Open_Order, (void*)(77));
        Open_Order->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        Open_Order->when(FL_WHEN_RELEASE_ALWAYS);
      } // Fl_Button* Open_Order
      { Etit = new Fl_Button(174, 160, 340, 28);
        Etit->tooltip("Click here to toggle analyzer ON/OFF");
        Etit->type(1);
        Etit->box(FL_NO_BOX);
        Etit->labeltype(FL_EMBOSSED_LABEL);
        Etit->labelfont(1);
        Etit->labelsize(21);
        Etit->callback((Fl_Callback*)cb_Etit);
        Etit->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      } // Fl_Button* Etit
      { Analy = new Analyzer(174, 160, 340, 28);
        Analy->tooltip("Click here to toggle analyzer ON/OFF");
        Analy->box(FL_NO_BOX);
        Analy->color(FL_BACKGROUND_COLOR);
        Analy->selection_color(FL_BACKGROUND_COLOR);
        Analy->labeltype(FL_EMBOSSED_LABEL);
        Analy->labelfont(1);
        Analy->labelsize(22);
        Analy->labelcolor(FL_FOREGROUND_COLOR);
        Analy->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        Analy->when(FL_WHEN_RELEASE);
        Analy->hide();
      } // Analyzer* Analy
      { HideUE = new Fl_Button(445, 137, 32, 18, "Hide");
        HideUE->tooltip("Hide/Show unused Effects - Shortcut \'F9\'");
        HideUE->shortcut(0xffc6);
        HideUE->color((Fl_Color)62);
        HideUE->labelsize(10);
        HideUE->callback((Fl_Callback*)cb_HideUE, (void*)(77));
        HideUE->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        HideUE->when(FL_WHEN_RELEASE_ALWAYS);
      } // Fl_Button* HideUE
      { SwitchMod = new Fl_Button(480, 137, 32, 18, "Sw");
        SwitchMod->tooltip("Switch between Midi Converter &\nMetronome - Shortcut \'F8\'");
        SwitchMod->shortcut(0xffc5);
        SwitchMod->color((Fl_Color)62);
        SwitchMod->labelsize(10);
        SwitchMod->callback((Fl_Callback*)cb_SwitchMod, (void*)(77));
        SwitchMod->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        SwitchMod->when(FL_WHEN_RELEASE_ALWAYS);
      } // Fl_Button* SwitchMod
      Presets->end();
    } // Fl_Group* Presets
    { Tap = new Fl_Group(520, 140, 276, 54);
      Tap->box(FL_UP_BOX);
      Tap->color(FL_FOREGROUND_COLOR);
      Tap->selection_color(FL_FOREGROUND_COLOR);
      Tap->user_data((void*)(1));
      Tap->align(Fl_Align(96|FL_ALIGN_INSIDE));
      { Tap_activar = new Fl_Light_Button(525, 144, 38, 18, "On");
        Tap_activar->tooltip("Enable Tap Tempo - Shortcut \'H\'");
        Tap_activar->shortcut(0x68);
        Tap_activar->color((Fl_Color)62);
        Tap_activar->selection_color((Fl_Color)1);
        Tap_activar->labelsize(10);
        Tap_activar->callback((Fl_Callback*)cb_Tap_activar, (void*)(2));
        Tap_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* Tap_activar
      { T_SEL = new Fl_Choice(600, 145, 87, 15, "Input");
        T_SEL->down_box(FL_BORDER_BOX);
        T_SEL->labelsize(10);
        T_SEL->labelcolor(FL_BACKGROUND2_COLOR);
        T_SEL->textsize(10);
        T_SEL->textcolor(FL_BACKGROUND2_COLOR);
        T_SEL->callback((Fl_Callback*)cb_T_SEL, (void*)(12));
        T_SEL->menu(menu_T_SEL);
      } // Fl_Choice* T_SEL
      { T_SET = new Fl_Choice(714, 145, 76, 15, "Set");
        T_SET->down_box(FL_BORDER_BOX);
        T_SET->labelsize(10);
        T_SET->labelcolor(FL_BACKGROUND2_COLOR);
        T_SET->textsize(10);
        T_SET->textcolor(FL_BACKGROUND2_COLOR);
        T_SET->callback((Fl_Callback*)cb_T_SET, (void*)(12));
        T_SET->menu(menu_T_SET);
      } // Fl_Choice* T_SET
      { T_Apply = new Fl_Button(628, 172, 38, 15, "Apply");
        T_Apply->shortcut(0x67);
        T_Apply->labelsize(10);
        T_Apply->callback((Fl_Callback*)cb_T_Apply, (void*)(77));
      } // Fl_Button* T_Apply
      { T_BUT = new Fl_Button(671, 165, 38, 23, "Tap");
        T_BUT->tooltip("Tap tempo set - Shortcut \'G\'");
        T_BUT->shortcut(0x67);
        T_BUT->labelsize(12);
        T_BUT->callback((Fl_Callback*)cb_T_BUT, (void*)(77));
      } // Fl_Button* T_BUT
      { TAP_LABEL = new Fl_Box(524, 170, 93, 14, "Tap Tempo");
        TAP_LABEL->labelfont(1);
        TAP_LABEL->labelcolor(FL_BACKGROUND2_COLOR);
        TAP_LABEL->user_data((void*)(7));
        TAP_LABEL->when(FL_WHEN_NEVER);
      } // Fl_Box* TAP_LABEL
      { T_DIS = new Fl_Value_Input(719, 165, 70, 22);
        T_DIS->minimum(20);
        T_DIS->maximum(360);
        T_DIS->step(1);
        T_DIS->value(100);
        T_DIS->textcolor(FL_BACKGROUND2_COLOR);
        T_DIS->callback((Fl_Callback*)cb_T_DIS);
        T_DIS->align(Fl_Align(FL_ALIGN_CENTER));
      } // Fl_Value_Input* T_DIS
      Tap->end();
    } // Fl_Group* Tap
    Principal->size_range(320, 240, 3200, 2400);
    Principal->end();
    Principal->resizable(Principal);
  } // Fl_Double_Window* Principal
  { BankWindow = new Fl_Double_Window(800, 600);
    BankWindow->color((Fl_Color)4);
    BankWindow->selection_color(FL_BACKGROUND2_COLOR);
    BankWindow->callback((Fl_Callback*)cb_BankWindow, (void*)(this));
    { Fondo3 = new Fl_Box(1, 1, 800, 600);
    } // Fl_Box* Fondo3
    { MenuB = new Fl_Menu_Bar(0, 0, 253, 20);
      MenuB->box(FL_NO_BOX);
      MenuB->color((Fl_Color)55);
      MenuB->selection_color(FL_BACKGROUND2_COLOR);
      MenuB->labelcolor(FL_BACKGROUND2_COLOR);
      MenuB->textcolor(FL_BACKGROUND2_COLOR);
      MenuB->align(Fl_Align(96|FL_ALIGN_INSIDE));
      MenuB->menu(menu_MenuB);
    } // Fl_Menu_Bar* MenuB
    { B_B1 = new Fl_Button(258, 14, 32, 24, "1");
      B_B1->color((Fl_Color)62);
      B_B1->labelsize(10);
      B_B1->callback((Fl_Callback*)cb_B_B1, (void*)(77));
    } // Fl_Button* B_B1
    { B_B2 = new Fl_Button(298, 14, 32, 24, "2");
      B_B2->color((Fl_Color)62);
      B_B2->labelsize(10);
      B_B2->callback((Fl_Callback*)cb_B_B2, (void*)(77));
    } // Fl_Button* B_B2
    { B_B3 = new Fl_Button(338, 14, 32, 24, "3");
      B_B3->color((Fl_Color)62);
      B_B3->labelsize(10);
      B_B3->callback((Fl_Callback*)cb_B_B3, (void*)(77));
    } // Fl_Button* B_B3
    { B_B4 = new Fl_Button(378, 14, 32, 24, "U");
      B_B4->color((Fl_Color)62);
      B_B4->labelsize(10);
      B_B4->callback((Fl_Callback*)cb_B_B4, (void*)(77));
    } // Fl_Button* B_B4
    { CH_UB = new Fl_Choice(549, 14, 117, 24, "User Banks       ");
      CH_UB->down_box(FL_BORDER_BOX);
      CH_UB->selection_color(FL_BACKGROUND2_COLOR);
      CH_UB->labelcolor(FL_BACKGROUND2_COLOR);
      CH_UB->textcolor(FL_BACKGROUND2_COLOR);
      CH_UB->callback((Fl_Callback*)cb_CH_UB);
      CH_UB->when(FL_WHEN_RELEASE_ALWAYS);
    } // Fl_Choice* CH_UB
    { ob = new Fl_Group(0, 60, 800, 540);
      ob->labelsize(18);
      ob->end();
    } // Fl_Group* ob
    BankWindow->size_range(640, 480, 3200, 2400);
    BankWindow->end();
    BankWindow->resizable(BankWindow);
  } // Fl_Double_Window* BankWindow
  { Order = new Fl_Double_Window(500, 400);
    Order->color((Fl_Color)178);
    Order->callback((Fl_Callback*)cb_Order, (void*)(this));
    { Fondo1 = new Fl_Box(1, 1, 600, 400);
    } // Fl_Box* Fondo1
    { O_TITLE = new Fl_Box(25, 3, 438, 37, "Put Order in your Rack");
      O_TITLE->labelfont(1);
      O_TITLE->labelsize(33);
      O_TITLE->labelcolor(FL_BACKGROUND2_COLOR);
    } // Fl_Box* O_TITLE
    { Avail_Bro = new Fl_Browser(15, 50, 175, 225);
      Avail_Bro->type(2);
      Avail_Bro->labelsize(18);
      Avail_Bro->textsize(18);
      Avail_Bro->textcolor(FL_BACKGROUND2_COLOR);
      Avail_Bro->user_data((void*)(99));
    } // Fl_Browser* Avail_Bro
    { Pon = new Fl_Button(200, 145, 50, 25, "@<->");
      Pon->labelsize(18);
      Pon->callback((Fl_Callback*)cb_Pon);
    } // Fl_Button* Pon
    { Order_Bro = new Fl_Browser(260, 50, 175, 225);
      Order_Bro->type(2);
      Order_Bro->labelsize(18);
      Order_Bro->textsize(18);
      Order_Bro->textcolor(FL_BACKGROUND2_COLOR);
    } // Fl_Browser* Order_Bro
    { Sube = new Fl_Button(442, 120, 50, 25, "@$2->");
      Sube->labelsize(18);
      Sube->callback((Fl_Callback*)cb_Sube);
    } // Fl_Button* Sube
    { Baja = new Fl_Button(442, 160, 50, 25, "@$8->");
      Baja->labelsize(18);
      Baja->callback((Fl_Callback*)cb_Baja);
    } // Fl_Button* Baja
    { Filters = new Fl_Group(15, 280, 180, 110);
      { Fil0 = new Fl_Button(15, 284, 177, 15, "All");
        Fil0->type(102);
        Fil0->labelsize(10);
        Fil0->callback((Fl_Callback*)cb_Fil0);
        Fil0->when(FL_WHEN_CHANGED);
      } // Fl_Button* Fil0
      { Fil1 = new Fl_Button(105, 304, 86, 15, "Distortion");
        Fil1->type(102);
        Fil1->labelsize(10);
        Fil1->callback((Fl_Callback*)cb_Fil1);
        Fil1->when(FL_WHEN_CHANGED);
      } // Fl_Button* Fil1
      { Fil2 = new Fl_Button(15, 304, 78, 15, "Modulation");
        Fil2->type(102);
        Fil2->labelsize(10);
        Fil2->callback((Fl_Callback*)cb_Fil2);
        Fil2->when(FL_WHEN_CHANGED);
      } // Fl_Button* Fil2
      { Fil4 = new Fl_Button(105, 325, 86, 15, "Time");
        Fil4->type(102);
        Fil4->labelsize(10);
        Fil4->callback((Fl_Callback*)cb_Fil4);
        Fil4->when(FL_WHEN_CHANGED);
      } // Fl_Button* Fil4
      { Fil8 = new Fl_Button(15, 324, 78, 15, "Emulation");
        Fil8->type(102);
        Fil8->labelsize(10);
        Fil8->callback((Fl_Callback*)cb_Fil8);
        Fil8->when(FL_WHEN_CHANGED);
      } // Fl_Button* Fil8
      { Fil16 = new Fl_Button(105, 345, 86, 15, "Filters");
        Fil16->type(102);
        Fil16->labelsize(10);
        Fil16->callback((Fl_Callback*)cb_Fil16);
        Fil16->when(FL_WHEN_CHANGED);
      } // Fl_Button* Fil16
      { Fil32 = new Fl_Button(15, 344, 78, 15, "Dynamics");
        Fil32->type(102);
        Fil32->labelsize(10);
        Fil32->callback((Fl_Callback*)cb_Fil32);
        Fil32->when(FL_WHEN_CHANGED);
      } // Fl_Button* Fil32
      { Fil64 = new Fl_Button(105, 365, 86, 15, "Processing && EQ");
        Fil64->type(102);
        Fil64->labelsize(10);
        Fil64->callback((Fl_Callback*)cb_Fil64);
        Fil64->when(FL_WHEN_CHANGED);
      } // Fl_Button* Fil64
      { Fil128 = new Fl_Button(15, 365, 78, 15, "Synthesis");
        Fil128->type(102);
        Fil128->labelsize(10);
        Fil128->callback((Fl_Callback*)cb_Fil128);
        Fil128->when(FL_WHEN_CHANGED);
      } // Fl_Button* Fil128
      Filters->end();
    } // Fl_Group* Filters
    { Order_DeacHide = new Fl_Check_Button(420, 286, 23, 20, "Hide Unused Effect Widgets");
      Order_DeacHide->down_box(FL_DOWN_BOX);
      Order_DeacHide->labelsize(11);
      Order_DeacHide->labelcolor(FL_BACKGROUND2_COLOR);
      Order_DeacHide->callback((Fl_Callback*)cb_Order_DeacHide);
      Order_DeacHide->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* Order_DeacHide
    { ok_order = new Fl_Button(333, 349, 72, 26, "Ok");
      ok_order->callback((Fl_Callback*)cb_ok_order);
    } // Fl_Button* ok_order
    { Cancel_order = new Fl_Button(415, 349, 72, 26, "Cancel");
      Cancel_order->callback((Fl_Callback*)cb_Cancel_order);
    } // Fl_Button* Cancel_order
    Order->size_range(500, 400, 3200, 2400);
    Order->end();
    Order->resizable(Order);
  } // Fl_Double_Window* Order
  { Settings = new Fl_Double_Window(640, 580);
    Settings->color((Fl_Color)4);
    Settings->callback((Fl_Callback*)cb_Settings, (void*)(this));
    { Fondo2 = new Fl_Box(1, 1, 640, 580);
    } // Fl_Box* Fondo2
    { STabs = new Fl_Tabs(0, 0, 636, 606);
      STabs->user_data((void*)(1));
      { Look = new Fl_Group(5, 26, 630, 554, "Look");
        Look->box(FL_DOWN_FRAME);
        Look->labelfont(1);
        Look->labelcolor(FL_BACKGROUND2_COLOR);
        Look->user_data((void*)(1));
        Look->align(Fl_Align(FL_ALIGN_LEFT));
        Look->hide();
        { Fondo6 = new Fl_Box(5, 26, 630, 554);
        } // Fl_Box* Fondo6
        { scheme_ch = new Fl_Choice(60, 50, 88, 20, "Schema");
          scheme_ch->down_box(FL_BORDER_BOX);
          scheme_ch->labelsize(11);
          scheme_ch->labelcolor(FL_BACKGROUND2_COLOR);
          scheme_ch->textsize(12);
          scheme_ch->textcolor(FL_BACKGROUND2_COLOR);
          scheme_ch->callback((Fl_Callback*)cb_scheme_ch);
          scheme_ch->menu(menu_scheme_ch);
        } // Fl_Choice* scheme_ch
        { Font_Bro = new Fl_Browser(20, 100, 400, 225, "Font");
          Font_Bro->type(1);
          Font_Bro->labelsize(11);
          Font_Bro->labelcolor(FL_BACKGROUND2_COLOR);
          Font_Bro->callback((Fl_Callback*)cb_Font_Bro);
          Font_Bro->align(Fl_Align(FL_ALIGN_TOP));
          Font_Bro->when(FL_WHEN_CHANGED);
        } // Fl_Browser* Font_Bro
        { FSLabel = new Fl_Box(10, 333, 60, 17, "Font Size");
          FSLabel->labelsize(11);
          FSLabel->labelcolor(FL_BACKGROUND2_COLOR);
        } // Fl_Box* FSLabel
        { FSless = new Fl_Button(78, 330, 30, 20, "-");
          FSless->callback((Fl_Callback*)cb_FSless, (void*)(77));
        } // Fl_Button* FSless
        { FSplus = new Fl_Button(113, 330, 30, 20, "+");
          FSplus->callback((Fl_Callback*)cb_FSplus, (void*)(77));
        } // Fl_Button* FSplus
        { FSReset = new Fl_Button(148, 330, 57, 20, "Reset");
          FSReset->callback((Fl_Callback*)cb_FSReset, (void*)(77));
        } // Fl_Button* FSReset
        { CLLabel = new Fl_Box(10, 358, 40, 19, "Colors");
          CLLabel->labelsize(11);
          CLLabel->labelcolor(FL_BACKGROUND2_COLOR);
        } // Fl_Box* CLLabel
        { B_C = new Fl_Button(15, 380, 90, 25, "Buttons");
          B_C->callback((Fl_Callback*)cb_B_C, (void*)(77));
        } // Fl_Button* B_C
        { A_C = new Fl_Button(120, 380, 90, 25, "Labels");
          A_C->callback((Fl_Callback*)cb_A_C, (void*)(77));
        } // Fl_Button* A_C
        { L_C = new Fl_Button(225, 380, 90, 25, "Leds");
          L_C->callback((Fl_Callback*)cb_L_C, (void*)(77));
        } // Fl_Button* L_C
        { K_C = new Fl_Button(330, 380, 90, 25, "Background");
          K_C->callback((Fl_Callback*)cb_K_C, (void*)(77));
        } // Fl_Button* K_C
        { Enable_Back = new Fl_Check_Button(162, 409, 23, 20, "Enable Background Image");
          Enable_Back->down_box(FL_DOWN_BOX);
          Enable_Back->labelsize(11);
          Enable_Back->labelcolor(FL_BACKGROUND2_COLOR);
          Enable_Back->callback((Fl_Callback*)cb_Enable_Back);
          Enable_Back->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* Enable_Back
        { BackFiname = new Fl_File_Input(10, 445, 390, 30, "Background Image");
          BackFiname->labelsize(11);
          BackFiname->labelcolor(FL_BACKGROUND2_COLOR);
          BackFiname->textsize(12);
          BackFiname->textcolor(FL_BACKGROUND2_COLOR);
          BackFiname->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_File_Input* BackFiname
        { BI_Browser = new Fl_Button(410, 455, 65, 20, "Browse");
          BI_Browser->callback((Fl_Callback*)cb_BI_Browser, (void*)(77));
        } // Fl_Button* BI_Browser
        { Enable_DeacHide = new Fl_Check_Button(169, 500, 23, 20, "Hide Unused Effect Widgets");
          Enable_DeacHide->down_box(FL_DOWN_BOX);
          Enable_DeacHide->labelsize(11);
          Enable_DeacHide->labelcolor(FL_BACKGROUND2_COLOR);
          Enable_DeacHide->callback((Fl_Callback*)cb_Enable_DeacHide);
          Enable_DeacHide->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* Enable_DeacHide
        Look->end();
      } // Fl_Group* Look
      { AUDIO_SET = new Fl_Group(0, 26, 635, 554, "Audio");
        AUDIO_SET->box(FL_DOWN_FRAME);
        AUDIO_SET->labelfont(1);
        AUDIO_SET->labelcolor(FL_BACKGROUND2_COLOR);
        AUDIO_SET->user_data((void*)(1));
        AUDIO_SET->align(Fl_Align(FL_ALIGN_LEFT));
        { Fondo7 = new Fl_Box(0, 26, 635, 554);
        } // Fl_Box* Fondo7
        { INSTATE = new Fl_Check_Button(96, 29, 23, 20, "FX On at start");
          INSTATE->down_box(FL_DOWN_BOX);
          INSTATE->labelsize(11);
          INSTATE->labelcolor(FL_BACKGROUND2_COLOR);
          INSTATE->callback((Fl_Callback*)cb_INSTATE);
          INSTATE->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* INSTATE
        { Filter_DC = new Fl_Check_Button(135, 53, 23, 20, "Filter Input DC Offset");
          Filter_DC->down_box(FL_DOWN_BOX);
          Filter_DC->labelsize(11);
          Filter_DC->labelcolor(FL_BACKGROUND2_COLOR);
          Filter_DC->callback((Fl_Callback*)cb_Filter_DC);
          Filter_DC->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* Filter_DC
        { Pre_Serve = new Fl_Check_Button(259, 77, 21, 20, "Preserve Gain/Master when Preset change");
          Pre_Serve->down_box(FL_DOWN_BOX);
          Pre_Serve->labelsize(11);
          Pre_Serve->labelcolor(FL_BACKGROUND2_COLOR);
          Pre_Serve->callback((Fl_Callback*)cb_Pre_Serve);
          Pre_Serve->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* Pre_Serve
        { Update_TAP = new Fl_Check_Button(239, 100, 21, 20, "Update TapTempo when Preset change");
          Update_TAP->down_box(FL_DOWN_BOX);
          Update_TAP->labelsize(11);
          Update_TAP->labelcolor(FL_BACKGROUND2_COLOR);
          Update_TAP->callback((Fl_Callback*)cb_Update_TAP);
          Update_TAP->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* Update_TAP
        { UPSAMPLE_C = new Fl_Check_Button(83, 124, 23, 20, "Upsampling");
          UPSAMPLE_C->down_box(FL_DOWN_BOX);
          UPSAMPLE_C->labelsize(11);
          UPSAMPLE_C->labelcolor(FL_BACKGROUND2_COLOR);
          UPSAMPLE_C->callback((Fl_Callback*)cb_UPSAMPLE_C);
          UPSAMPLE_C->align(Fl_Align(FL_ALIGN_LEFT));
          UPSAMPLE_C->when(FL_WHEN_CHANGED);
        } // Fl_Check_Button* UPSAMPLE_C
        { Upr_Amo = new Fl_Choice(145, 126, 47, 18, "Amount");
          Upr_Amo->down_box(FL_BORDER_BOX);
          Upr_Amo->labelsize(10);
          Upr_Amo->labelcolor(FL_BACKGROUND2_COLOR);
          Upr_Amo->textsize(10);
          Upr_Amo->textcolor(FL_BACKGROUND2_COLOR);
          Upr_Amo->callback((Fl_Callback*)cb_Upr_Amo);
          Upr_Amo->menu(menu_Upr_Amo);
        } // Fl_Choice* Upr_Amo
        { Upr_Qual = new Fl_Choice(217, 126, 72, 18, "Up");
          Upr_Qual->down_box(FL_BORDER_BOX);
          Upr_Qual->labelsize(10);
          Upr_Qual->labelcolor(FL_BACKGROUND2_COLOR);
          Upr_Qual->textsize(10);
          Upr_Qual->textcolor(FL_BACKGROUND2_COLOR);
          Upr_Qual->callback((Fl_Callback*)cb_Upr_Qual);
          Upr_Qual->menu(menu_Upr_Qual);
        } // Fl_Choice* Upr_Qual
        { Fl_Choice* o = Downr_Qual = new Fl_Choice(329, 126, 73, 18, "Down");
          Downr_Qual->down_box(FL_BORDER_BOX);
          Downr_Qual->labelsize(10);
          Downr_Qual->labelcolor(FL_BACKGROUND2_COLOR);
          Downr_Qual->textsize(10);
          Downr_Qual->textcolor(FL_BACKGROUND2_COLOR);
          Downr_Qual->callback((Fl_Callback*)cb_Downr_Qual);
          o->menu(menu_Upr_Qual);
        } // Fl_Choice* Downr_Qual
        { L_SIZE = new Fl_Counter(133, 149, 47, 18, "Looper Size Seconds     ");
          L_SIZE->type(1);
          L_SIZE->labelsize(10);
          L_SIZE->labelcolor(FL_BACKGROUND2_COLOR);
          L_SIZE->minimum(0.5);
          L_SIZE->maximum(30);
          L_SIZE->step(0.5);
          L_SIZE->value(0.5);
          L_SIZE->textsize(10);
          L_SIZE->callback((Fl_Callback*)cb_L_SIZE);
          L_SIZE->align(Fl_Align(FL_ALIGN_LEFT));
          L_SIZE->when(FL_WHEN_RELEASE);
        } // Fl_Counter* L_SIZE
        { LM_Volume = new Fl_Counter(338, 149, 47, 18, "Looper Metronome Volume  ");
          LM_Volume->type(1);
          LM_Volume->labelsize(10);
          LM_Volume->labelcolor(FL_BACKGROUND2_COLOR);
          LM_Volume->minimum(0);
          LM_Volume->maximum(100);
          LM_Volume->step(1);
          LM_Volume->value(50);
          LM_Volume->textsize(10);
          LM_Volume->callback((Fl_Callback*)cb_LM_Volume);
          LM_Volume->align(Fl_Align(FL_ALIGN_LEFT));
          LM_Volume->when(FL_WHEN_RELEASE);
        } // Fl_Counter* LM_Volume
        { Har_Qual = new Fl_Choice(132, 173, 47, 18, "Harmonizer Quality      ");
          Har_Qual->down_box(FL_BORDER_BOX);
          Har_Qual->labelsize(10);
          Har_Qual->labelcolor(FL_BACKGROUND2_COLOR);
          Har_Qual->textsize(10);
          Har_Qual->textcolor(FL_BACKGROUND2_COLOR);
          Har_Qual->callback((Fl_Callback*)cb_Har_Qual);
          Har_Qual->menu(menu_Har_Qual);
        } // Fl_Choice* Har_Qual
        { Ste_Qual = new Fl_Choice(296, 173, 47, 18, "StereoHarm Quality");
          Ste_Qual->down_box(FL_BORDER_BOX);
          Ste_Qual->labelsize(10);
          Ste_Qual->labelcolor(FL_BACKGROUND2_COLOR);
          Ste_Qual->textsize(10);
          Ste_Qual->textcolor(FL_BACKGROUND2_COLOR);
          Ste_Qual->callback((Fl_Callback*)cb_Ste_Qual);
          Ste_Qual->menu(menu_Ste_Qual);
        } // Fl_Choice* Ste_Qual
        { Voc_Bands = new Fl_Choice(132, 196, 47, 18, "Vocoder Bands              ");
          Voc_Bands->down_box(FL_BORDER_BOX);
          Voc_Bands->labelsize(10);
          Voc_Bands->labelcolor(FL_BACKGROUND2_COLOR);
          Voc_Bands->textsize(10);
          Voc_Bands->textcolor(FL_BACKGROUND2_COLOR);
          Voc_Bands->callback((Fl_Callback*)cb_Voc_Bands);
          Voc_Bands->menu(menu_Voc_Bands);
        } // Fl_Choice* Voc_Bands
        { FLPosition = new Fl_Check_Button(186, 222, 23, 20, "Limiter before Output Volume");
          FLPosition->down_box(FL_DOWN_BOX);
          FLPosition->labelsize(11);
          FLPosition->labelcolor(FL_BACKGROUND2_COLOR);
          FLPosition->callback((Fl_Callback*)cb_FLPosition);
          FLPosition->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* FLPosition
        { DB6B = new Fl_Check_Button(324, 222, 23, 20, "+6dB Final Limiter ");
          DB6B->down_box(FL_DOWN_BOX);
          DB6B->labelsize(11);
          DB6B->labelcolor(FL_BACKGROUND2_COLOR);
          DB6B->callback((Fl_Callback*)cb_DB6B);
          DB6B->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* DB6B
        { Calibration = new Fl_Counter(120, 249, 116, 21, "Tuner Calibration A4 ");
          Calibration->labelsize(10);
          Calibration->labelcolor(FL_BACKGROUND2_COLOR);
          Calibration->minimum(420);
          Calibration->maximum(460);
          Calibration->value(440);
          Calibration->textsize(10);
          Calibration->callback((Fl_Callback*)cb_Calibration);
          Calibration->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Counter* Calibration
        { Fl_Counter* o = RTrigger = new Fl_Counter(367, 249, 116, 21, "Recognize Note Trigger");
          RTrigger->labelsize(10);
          RTrigger->labelcolor(FL_BACKGROUND2_COLOR);
          RTrigger->minimum(0.01);
          RTrigger->maximum(0.99);
          RTrigger->step(0.01);
          RTrigger->value(0.6);
          RTrigger->textsize(10);
          RTrigger->callback((Fl_Callback*)cb_RTrigger);
          RTrigger->align(Fl_Align(FL_ALIGN_LEFT));
          o->lstep(0.1);
        } // Fl_Counter* RTrigger
        { RC_Harm_Opti = new Fl_Choice(165, 297, 72, 18, "Harmonizer");
          RC_Harm_Opti->down_box(FL_BORDER_BOX);
          RC_Harm_Opti->labelsize(10);
          RC_Harm_Opti->labelcolor(FL_BACKGROUND2_COLOR);
          RC_Harm_Opti->textsize(10);
          RC_Harm_Opti->textcolor(FL_BACKGROUND2_COLOR);
          RC_Harm_Opti->callback((Fl_Callback*)cb_RC_Harm_Opti);
          RC_Harm_Opti->align(Fl_Align(FL_ALIGN_TOP));
          RC_Harm_Opti->menu(menu_RC_Harm_Opti);
        } // Fl_Choice* RC_Harm_Opti
        { RC_St_Harm_Opti = new Fl_Choice(265, 297, 72, 18, "Stereo Harmonizer");
          RC_St_Harm_Opti->down_box(FL_BORDER_BOX);
          RC_St_Harm_Opti->labelsize(10);
          RC_St_Harm_Opti->labelcolor(FL_BACKGROUND2_COLOR);
          RC_St_Harm_Opti->textsize(10);
          RC_St_Harm_Opti->textcolor(FL_BACKGROUND2_COLOR);
          RC_St_Harm_Opti->callback((Fl_Callback*)cb_RC_St_Harm_Opti);
          RC_St_Harm_Opti->align(Fl_Align(FL_ALIGN_TOP));
          RC_St_Harm_Opti->menu(menu_RC_St_Harm_Opti);
        } // Fl_Choice* RC_St_Harm_Opti
        { RC_Ring_Opti = new Fl_Choice(365, 297, 72, 18, "Ring");
          RC_Ring_Opti->down_box(FL_BORDER_BOX);
          RC_Ring_Opti->labelsize(10);
          RC_Ring_Opti->labelcolor(FL_BACKGROUND2_COLOR);
          RC_Ring_Opti->textsize(10);
          RC_Ring_Opti->textcolor(FL_BACKGROUND2_COLOR);
          RC_Ring_Opti->callback((Fl_Callback*)cb_RC_Ring_Opti);
          RC_Ring_Opti->align(Fl_Align(FL_ALIGN_TOP));
          RC_Ring_Opti->menu(menu_RC_Ring_Opti);
        } // Fl_Choice* RC_Ring_Opti
        { Har_Downsample = new Fl_Choice(145, 336, 70, 18, "Harmonizer Downsample ");
          Har_Downsample->down_box(FL_BORDER_BOX);
          Har_Downsample->labelsize(10);
          Har_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
          Har_Downsample->textsize(10);
          Har_Downsample->textcolor(FL_BACKGROUND2_COLOR);
          Har_Downsample->callback((Fl_Callback*)cb_Har_Downsample);
          Har_Downsample->menu(menu_Har_Downsample);
        } // Fl_Choice* Har_Downsample
        { Fl_Choice* o = Har_Down_Qua = new Fl_Choice(250, 336, 72, 18, "Down");
          Har_Down_Qua->down_box(FL_BORDER_BOX);
          Har_Down_Qua->labelsize(10);
          Har_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
          Har_Down_Qua->textsize(10);
          Har_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
          Har_Down_Qua->callback((Fl_Callback*)cb_Har_Down_Qua);
          o->menu(menu_Upr_Qual);
        } // Fl_Choice* Har_Down_Qua
        { Fl_Choice* o = Har_Up_Qua = new Fl_Choice(343, 336, 72, 18, "Up");
          Har_Up_Qua->down_box(FL_BORDER_BOX);
          Har_Up_Qua->labelsize(10);
          Har_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
          Har_Up_Qua->textsize(10);
          Har_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
          Har_Up_Qua->callback((Fl_Callback*)cb_Har_Up_Qua);
          o->menu(menu_Upr_Qual);
        } // Fl_Choice* Har_Up_Qua
        { Fl_Choice* o = Rev_Downsample = new Fl_Choice(145, 359, 70, 18, "Reverbtron Downsample  ");
          Rev_Downsample->down_box(FL_BORDER_BOX);
          Rev_Downsample->labelsize(10);
          Rev_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
          Rev_Downsample->textsize(10);
          Rev_Downsample->textcolor(FL_BACKGROUND2_COLOR);
          Rev_Downsample->callback((Fl_Callback*)cb_Rev_Downsample);
          o->menu(menu_Har_Downsample);
        } // Fl_Choice* Rev_Downsample
        { Fl_Choice* o = Rev_Down_Qua = new Fl_Choice(250, 359, 72, 18, "Down");
          Rev_Down_Qua->down_box(FL_BORDER_BOX);
          Rev_Down_Qua->labelsize(10);
          Rev_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
          Rev_Down_Qua->textsize(10);
          Rev_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
          Rev_Down_Qua->callback((Fl_Callback*)cb_Rev_Down_Qua);
          o->menu(menu_Upr_Qual);
        } // Fl_Choice* Rev_Down_Qua
        { Fl_Choice* o = Rev_Up_Qua = new Fl_Choice(343, 359, 72, 18, "Up");
          Rev_Up_Qua->down_box(FL_BORDER_BOX);
          Rev_Up_Qua->labelsize(10);
          Rev_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
          Rev_Up_Qua->textsize(10);
          Rev_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
          Rev_Up_Qua->callback((Fl_Callback*)cb_Rev_Up_Qua);
          o->menu(menu_Upr_Qual);
        } // Fl_Choice* Rev_Up_Qua
        { Fl_Choice* o = Con_Downsample = new Fl_Choice(145, 382, 70, 18, "Convolotron Downsample");
          Con_Downsample->down_box(FL_BORDER_BOX);
          Con_Downsample->labelsize(10);
          Con_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
          Con_Downsample->textsize(10);
          Con_Downsample->textcolor(FL_BACKGROUND2_COLOR);
          Con_Downsample->callback((Fl_Callback*)cb_Con_Downsample);
          o->menu(menu_Har_Downsample);
        } // Fl_Choice* Con_Downsample
        { Fl_Choice* o = Con_Down_Qua = new Fl_Choice(250, 382, 72, 18, "Down");
          Con_Down_Qua->down_box(FL_BORDER_BOX);
          Con_Down_Qua->labelsize(10);
          Con_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
          Con_Down_Qua->textsize(10);
          Con_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
          Con_Down_Qua->callback((Fl_Callback*)cb_Con_Down_Qua);
          o->menu(menu_Upr_Qual);
        } // Fl_Choice* Con_Down_Qua
        { Fl_Choice* o = Con_Up_Qua = new Fl_Choice(343, 382, 72, 18, "Up");
          Con_Up_Qua->down_box(FL_BORDER_BOX);
          Con_Up_Qua->labelsize(10);
          Con_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
          Con_Up_Qua->textsize(10);
          Con_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
          Con_Up_Qua->callback((Fl_Callback*)cb_Con_Up_Qua);
          o->menu(menu_Upr_Qual);
        } // Fl_Choice* Con_Up_Qua
        { Fl_Choice* o = Seq_Downsample = new Fl_Choice(145, 405, 70, 18, "Sequence Downsample    ");
          Seq_Downsample->down_box(FL_BORDER_BOX);
          Seq_Downsample->labelsize(10);
          Seq_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
          Seq_Downsample->textsize(10);
          Seq_Downsample->textcolor(FL_BACKGROUND2_COLOR);
          Seq_Downsample->callback((Fl_Callback*)cb_Seq_Downsample);
          o->menu(menu_Har_Downsample);
        } // Fl_Choice* Seq_Downsample
        { Fl_Choice* o = Seq_Down_Qua = new Fl_Choice(250, 405, 72, 18, "Down");
          Seq_Down_Qua->down_box(FL_BORDER_BOX);
          Seq_Down_Qua->labelsize(10);
          Seq_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
          Seq_Down_Qua->textsize(10);
          Seq_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
          Seq_Down_Qua->callback((Fl_Callback*)cb_Seq_Down_Qua);
          o->menu(menu_Upr_Qual);
        } // Fl_Choice* Seq_Down_Qua
        { Fl_Choice* o = Seq_Up_Qua = new Fl_Choice(343, 405, 72, 18, "Up");
          Seq_Up_Qua->down_box(FL_BORDER_BOX);
          Seq_Up_Qua->labelsize(10);
          Seq_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
          Seq_Up_Qua->textsize(10);
          Seq_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
          Seq_Up_Qua->callback((Fl_Callback*)cb_Seq_Up_Qua);
          o->menu(menu_Upr_Qual);
        } // Fl_Choice* Seq_Up_Qua
        { Fl_Choice* o = Shi_Downsample = new Fl_Choice(145, 428, 70, 18, "Shifter Downsample         ");
          Shi_Downsample->down_box(FL_BORDER_BOX);
          Shi_Downsample->labelsize(10);
          Shi_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
          Shi_Downsample->textsize(10);
          Shi_Downsample->textcolor(FL_BACKGROUND2_COLOR);
          Shi_Downsample->callback((Fl_Callback*)cb_Shi_Downsample);
          o->menu(menu_Har_Downsample);
        } // Fl_Choice* Shi_Downsample
        { Fl_Choice* o = Shi_Down_Qua = new Fl_Choice(250, 428, 72, 18, "Down");
          Shi_Down_Qua->down_box(FL_BORDER_BOX);
          Shi_Down_Qua->labelsize(10);
          Shi_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
          Shi_Down_Qua->textsize(10);
          Shi_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
          Shi_Down_Qua->callback((Fl_Callback*)cb_Shi_Down_Qua);
          o->menu(menu_Upr_Qual);
        } // Fl_Choice* Shi_Down_Qua
        { Fl_Choice* o = Shi_Up_Qua = new Fl_Choice(343, 428, 72, 18, "Up");
          Shi_Up_Qua->down_box(FL_BORDER_BOX);
          Shi_Up_Qua->labelsize(10);
          Shi_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
          Shi_Up_Qua->textsize(10);
          Shi_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
          Shi_Up_Qua->callback((Fl_Callback*)cb_Shi_Up_Qua);
          o->menu(menu_Upr_Qual);
        } // Fl_Choice* Shi_Up_Qua
        { Fl_Choice* o = Voc_Downsample = new Fl_Choice(145, 452, 70, 18, "Vocoder Downsample      ");
          Voc_Downsample->down_box(FL_BORDER_BOX);
          Voc_Downsample->labelsize(10);
          Voc_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
          Voc_Downsample->textsize(10);
          Voc_Downsample->textcolor(FL_BACKGROUND2_COLOR);
          Voc_Downsample->callback((Fl_Callback*)cb_Voc_Downsample);
          o->menu(menu_Har_Downsample);
        } // Fl_Choice* Voc_Downsample
        { Fl_Choice* o = Voc_Down_Qua = new Fl_Choice(250, 452, 72, 18, "Down");
          Voc_Down_Qua->down_box(FL_BORDER_BOX);
          Voc_Down_Qua->labelsize(10);
          Voc_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
          Voc_Down_Qua->textsize(10);
          Voc_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
          Voc_Down_Qua->callback((Fl_Callback*)cb_Voc_Down_Qua);
          o->menu(menu_Upr_Qual);
        } // Fl_Choice* Voc_Down_Qua
        { Fl_Choice* o = Voc_Up_Qua = new Fl_Choice(343, 452, 72, 18, "Up");
          Voc_Up_Qua->down_box(FL_BORDER_BOX);
          Voc_Up_Qua->labelsize(10);
          Voc_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
          Voc_Up_Qua->textsize(10);
          Voc_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
          Voc_Up_Qua->callback((Fl_Callback*)cb_Voc_Up_Qua);
          o->menu(menu_Upr_Qual);
        } // Fl_Choice* Voc_Up_Qua
        { Fl_Choice* o = Ste_Downsample = new Fl_Choice(145, 477, 70, 18, "StereoHarm Downsample");
          Ste_Downsample->down_box(FL_BORDER_BOX);
          Ste_Downsample->labelsize(10);
          Ste_Downsample->labelcolor(FL_BACKGROUND2_COLOR);
          Ste_Downsample->textsize(10);
          Ste_Downsample->textcolor(FL_BACKGROUND2_COLOR);
          Ste_Downsample->callback((Fl_Callback*)cb_Ste_Downsample);
          o->menu(menu_Har_Downsample);
        } // Fl_Choice* Ste_Downsample
        { Fl_Choice* o = Ste_Down_Qua = new Fl_Choice(250, 477, 72, 18, "Down");
          Ste_Down_Qua->down_box(FL_BORDER_BOX);
          Ste_Down_Qua->labelsize(10);
          Ste_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
          Ste_Down_Qua->textsize(10);
          Ste_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
          Ste_Down_Qua->callback((Fl_Callback*)cb_Ste_Down_Qua);
          o->menu(menu_Upr_Qual);
        } // Fl_Choice* Ste_Down_Qua
        { Fl_Choice* o = Ste_Up_Qua = new Fl_Choice(343, 477, 72, 18, "Up");
          Ste_Up_Qua->down_box(FL_BORDER_BOX);
          Ste_Up_Qua->labelsize(10);
          Ste_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
          Ste_Up_Qua->textsize(10);
          Ste_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
          Ste_Up_Qua->callback((Fl_Callback*)cb_Ste_Up_Qua);
          o->menu(menu_Upr_Qual);
        } // Fl_Choice* Ste_Up_Qua
        { Wave_Amo = new Fl_Choice(145, 527, 70, 18, "Waveshape Resampling   ");
          Wave_Amo->down_box(FL_BORDER_BOX);
          Wave_Amo->labelsize(10);
          Wave_Amo->labelcolor(FL_BACKGROUND2_COLOR);
          Wave_Amo->textsize(10);
          Wave_Amo->textcolor(FL_BACKGROUND2_COLOR);
          Wave_Amo->callback((Fl_Callback*)cb_Wave_Amo);
          Wave_Amo->menu(menu_Wave_Amo);
        } // Fl_Choice* Wave_Amo
        { Fl_Choice* o = Wave_Down_Qua = new Fl_Choice(252, 527, 72, 18, "Down");
          Wave_Down_Qua->down_box(FL_BORDER_BOX);
          Wave_Down_Qua->labelsize(10);
          Wave_Down_Qua->labelcolor(FL_BACKGROUND2_COLOR);
          Wave_Down_Qua->textsize(10);
          Wave_Down_Qua->textcolor(FL_BACKGROUND2_COLOR);
          Wave_Down_Qua->callback((Fl_Callback*)cb_Wave_Down_Qua);
          o->menu(menu_Upr_Qual);
        } // Fl_Choice* Wave_Down_Qua
        { Fl_Choice* o = Wave_Up_Qua = new Fl_Choice(345, 527, 72, 18, "Up");
          Wave_Up_Qua->down_box(FL_BORDER_BOX);
          Wave_Up_Qua->labelsize(10);
          Wave_Up_Qua->labelcolor(FL_BACKGROUND2_COLOR);
          Wave_Up_Qua->textsize(10);
          Wave_Up_Qua->textcolor(FL_BACKGROUND2_COLOR);
          Wave_Up_Qua->callback((Fl_Callback*)cb_Wave_Up_Qua);
          o->menu(menu_Upr_Qual);
        } // Fl_Choice* Wave_Up_Qua
        { Recognize_Label = new Fl_Box(10, 298, 150, 17, "Recognize Note Optimization");
          Recognize_Label->labelsize(10);
          Recognize_Label->user_data((void*)(7));
          Recognize_Label->when(FL_WHEN_NEVER);
        } // Fl_Box* Recognize_Label
        AUDIO_SET->end();
      } // Fl_Group* AUDIO_SET
      { MIDI_SET = new Fl_Group(5, 26, 630, 554, "MIDI");
        MIDI_SET->box(FL_DOWN_FRAME);
        MIDI_SET->labelfont(1);
        MIDI_SET->labelcolor(FL_BACKGROUND2_COLOR);
        MIDI_SET->user_data((void*)(1));
        MIDI_SET->align(Fl_Align(FL_ALIGN_LEFT));
        MIDI_SET->hide();
        { Fondo8 = new Fl_Box(5, 26, 630, 554);
        } // Fl_Box* Fondo8
        { D_A_Connect = new Fl_Check_Button(135, 38, 105, 20, "Auto Connect MIDI In");
          D_A_Connect->down_box(FL_DOWN_BOX);
          D_A_Connect->labelsize(11);
          D_A_Connect->labelcolor(FL_BACKGROUND2_COLOR);
          D_A_Connect->callback((Fl_Callback*)cb_D_A_Connect);
          D_A_Connect->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* D_A_Connect
        { BMidiIn = new Fl_Browser(15, 72, 190, 111, "ALSA Sequencer Ports");
          BMidiIn->type(2);
          BMidiIn->selection_color(FL_FOREGROUND_COLOR);
          BMidiIn->labelsize(11);
          BMidiIn->labelcolor(FL_BACKGROUND2_COLOR);
          BMidiIn->textsize(12);
          BMidiIn->textcolor(FL_BACKGROUND2_COLOR);
          BMidiIn->callback((Fl_Callback*)cb_BMidiIn);
          BMidiIn->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Browser* BMidiIn
        { Midi_In_Counter = new Fl_Counter(103, 198, 60, 24, "Receive Channel");
          Midi_In_Counter->type(1);
          Midi_In_Counter->color((Fl_Color)25);
          Midi_In_Counter->labelsize(10);
          Midi_In_Counter->labelcolor(FL_BACKGROUND2_COLOR);
          Midi_In_Counter->minimum(1);
          Midi_In_Counter->maximum(16);
          Midi_In_Counter->step(1);
          Midi_In_Counter->value(1);
          Midi_In_Counter->textsize(11);
          Midi_In_Counter->callback((Fl_Callback*)cb_Midi_In_Counter);
          Midi_In_Counter->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Counter* Midi_In_Counter
        { Har_In_Counter = new Fl_Counter(162, 235, 60, 24, "Harmonizer Receive Channel");
          Har_In_Counter->type(1);
          Har_In_Counter->color((Fl_Color)25);
          Har_In_Counter->labelsize(10);
          Har_In_Counter->labelcolor(FL_BACKGROUND2_COLOR);
          Har_In_Counter->minimum(1);
          Har_In_Counter->maximum(16);
          Har_In_Counter->step(1);
          Har_In_Counter->value(1);
          Har_In_Counter->textsize(11);
          Har_In_Counter->callback((Fl_Callback*)cb_Har_In_Counter);
          Har_In_Counter->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Counter* Har_In_Counter
        { Stereo_Har_In_Counter = new Fl_Counter(200, 276, 60, 24, "Stereo Harmonizer Receive Channel");
          Stereo_Har_In_Counter->type(1);
          Stereo_Har_In_Counter->color((Fl_Color)25);
          Stereo_Har_In_Counter->labelsize(10);
          Stereo_Har_In_Counter->labelcolor(FL_BACKGROUND2_COLOR);
          Stereo_Har_In_Counter->minimum(1);
          Stereo_Har_In_Counter->maximum(16);
          Stereo_Har_In_Counter->step(1);
          Stereo_Har_In_Counter->value(1);
          Stereo_Har_In_Counter->textsize(11);
          Stereo_Har_In_Counter->callback((Fl_Callback*)cb_Stereo_Har_In_Counter);
          Stereo_Har_In_Counter->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Counter* Stereo_Har_In_Counter
        { wMIDI = new Fl_Group(15, 325, 273, 23, "MIDI implementation");
          wMIDI->box(FL_DOWN_FRAME);
          wMIDI->labelsize(10);
          wMIDI->labelcolor(FL_BACKGROUND2_COLOR);
          wMIDI->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { Mw0 = new Fl_Check_Button(72, 327, 18, 18, "Default");
            Mw0->type(102);
            Mw0->down_box(FL_DOWN_BOX);
            Mw0->labelsize(11);
            Mw0->labelcolor(FL_BACKGROUND2_COLOR);
            Mw0->callback((Fl_Callback*)cb_Mw0);
            Mw0->align(Fl_Align(FL_ALIGN_LEFT));
          } // Fl_Check_Button* Mw0
          { Mw1 = new Fl_Check_Button(183, 327, 18, 18, "MIDI Learn");
            Mw1->type(102);
            Mw1->down_box(FL_DOWN_BOX);
            Mw1->labelsize(11);
            Mw1->labelcolor(FL_BACKGROUND2_COLOR);
            Mw1->callback((Fl_Callback*)cb_Mw1);
            Mw1->align(Fl_Align(FL_ALIGN_LEFT));
          } // Fl_Check_Button* Mw1
          wMIDI->end();
        } // Fl_Group* wMIDI
        { AAssign = new Fl_Check_Button(134, 359, 16, 15, "Auto Assign MIDI Learn");
          AAssign->down_box(FL_DOWN_BOX);
          AAssign->labelsize(10);
          AAssign->labelcolor(FL_BACKGROUND2_COLOR);
          AAssign->callback((Fl_Callback*)cb_AAssign);
          AAssign->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* AAssign
        { MTable = new Fl_Check_Button(157, 377, 16, 15, "MIDI Program Change Table");
          MTable->down_box(FL_DOWN_BOX);
          MTable->labelsize(10);
          MTable->labelcolor(FL_BACKGROUND2_COLOR);
          MTable->callback((Fl_Callback*)cb_MTable);
          MTable->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* MTable
        { scroll = new Fl_Scroll(15, 360, 585, 162);
          scroll->type(6);
          scroll->user_data((void*)(5000));
          scroll->end();
        } // Fl_Scroll* scroll
        MIDI_SET->end();
      } // Fl_Group* MIDI_SET
      { JACK_SET = new Fl_Group(5, 26, 630, 554, "Jack");
        JACK_SET->box(FL_DOWN_FRAME);
        JACK_SET->labelfont(1);
        JACK_SET->labelcolor(FL_BACKGROUND2_COLOR);
        JACK_SET->user_data((void*)(1));
        JACK_SET->align(Fl_Align(FL_ALIGN_LEFT));
        JACK_SET->hide();
        { Fondo9 = new Fl_Box(5, 26, 630, 554);
        } // Fl_Box* Fondo9
        { D_J_Connect = new Fl_Check_Button(114, 40, 25, 20, "Auto Connect Out");
          D_J_Connect->down_box(FL_DOWN_BOX);
          D_J_Connect->labelsize(11);
          D_J_Connect->labelcolor(FL_BACKGROUND2_COLOR);
          D_J_Connect->callback((Fl_Callback*)cb_D_J_Connect);
          D_J_Connect->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* D_J_Connect
        { JackCo = new Fl_Browser(10, 72, 235, 138, "Output Ports");
          JackCo->type(3);
          JackCo->selection_color(FL_FOREGROUND_COLOR);
          JackCo->labelsize(11);
          JackCo->labelcolor(FL_BACKGROUND2_COLOR);
          JackCo->textsize(12);
          JackCo->textcolor(FL_BACKGROUND2_COLOR);
          JackCo->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Browser* JackCo
        { D_IJ_Connect = new Fl_Check_Button(104, 228, 25, 20, "Auto Connect In");
          D_IJ_Connect->down_box(FL_DOWN_BOX);
          D_IJ_Connect->labelsize(11);
          D_IJ_Connect->labelcolor(FL_BACKGROUND2_COLOR);
          D_IJ_Connect->callback((Fl_Callback*)cb_D_IJ_Connect);
          D_IJ_Connect->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* D_IJ_Connect
        { JackIn = new Fl_Browser(10, 259, 235, 131, "Input Ports");
          JackIn->type(3);
          JackIn->selection_color(FL_FOREGROUND_COLOR);
          JackIn->labelsize(11);
          JackIn->labelcolor(FL_BACKGROUND2_COLOR);
          JackIn->textsize(12);
          JackIn->textcolor(FL_BACKGROUND2_COLOR);
          JackIn->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Browser* JackIn
        JACK_SET->end();
      } // Fl_Group* JACK_SET
      { MISC_SET = new Fl_Group(5, 26, 630, 554, "Misc");
        MISC_SET->box(FL_DOWN_FRAME);
        MISC_SET->labelfont(1);
        MISC_SET->labelcolor(FL_BACKGROUND2_COLOR);
        MISC_SET->user_data((void*)(1));
        MISC_SET->align(Fl_Align(FL_ALIGN_LEFT));
        MISC_SET->hide();
        { Fondo10 = new Fl_Box(5, 26, 630, 554);
        } // Fl_Box* Fondo10
        { Username = new Fl_Input(80, 32, 240, 21, "Username:");
          Username->labelsize(11);
          Username->labelcolor(FL_BACKGROUND2_COLOR);
          Username->textsize(11);
          Username->textcolor(FL_BACKGROUND2_COLOR);
          Username->callback((Fl_Callback*)cb_Username);
        } // Fl_Input* Username
        { MES_DIS = new Fl_Check_Button(132, 68, 21, 20, "Disable Warnings    ");
          MES_DIS->down_box(FL_DOWN_BOX);
          MES_DIS->labelsize(11);
          MES_DIS->labelcolor(FL_BACKGROUND2_COLOR);
          MES_DIS->callback((Fl_Callback*)cb_MES_DIS);
          MES_DIS->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* MES_DIS
        { T_TIMEOUT = new Fl_Check_Button(132, 88, 21, 20, "Tap Tempo Timeout");
          T_TIMEOUT->down_box(FL_DOWN_BOX);
          T_TIMEOUT->labelsize(11);
          T_TIMEOUT->labelcolor(FL_BACKGROUND2_COLOR);
          T_TIMEOUT->callback((Fl_Callback*)cb_T_TIMEOUT);
          T_TIMEOUT->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* T_TIMEOUT
        { ENA_TOOL = new Fl_Check_Button(132, 108, 21, 20, "Enable Tooltips       ");
          ENA_TOOL->down_box(FL_DOWN_BOX);
          ENA_TOOL->labelsize(11);
          ENA_TOOL->labelcolor(FL_BACKGROUND2_COLOR);
          ENA_TOOL->callback((Fl_Callback*)cb_ENA_TOOL);
          ENA_TOOL->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* ENA_TOOL
        MISC_SET->end();
      } // Fl_Group* MISC_SET
      { BANK_SET = new Fl_Group(5, 26, 630, 554, "Bank");
        BANK_SET->box(FL_DOWN_FRAME);
        BANK_SET->labelfont(1);
        BANK_SET->labelcolor(FL_BACKGROUND2_COLOR);
        BANK_SET->user_data((void*)(1));
        BANK_SET->align(Fl_Align(FL_ALIGN_LEFT));
        BANK_SET->hide();
        { Fondo11 = new Fl_Box(5, 26, 630, 554);
        } // Fl_Box* Fondo11
        { BFiname = new Fl_File_Input(20, 50, 390, 30, "Bank Filename");
          BFiname->labelsize(11);
          BFiname->labelcolor(FL_BACKGROUND2_COLOR);
          BFiname->textsize(12);
          BFiname->textcolor(FL_BACKGROUND2_COLOR);
          BFiname->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_File_Input* BFiname
        { BF_Browser = new Fl_Button(415, 60, 65, 20, "Browse");
          BF_Browser->callback((Fl_Callback*)cb_BF_Browser, (void*)(77));
        } // Fl_Button* BF_Browser
        { Udir = new Fl_File_Input(20, 102, 390, 30, "User Directory");
          Udir->labelsize(11);
          Udir->labelcolor(FL_BACKGROUND2_COLOR);
          Udir->textsize(12);
          Udir->textcolor(FL_BACKGROUND2_COLOR);
          Udir->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_File_Input* Udir
        { UD_Browser = new Fl_Button(415, 112, 65, 20, "Browse");
          UD_Browser->callback((Fl_Callback*)cb_UD_Browser, (void*)(77));
        } // Fl_Button* UD_Browser
        BANK_SET->end();
      } // Fl_Group* BANK_SET
      STabs->end();
    } // Fl_Tabs* STabs
    Settings->size_range(740, 554);
    Settings->end();
  } // Fl_Double_Window* Settings
  { MIDILearn = new Fl_Double_Window(640, 480);
    MIDILearn->callback((Fl_Callback*)cb_MIDILearn, (void*)(this));
    { Fondo4 = new Fl_Box(1, 1, 640, 480);
    } // Fl_Box* Fondo4
    { Epar = new Fl_Browser(10, 58, 201, 348);
      Epar->type(2);
      Epar->textcolor(FL_BACKGROUND2_COLOR);
      Epar->callback((Fl_Callback*)cb_Epar, (void*)(99));
    } // Fl_Browser* Epar
    { GMM = new Fl_Button(10, 445, 135, 30, "Get MIDI Message");
      GMM->callback((Fl_Callback*)cb_GMM, (void*)(77));
    } // Fl_Button* GMM
    { TPresets = new Fl_Browser(430, 61, 201, 348);
      TPresets->type(2);
      TPresets->textcolor(FL_BACKGROUND2_COLOR);
      TPresets->when(3);
    } // Fl_Browser* TPresets
    { CopyF = new Fl_Button(430, 20, 95, 30, "Copy from: ");
      CopyF->callback((Fl_Callback*)cb_CopyF, (void*)(77));
    } // Fl_Button* CopyF
    { CopyT = new Fl_Button(535, 20, 95, 30, "Copy to: ");
      CopyT->callback((Fl_Callback*)cb_CopyT, (void*)(77));
    } // Fl_Button* CopyT
    { Ares = new Fl_Group(215, 60, 205, 180);
      Ares->box(FL_THIN_DOWN_BOX);
      Ares->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      { Ar1 = new Fl_Box(220, 65, 45, 30);
        Ar1->box(FL_DOWN_BOX);
      } // Fl_Box* Ar1
      { Ar2 = new Fl_Box(270, 65, 45, 30);
        Ar2->box(FL_DOWN_BOX);
      } // Fl_Box* Ar2
      { Ar3 = new Fl_Box(320, 65, 45, 30);
        Ar3->box(FL_DOWN_BOX);
      } // Fl_Box* Ar3
      { Ar4 = new Fl_Box(370, 65, 45, 30);
        Ar4->box(FL_DOWN_BOX);
      } // Fl_Box* Ar4
      { Ar5 = new Fl_Box(220, 100, 45, 30);
        Ar5->box(FL_DOWN_BOX);
      } // Fl_Box* Ar5
      { Ar6 = new Fl_Box(270, 100, 45, 30);
        Ar6->box(FL_DOWN_BOX);
      } // Fl_Box* Ar6
      { Ar7 = new Fl_Box(320, 100, 45, 30);
        Ar7->box(FL_DOWN_BOX);
      } // Fl_Box* Ar7
      { Ar8 = new Fl_Box(370, 100, 45, 30);
        Ar8->box(FL_DOWN_BOX);
      } // Fl_Box* Ar8
      { Ar9 = new Fl_Box(220, 135, 45, 30);
        Ar9->box(FL_DOWN_BOX);
      } // Fl_Box* Ar9
      { Ar10 = new Fl_Box(270, 135, 45, 30);
        Ar10->box(FL_DOWN_BOX);
      } // Fl_Box* Ar10
      { Ar11 = new Fl_Box(320, 135, 45, 30);
        Ar11->box(FL_DOWN_BOX);
      } // Fl_Box* Ar11
      { Ar12 = new Fl_Box(370, 135, 45, 30);
        Ar12->box(FL_DOWN_BOX);
      } // Fl_Box* Ar12
      { Ar13 = new Fl_Box(220, 170, 45, 30);
        Ar13->box(FL_DOWN_BOX);
      } // Fl_Box* Ar13
      { Ar14 = new Fl_Box(270, 170, 45, 30);
        Ar14->box(FL_DOWN_BOX);
      } // Fl_Box* Ar14
      { Ar15 = new Fl_Box(320, 170, 45, 30);
        Ar15->box(FL_DOWN_BOX);
      } // Fl_Box* Ar15
      { Ar16 = new Fl_Box(370, 170, 45, 30);
        Ar16->box(FL_DOWN_BOX);
      } // Fl_Box* Ar16
      { Ar17 = new Fl_Box(220, 205, 45, 30);
        Ar17->box(FL_DOWN_BOX);
      } // Fl_Box* Ar17
      { Ar18 = new Fl_Box(270, 205, 45, 30);
        Ar18->box(FL_DOWN_BOX);
      } // Fl_Box* Ar18
      { Ar19 = new Fl_Box(320, 205, 45, 30);
        Ar19->box(FL_DOWN_BOX);
      } // Fl_Box* Ar19
      { Ar20 = new Fl_Box(370, 205, 45, 30);
        Ar20->box(FL_DOWN_BOX);
      } // Fl_Box* Ar20
      Ares->end();
    } // Fl_Group* Ares
    { ClearA = new Fl_Button(245, 250, 150, 30, "Clear Assignements");
      ClearA->callback((Fl_Callback*)cb_ClearA, (void*)(77));
    } // Fl_Button* ClearA
    { ClearP = new Fl_Button(245, 285, 150, 30, "Clear Preset");
      ClearP->callback((Fl_Callback*)cb_ClearP, (void*)(77));
    } // Fl_Button* ClearP
    { Assign = new Fl_Button(112, 20, 98, 30, "Assign");
      Assign->callback((Fl_Callback*)cb_Assign, (void*)(77));
    } // Fl_Button* Assign
    { AssignA = new Fl_Button(10, 20, 98, 30, "Assign to All");
      AssignA->callback((Fl_Callback*)cb_AssignA, (void*)(77));
    } // Fl_Button* AssignA
    { CancelRec = new Fl_Button(200, 450, 60, 20, "Cancel");
      CancelRec->callback((Fl_Callback*)cb_CancelRec, (void*)(77));
    } // Fl_Button* CancelRec
    { Disp_Control = new Fl_Value_Input(155, 445, 40, 30);
      Disp_Control->minimum(1);
      Disp_Control->maximum(127);
      Disp_Control->step(1);
      Disp_Control->value(1);
      Disp_Control->textcolor(FL_BACKGROUND2_COLOR);
      Disp_Control->callback((Fl_Callback*)cb_Disp_Control);
    } // Fl_Value_Input* Disp_Control
    { CopyTAll = new Fl_Button(480, 412, 150, 30, "Copy to All");
      CopyTAll->callback((Fl_Callback*)cb_CopyTAll, (void*)(77));
    } // Fl_Button* CopyTAll
    { CloseML = new Fl_Button(480, 445, 150, 30, "Close");
      CloseML->callback((Fl_Callback*)cb_CloseML, (void*)(77));
    } // Fl_Button* CloseML
    { Filters_ML = new Fl_Group(10, 410, 200, 31);
      Filters_ML->box(FL_DOWN_BOX);
      { M_fil_all = new Fl_Button(16, 415, 89, 20, "All");
        M_fil_all->type(102);
        M_fil_all->callback((Fl_Callback*)cb_M_fil_all);
      } // Fl_Button* M_fil_all
      { M_fil_current = new Fl_Button(113, 415, 89, 20, "Current");
        M_fil_current->type(102);
        M_fil_current->callback((Fl_Callback*)cb_M_fil_current);
      } // Fl_Button* M_fil_current
      Filters_ML->end();
    } // Fl_Group* Filters_ML
    MIDILearn->end();
  } // Fl_Double_Window* MIDILearn
  { AboutWin = new Fl_Double_Window(375, 235, "About Rakarrack");
    AboutWin->color((Fl_Color)36);
    AboutWin->callback((Fl_Callback*)cb_AboutWin, (void*)(this));
    { AB_Title = new Fl_Box(56, 4, 259, 41, "Rakarrack");
      AB_Title->labelfont(1);
      AB_Title->labelsize(40);
      AB_Title->labelcolor(FL_BACKGROUND2_COLOR);
    } // Fl_Box* AB_Title
    { AB_SubTitle = new Fl_Box(121, 39, 130, 22, "Audio F/X");
      AB_SubTitle->labelfont(1);
      AB_SubTitle->labelsize(16);
      AB_SubTitle->labelcolor(FL_BACKGROUND2_COLOR);
    } // Fl_Box* AB_SubTitle
    { About_Version = new Fl_Box(69, 60, 233, 15);
      About_Version->labelsize(12);
      About_Version->labelcolor(FL_BACKGROUND2_COLOR);
      About_Version->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Box* About_Version
    { AB_url = new Fl_Box(68, 77, 234, 22, "http://rakarrack.sourceforge.net");
      AB_url->labelfont(1);
      AB_url->labelsize(13);
      AB_url->labelcolor((Fl_Color)6);
    } // Fl_Box* AB_url
    { AB_Authors = new Fl_Box(20, 96, 345, 26, "Copyrigth Josep Andreu Ryan Billing Douglas McClendon Arnout Engelen <2007 - \
2010>");
      AB_Authors->labelfont(1);
      AB_Authors->labelsize(8);
      AB_Authors->labelcolor(FL_BACKGROUND2_COLOR);
      AB_Authors->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Box* AB_Authors
    { AB_A1 = new Fl_Box(44, 125, 281, 26, "Code of some effects and structure based on ZynAddSubFx by Paul Nasca Octavia\
n");
      AB_A1->labelfont(1);
      AB_A1->labelsize(8);
      AB_A1->labelcolor(FL_BACKGROUND2_COLOR);
      AB_A1->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Box* AB_A1
    { AB_A2 = new Fl_Box(66, 172, 240, 15, "Code of Tuner taked from tuneit by Mario Lang");
      AB_A2->labelfont(1);
      AB_A2->labelsize(8);
      AB_A2->labelcolor(FL_BACKGROUND2_COLOR);
    } // Fl_Box* AB_A2
    { AB_A3 = new Fl_Box(84, 185, 219, 24, "Code of Compressor based in ArtsCompresor by Matthias Kretz & Stefan Westerfe\
ld");
      AB_A3->labelfont(1);
      AB_A3->labelsize(8);
      AB_A3->labelcolor(FL_BACKGROUND2_COLOR);
      AB_A3->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Box* AB_A3
    { Fl_Button* o = new Fl_Button(48, 215, 92, 16, "LICENSE");
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_LICENSE);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(276, 215, 92, 16, "OK");
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Button* o
    { AB_A4 = new Fl_Box(64, 151, 250, 20, "Code of some effects based on swh-plugins LADSPA by Steve Harris");
      AB_A4->labelfont(1);
      AB_A4->labelsize(8);
      AB_A4->labelcolor(FL_BACKGROUND2_COLOR);
      AB_A4->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Box* AB_A4
    AboutWin->end();
  } // Fl_Double_Window* AboutWin
  { Trigger = new Fl_Double_Window(205, 165);
    Trigger->callback((Fl_Callback*)cb_Trigger, (void*)(this));
    { Fondo5 = new Fl_Box(0, 1, 210, 164);
    } // Fl_Box* Fondo5
    { ACI_LABEL = new Fl_Box(25, 8, 135, 24, "Analog Control");
      ACI_LABEL->labelfont(1);
      ACI_LABEL->labelcolor(FL_BACKGROUND2_COLOR);
    } // Fl_Box* ACI_LABEL
    { aux_vu = new NewVum(5, 18, 16, 144);
      aux_vu->type(2);
      aux_vu->box(FL_NO_BOX);
      aux_vu->color((Fl_Color)178);
      aux_vu->selection_color((Fl_Color)90);
      aux_vu->labeltype(FL_NORMAL_LABEL);
      aux_vu->labelfont(0);
      aux_vu->labelsize(14);
      aux_vu->labelcolor(FL_FOREGROUND_COLOR);
      aux_vu->minimum(15);
      aux_vu->maximum(-48);
      aux_vu->step(1);
      aux_vu->value(-48);
      aux_vu->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
      aux_vu->when(FL_WHEN_NEVER);
    } // NewVum* aux_vu
    { aux_source = new Fl_Choice(100, 37, 50, 17, "Source");
      aux_source->down_box(FL_BORDER_BOX);
      aux_source->labelsize(10);
      aux_source->labelcolor(FL_BACKGROUND2_COLOR);
      aux_source->textsize(10);
      aux_source->textcolor(FL_BACKGROUND2_COLOR);
      aux_source->callback((Fl_Callback*)cb_aux_source);
      aux_source->menu(menu_aux_source);
    } // Fl_Choice* aux_source
    { aux_gain = new SliderW(99, 59, 100, 10, "Gain");
      aux_gain->type(5);
      aux_gain->box(FL_FLAT_BOX);
      aux_gain->color((Fl_Color)178);
      aux_gain->selection_color((Fl_Color)62);
      aux_gain->labeltype(FL_NORMAL_LABEL);
      aux_gain->labelfont(0);
      aux_gain->labelsize(10);
      aux_gain->labelcolor(FL_BACKGROUND2_COLOR);
      aux_gain->minimum(1);
      aux_gain->maximum(127);
      aux_gain->step(1);
      aux_gain->textcolor(FL_BACKGROUND2_COLOR);
      aux_gain->callback((Fl_Callback*)cb_aux_gain);
      aux_gain->align(Fl_Align(FL_ALIGN_LEFT));
      aux_gain->when(FL_WHEN_CHANGED);
    } // SliderW* aux_gain
    { aux_thres = new SliderW(100, 75, 100, 10, "Threshold");
      aux_thres->type(5);
      aux_thres->box(FL_FLAT_BOX);
      aux_thres->color((Fl_Color)178);
      aux_thres->selection_color((Fl_Color)62);
      aux_thres->labeltype(FL_NORMAL_LABEL);
      aux_thres->labelfont(0);
      aux_thres->labelsize(10);
      aux_thres->labelcolor(FL_BACKGROUND2_COLOR);
      aux_thres->minimum(-70);
      aux_thres->maximum(20);
      aux_thres->step(1);
      aux_thres->textcolor(FL_BACKGROUND2_COLOR);
      aux_thres->callback((Fl_Callback*)cb_aux_thres);
      aux_thres->align(Fl_Align(FL_ALIGN_LEFT));
      aux_thres->when(FL_WHEN_CHANGED);
    } // SliderW* aux_thres
    { aux_midi = new Fl_Value_Input(98, 96, 39, 22, "Midi Control");
      aux_midi->labelsize(10);
      aux_midi->labelcolor(FL_BACKGROUND2_COLOR);
      aux_midi->minimum(1);
      aux_midi->maximum(127);
      aux_midi->step(1);
      aux_midi->value(1);
      aux_midi->textsize(10);
      aux_midi->callback((Fl_Callback*)cb_aux_midi);
    } // Fl_Value_Input* aux_midi
    { aux_min = new SliderW(100, 130, 100, 10, "Minimum");
      aux_min->type(5);
      aux_min->box(FL_FLAT_BOX);
      aux_min->color((Fl_Color)178);
      aux_min->selection_color((Fl_Color)62);
      aux_min->labeltype(FL_NORMAL_LABEL);
      aux_min->labelfont(0);
      aux_min->labelsize(10);
      aux_min->labelcolor(FL_BACKGROUND2_COLOR);
      aux_min->maximum(127);
      aux_min->step(1);
      aux_min->textcolor(FL_BACKGROUND2_COLOR);
      aux_min->callback((Fl_Callback*)cb_aux_min);
      aux_min->align(Fl_Align(FL_ALIGN_LEFT));
      aux_min->when(FL_WHEN_CHANGED);
    } // SliderW* aux_min
    { aux_max = new SliderW(100, 150, 100, 10, "Maximum");
      aux_max->type(5);
      aux_max->box(FL_FLAT_BOX);
      aux_max->color((Fl_Color)178);
      aux_max->selection_color((Fl_Color)62);
      aux_max->labeltype(FL_NORMAL_LABEL);
      aux_max->labelfont(0);
      aux_max->labelsize(10);
      aux_max->labelcolor(FL_BACKGROUND2_COLOR);
      aux_max->maximum(127);
      aux_max->step(1);
      aux_max->value(127);
      aux_max->textcolor(FL_BACKGROUND2_COLOR);
      aux_max->callback((Fl_Callback*)cb_aux_max);
      aux_max->align(Fl_Align(FL_ALIGN_LEFT));
      aux_max->when(FL_WHEN_CHANGED);
    } // SliderW* aux_max
    Trigger->end();
  } // Fl_Double_Window* Trigger
  char tmp[64];
  sprintf(tmp,"Version %s",VERSION);
  About_Version->copy_label(tmp);
  return Trigger;
}

RKRGUI::RKRGUI(int argc, char**argv,RKR *rkr_) {
  Fl::args(argc,argv);
  fl_open_display();
  XpmCreatePixmapFromData(fl_display, DefaultRootWindow(fl_display),(char **)icono_rakarrack_128x128,&p ,&mask, NULL);
  
  Fl::visual(FL_DOUBLE|FL_RGB);
  fl_register_images();
  Fl::set_fonts(0);
  rkr=rkr_;
  
  mBankNameList = NULL;
  mBankNameListTail = NULL;
  
  back = NULL;
  old = NULL;
  make_window();
  
  Principal->icon((char *)p);
  BankWindow->icon((char *)p);
  Order->icon((char *)p);
  Settings->icon((char *)p);
  AboutWin->icon((char *)p);
  MIDILearn->icon((char *)p);
  Trigger->icon((char *)p);
  
  last_tecla=0;
  made=0;
  char tmp[256];
  drag=1000;
  nt=0;
  at=0;
  tta=0;
  Analy->set_analyzer_ON(false);
  Sco->set_scope_ON(false);
  
  Sco->init(rkr->anall, rkr->analr, rkr->period);
  Analy->init(rkr->anall, rkr->analr, rkr->period, rkr->sample_rate);
  
  memset(tmp,0, sizeof(tmp));
  if(filetoload != NULL)
  {
    sprintf(tmp,"Session: %s",filetoload); 
  }
    else
  {
    sprintf(tmp,"%s   v%s",rkr->jackcliname,VERSION); 
  }
   
  Principal->copy_label(tmp);
  BankWin_Label(rkr->BankFilename);
  memset(tmp,0, sizeof(tmp));
  sprintf(tmp,"%s   v%s - Effects Order",rkr->jackcliname,VERSION);
  Order->copy_label(tmp);
  memset(tmp,0, sizeof(tmp));
  sprintf(tmp,"%s   v%s - Settings",rkr->jackcliname,VERSION);
  Settings->copy_label(tmp);
  sprintf(tmp,"%s   v%s - MIDI Learn",rkr->jackcliname,VERSION);
  MIDILearn->copy_label(tmp);
  sprintf(tmp,"%s   v%s - ACI",rkr->jackcliname,VERSION);
  Trigger->copy_label(tmp);
  
  
  load_stat();
  make_table_window();
  Put_Loaded();
  Principal->show(argc,argv);
  put_icon(Principal);
  ReadIntPresets();
  if(rkr->deachide) HideUE->label("Show");else HideUE->label("Hide");
  HideUE->redraw();
  
  
  void * v=MT;
  Fl::add_timeout(.04,tick,v);
  Fl::add_handler(prevnext);
  install_signal_handlers();
}

void RKRGUI::Background_Color_Change(Fl_Color bcolor) {
  MenuP->color(bcolor);
  MenuB->color(bcolor);
  
  back_color = bcolor;
  
  Label_Color_Change(label_color);
  if(!rkr->EnableBackgroundImage) back->color_average(back_color,0.0);
}

void RKRGUI::Label_Color_Change(Fl_Color bcolor) {
  label_color = bcolor;
  chfsize(0);
  
  
  for (int t=0; t<STabs->children();t++)
    {
     Fl_Widget *tabg = STabs->child(t);
          tabg->labelcolor(label_color);  
          tabg->selection_color(back_color);
          tabg->color(fore_color);   
  
     long long ud = (long long) tabg->user_data();
  
    if(ud==1)
    {
    
    Fl_Group *g = (Fl_Group *)tabg;     
        
       for(int i=0;i<g->children();i++)
         {
   
         Fl_Widget *w = g->child(i);
  
          w->labelcolor(label_color);  
          w->selection_color(back_color);
          w->color(fore_color);   
         }
     }
    }
  
  for (int t=0; t<BankWindow->children();t++)
    {
      Fl_Widget *w = BankWindow->child(t);
  
       w->labelcolor(label_color);  
    }  
  
  
  for (int t=0; t<ob->children();t++)
    {
      Fl_Widget *w = ob->child(t);
  
       w->labelcolor(label_color);  
    }  
  
  
  for (int t=0; t<Order->children();t++)
    {
      Fl_Widget *w = Order->child(t);
  
       w->labelcolor(label_color);  
       w->selection_color(back_color);
       w->color(fore_color);
    }  
  
  for (int t=0; t<Filters->children();t++)
    {
      Fl_Widget *w = Filters->child(t);
  
       w->labelcolor(label_color);  
       w->selection_color(back_color);
       w->color(fore_color);
    }  
      
  
  for (int t=0; t<MIDILearn->children();t++)
    {
      Fl_Widget *w = MIDILearn->child(t);
  
       w->labelcolor(label_color);  
       w->selection_color(back_color);
       w->color(fore_color);
    }  
  
  Font_Bro->textcolor(label_color);
  ACI_LABEL->labelcolor(fl_lighter(label_color));
  aux_source->labelcolor(label_color);
  aux_midi->labelcolor(label_color);
  
  Fl::redraw();
}

void RKRGUI::Buttons_Color_Change(Fl_Color bcolor) {
  if (made)
  {
  for (int t=0; t<ob->children();t++)
    {
      Fl_Widget *w = ob->child(t);
      long long temp = (long long) w->user_data();
      if (temp > 0) w->color(bcolor); 
    }
  
  B_B1->color(bcolor);
  B_B2->color(bcolor);
  B_B3->color(bcolor);
  B_B4->color(bcolor);
  CH_UB->color(bcolor);
  
  }
  
  
   fore_color= bcolor;
   aux_source->color(bcolor);
   Label_Color_Change(label_color);
}

void RKRGUI::Leds_Color_Change(Fl_Color bcolor) {
  leds_color=bcolor;
  chfsize(0);
}

void RKRGUI::put_icon(Fl_Window* window) {
  if (hints == NULL)
  hints = XGetWMHints(fl_display, fl_xid(window));
  
  hints->icon_pixmap=p;
  hints->icon_mask=mask; 
  hints->flags = IconPixmapHint | IconMaskHint;
  XSetWMHints(fl_display, fl_xid(window), hints);
}

void RKRGUI::load_stat() {
  int x,y,w,h,k,b,f,l,a;
  
  Fl_Preferences rakarrack (Fl_Preferences::USER, WEBSITE, PACKAGE);
  
  rakarrack.get(rkr->PrefNom("Principal X"),x,1);
  rakarrack.get(rkr->PrefNom("Principal Y"),y,1);
  rakarrack.get(rkr->PrefNom("Principal W"),w,800);
  rkr->resolution=w;
  rakarrack.get(rkr->PrefNom("Principal H"),h,600);
  
  char tmp[256];
  sprintf (tmp, "%s/bg.png", DATADIR);
  
  rakarrack.get(rkr->PrefNom("Enable Background Image"),rkr->EnableBackgroundImage,1);
  rakarrack.get(rkr->PrefNom("Background Image"),rkr->BackgroundImage,tmp,256);
  PutBackground();
  rakarrack.get(rkr->PrefNom("FontSize"),rkr->relfontsize,0);
  if( rkr->relfontsize!=0) chfsize(rkr->relfontsize);
  rakarrack.get(rkr->PrefNom("Font"),rkr->font,0);
  
  rakarrack.get(rkr->PrefNom("Background Color"),b, 774778368);
  rakarrack.get(rkr->PrefNom("Foreground Color"),f,1602392832);
  rakarrack.get(rkr->PrefNom("Leds Color"),l, -13485824);
  rakarrack.get(rkr->PrefNom("Labels Color"),a, -1075849984);
  rakarrack.get(rkr->PrefNom("Schema"), k,0);
  scheme_ch->value(k);
  scheme_ch->do_callback();
  rakarrack.get(rkr->PrefNom("Hide Effects"), rkr->deachide,0);
  
  
  
  
  Principal->resize(x,y,w,h);
  
  rakarrack.get(rkr->PrefNom("BankWindow X"),x,1);
  rakarrack.get(rkr->PrefNom("BankWindow Y"),y,1);
  rakarrack.get(rkr->PrefNom("BankWindow W"),w,800);
  rakarrack.get(rkr->PrefNom("BankWindow H"),h,600);
  
  BankWindow->resize(x,y,w,h);
  
  rakarrack.get(rkr->PrefNom("Order X"),x,1);
  rakarrack.get(rkr->PrefNom("Order Y"),y,1);
  rakarrack.get(rkr->PrefNom("Order W"),w,600);
  rakarrack.get(rkr->PrefNom("Order H"),h,480);
  
  Order->resize(x,y,w,h);
  
  rakarrack.get(rkr->PrefNom("MIDI Learn X"),x,1);
  rakarrack.get(rkr->PrefNom("MIDI Learn Y"),y,1);
  rakarrack.get(rkr->PrefNom("MIDI Learn W"),w,640);
  rakarrack.get(rkr->PrefNom("MIDI Learn H"),h,480);
  
  MIDILearn->resize(x,y,w,h);
  
  rakarrack.get(rkr->PrefNom("Trigger X"),x,1);
  rakarrack.get(rkr->PrefNom("Trigger Y"),y,1);
  rakarrack.get(rkr->PrefNom("Trigger W"),w,205);
  rakarrack.get(rkr->PrefNom("Trigger H"),h,165);
  
  if(h<165) h= 165;
  
  Trigger->resize(x,y,w,h);
  
  
  
  rakarrack.get(rkr->PrefNom("Settings X"),x,1);
  rakarrack.get(rkr->PrefNom("Settings Y"),y,1);
  rakarrack.get(rkr->PrefNom("Settings W"),w,640);
  rakarrack.get(rkr->PrefNom("Settings H"),h,554);
  
  if (w<640) w=640;
  if (h<554) h=554;
  
  Settings->resize(x,y,w,h);
  
  
  back_color=(Fl_Color)b;
  fore_color=(Fl_Color)f;
  leds_color=(Fl_Color)l;
  label_color=(Fl_Color)a;
  
  Background_Color_Change(back_color);
  Buttons_Color_Change(fore_color);
  Leds_Color_Change(leds_color);
  Label_Color_Change(label_color);
  
  rakarrack.get(rkr->PrefNom("Bank Selected"), rkr->a_bank,3);
  
  if (!needtoloadbank)
  {
  
  switch(rkr->a_bank)
  {
   
         case 0:
         L_B1->do_callback();
         break;
  
         case 1:
         L_B2->do_callback();
         break;
       
         case 2:
         L_B3->do_callback();
         break;
  } 
  } 
   
  if (!commandline)
  {
  
  rakarrack.get(rkr->PrefNom("Preset Num"),k ,1);
  rkr->Selected_Preset=k;
  Preset_Counter->value(k);
  Preset_Counter->do_callback();
  }
  
  rakarrack.get(rkr->PrefNom("MIDI Implementation"),rkr->MIDIway,0); 
  if(!rkr->MIDIway) ML_Menu->deactivate();
  
  rakarrack.get(rkr->PrefNom("MIDI Table"),rkr->midi_table,0); 
  if(!rkr->midi_table) scroll->deactivate();
  
  
  rakarrack.get(rkr->PrefNom("UserName"),rkr->UserRealName,"",127);
  rakarrack.get(rkr->PrefNom("User Directory"),rkr->UDirFilename,DATADIR,127);
  rakarrack.get(rkr->PrefNom("Preserve Gain/Master"),rkr->actuvol,0);
  rakarrack.get(rkr->PrefNom("Metronome Volume"),rkr->Metro_Vol,50);
  rkr->efx_Looper->setmvol(rkr->Metro_Vol);
  
  rakarrack.get(rkr->PrefNom("Update Tap"),rkr->Tap_Updated,0);
  rakarrack.get(rkr->PrefNom("MIDI IN Channel"),rkr->MidiCh,1);
  rkr->MidiCh--;
  
  rakarrack.get(rkr->PrefNom("MIDI IN Harmonizer"),rkr->HarCh,1);
  rkr->HarCh--;
  rakarrack.get(rkr->PrefNom("MIDI IN Stereo Harmonizer"),rkr->StereoHarCh,1);
  rkr->StereoHarCh--;
  
  rakarrack.get(rkr->PrefNom("Limiter Position"),rkr->flpos,0);
  rakarrack.get(rkr->PrefNom("Limiter +6dB"),rkr->db6booster,0);
  rakarrack.get(rkr->PrefNom("Booster"),rkr->booster,1.0f);
  if (rkr->booster==1.0) BostBut->value(0); else BostBut->value(1);
  
  
  rakarrack.get(rkr->PrefNom("FX_init_state"),rkr->init_state,0);
  rakarrack.get(rkr->PrefNom("Auto Assign"),rkr->autoassign,0);
  
  
  
  
  
  if(rkr->init_state)
  {
    if(!needtoloadstate) rkr->Bypass=1;
    rkr->calculavol(1);
    rkr->calculavol(2);
  }  
  
  
  rakarrack.get(rkr->PrefNom("Recognize Optimization Harmonizer"),rkr->RCOpti_Harm,0);
  RC_Harm_Opti->value(rkr->RCOpti_Harm);
  RC_Harm_Opti->do_callback();
  
  rakarrack.get(rkr->PrefNom("Recognize Optimization Stereo Harm"),rkr->RCOpti_Stereo,0);
  RC_St_Harm_Opti->value(rkr->RCOpti_Stereo);
  RC_St_Harm_Opti->do_callback();
  
  rakarrack.get(rkr->PrefNom("Recognize Optimization Ring"),rkr->RCOpti_Ring,0);
  RC_Ring_Opti->value(rkr->RCOpti_Ring);
  RC_Ring_Opti->do_callback();
  
  
  //MIDIConverter
  
  rakarrack.get(rkr->PrefNom("Midi Out Channel"),k,1);
  Midi_out_Counter->value(k);
  Midi_out_Counter->do_callback();
  
  rkr->efx_MIDIConverter->setmidichannel(k);
   
  rakarrack.get(rkr->PrefNom("Trigger Adjust"),k,4);
  Trig_Adj->value(k);
  rkr->efx_MIDIConverter->setTriggerAdjust(k);
  
  
  rakarrack.get(rkr->PrefNom("Velocity Adjust"),k,50);
  Vel_Adj->value(k);
  rkr->efx_MIDIConverter->setVelAdjust(k);
  
  rakarrack.get(rkr->PrefNom("Converter Octave"),k,2);
  MIDIOctave->value(k);
  MIDIOctave->do_callback();
  
  rakarrack.get(rkr->PrefNom("MIDI Converter On/Off"),k,0);
  midi_activar->value(k);
  midi_activar->do_callback();
  
  //Metronome
  
  rakarrack.get(rkr->PrefNom("Internal Metronome Time"),k,2);
  MetroBar->value(k);
  MetroBar->do_callback();
  
  rakarrack.get(rkr->PrefNom("Internal Metronome Sound"),k,0);
  MetroSound->value(k);
  MetroSound->do_callback();
  
  rakarrack.get(rkr->PrefNom("Internal Metronome Volume"),k,50);
  Metro_Volume->value(k);
  Metro_Volume->do_callback();
  
  rakarrack.get(rkr->PrefNom("Internal Metronome Tempo"),k,100);
  Metro_Tempo->value(k);
  Metro_Tempo->do_callback();
  
  rakarrack.get(rkr->PrefNom("Internal Metronome Show"),rkr->sw_stat,0);
  
  rakarrack.get(rkr->PrefNom("Internal Metronome On/Off"),k,0);
  metro_activar->value(k);
  metro_activar->do_callback();
  
  if(rkr->sw_stat==1) 
  { 
    Midi->hide();
    Metro->show();
  }
  else
   {
    Metro->hide();
    Midi->show();
   }
  
  //Tuner
  
  rakarrack.get(rkr->PrefNom("Tuner On/Off"),k,0);
  tuner_activar->value(k);
  tuner_activar->do_callback();
  
  
  //Tap Tempo
  
  rakarrack.get(rkr->PrefNom("TapTempo Input"),rkr->Tap_Selection,0);
  T_SEL->value(rkr->Tap_Selection);
  rakarrack.get(rkr->PrefNom("Tap Tempo Timeout"),rkr->t_timeout,0);
  T_TIMEOUT->value(rkr->t_timeout);
  rakarrack.get(rkr->PrefNom("TapTempo Set"),rkr->Tap_SetValue,0);
  T_SET->value(rkr->Tap_SetValue);
  
  rakarrack.get(rkr->PrefNom("TapTempo On/Off"),k,0);
  Tap_activar->value(k);
  Tap_activar->do_callback();
  
  
  
  rakarrack.get(rkr->PrefNom("Disable Warnings"),rkr->mess_dis,0);
  rakarrack.get(rkr->PrefNom("Enable Tooltips"),rkr->ena_tool,1);
  Fl_Tooltip::enable(rkr->ena_tool);
  
  //Trigger
  
  rakarrack.get(rkr->PrefNom("Aux Source"),rkr->Aux_Source,0);
  aux_source->value(rkr->Aux_Source);
  rakarrack.get(rkr->PrefNom("Aux Gain"),rkr->Aux_Gain,0);
  aux_gain->value(rkr->Aux_Gain);
  rakarrack.get(rkr->PrefNom("Aux Threshold"),rkr->Aux_Threshold,0);
  aux_thres->value(rkr->Aux_Threshold);
  rakarrack.get(rkr->PrefNom("Aux MIDI"),rkr->Aux_MIDI,1);
  aux_midi->value(rkr->Aux_MIDI);
  rakarrack.get(rkr->PrefNom("Aux Minimum"),rkr->Aux_Minimum,0);
  aux_min->value(rkr->Aux_Minimum);
  rakarrack.get(rkr->PrefNom("Aux Maximum"),rkr->Aux_Maximum,127);
  aux_max->value(rkr->Aux_Maximum);
  
  
  char temp[64];
  
  
  for(int i=0; i<128; i++)
  {
  if(i<60) k=i;
  if((i>59)&&(i<120))k=1000+i-60;
  if(i>119) k=0;
  memset(temp,0,sizeof(temp));
  sprintf(temp, "Midi Table Program %d",i);
  rakarrack.get(rkr->PrefNom(temp),f,k);
  
  
  
  if(f<1000) 
  {
  rkr->M_table[i].bank=0;
  rkr->M_table[i].preset=f;
  }
  
  if((f>999) && (f<2000)) 
  {
  rkr->M_table[i].bank=1;
  rkr->M_table[i].preset=f-1000;
  }
  
  if((f>1999) && (f<3000))
  {
  rkr->M_table[i].bank=2;
  rkr->M_table[i].preset=f-2000;
  }
  
  
  if((f>2999) && (f<4000))
  {
  rkr->M_table[i].bank=3;
  rkr->M_table[i].preset=f-3000;
  }
  
  
  }
}

void RKRGUI::save_stat(int whati) {
  int i,k;
  char temp1[128];
  
  Fl_Preferences rakarrack (Fl_Preferences::USER, WEBSITE, PACKAGE);
  
  if (whati==0)
  {
  rakarrack.set(rkr->PrefNom("Principal X"),Principal->x());
  rakarrack.set(rkr->PrefNom("Principal Y"),Principal->y());
  rakarrack.set(rkr->PrefNom("Principal W"),Principal->w());
  rakarrack.set(rkr->PrefNom("Principal H"),Principal->h());
  rakarrack.set(rkr->PrefNom("FontSize"), rkr->relfontsize);
  rakarrack.set(rkr->PrefNom("Font"), rkr->font);
  
  rakarrack.set(rkr->PrefNom("Background Color"), (int)back_color);
  rakarrack.set(rkr->PrefNom("Foreground Color"), (int)fore_color);
  rakarrack.set(rkr->PrefNom("Leds Color"), (int) leds_color);
  rakarrack.set(rkr->PrefNom("Labels Color"),(int) label_color);
  rakarrack.set(rkr->PrefNom("Schema"), (int) scheme_ch->value());
  rakarrack.set(rkr->PrefNom("Hide Effects"), (int) rkr->deachide);
  
  
  rakarrack.set(rkr->PrefNom("Bank Selected"),rkr->a_bank);
  
  if ((Preset_Counter->value() >0) && (Preset_Counter->value() < 61))
  
  rakarrack.set(rkr->PrefNom("Preset Num"),(int) Preset_Counter->value());
  
  if (rkr->help_displayed)
  {
  
  rakarrack.set(rkr->PrefNom("Help X"),visor->x());
  rakarrack.set(rkr->PrefNom("Help Y"),visor->y());
  rakarrack.set(rkr->PrefNom("Help W"),visor->w());
  rakarrack.set(rkr->PrefNom("Help H"),visor->h());
  rakarrack.set(rkr->PrefNom("Help TextSize"),visor->textsize());
  }
  
  //Tuner
  
  rakarrack.set(rkr->PrefNom("Tuner On/Off"),(int) rkr->Tuner_Bypass);
  
  
  //MIDIConverter
  
  rakarrack.set(rkr->PrefNom("MIDI Converter On/Off"),(int) rkr->MIDIConverter_Bypass);
  rakarrack.set(rkr->PrefNom("Midi Out Channel"),(int)Midi_out_Counter->value()); 
  rakarrack.set(rkr->PrefNom("Trigger Adjust"),(int)Trig_Adj->value());
  rakarrack.set(rkr->PrefNom("Velocity Adjust"),(int)Vel_Adj->value());
  rakarrack.set(rkr->PrefNom("Converter Octave"),(int)MIDIOctave->value());
  
  //Metronome
  rakarrack.set(rkr->PrefNom("Internal Metronome On/Off"),(int)rkr->Metro_Bypass); 
  rakarrack.set(rkr->PrefNom("Internal Metronome Time"),(int)MetroBar->value()); 
  rakarrack.set(rkr->PrefNom("Internal Metronome Volume"),(int)Metro_Volume->value());
  rakarrack.set(rkr->PrefNom("Internal Metronome Tempo"),(int)Metro_Tempo->value());
  rakarrack.set(rkr->PrefNom("Internal Metronome Show"),(int)rkr->sw_stat);
  rakarrack.set(rkr->PrefNom("Internal Metronome Sound"),(int)MetroSound->value());
  
  //Booster
  rakarrack.set(rkr->PrefNom("Booster"),rkr->booster);
  
  
  //Tap Tempo
  rakarrack.set(rkr->PrefNom("TapTempo On/Off"),(int)rkr->Tap_Bypass); 
  rakarrack.set(rkr->PrefNom("TapTempo Input"),(int)rkr->Tap_Selection); 
  rakarrack.set(rkr->PrefNom("TapTempo Set"),(int)rkr->Tap_SetValue); 
  
  
  
  }
  
  
  if (whati==1)
  {
  rakarrack.set(rkr->PrefNom("BankWindow X"),BankWindow->x());
  rakarrack.set(rkr->PrefNom("BankWindow Y"),BankWindow->y());
  rakarrack.set(rkr->PrefNom("BankWindow W"),BankWindow->w());
  rakarrack.set(rkr->PrefNom("BankWindow H"),BankWindow->h());
  
  
  }
  
  if (whati==5)
  {
  rakarrack.set(rkr->PrefNom("MIDI Learn X"),MIDILearn->x());
  rakarrack.set(rkr->PrefNom("MIDI Learn Y"),MIDILearn->y());
  rakarrack.set(rkr->PrefNom("MIDI Learn W"),MIDILearn->w());
  rakarrack.set(rkr->PrefNom("MIDI Learn H"),MIDILearn->h());
  }
  
  
  if (whati==6)
  {
  rakarrack.set(rkr->PrefNom("Trigger X"),Trigger->x());
  rakarrack.set(rkr->PrefNom("Trigger Y"),Trigger->y());
  rakarrack.set(rkr->PrefNom("Trigger W"),Trigger->w());
  rakarrack.set(rkr->PrefNom("Trigger H"),Trigger->h());
  
  rakarrack.set(rkr->PrefNom("Aux Source"),rkr->Aux_Source);
  rakarrack.set(rkr->PrefNom("Aux Gain"),rkr->Aux_Gain);
  rakarrack.set(rkr->PrefNom("Aux Threshold"),rkr->Aux_Threshold);
  rakarrack.set(rkr->PrefNom("Aux MIDI"),rkr->Aux_MIDI);
  rakarrack.set(rkr->PrefNom("Aux Minimum"),rkr->Aux_Minimum);
  rakarrack.set(rkr->PrefNom("Aux Maximum"),rkr->Aux_Maximum);
  
  }
  
  
  
  
  if (whati==2)
  {
  rakarrack.set(rkr->PrefNom("Order X"),Order->x());
  rakarrack.set(rkr->PrefNom("Order Y"),Order->y());
  rakarrack.set(rkr->PrefNom("Order W"),Order->w());
  rakarrack.set(rkr->PrefNom("Order H"),Order->h());
  }
  
  if (whati==3)
  {
  rakarrack.set(rkr->PrefNom("Settings X"),Settings->x());
  rakarrack.set(rkr->PrefNom("Settings Y"),Settings->y());
  rakarrack.set(rkr->PrefNom("Settings W"),Settings->w());
  rakarrack.set(rkr->PrefNom("Settings H"),Settings->h());
  }
  
  if((whati==3) || (whati==0))
  {
  rakarrack.set(rkr->PrefNom("UserName"),rkr->UserRealName);
  rakarrack.set(rkr->PrefNom("Preserve Gain/Master"),rkr->actuvol);
  rakarrack.set(rkr->PrefNom("Metronome Volume"),rkr->Metro_Vol);
  
  
  rakarrack.set(rkr->PrefNom("Filter DC Offset"),rkr->DC_Offset);
  
  rakarrack.set(rkr->PrefNom("Update Tap"),rkr->Tap_Updated);
  rakarrack.set(rkr->PrefNom("Limiter Position"),rkr->flpos);
  rakarrack.set(rkr->PrefNom("Limiter +6dB"),rkr->db6booster);
  
  rakarrack.set(rkr->PrefNom("Recognize Optimization Harmonizer"),rkr->RCOpti_Harm);
  rakarrack.set(rkr->PrefNom("Recognize Optimization Stereo Harm"),rkr->RCOpti_Stereo);
  rakarrack.set(rkr->PrefNom("Recognize Optimization Ring"),rkr->RCOpti_Ring);
  
  
  rakarrack.set(rkr->PrefNom("Harmonizer Downsample"),rkr->Har_Down);
  rakarrack.set(rkr->PrefNom("Harmonizer Up Quality"),rkr->Har_U_Q);
  rakarrack.set(rkr->PrefNom("Harmonizer Down Quality"),rkr->Har_D_Q);
  rakarrack.set(rkr->PrefNom("Reverbtron Downsample"),rkr->Rev_Down);
  rakarrack.set(rkr->PrefNom("Reverbtron Up Quality"),rkr->Rev_U_Q);
  rakarrack.set(rkr->PrefNom("Reverbtron Down Quality"),rkr->Rev_D_Q);
  rakarrack.set(rkr->PrefNom("Convolotron Downsample"),rkr->Con_Down);
  rakarrack.set(rkr->PrefNom("Convolotron Up Quality"),rkr->Con_U_Q);
  rakarrack.set(rkr->PrefNom("Convolotron Down Quality"),rkr->Con_D_Q);
  rakarrack.set(rkr->PrefNom("Sequence Downsample"),rkr->Seq_Down);
  rakarrack.set(rkr->PrefNom("Sequence Up Quality"),rkr->Seq_U_Q);
  rakarrack.set(rkr->PrefNom("Sequence Down Quality"),rkr->Seq_D_Q);
  rakarrack.set(rkr->PrefNom("Shifter Downsample"),rkr->Shi_Down);
  rakarrack.set(rkr->PrefNom("Shifter Up Quality"),rkr->Shi_U_Q);
  rakarrack.set(rkr->PrefNom("Shifter Down Quality"),rkr->Shi_D_Q);
  rakarrack.set(rkr->PrefNom("Vocoder Downsample"),rkr->Voc_Down);
  rakarrack.set(rkr->PrefNom("Vocoder Up Quality"),rkr->Voc_U_Q);
  rakarrack.set(rkr->PrefNom("Vocoder Down Quality"),rkr->Voc_D_Q);
  rakarrack.set(rkr->PrefNom("StereoHarm Downsample"),rkr->Ste_Down);
  rakarrack.set(rkr->PrefNom("StereoHarm Up Quality"),rkr->Ste_U_Q);
  rakarrack.set(rkr->PrefNom("StereoHarm Down Quality"),rkr->Ste_D_Q);
  
  rakarrack.set(rkr->PrefNom("Waveshape Resampling"),rkr->Wave_res_amount);
  rakarrack.set(rkr->PrefNom("Waveshape Up Quality"),rkr->Wave_up_q);
  rakarrack.set(rkr->PrefNom("Waveshape Down Quality"),rkr->Wave_down_q);
  rakarrack.set(rkr->PrefNom("Calibration"),rkr->aFreq);
  rakarrack.set(rkr->PrefNom("Recognize Trigger"),rkr->rtrig);
  
  rakarrack.set(rkr->PrefNom("Vocoder Bands"),rkr->VocBands);
  
  
  
  rakarrack.set(rkr->PrefNom("FX_init_state"),rkr->init_state);
  rakarrack.set(rkr->PrefNom("Auto Assign"),rkr->autoassign);
  
  rakarrack.set(rkr->PrefNom("UpSampling"),rkr->upsample);
  rakarrack.set(rkr->PrefNom("UpQuality"),rkr->UpQual);
  rakarrack.set(rkr->PrefNom("DownQuality"),rkr->DownQual);
  
  rakarrack.set(rkr->PrefNom("UpAmount"),rkr->UpAmo);
  rakarrack.set(rkr->PrefNom("Looper Size"),rkr->looper_size);
  
  
  
  rakarrack.set(rkr->PrefNom("FontSize"),rkr->relfontsize);
  rakarrack.set(rkr->PrefNom("Bank Filename"),rkr->BankFilename);
  rakarrack.set(rkr->PrefNom("User Directory"),rkr->UDirFilename);
  
  rakarrack.set(rkr->PrefNom("Enable Background Image"),rkr->EnableBackgroundImage);
  rakarrack.set(rkr->PrefNom("Background Image"),rkr->BackgroundImage);
  rakarrack.set(rkr->PrefNom("Auto Connect MIDI IN"),rkr->aconnect_MI);
  rakarrack.set(rkr->PrefNom("Auto Connect Jack"),rkr->aconnect_JA);
  rakarrack.set(rkr->PrefNom("Auto Connect Jack In"),rkr->aconnect_JIA);
  
  
  rakarrack.set(rkr->PrefNom("MIDI Implementation"),rkr->MIDIway);
  rakarrack.set(rkr->PrefNom("MIDI Table"),rkr->midi_table);
  
  
  
  i = BMidiIn->value();
  char *temp;
  temp = (char*) BMidiIn->text(i);
  if (temp!=NULL)
  rakarrack.set(rkr->PrefNom("MIDI IN Device"),temp);
  rakarrack.set(rkr->PrefNom("MIDI IN Channel"),rkr->MidiCh+1);
  rakarrack.set(rkr->PrefNom("MIDI IN Harmonizer"),rkr->HarCh+1);
  rakarrack.set(rkr->PrefNom("MIDI IN Stereo Harmonizer"),rkr->StereoHarCh+1);
  rakarrack.set(rkr->PrefNom("Harmonizer Quality"),rkr->HarQual);
  rakarrack.set(rkr->PrefNom("StereoHarm Quality"),rkr->SteQual);
  rakarrack.set(rkr->PrefNom("Tap Tempo Timeout"),rkr->t_timeout);
  rakarrack.set(rkr->PrefNom("Disable Warnings"),rkr->mess_dis);
  rakarrack.set(rkr->PrefNom("Enable Tooltips"),rkr->ena_tool);
  
  
  
  k=1;
  
  
  for(i=0; i<128;i++)
  {
        memset(temp1,0, sizeof(temp1));
        sprintf(temp1, "Midi Table Program %d",i);
        rakarrack.set(rkr->PrefNom(temp1),rkr->M_table[i].bank*1000+rkr->M_table[i].preset);
  }
  
  
  }
  
  
  
  
  if(whati==3)
  {
  
  
  for(i=1; i<=JackCo->size();i++)
  { 
   
    if (JackCo->selected(i))
      {
        memset(temp1,0, sizeof(temp1));
        sprintf(temp1,"Jack Port %d",k);
        rakarrack.set(rkr->PrefNom(temp1),JackCo->text(i));
        k++;
      }
        
  }   
        
   rakarrack.set(rkr->PrefNom("Auto Connect Num"),k-1); 
    
  k=1;
  for(i=1; i<=JackIn->size();i++)
  { 
   
    if (JackIn->selected(i))
      {
        memset(temp1,0, sizeof(temp1));
        sprintf(temp1,"Jack Port In %d",k);
        rakarrack.set(rkr->PrefNom(temp1),JackIn->text(i));
        k++;
      }
        
  }   
        
   rakarrack.set(rkr->PrefNom("Auto Connect In Num"),k-1); 
      
  
  
  
  }
}

void RKRGUI::Put_Loaded() {
  //General
  int i;
  
  
  WPreset_Name->value(rkr->Preset_Name);
  DAuthor->copy_label(rkr->Author);
  
  Nivel_Entrada->value((int) (rkr->Input_Gain*100.0)-50);
  rkr->calculavol(1);
  Nivel_Salida->value((int) (rkr->Master_Volume*100.0)-50);
  rkr->calculavol(2);
  Balance->value((int)(rkr->Fraction_Bypass*100.0));
  
  
  ActivarGeneral->value(rkr->Bypass);
  
  if (rkr->Bypass==0)
  {
  
  rkr->val_il_sum=-50;
  rkr->val_ir_sum=-50;
  
  rkr->val_vl_sum=-50;
  rkr->val_vr_sum=-50;
  
  input_vul->value(-50);
  input_vur->value(-50);
  
  output_vul->value(-50);
  output_vur->value(-50);
  
  
  }
  
  
  /*  Original set and cleared for only the ten current from efx_order[] which did not
      clear other efx from leftover settings. The new behavior will reset all efx to default
      if not used. The reset will occur when the New button is pressed or a new bank is selected.
      If an existing bank repositions an effect, by replacement and then moving it to a new location
      then the settings are kept from previous.
      
      Legacy:
      for(i=0;i<10;i++) {
      switch(rkr->efx_order[i]){
  */
  
  for(i=0;i<rkr->NumEffects;i++)
  {
       switch(i)
       {     
  
       case 0: //EQ1
       EQ->eq_activar->value(rkr->EQ1_Bypass);
       EQ->eq_preset->do_callback(EQ->eq_preset,1);
       break;
  
       case 1://Compressor
       COMPRESS->compress_activar->value(rkr->Compressor_Bypass);
       COMPRESS->compress_preset->do_callback(COMPRESS->compress_preset,1);
       break;
  
       case 2://Distorsion
       DIST->dist_activar->value(rkr->Distorsion_Bypass);
       DIST->dist_preset->do_callback(DIST->dist_preset, 1);
       break;
  
       case 3://Overdrive
       OVRD->ovrd_activar->value(rkr->Overdrive_Bypass);
       OVRD->ovrd_preset->do_callback(OVRD->ovrd_preset,1);
       break; 
  
       case 4://Echo
       ECHO->echo_activar->value(rkr->Echo_Bypass);
       ECHO->echo_preset->do_callback(ECHO->echo_preset,1);
       break;
       
       case 5://Chorus
       CHORUS->chorus_activar->value(rkr->Chorus_Bypass);
       CHORUS->chorus_preset->do_callback(CHORUS->chorus_preset,1); 
       break;
       
       case 6://Phaser
       PHASER->phaser_activar->value(rkr->Phaser_Bypass);
       PHASER->phaser_preset->do_callback(PHASER->phaser_preset,1);
       break;  
  
       case 7://Flanger
       FLANGER->flanger_activar->value(rkr->Flanger_Bypass);
       FLANGER->flanger_preset->do_callback(FLANGER->flanger_preset,1); 
       break;
   
       case 8://Reverb
       REVERB->reverb_activar->value(rkr->Reverb_Bypass);
       REVERB->reverb_preset->do_callback(REVERB->reverb_preset,1);
       break;  
  
       case 9://EQ2
       PEQ->eqp_activar->value(rkr->EQ2_Bypass);
       PEQ->eqp_preset->do_callback(PEQ->eqp_preset,1);
       break; 
       
       case 10://WahWah
       WHAWHA->WhaWha_activar->value(rkr->WhaWha_Bypass);
       WHAWHA->WhaWha_preset->do_callback(WHAWHA->WhaWha_preset,1);
       break;
  
       case 11://AlienWah
       ALIENWAH->Alienwah_activar->value(rkr->Alienwah_Bypass);
       ALIENWAH->Alienwah_preset->do_callback(ALIENWAH->Alienwah_preset,1); 
       break;
       
       case 12://Cabinet
       CABINET->Cabinet_output->value(rkr->lv[13][1]-64);
       CABINET->Cabinet_preset->value(rkr->lv[13][0]);
       CABINET->Cabinet_activar->value(rkr->Cabinet_Bypass);
       break;
   
       case 13://Pan
       PAN->pan_activar->value(rkr->Pan_Bypass);
       PAN->pan_preset->do_callback(PAN->pan_preset,1);
       break;
       
       case 14://Har
       HAR->har_activar->value(rkr->Harmonizer_Bypass);
       HAR->har_preset->do_callback(HAR->har_preset,1);
       break;
  
       case 15://MsicalDelay
       MUSDELAY->musdelay_activar->value(rkr->MusDelay_Bypass);
       MUSDELAY->musdelay_preset->do_callback(MUSDELAY->musdelay_preset,1);
       break; 
  
       case 16://NoiseGate
       GATE->gate_activar->value(rkr->Gate_Bypass);
       GATE->gate_preset->do_callback(GATE->gate_preset,1);
       break; 
  
       case 17://NewDist
       NEWDIST->newdist_activar->value(rkr->NewDist_Bypass);
       NEWDIST->newdist_preset->do_callback(NEWDIST->newdist_preset,1);
       break;
       
       case 18://APhaser
       APHASER->aphaser_activar->value(rkr->APhaser_Bypass);
       APHASER->aphaser_preset->do_callback(APHASER->aphaser_preset,1);
       break;
  
       case 19://Valve
       VALVE->valve_activar->value(rkr->Valve_Bypass);
       VALVE->valve_preset->do_callback(VALVE->valve_preset,1);
       break;
  
       case 20://Dual_Flange
       DFLANGE->dflange_activar->value(rkr->DFlange_Bypass);
       DFLANGE->dflange_preset->do_callback(DFLANGE->dflange_preset,1);
       break;
  
       case 21:// Ring
       RING->ring_activar->value(rkr->Ring_Bypass);
       RING->ring_preset->do_callback(RING->ring_preset,1);
       break;  
  
       case 22:// Exciter
       EXCITER->exciter_activar->value(rkr->Exciter_Bypass);
       EXCITER->exciter_preset->do_callback(EXCITER->exciter_preset,1);
       break; 
  
       case 23://MBDist
       MBDIST->mbdist_activar->value(rkr->MBDist_Bypass);
       MBDIST->mbdist_preset->do_callback(MBDIST->mbdist_preset,1);
       break;
  
       case 24://Arpie
       ARPIE->arpie_activar->value(rkr->Arpie_Bypass);
       ARPIE->arpie_preset->do_callback(ARPIE->arpie_preset,1);
       break;
  
       case 25://Expander
       EXPANDER->expander_activar->value(rkr->Expander_Bypass);
       EXPANDER->expander_preset->do_callback(EXPANDER->expander_preset,1);
       break;
  
       case 26://Shuffle
       SHUFFLE->shuffle_activar->value(rkr->Shuffle_Bypass);
       SHUFFLE->shuffle_preset->do_callback(SHUFFLE->shuffle_preset,1);
       break;
  
       case 27://Synthfilter
       SYNTHFILTER->synthfilter_activar->value(rkr->Synthfilter_Bypass);
       SYNTHFILTER->synthfilter_preset->do_callback(SYNTHFILTER->synthfilter_preset,1);
       break; 
  
       case 28://VaryBand
       MBVVOL->mbvvol_activar->value(rkr->MBVvol_Bypass);
       MBVVOL->mbvvol_preset->do_callback(MBVVOL->mbvvol_preset,1);
       break;
  
       case 29://Convolotron
       CONVOLOTRON->convo_activar->value(rkr->Convol_Bypass);
       CONVOLOTRON->convo_preset->do_callback(CONVOLOTRON->convo_preset,1);
       break; 
  
       case 30://Looper
       LOOPER->looper_activar->value(rkr->Looper_Bypass);
       LOOPER->looper_preset->do_callback(LOOPER->looper_preset,1);
       update_looper();
       break;
  
       case 31://RyanWah
       RYANWAH->ryanwah_activar->value(rkr->RyanWah_Bypass);
       RYANWAH->ryanwah_preset->do_callback(RYANWAH->ryanwah_preset,1);
       break;  
       
       case 32:// RBEcho
       RBECHO->rbecho_activar->value(rkr->RBEcho_Bypass);
       RBECHO->rbecho_preset->do_callback(RBECHO->rbecho_preset,1);
       break;
       
       case 33:// CoilCrafter
       COILCRAFTER->coil_activar->value(rkr->CoilCrafter_Bypass);
       COILCRAFTER->coil_preset->do_callback(COILCRAFTER->coil_preset,1);
       break;
  
       case 34://ShelfBoost
       SHELFBOOST->shelf_activar->value(rkr->ShelfBoost_Bypass);
       SHELFBOOST->shelf_preset->do_callback(SHELFBOOST->shelf_preset,1);
       break;
       
       case 35://Vocoder
       VOCODER->vo_activar->value(rkr->Vocoder_Bypass);
       VOCODER->vo_preset->do_callback(VOCODER->vo_preset,1);
       break;
  
       case 36://Sustainer
       SUSTAINER->sus_activar->value(rkr->Sustainer_Bypass);
       SUSTAINER->sus_preset->do_callback(SUSTAINER->sus_preset,1);
       break;
       
      case 37://Sequence
      SEQUENCE->seq_activar->value(rkr->Sequence_Bypass);
      SEQUENCE->seq_preset->do_callback(SEQUENCE->seq_preset,1);
      break;
  
      case 38://Shifter
      SHIFTER->shifter_activar->value(rkr->Shifter_Bypass);
      SHIFTER->shifter_preset->do_callback(SHIFTER->shifter_preset,1);
      break;
  
      case 39://StompBox
      STOMPBOX->stomp_activar->value(rkr->StompBox_Bypass);
      STOMPBOX->stomp_preset->do_callback(STOMPBOX->stomp_preset,1);
      break;
  
      case 40://Reverbtron
      REVERBTRON->revtron_activar->value(rkr->Reverbtron_Bypass);
      REVERBTRON->revtron_preset->do_callback(REVERBTRON->revtron_preset,1);
      break;
  
      case 41://Echotron
      ECHOTRON->echotron_activar->value(rkr->Echotron_Bypass);
      ECHOTRON->echotron_preset->do_callback(ECHOTRON->echotron_preset,1);
      break;
  
      case 42://StereoHarm
      SHAR->shar_activar->value(rkr->StereoHarm_Bypass);
      SHAR->shar_preset->do_callback(SHAR->shar_preset,1);
      break; 
  
      case 43://CompBand
      cband_activar->value(rkr->CompBand_Bypass);
      cband_preset->do_callback(cband_preset,1);
      break;
  
      case 44://Opticaltrem
      otrem_activar->value(rkr->Opticaltrem_Bypass);
      otrem_preset->do_callback(otrem_preset,1);
      break;
  
      case 45://Vibe
      vibe_activar->value(rkr->Vibe_Bypass);
      vibe_preset->do_callback(vibe_preset,1);
      break;
      
      case 46://Infinity
      infinity_activar->value(rkr->Infinity_Bypass);
      infinity_preset->do_callback(infinity_preset,1);
      break;
  
    }
  
  }
  
  reordena();
}

void RKRGUI::tick(void* v) {
  Fl_Box *o = (Fl_Box*)v;
  o->do_callback();
  Fl::repeat_timeout(.04,tick,v);
}

void RKRGUI::preset_click(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->preset_click_i(o,v);
}

inline void RKRGUI::preset_click_i(Fl_Button* o, void*) {
  int ok;
  int num; 
  int tecla = Fl::event_key();
  long long kk = (long long) o->user_data();
  
  
  num = (int) kk;
  
  
  if(drag!=1000)
  {
   int en = search_but(Fl::event_x(),Fl::event_y());
   if(en != 1000)
   { 
   rkr->Bank[0]=rkr->Bank[en];
   rkr->Bank[en]=rkr->Bank[num];
   rkr->Bank[num]=rkr->Bank[0];
   Put_Loaded_Bank();
   rkr->modified=1;
   num=en;
   drag = 1000;
   }
  }
  
  if((Fl::event_is_click()==0)&&(Fl::event()==5)) 
  {
  drag = num; 
  return;
  }
  else drag = 1000;
  
    
  if ((Fl::event_button()==3) && (Fl::event()==FL_RELEASE))
  {
  
  Fl_Widget *w = ob->child(num-1);
  
  
  if (strlen(rkr->Bank[num].Preset_Name) >0)
  { 
    Fl_Widget *m = fl_message_icon();
    m->parent()->copy_label(rkr->jackcliname);
    ok=fl_choice("Overwrite \"%s\"?", "No", "Yes", NULL, w->label());
   if (!ok)
   { 
   o->value(0);
   o->redraw();
    return;
   }
  
  
  }
   o->value(0);
   o->redraw();
   rkr->Preset_to_Bank(num);
   w->copy_label(rkr->Preset_Name);
   rkr->modified=1;
  }
  
  
  
  if ((Fl::event_button()==1) || tecla == 32)
  {
  
  if((num != rkr->Selected_Preset) || (rkr->new_bank_loaded))
  {
  Fl_Widget *w = ob->child(num-1);
  unlight_preset(rkr->Selected_Preset);
  rkr->Selected_Preset=num;
  w->color(fl_darker(leds_color));
  Preset_Counter->value(num);
  Preset_Counter->do_callback();
  }
  }
}

void RKRGUI::make_window_banks() {
  int i,j,x,y;
  int elw,elh;
  intptr_t num;
  
  elw=176*BankWindow->w()/800;
  elh=32*BankWindow->h()/600;
  
  
  
  ob->begin();
  
  x=40;y=40;
  num=1;
  
  for (i=1;i<16;i++)
  {
  y +=elh+2;
  
  for (j=1; j<5; j++)
  {
     
       Fl_Button* butX = new Fl_Button(x+1, y+1, elw,elh,rkr->Bank[num].Preset_Name);
        butX->type(0);
        butX->color(fore_color);
        butX->box(FL_UP_BOX);
        butX->selection_color(leds_color);
        butX->labelcolor(label_color);
        butX->labelsize(14);
        butX->align(68|FL_ALIGN_INSIDE);
        butX->user_data((void*) (num));
        butX->value(0);
        butX->when(FL_WHEN_CHANGED |FL_WHEN_RELEASE_ALWAYS);
        butX->callback((Fl_Callback *)preset_click);
        ob->add(butX);
  
  x +=elw+4;
  num++;
  
  }
   x=40;
  
  }
  
  
  ob->end();
  made=1;
  
  B_B1->color(fore_color);
  B_B2->color(fore_color);
  B_B3->color(fore_color);
  B_B4->color(fore_color);
  CH_UB->color(fore_color);
  
  light_preset(rkr->Selected_Preset);
}

void RKRGUI::reordena() {
  int i;
  unsigned int x[10],y[10];
  ulong s[10];
  
  s[0]=49;
  s[1]=50;
  s[2]=51;
  s[3]=52;
  s[4]=53;
  s[5]=54;
  s[6]=55;
  s[7]=56;
  s[8]=57;
  s[9]=48;
  
  
  x[0]=E1->x();
  x[1]=E2->x();
  x[2]=E3->x();
  x[3]=E4->x();
  x[4]=E5->x();
  x[5]=E6->x();
  x[6]=E7->x();
  x[7]=E8->x();
  x[8]=E9->x();
  x[9]=E10->x();
  
  y[0]=E1->y();
  y[1]=E2->y();
  y[2]=E3->y();
  y[3]=E4->y();
  y[4]=E5->y();
  y[5]=E6->y();
  y[6]=E7->y();
  y[7]=E8->y();
  y[8]=E9->y();
  y[9]=E10->y();
  
  
  
  
  
  
  //Hide All
  	EQ->hide();
  	COMPRESS->hide();
  	DIST->hide();
          OVRD->hide(); 
  	ECHO->hide();
          CHORUS->hide();
          PHASER->hide();
          FLANGER->hide();        
  	REVERB->hide();
  	PEQ->hide();
  	WHAWHA->hide();
  	ALIENWAH->hide();
  	CABINET->hide();
  	PAN->hide();
  	HAR->hide();
  	MUSDELAY->hide();
  	GATE->hide();
  	NEWDIST->hide();
  	APHASER->hide();
  	VALVE->hide();
  	DFLANGE->hide();
  	RING->hide();
  	EXCITER->hide();
  	MBDIST->hide();
  	ARPIE->hide();
  	EXPANDER->hide();
  	SHUFFLE->hide();
  	SYNTHFILTER->hide();
  	MBVVOL->hide();
  	CONVOLOTRON->hide();
  	LOOPER->hide();
  	RYANWAH->hide();
  	RBECHO->hide();
  	COILCRAFTER->hide();
  	SHELFBOOST->hide();
  	VOCODER->hide();
  	SUSTAINER->hide();
  	SEQUENCE->hide();
  	SHIFTER->hide();
  	STOMPBOX->hide();
  	REVERBTRON->hide();
  	ECHOTRON->hide();
  	SHAR->hide();
  	COMPBAND->hide();
  	OTREM->hide();
  	VIBE->hide();
  	INFINIT->hide();
  	
  	
  	
     
   // Show   
      
      
  for (i=0; i<10; i++)
  {
  
  switch (rkr->efx_order[i])
    {
    
      case 0:
         
         EQ->position(x[i],y[i]);
         EQ->eq_activar->shortcut(s[i]);
         if(!rkr->deachide) EQ->show();
         if(rkr->EQ1_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide) EQ->show();
         }
         else rkr->active[i]=0;
         break;   
         
         
      case 1:
         
         COMPRESS->position(x[i],y[i]);
         COMPRESS->compress_activar->shortcut(s[i]);
         if(!rkr->deachide)COMPRESS->show();
         if(rkr->Compressor_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)COMPRESS->show();
         }
         else rkr->active[i]=0;
         break;   
         
       case 2:
      
         DIST->position(x[i],y[i]);
         DIST->dist_activar->shortcut(s[i]);
         if(!rkr->deachide)DIST->show();
         if(rkr->Distorsion_Bypass)
         {
         rkr->active[i]=1;
         if(rkr->deachide)DIST->show();
         }
         else rkr->active[i]=0;
         break;   
         
       case 3:
      
         OVRD->position(x[i],y[i]);
         OVRD->ovrd_activar->shortcut(s[i]);
         if(!rkr->deachide)OVRD->show();
         if(rkr->Overdrive_Bypass)
         {
         rkr->active[i]=1;
         if(rkr->deachide)OVRD->show();
         }
         else rkr->active[i]=0;
         break;   
         
       case 4:
      
         ECHO->position(x[i],y[i]);
         ECHO->echo_activar->shortcut(s[i]);
         if(!rkr->deachide)ECHO->show();
         if(rkr->Echo_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)ECHO->show();
         }
         else rkr->active[i]=0;
         break;   
         
       case 5:
      
         CHORUS->position(x[i],y[i]);
         CHORUS->chorus_activar->shortcut(s[i]);
         if(!rkr->deachide)CHORUS->show();
         if(rkr->Chorus_Bypass)
         {
         rkr->active[i]=1;
         if(rkr->deachide)CHORUS->show();
         }
         else rkr->active[i]=0;
         break;   
         
       case 6:
      
         PHASER->position(x[i],y[i]);
         PHASER->phaser_activar->shortcut(s[i]);
         if(!rkr->deachide)PHASER->show();
         if(rkr->Phaser_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)PHASER->show();
         }
         else rkr->active[i]=0;
         break;   
         
       case 7:
      
         FLANGER->position(x[i],y[i]);
         FLANGER->flanger_activar->shortcut(s[i]);
         if(!rkr->deachide)FLANGER->show();
         if(rkr->Flanger_Bypass)
         {
         rkr->active[i]=1;
         if(rkr->deachide)FLANGER->show();
         }
         else rkr->active[i]=0;
         break;    
                      
       case 8:
      
         REVERB->position(x[i],y[i]);
         REVERB->reverb_activar->shortcut(s[i]);
         if(!rkr->deachide)REVERB->show();
         if(rkr->Reverb_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)REVERB->show();
         }
         else rkr->active[i]=0;
         break;     
         
       case 9:
      
         PEQ->position(x[i],y[i]);
         PEQ->eqp_activar->shortcut(s[i]);
         if(!rkr->deachide)PEQ->show();
         if(rkr->EQ2_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)PEQ->show();
         }
         else rkr->active[i]=0;
         break;     
       
       case 10:
      
         WHAWHA->position(x[i],y[i]);
         WHAWHA->WhaWha_activar->shortcut(s[i]);
         if(!rkr->deachide)WHAWHA->show();
         if(rkr->WhaWha_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)WHAWHA->show();
         }
         else rkr->active[i]=0;
         break;  
         
       case 11:
      
         ALIENWAH->position(x[i],y[i]);
         ALIENWAH->Alienwah_activar->shortcut(s[i]);
         if(!rkr->deachide)ALIENWAH->show();
         if(rkr->Alienwah_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)ALIENWAH->show();
         }
         else rkr->active[i]=0;
         break;      
       
       case 12:
       
         CABINET->position(x[i],y[i]);   
         CABINET->Cabinet_activar->shortcut(s[i]);
         if(!rkr->deachide)CABINET->show();
         if(rkr->Cabinet_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)CABINET->show();
         }
         else rkr->active[i]=0;
         break;
      
       case 13:
       
         PAN->position(x[i],y[i]);   
         PAN->pan_activar->shortcut(s[i]);
         if(!rkr->deachide)PAN->show();
         if(rkr->Pan_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)PAN->show();
         }
         else rkr->active[i]=0;
         break;
       
       case 14:
         HAR->position(x[i],y[i]);
         HAR->har_activar->shortcut(s[i]);
         if(!rkr->deachide)HAR->show();
         if(rkr->Harmonizer_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)HAR->show();
         }
         else rkr->active[i]=0;
         break;
       
       case 15:
         MUSDELAY->position(x[i],y[i]);
         MUSDELAY->musdelay_activar->shortcut(s[i]);
         if(!rkr->deachide)MUSDELAY->show();
         if(rkr->MusDelay_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)MUSDELAY->show();
         }
         else rkr->active[i]=0;
         break; 
         
       case 16:
         GATE->position(x[i],y[i]);
         GATE->gate_activar->shortcut(s[i]);
         if(!rkr->deachide)GATE->show();
         if(rkr->Gate_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)GATE->show();
         }
         else rkr->active[i]=0;
         break;  
       
       case 17:
         NEWDIST->position(x[i],y[i]);
         NEWDIST->newdist_activar->shortcut(s[i]);
         if(!rkr->deachide)NEWDIST->show();
         if(rkr->NewDist_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)NEWDIST->show();
         }
         else rkr->active[i]=0;
         break;
        
       case 18:
         APHASER->position(x[i],y[i]);
         APHASER->aphaser_activar->shortcut(s[i]);
         if(!rkr->deachide)APHASER->show();
         if(rkr->APhaser_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)APHASER->show();
         }
         else rkr->active[i]=0;
         break;
   
       case 19:
         VALVE->position(x[i],y[i]);
         VALVE->valve_activar->shortcut(s[i]);
         if(!rkr->deachide)VALVE->show();
         if(rkr->Valve_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)VALVE->show();
         }       
         else rkr->active[i]=0;
         break;
  
       case 20:
         DFLANGE->position(x[i],y[i]);
         DFLANGE->dflange_activar->shortcut(s[i]);
         if(!rkr->deachide)DFLANGE->show();
         if(rkr->DFlange_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)DFLANGE->show();
         }       
         else rkr->active[i]=0;
         break;
  
       case 21:
         RING->position(x[i],y[i]);
         RING->ring_activar->shortcut(s[i]);
         if(!rkr->deachide)RING->show();
         if(rkr->Ring_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)RING->show();
         }
         else rkr->active[i]=0;
         break;
  
       case 22:
         EXCITER->position(x[i],y[i]);
         EXCITER->exciter_activar->shortcut(s[i]);
         if(!rkr->deachide)EXCITER->show();
         if(rkr->Exciter_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)EXCITER->show();
         }
         else rkr->active[i]=0;
         break;
  
       case 23:
         MBDIST->position(x[i],y[i]);
         MBDIST->mbdist_activar->shortcut(s[i]);
         if(!rkr->deachide)MBDIST->show();
         if(rkr->MBDist_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)MBDIST->show();
         }
         else rkr->active[i]=0;
         break;
       
       case 24:
         ARPIE->position(x[i],y[i]);
         ARPIE->arpie_activar->shortcut(s[i]);
         if(!rkr->deachide)ARPIE->show();
         if(rkr->Arpie_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)ARPIE->show();
         }
         else rkr->active[i]=0;
         break;   
  
       case 25:
         EXPANDER->position(x[i],y[i]);
         EXPANDER->expander_activar->shortcut(s[i]);
         if(!rkr->deachide)EXPANDER->show();
         if(rkr->Expander_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)EXPANDER->show();
         }
         else rkr->active[i]=0;
         break;   
  
       case 26:
         SHUFFLE->position(x[i],y[i]);
         SHUFFLE->shuffle_activar->shortcut(s[i]);
         if(!rkr->deachide)SHUFFLE->show();
         if(rkr->Shuffle_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)SHUFFLE->show();
         }
         else rkr->active[i]=0;
         break;   
  
       case 27:
         SYNTHFILTER->position(x[i],y[i]);
         SYNTHFILTER->synthfilter_activar->shortcut(s[i]);
         if(!rkr->deachide)SYNTHFILTER->show();
         if(rkr->Synthfilter_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)SYNTHFILTER->show();
         }       
         else rkr->active[i]=0;
         
         break;   
  
       case 28:
         MBVVOL->position(x[i],y[i]);
         MBVVOL->mbvvol_activar->shortcut(s[i]);
         if(!rkr->deachide)MBVVOL->show();
         if(rkr->MBVvol_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)MBVVOL->show();
         }
         else rkr->active[i]=0;
         break;   
  
       case 29:
         CONVOLOTRON->position(x[i],y[i]);
         CONVOLOTRON->convo_activar->shortcut(s[i]);
         if(!rkr->deachide)CONVOLOTRON->show();
         if(rkr->Convol_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)CONVOLOTRON->show();
         }
         else rkr->active[i]=0;
         break; 
  
       case 30:
         LOOPER->position(x[i],y[i]);
         LOOPER->looper_activar->shortcut(s[i]);
         if(!rkr->deachide)LOOPER->show();
         if(rkr->Looper_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)LOOPER->show();
         }       
         else rkr->active[i]=0;
         break; 
  
       case 31:
         RYANWAH->position(x[i],y[i]);
         RYANWAH->ryanwah_activar->shortcut(s[i]);
         if(!rkr->deachide)RYANWAH->show();
         if(rkr->RyanWah_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)RYANWAH->show();
         }
         else rkr->active[i]=0;
         break; 
  
       case 32:
         RBECHO->position(x[i],y[i]);
         RBECHO->rbecho_activar->shortcut(s[i]);
         if(!rkr->deachide)RBECHO->show();
         if(rkr->RBEcho_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)RBECHO->show();
         }
         else rkr->active[i]=0;
         break; 
  
       case 33:
         COILCRAFTER->position(x[i],y[i]);
         COILCRAFTER->coil_activar->shortcut(s[i]);
         if(!rkr->deachide)COILCRAFTER->show();
         if(rkr->CoilCrafter_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)COILCRAFTER->show();
         }
         else rkr->active[i]=0;
         break; 
  
       case 34:
         SHELFBOOST->position(x[i],y[i]);
         SHELFBOOST->shelf_activar->shortcut(s[i]);
         if(!rkr->deachide)SHELFBOOST->show();
         if(rkr->ShelfBoost_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)SHELFBOOST->show();
         }
         else rkr->active[i]=0;
         break; 
  
     case 35:
         VOCODER->position(x[i],y[i]);
         VOCODER->vo_activar->shortcut(s[i]);
         if(!rkr->deachide)VOCODER->show();
         if(rkr->Vocoder_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)VOCODER->show();
         }
         else rkr->active[i]=0;
         break; 
  
     case 36:
         SUSTAINER->position(x[i],y[i]);
         SUSTAINER->sus_activar->shortcut(s[i]);
         if(!rkr->deachide)SUSTAINER->show();
         if(rkr->Sustainer_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)SUSTAINER->show();
         }
         else rkr->active[i]=0;
         break; 
  
     case 37:
         SEQUENCE->position(x[i],y[i]);
         SEQUENCE->seq_activar->shortcut(s[i]);
         if(!rkr->deachide)SEQUENCE->show();
         if(rkr->Sequence_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)SEQUENCE->show();
         }
         else rkr->active[i]=0;
         break; 
  
     case 38:
         SHIFTER->position(x[i],y[i]);
         SHIFTER->shifter_activar->shortcut(s[i]);
         if(!rkr->deachide)SHIFTER->show();
         if(rkr->Shifter_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)SHIFTER->show();
         }
         else rkr->active[i]=0;
         break; 
  
     case 39:
         STOMPBOX->position(x[i],y[i]);
         STOMPBOX->stomp_activar->shortcut(s[i]);
         if(!rkr->deachide)STOMPBOX->show();
         if(rkr->StompBox_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)STOMPBOX->show();
         }
         else rkr->active[i]=0;
         break; 
  
     case 40:
         REVERBTRON->position(x[i],y[i]);
         REVERBTRON->revtron_activar->shortcut(s[i]);
         if(!rkr->deachide)REVERBTRON->show();
         if(rkr->Reverbtron_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)REVERBTRON->show();
         }
         else rkr->active[i]=0;
         break; 
  
     case 41:
         ECHOTRON->position(x[i],y[i]);
         ECHOTRON->echotron_activar->shortcut(s[i]);
         if(!rkr->deachide)ECHOTRON->show();
         if(rkr->Echotron_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)ECHOTRON->show();
         }
         else rkr->active[i]=0;
         break; 
  
     case 42:
         SHAR->position(x[i],y[i]);
         SHAR->shar_activar->shortcut(s[i]);
         if(!rkr->deachide)SHAR->show();
         if(rkr->StereoHarm_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)SHAR->show();
         }
         else rkr->active[i]=0;
         break; 
  
     case 43:
         COMPBAND->position(x[i],y[i]);
         cband_activar->shortcut(s[i]);
         if(!rkr->deachide)COMPBAND->show();
         if(rkr->CompBand_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)COMPBAND->show();
         }
         else rkr->active[i]=0;
         break; 
  
     case 44:
         OTREM->position(x[i],y[i]);
         otrem_activar->shortcut(s[i]);
         if(!rkr->deachide)OTREM->show();
         if(rkr->Opticaltrem_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)OTREM->show();
         }
         else rkr->active[i]=0;
         break; 
  
     case 45:
         VIBE->position(x[i],y[i]);
         vibe_activar->shortcut(s[i]);
         if(!rkr->deachide)VIBE->show();
         if(rkr->Vibe_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)VIBE->show();
         }
         else rkr->active[i]=0;
         break; 
  
     case 46:
         INFINIT->position(x[i],y[i]);
         infinity_activar->shortcut(s[i]);
         if(!rkr->deachide)INFINIT->show();
         if(rkr->Infinity_Bypass)
         {
         rkr->active[i]=1; 
         if(rkr->deachide)INFINIT->show();
         }
         else rkr->active[i]=0;
         break; 
  
   }
   
   
   switch(i)
   {
      case 0:
         L1->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
         if((rkr->deachide) && (!rkr->active[i])) L1->hide(); else L1->show();
         break;
      case 1:
         L2->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
         if((rkr->deachide) && (!rkr->active[i])) L2->hide(); else L2->show();
         break;
      case 2:
         L3->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
         if((rkr->deachide) && (!rkr->active[i])) L3->hide(); else L3->show();
         break;
      case 3:
         L4->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
         if((rkr->deachide) && (!rkr->active[i])) L4->hide(); else L4->show();
         break;
      case 4:
         L5->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
         if((rkr->deachide) && (!rkr->active[i])) L5->hide(); else L5->show();
         break;
      case 5:
         L6->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
         if((rkr->deachide) && (!rkr->active[i])) L6->hide(); else L6->show();
         break;
      case 6:
         L7->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
         if((rkr->deachide) && (!rkr->active[i])) L7->hide(); else L7->show();
         break;
      case 7:
         L8->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
         if((rkr->deachide) && (!rkr->active[i])) L8->hide(); else L8->show();
         break;
      case 8:
         L9->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
         if((rkr->deachide) && (!rkr->active[i])) L9->hide(); else L9->show();
         break;
      case 9:
         L10->copy_label(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
         if((rkr->deachide) && (!rkr->active[i])) L10->hide(); else L10->show();
         break;
  }
   
   
   }
   
    Principal->init_sizes();
   
    ChangeActives();
    
    
   
    Fl::redraw();
}

void RKRGUI::show_help() {
  int x,y,w,h,k;
  
  char temp[128];
  
  
  Fl_Preferences rakarrack (Fl_Preferences::USER, WEBSITE, PACKAGE);
  
  if (rkr->help_displayed==0)
  {
   visor = new Fl_Help_Dialog;
  
  rakarrack.get(rkr->PrefNom("Help X"),x,1);
  rakarrack.get(rkr->PrefNom("Help Y"),y,1);
  rakarrack.get(rkr->PrefNom("Help W"),w,640);
  rakarrack.get(rkr->PrefNom("Help H"),h,480);
  rakarrack.get(rkr->PrefNom("Help TextSize"),k,11);
  visor->resize(x,y,w,h);
  visor->textsize((unsigned char)k);
  }
  
  
  memset(temp,0, sizeof(temp));
  sprintf(temp,"%s/html/help.html",HELPDIR);
  
  
   if (FILE * file = fopen(temp, "r"))
          {
                  fclose(file);
                  visor->load(temp);
  		rkr->help_displayed=1;
  		visor->show();
  	}
}

void RKRGUI::show_lic() {
  int x,y,w,h,k;
  char temp[128];
  
  
  Fl_Preferences rakarrack (Fl_Preferences::USER, WEBSITE, PACKAGE);
  
  
  
  if (rkr->help_displayed==0)
  {
   visor = new Fl_Help_Dialog;
  
  rakarrack.get(rkr->PrefNom("Help X"),x,1);
  rakarrack.get(rkr->PrefNom("Help Y"),y,1);
  rakarrack.get(rkr->PrefNom("Help W"),w,640);
  rakarrack.get(rkr->PrefNom("Help H"),h,480);
  rakarrack.get(rkr->PrefNom("Help TextSize"),k,11);
  visor->resize(x,y,w,h);
  visor->textsize((unsigned char)k);
  }
  
  
  memset(temp,0, sizeof(temp));
  sprintf(temp,"%s/html/license.html",HELPDIR);
  visor->load(temp);
  
  
  rkr->help_displayed=1;
  
  visor->show();
}

void RKRGUI::MiraClientes() {
  int i;
  char temp[128];
  char temp1[128];
  char *masque;
  char *name;
  FILE *fp;
  
  BMidiIn->clear();
  
  
  if ((fp = fopen ("/proc/asound/seq/clients", "r")) != NULL)
    {
      memset (temp, 0, sizeof (temp));
  
        while (fgets (temp, sizeof temp, fp) != NULL)
             {
               
              if (strstr(temp,"Port") != NULL)
               
             {  
               
               strcpy(temp1,temp);
               strtok(temp1,"\"");
               name=strtok(NULL,"\"");
               masque=strtok(NULL,")");
               
               if ((masque[2]=='R') && (strstr(name,"rakarrack MC OUT")==0)) BMidiIn->add(name);
               
              } 
             } 
     }
     
     fclose(fp);
   
   
     
   JackCo->clear();
   
   const char **ports;
    
    
     if ((ports = jack_get_ports (rkr->jackclient, NULL, JACK_DEFAULT_AUDIO_TYPE, 
                                 JackPortIsInput)) == NULL) {
                  fprintf(stderr, "Cannot find any Input port\n");
      
                  
          }
    
    else
    {
    i=0;
    
    while (ports[i] != NULL)
       {
        if((strstr(ports[i],"rakarrack:in_1")==0) && (strstr(ports[i],"rakarrack:in_2")==0))
        JackCo->add(ports[i]);
        i++; 
       }
       
      
           
     }  
     
     free(ports);
     
  JackIn->clear();
   
   const char **iports;  
    
     if ((iports = jack_get_ports (rkr->jackclient, NULL, JACK_DEFAULT_AUDIO_TYPE, 
                                 JackPortIsOutput)) == NULL) {
                  fprintf(stderr, "Cannot find any Output port\n");
      
                  
          }
    
    else
    {
    i=0;
    
    while (iports[i] != NULL)
       {
        if((strstr(iports[i],"rakarrack:out_1")==0) && (strstr(iports[i],"rakarrack:out_2")==0))
        JackIn->add(iports[i]);
        i++; 
       }
       
      
           
     }  
     
     free(iports);
}

void RKRGUI::MiraConfig() {
  int i = 1;
  int k;
  while (BMidiIn->text(i) != NULL)
  {
  if (strcmp(BMidiIn->text(i),rkr->MID)==0 ) BMidiIn->select(i,1);
  i++; 
  }
  
  i=1;
  
  while (JackCo->text(i) != NULL)
  {
  
  for (k=0; k < rkr->cuan_jack; k++)
  if (strcmp(JackCo->text(i),rkr->jack_po[k].name)==0 ) JackCo->select(i,1);
  
  i++; 
  }
  
  
  i=1;
  
  while (JackIn->text(i) != NULL)
  {
  
  for (k=0; k < rkr->cuan_ijack; k++)
  if (strcmp(JackIn->text(i),rkr->jack_poi[k].name)==0 ) JackIn->select(i,1);
  
  i++; 
  }
  
  
  
  
  if (rkr->MIDIway) Mw1->setonly(); else Mw0->setonly();
  
  rkr->m_displayed = 0;
  Enable_Back->value(rkr->EnableBackgroundImage);
  Enable_DeacHide->value(rkr->deachide);
  
  BFiname->value(rkr->BankFilename);
  BackFiname->value(rkr->BackgroundImage);
  Udir->value(rkr->UDirFilename);
  Username->value(rkr->UserRealName);
  Pre_Serve->value(rkr->actuvol);
  LM_Volume->value(rkr->Metro_Vol);
  Filter_DC->value(rkr->DC_Offset);
  FLPosition->value(rkr->flpos);
  DB6B->value(rkr->db6booster);
  Har_Downsample->value(rkr->Har_Down);
  Har_Down_Qua->value(rkr->Har_D_Q);
  Har_Up_Qua->value(rkr->Har_U_Q);
  Rev_Downsample->value(rkr->Rev_Down);
  Rev_Down_Qua->value(rkr->Rev_D_Q);
  Rev_Up_Qua->value(rkr->Rev_U_Q);
  Con_Downsample->value(rkr->Con_Down);
  Con_Down_Qua->value(rkr->Con_D_Q);
  Con_Up_Qua->value(rkr->Con_U_Q);
  Seq_Downsample->value(rkr->Seq_Down);
  Seq_Down_Qua->value(rkr->Seq_D_Q);
  Seq_Up_Qua->value(rkr->Seq_U_Q);
  Shi_Downsample->value(rkr->Shi_Down);
  Shi_Down_Qua->value(rkr->Shi_D_Q);
  Shi_Up_Qua->value(rkr->Shi_U_Q);
  Voc_Downsample->value(rkr->Voc_Down);
  Voc_Down_Qua->value(rkr->Voc_D_Q);
  Voc_Up_Qua->value(rkr->Voc_U_Q);
  Ste_Downsample->value(rkr->Ste_Down);
  Ste_Down_Qua->value(rkr->Ste_D_Q);
  Ste_Up_Qua->value(rkr->Ste_U_Q);
  Wave_Amo->value(rkr->Wave_res_amount);
  Wave_Up_Qua->value(rkr->Wave_up_q);
  Wave_Down_Qua->value(rkr->Wave_down_q);
  Calibration->value(rkr->aFreq);
  RTrigger->value(rkr->HarmRecNote->trigfact);
  RC_Harm_Opti->value(rkr->RCOpti_Harm);
  RC_St_Harm_Opti->value(rkr->RCOpti_Stereo);
  RC_Ring_Opti->value(rkr->RCOpti_Ring);
  
  
  switch(rkr->VocBands)
  {
    case 16:
    Voc_Bands->value(0);
    break;
    case 32:
    Voc_Bands->value(1);
    break;
    case 64:
    Voc_Bands->value(2);
    break;
    case 128:
    Voc_Bands->value(3);
    break;
    case 256:
    Voc_Bands->value(4);
    break;
    
  }
    
  
  
  MTable->value(rkr->midi_table);
  
  AAssign->value(rkr->autoassign);
  Update_TAP->value(rkr->Tap_Updated);
  INSTATE->value(rkr->init_state);
  UPSAMPLE_C->value(rkr->upsample);
  Upr_Qual->value(rkr->UpQual);
  Downr_Qual->value(rkr->DownQual);
  MES_DIS->value(rkr->mess_dis);
  ENA_TOOL->value(rkr->ena_tool);
  T_TIMEOUT->value(rkr->t_timeout);
  
  Upr_Amo->value(rkr->UpAmo);
  L_SIZE->value(rkr->looper_size);
  D_A_Connect->value(rkr->aconnect_MI);
  D_J_Connect->value(rkr->aconnect_JA);
  D_IJ_Connect->value(rkr->aconnect_JIA);
  
  Midi_In_Counter->value(rkr->MidiCh+1);
  Har_In_Counter->value(rkr->HarCh+1);
  Stereo_Har_In_Counter->value(rkr->StereoHarCh+1);
  
  switch(rkr->HarQual)
  {
    case 4:
    Har_Qual->value(0);
    break;
    
    case 8:
    Har_Qual->value(1);
    break;
    
    case 16:
    Har_Qual->value(2);
    break;
  
    case 32:
    Har_Qual->value(3);
    break;
  
  
  }  
  
  switch(rkr->SteQual)
  {
    case 4:
    Ste_Qual->value(0);
    break;
    
    case 8:
    Ste_Qual->value(1);
    break;
    
    case 16:
    Ste_Qual->value(2);
    break;
  
    case 32:
    Ste_Qual->value(3);
    break;
  
  
  }  
  
  
  
  if (rkr->aconnect_MI) BMidiIn->activate();
  else BMidiIn->deactivate();
  
  if (rkr->aconnect_JA) JackCo->activate();
  else JackCo->deactivate();
  
  if (rkr->aconnect_JIA) JackIn->activate();
  else JackIn->deactivate();
  
  Fl_Menu_Item *p;  
  unsigned int SR_value=rkr->sample_rate;
  
  for(int j=0; j<menu_Har_Downsample->size(); j++)
   {
        p=menu_Har_Downsample->next(j);
        
        switch(j)
         {
              case 0:
               SR_value = rkr->sample_rate;
               break;
              case 1:  
               SR_value = 96000;
               break;
              case 2:  
               SR_value = 48000;
               break;
              case 3:  
               SR_value = 44100;
               break;
              case 4:  
               SR_value = 32000;
               break;
              case 5:  
               SR_value = 22050;
               break;
              case 6:  
               SR_value = 16000;
               break;
              case 7:  
               SR_value = 12000;
               break;
              case 8:  
               SR_value = 8000;
               break;
              case 9:  
               SR_value = 4000;
               break;
         
         
         }     
  
          if((j>0) && ((unsigned int)rkr->sample_rate<=SR_value)) p->deactivate(); else p->activate();
  
  
   }
   
   
   Font_Bro->clear(); 
   Font_Bro->textcolor(label_color);
   k=0;
   k = Fl::set_fonts(0);
    for (i = 0; i < k; i++) {
      int t; const char *name = Fl::get_font_name((Fl_Font)i,&t);
      char buffer[128];
  #if 1
      if (t) {
        char *p = buffer;
        if (t & FL_BOLD) {*p++ = '@'; *p++ = 'b';}
        if (t & FL_ITALIC) {*p++ = '@'; *p++ = 'i';}
        strcpy(p,name);
        name = buffer;
      }
  #else // this is neat, but really slow on some X servers:
      sprintf(buffer, "@F%d@.%s", i, name);
      name = buffer;
  #endif
      Font_Bro->add(name);
  
  }
  
  Font_Bro->value(rkr->font+1);
}

void RKRGUI::BankWin_Label(char *filename) {
  char tmp[256];
  
  
  memset(tmp,0, sizeof(tmp));
  sprintf(tmp,"%s   v%s - Bank Manager - %s",rkr->jackcliname,VERSION,fl_filename_name(filename));
  BankWindow->copy_label(tmp);
}

void RKRGUI::is_modified() {
  int ok;
  
  
  if (rkr->modified)
  {
  
   Fl_Widget *w = fl_message_icon();
   w->parent()->copy_label(rkr->jackcliname);
   
  
   ok=fl_choice("Bank was modified, but not saved", "Discard","Save",NULL);
  
  
  
   switch(ok)
    
      {
          case 0:
            break;
  
          case 1: 
            MIDI_LABEL->do_callback();
            break;  
  
      }
  
  }
}

void RKRGUI::Put_Loaded_Bank() {
  int k=1;
  
  for (int t=0; t<ob->children();t++)
    {
      Fl_Widget *w = ob->child(t);
      long long temp = (long long) w->user_data();
      if (temp > 0)
      {
       w->copy_label(rkr->Bank[k].Preset_Name);
       k++;
      }
    
    }
    
  FillML(2);
}

void RKRGUI::Chord(int eff) {
  int tipo,undi;
  tipo=0;
  undi=0;
  
  switch(eff)
  {
  case 0:
  tipo=rkr->efx_Har->getpar(7);
  undi=rkr->efx_Har->getpar(6);
  break;
  case 1:
  tipo=rkr->efx_StereoHarm->getpar(9);
  undi=rkr->efx_StereoHarm->getpar(8);
  break;
  }
  
  
  if(eff==0)
  {
  sprintf(rkr->RC_Harm->NombreAcorde,"%s%s", rkr->RC_Harm->NCE[undi].Nom,rkr->RC_Harm->ChN[tipo].Nom);
  
  rkr->RC_Harm->ctipo=tipo;
  rkr->RC_Harm->fundi=undi;
  rkr->RC_Harm->cc=1;
  }
  else
  {
  sprintf(rkr->RC_Stereo_Harm->NombreAcorde,"%s%s", rkr->RC_Stereo_Harm->NCE[undi].Nom,rkr->RC_Stereo_Harm->ChN[tipo].Nom);
  
  rkr->RC_Stereo_Harm->ctipo=tipo;
  rkr->RC_Stereo_Harm->fundi=undi;
  rkr->RC_Stereo_Harm->cc=1;
  }
}

void RKRGUI::ActMIDI() {
  if (rkr->Mvalue==0) return;
  
  int i;
  
  for (i=1; i<(rkr->NumParams+26); i++)
  
  {
  
    
   if (rkr->Mcontrol[i]==0) continue;
   
   rkr->Mcontrol[i]=0;
  
  
  switch (i)
  {
       case 12:
       Balance->value(rkr->Fraction_Bypass*100.0);
       Balance->redraw();
       break;
       case 14:
       Nivel_Entrada->value((int) (rkr->Input_Gain*100.0)-50);
       Nivel_Entrada->redraw();
       break;
       case 7:
       Nivel_Salida->value((int) (rkr->Master_Volume*100.0)-50);
       Nivel_Salida->redraw();
       break;  
       case 1:
       WHAWHA->WhaWha_dpth->value(rkr->efx_WhaWha->getpar(6));
       WHAWHA->WhaWha_dpth->redraw();
       break;
       case 20:
       ALIENWAH->Alienwah_dpth->value(rkr->efx_Alienwah->getpar(6));
       ALIENWAH->Alienwah_dpth->redraw();
       break;
       case 21:
       PHASER->phaser_dpth->value(rkr->efx_Phaser->getpar(6));
       PHASER->phaser_dpth->redraw();
       break;
       case 22:
       FLANGER->flanger_dpth->value(rkr->efx_Flanger->getpar(6));
       FLANGER->flanger_dpth->redraw();
       break;
       case 23:
       CHORUS->chorus_dpth->value(rkr->efx_Chorus->getpar(6));
       CHORUS->chorus_dpth->redraw();
       break;
       case 24:
       MUSDELAY->musdelay_gain1->value(rkr->efx_MusDelay->getpar(11)-64);
       MUSDELAY->musdelay_gain1->redraw();
       break;
       case 25:
       MUSDELAY->musdelay_gain2->value(rkr->efx_MusDelay->getpar(12)-64);
       MUSDELAY->musdelay_gain2->redraw();
       break;
       case 26:
       HAR->har_freq1->value(rkr->efx_Har->getpar(4));
       HAR->har_freq1->redraw();
       break;
       case 27:
       HAR->har_int->value(rkr->efx_Har->getpar(3)-12);
       HAR->har_int->redraw();
       break;
       case 28:
       WHAWHA->WhaWha_WD->value(rkr->efx_WhaWha->getpar(0)-64);
       WHAWHA->WhaWha_WD->redraw();
       break;
       case 29:
       OVRD->ovrd_WD->value(rkr->efx_Overdrive->getpar(0)-64);
       OVRD->ovrd_WD->redraw();
       break;
       case 30:
       DIST->dist_WD->value(rkr->efx_Distorsion->getpar(0)-64);
       DIST->dist_WD->redraw();
       break;
       case 31:
       HAR->har_WD->value(rkr->efx_Har->getpar(0)-64);
       HAR->har_WD->redraw();
       break;
       case 52:
       CHORUS->chorus_WD->value(rkr->efx_Chorus->getpar(0)-64);
       CHORUS->chorus_WD->redraw();
       break;
       case 53:
       FLANGER->flanger_WD->value(rkr->efx_Flanger->getpar(0)-64);
       FLANGER->flanger_WD->redraw();
       break;
       case 54:
       PHASER->phaser_WD->value(rkr->efx_Phaser->getpar(0)-64);
       PHASER->phaser_WD->redraw();
       break;
       case 55:
       ALIENWAH->Alienwah_WD->value(rkr->efx_Alienwah->getpar(0)-64);
       ALIENWAH->Alienwah_WD->redraw();
       break;
       case 56:
       MUSDELAY->musdelay_WD->value(rkr->efx_MusDelay->getpar(0)-64);
       MUSDELAY->musdelay_WD->redraw();
       break;
       case 57:
       REVERB->reverb_WD->value(rkr->efx_Rev->getpar(0)-64);
       REVERB->reverb_WD->redraw();
       break;
       case 58:
       PAN->pan_WD->value(rkr->efx_Pan->getpar(0)-64);
       PAN->pan_WD->redraw();
       break;
       case 59:
       ECHO->echo_WD->value(rkr->efx_Echo->getpar(0)-64);
       ECHO->echo_WD->redraw();
       break;
       case 46:
       ECHO->echo_pan->value(rkr->efx_Echo->getpar(1)-64);
       ECHO->echo_pan->redraw();
       break;
       case 47:
       OVRD->ovrd_pan->value(rkr->efx_Overdrive->getpar(1)-64);
       OVRD->ovrd_pan->redraw();
       break;
       case 48:
       DIST->dist_pan->value(rkr->efx_Distorsion->getpar(1)-64);
       DIST->dist_pan->redraw();
       break;
       case 49:
       HAR->har_pan->value(rkr->efx_Har->getpar(1)-64);
       HAR->har_pan->redraw();
       break;
       case 50:
       CHORUS->chorus_pan->value(rkr->efx_Chorus->getpar(1)-64);
       CHORUS->chorus_pan->redraw();
       break;
       case 51:
       FLANGER->flanger_pan->value(rkr->efx_Flanger->getpar(1)-64);
       FLANGER->flanger_pan->redraw();
       break;
       case 60:
       PHASER->phaser_pan->value(rkr->efx_Phaser->getpar(1)-64);
       PHASER->phaser_pan->redraw();
       break;
       case 61:
       ALIENWAH->Alienwah_pan->value(rkr->efx_Alienwah->getpar(1)-64);
       ALIENWAH->Alienwah_pan->redraw();
       break;
       case 62:
       MUSDELAY->musdelay_pan1->value(rkr->efx_MusDelay->getpar(1)-64);
       MUSDELAY->musdelay_pan1->redraw();
       break;
       case 63:
       REVERB->reverb_pan->value(rkr->efx_Rev->getpar(1)-64);
       REVERB->reverb_pan->redraw();
       break;
       case 65:
       MUSDELAY->musdelay_pan2->value(rkr->efx_MusDelay->getpar(7)-64);
       MUSDELAY->musdelay_pan2->redraw();
       break;
       case 66:
       WHAWHA->WhaWha_pan->value(rkr->efx_WhaWha->getpar(1)-64);
       WHAWHA->WhaWha_pan->redraw();
       break;
       case 67:
       PAN->pan_pan->value(rkr->efx_Pan->getpar(1)-64);
       PAN->pan_pan->redraw();
       break;
       case 68:
       OVRD->ovrd_drive->value(rkr->efx_Overdrive->getpar(3));
       OVRD->ovrd_drive->redraw();
       break;
       case 69:
       DIST->dist_drive->value(rkr->efx_Distorsion->getpar(3));
       DIST->dist_drive->redraw();
       break;
       case 70:
       OVRD->ovrd_level->value(rkr->efx_Overdrive->getpar(4));
       OVRD->ovrd_level->redraw();
       break;
       case 71:
       DIST->dist_level->value(rkr->efx_Distorsion->getpar(4));
       DIST->dist_level->redraw();
       break;
       case 72:
       CHORUS->chorus_freq->value(rkr->efx_Chorus->getpar(2));
       CHORUS->chorus_freq->redraw();
       break;
       case 73:
       FLANGER->flanger_freq->value(rkr->efx_Flanger->getpar(2));
       FLANGER->flanger_freq->redraw();
       break;
       case 74:
       PHASER->phaser_freq->value(rkr->efx_Phaser->getpar(2));
       PHASER->phaser_freq->redraw();
       break;
       case 75:
       WHAWHA->WhaWha_freq->value(rkr->efx_WhaWha->getpar(2));
       WHAWHA->WhaWha_freq->redraw();
       break;
       case 76:
       ALIENWAH->Alienwah_freq->value(rkr->efx_Alienwah->getpar(2));
       ALIENWAH->Alienwah_freq->redraw();
       break;
       case 77:
       PAN->pan_freq->value(rkr->efx_Pan->getpar(2));
       PAN->pan_freq->redraw();
       break;
       case 78:
       ECHO->echo_fb->value(rkr->efx_Echo->getpar(5));
       ECHO->echo_fb->redraw();
       break;
       case 79:
       CHORUS->chorus_fb->value(rkr->efx_Chorus->getpar(8));
       CHORUS->chorus_fb->redraw();
       break;
       case 80:
       FLANGER->flanger_fb->value(rkr->efx_Flanger->getpar(8));
       FLANGER->flanger_fb->redraw();
       break;
       case 81:
       PHASER->phaser_fb->value(rkr->efx_Phaser->getpar(7));
       PHASER->phaser_fb->redraw();
       break;
       case 82:
       ALIENWAH->Alienwah_fb->value(rkr->efx_Alienwah->getpar(7));
       ALIENWAH->Alienwah_fb->redraw();
       break;
       case 83:
       MUSDELAY->musdelay_fb1->value(rkr->efx_MusDelay->getpar(5));
       MUSDELAY->musdelay_fb1->redraw();
       break;
       case 84:
       MUSDELAY->musdelay_fb2->value(rkr->efx_MusDelay->getpar(9));
       MUSDELAY->musdelay_fb2->redraw();
       break;
       case 85:
       OVRD->ovrd_lpf->value(rkr->efx_Overdrive->getpar(7));
       OVRD->ovrd_lpf->redraw();
       break;
       case 86:
       DIST->dist_lpf->value(rkr->efx_Distorsion->getpar(7));
       DIST->dist_lpf->redraw();
       break;
       case 87:
       REVERB->reverb_LPF->value(rkr->efx_Rev->getpar(7));
       REVERB->reverb_LPF->redraw();
       break;
       case 88:
       OVRD->ovrd_hpf->value(rkr->efx_Overdrive->getpar(8));
       OVRD->ovrd_hpf->redraw();
       break;
       case 89:
       DIST->dist_hpf->value(rkr->efx_Distorsion->getpar(8));
       DIST->dist_hpf->redraw();
       break;
       case 90:
       REVERB->reverb_HPF->value(rkr->efx_Rev->getpar(8));
       REVERB->reverb_HPF->redraw();
       break;
       case 91:
       CHORUS->chorus_LR->value(rkr->efx_Chorus->getpar(9)-64);
       CHORUS->chorus_LR->redraw();
       break;
       case 92:
       FLANGER->flanger_LR->value(rkr->efx_Flanger->getpar(9)-64);
       FLANGER->flanger_LR->redraw();
       break;
       case 93:
       PHASER->phaser_LR->value(rkr->efx_Phaser->getpar(9)-64);
       PHASER->phaser_LR->redraw();
       break;
       case 94:
       OVRD->ovrd_LRc->value(rkr->efx_Overdrive->getpar(2)-64);
       OVRD->ovrd_LRc->redraw();
       break;
       case 95:
       DIST->dist_LRc->value(rkr->efx_Distorsion->getpar(2)-64);
       DIST->dist_LRc->redraw();
       break;
       case 96:
       ALIENWAH->Alienwah_LR->value(rkr->efx_Alienwah->getpar(9)-64);
       ALIENWAH->Alienwah_LR->redraw();
       break;
       case 97:
       ECHO->echo_LRc->value(rkr->efx_Echo->getpar(4)-64);
       ECHO->echo_LRc->redraw();
       break;
       case 98:
       MUSDELAY->musdelay_LRc->value(rkr->efx_MusDelay->getpar(4)-64);
       MUSDELAY->musdelay_LRc->redraw();
       break;
       case 99:
       CHORUS->chorus_stdf->value(rkr->efx_Chorus->getpar(5));
       CHORUS->chorus_stdf->redraw();
       break;
       case 100:
       FLANGER->flanger_stdf->value(rkr->efx_Flanger->getpar(5));
       FLANGER->flanger_stdf->redraw();
       break;
       case 101:
       PHASER->phaser_stdf->value(rkr->efx_Phaser->getpar(5));
       PHASER->phaser_stdf->redraw();
       break;
       case 102:
       WHAWHA->WhaWha_stdf->value(rkr->efx_WhaWha->getpar(5));
       WHAWHA->WhaWha_stdf->redraw();
       break;
       case 103:
       ALIENWAH->Alienwah_stdf->value(rkr->efx_Alienwah->getpar(5));
       ALIENWAH->Alienwah_stdf->redraw();
       break;
       case 104:
       PAN->pan_stdf->value(rkr->efx_Pan->getpar(5));
       PAN->pan_stdf->redraw();
       break;
       case 105:
       CHORUS->chorus_rnd->value(rkr->efx_Chorus->getpar(3));
       CHORUS->chorus_rnd->redraw();
       break;
       case 106:
       FLANGER->flanger_rnd->value(rkr->efx_Flanger->getpar(3));
       FLANGER->flanger_rnd->redraw();
       break;
       case 107:
       PHASER->phaser_rnd->value(rkr->efx_Phaser->getpar(3));
       PHASER->phaser_rnd->redraw();
       break;
       case 108:
       WHAWHA->WhaWha_rnd->value(rkr->efx_WhaWha->getpar(3));
       WHAWHA->WhaWha_rnd->redraw();
       break;
       case 109:
       ALIENWAH->Alienwah_rnd->value(rkr->efx_Alienwah->getpar(3));
       ALIENWAH->Alienwah_rnd->redraw();
       break;
       case 110:
       PAN->pan_rnd->value(rkr->efx_Pan->getpar(3));
       PAN->pan_rnd->redraw();
       break;
       case 111:
       WHAWHA->WhaWha_ampsns->value(rkr->efx_WhaWha->getpar(7));
       WHAWHA->WhaWha_ampsns->redraw();
       break;
       case 112:
       WHAWHA->WhaWha_ampsnsinv->value(rkr->efx_WhaWha->getpar(8));
       WHAWHA->WhaWha_ampsnsinv->redraw();
       break;
       case 113:
       WHAWHA->WhaWha_smooth->value(rkr->efx_WhaWha->getpar(9));
       WHAWHA->WhaWha_smooth->redraw();
       break;
       case 114:
       PHASER->phaser_phase->value(rkr->efx_Phaser->getpar(11));
       PHASER->phaser_phase->redraw();
       break;
       case 115:
       ALIENWAH->Alienwah_phase->value(rkr->efx_Alienwah->getpar(10));
       ALIENWAH->Alienwah_phase->redraw();
       break;
       case 116:
       ActOnOff();
       break;
       case 117:
       APHASER->aphaser_WD->value(rkr->efx_APhaser->getpar(0)-64);
       APHASER->aphaser_WD->redraw();
       break;
       case 118:
       APHASER->aphaser_pan->value(rkr->efx_APhaser->getpar(1));
       APHASER->aphaser_pan->redraw();
       break;
       case 119:
       APHASER->aphaser_freq->value(rkr->efx_APhaser->getpar(2));
       APHASER->aphaser_freq->redraw();
       break;
       case 120:
       APHASER->aphaser_phase->value(rkr->efx_APhaser->getpar(11));
       APHASER->aphaser_phase->redraw();
       break;
       case 121:
       APHASER->aphaser_dpth->value(rkr->efx_APhaser->getpar(6));
       APHASER->aphaser_dpth->redraw();
       break;
       case 122:
       APHASER->aphaser_fb->value(rkr->efx_APhaser->getpar(7)-64);
       APHASER->aphaser_fb->redraw();
       break;
       case 123:
       APHASER->aphaser_LR->value(rkr->efx_APhaser->getpar(9));
       APHASER->aphaser_LR->redraw();
       break;
       case 124:
       APHASER->aphaser_stdf->value(rkr->efx_APhaser->getpar(5));
       APHASER->aphaser_stdf->redraw();
       break;
       case 125:
       NEWDIST->newdist_WD->value(rkr->efx_NewDist->getpar(0)-64);
       NEWDIST->newdist_WD->redraw();
       break;
       case 126:
       NEWDIST->newdist_pan->value(rkr->efx_NewDist->getpar(1)-64);
       NEWDIST->newdist_pan->redraw();
       break;
       case 127:
       NEWDIST->newdist_LRc->value(rkr->efx_NewDist->getpar(2)-64);
       NEWDIST->newdist_LRc->redraw();
       break;
       case 2:
       NEWDIST->newdist_drive->value(rkr->efx_NewDist->getpar(3));
       NEWDIST->newdist_drive->redraw();
       break;
       case 3:
       NEWDIST->newdist_level->value(rkr->efx_NewDist->getpar(4));
       NEWDIST->newdist_level->redraw();
       break;
       case 4:
       NEWDIST->newdist_lpf->value(rkr->efx_NewDist->getpar(7));
       NEWDIST->newdist_lpf->redraw();
       break;
       case 5:
       NEWDIST->newdist_hpf->value(rkr->efx_NewDist->getpar(8));
       NEWDIST->newdist_hpf->redraw();
       break;
       case 6:
       NEWDIST->newdist_st->value(rkr->efx_NewDist->getpar(9));
       NEWDIST->newdist_st->redraw();
       break;
       case 8:
       NEWDIST->newdist_oct->value(rkr->efx_NewDist->getpar(11));
       NEWDIST->newdist_oct->redraw();
       break;
       case 9:
       DIST->dist_oct->value(rkr->efx_Distorsion->getpar(12));
       DIST->dist_oct->redraw();
       break;
       case 130:
       EQ->eq_Gain->value(rkr->efx_EQ1->getpar(0)-64);
       EQ->eq_Gain->redraw();
       break;
       case 131:
       EQ->eq_Q->value(rkr->efx_EQ1->getpar(13)-64);
       EQ->eq_Q->redraw();
       break;
       case 132:
       EQ->eq_1->value(rkr->efx_EQ1->getpar(12)-64);
       EQ->eq_1->redraw();
       break;
       case 133:
       EQ->eq_2->value(rkr->efx_EQ1->getpar(17)-64);
       EQ->eq_2->redraw();
       break;
       case 134:
       EQ->eq_3->value(rkr->efx_EQ1->getpar(22)-64);
       EQ->eq_3->redraw();
       break;
       case 135:
       EQ->eq_4->value(rkr->efx_EQ1->getpar(27)-64);
       EQ->eq_4->redraw();
       break;
       case 136:
       EQ->eq_5->value(rkr->efx_EQ1->getpar(32)-64);
       EQ->eq_5->redraw();
       break;
       case 137:
       EQ->eq_6->value(rkr->efx_EQ1->getpar(37)-64);
       EQ->eq_6->redraw();
       break;
       case 138:
       EQ->eq_7->value(rkr->efx_EQ1->getpar(42)-64);
       EQ->eq_7->redraw();
       break;
       case 139:
       EQ->eq_8->value(rkr->efx_EQ1->getpar(47)-64);
       EQ->eq_8->redraw();
       break;
       case 140:
       EQ->eq_9->value(rkr->efx_EQ1->getpar(52)-64);
       EQ->eq_9->redraw();
       break;
       case 141:
       EQ->eq_10->value(rkr->efx_EQ1->getpar(57)-64);
       EQ->eq_10->redraw();
       break;
       case 142:
       COMPRESS->compress_ATime->value(rkr->efx_Compressor->getpar(4));
       COMPRESS->compress_ATime->redraw();
       break;
       case 143:
       COMPRESS->compress_RTime->value(rkr->efx_Compressor->getpar(5));
       COMPRESS->compress_RTime->redraw();
       break;
       case 144:
       COMPRESS->compress_Ratio->value(rkr->efx_Compressor->getpar(2));
       COMPRESS->compress_Ratio->redraw();
       break;
       case 145:
       COMPRESS->compress_Knee->value(rkr->efx_Compressor->getpar(7));
       COMPRESS->compress_Knee->redraw();
       break;
       case 146:
       COMPRESS->compress_threshold->value(rkr->efx_Compressor->getpar(1));
       COMPRESS->compress_threshold->redraw();
       break;
       case 147:
       COMPRESS->compress_output->value(rkr->efx_Compressor->getpar(3));
       COMPRESS->compress_output->redraw();
       break;
       case 148:
       PEQ->eqp_Gain->value(rkr->efx_EQ2->getpar(0)-64);
       PEQ->eqp_Gain->redraw();
       break;
       case 149:
       PEQ->eqp_LF->value(rkr->efx_EQ2->getpar(11));
       PEQ->eqp_LF->redraw();
       break;
       case 150:
       PEQ->eqp_LFg->value(rkr->efx_EQ2->getpar(12)-64);
       PEQ->eqp_LFg->redraw();
       break;
       case 151:
       PEQ->eqp_LQ->value(rkr->efx_EQ2->getpar(13)-64);
       PEQ->eqp_LQ->redraw();
       break;	
       case 152:
       PEQ->eqp_MF->value(rkr->efx_EQ2->getpar(16));
       PEQ->eqp_MF->redraw();
       break;
       case 153:
       PEQ->eqp_MFg->value(rkr->efx_EQ2->getpar(17)-64);
       PEQ->eqp_MFg->redraw();
       break;
       case 154:
       PEQ->eqp_MQ->value(rkr->efx_EQ2->getpar(18)-64);
       PEQ->eqp_MQ->redraw();
       break;
       case 155:
       PEQ->eqp_HF->value(rkr->efx_EQ2->getpar(21));
       PEQ->eqp_HF->redraw();
       break;
       case 156:
       PEQ->eqp_HFg->value(rkr->efx_EQ2->getpar(22)-64);
       PEQ->eqp_HFg->redraw();
       break;
       case 157:
       PEQ->eqp_HQ->value(rkr->efx_EQ2->getpar(23)-64);
       PEQ->eqp_HQ->redraw();
       break;
       case 158:
       DFLANGE->dflange_WD->value(rkr->efx_DFlange->getpar(0));
       DFLANGE->dflange_WD->redraw();
       break;
       case 159:
       DFLANGE->dflange_pan->value(rkr->efx_DFlange->getpar(1));
       DFLANGE->dflange_pan->redraw();
       break;
       case 160:
       DFLANGE->dflange_LR->value(rkr->efx_DFlange->getpar(2));
       DFLANGE->dflange_LR->redraw();
       break;
       case 161:
       DFLANGE->dflange_depth->value(rkr->efx_DFlange->getpar(3));
       DFLANGE->dflange_depth->redraw();
       break;
       case 162:
       DFLANGE->dflange_width->value(rkr->efx_DFlange->getpar(4));
       DFLANGE->dflange_width->redraw();
       break;
       case 163:
       DFLANGE->dflange_offset->value(rkr->efx_DFlange->getpar(5));
       DFLANGE->dflange_offset->redraw();
       break;
       case 164:
       DFLANGE->dflange_fb->value(rkr->efx_DFlange->getpar(6));
       DFLANGE->dflange_fb->redraw();
       break;
       case 165:
       DFLANGE->dflange_lpf->value(rkr->efx_DFlange->getpar(7));
       DFLANGE->dflange_lpf->redraw();
       break;
       case 166:
       DFLANGE->dflange_freq->value(rkr->efx_DFlange->getpar(10));
       DFLANGE->dflange_freq->redraw();
       break;
       case 167:
       DFLANGE->dflange_stdf->value(rkr->efx_DFlange->getpar(11));
       DFLANGE->dflange_stdf->redraw();
       break;
       case 168:
       DFLANGE->dflange_rnd->value(rkr->efx_DFlange->getpar(13));
       DFLANGE->dflange_rnd->redraw();
       break;
       case 169:
       VALVE->valve_WD->value(rkr->efx_Valve->getpar(0)-64);
       VALVE->valve_WD->redraw();
       break;
       case 170:
       VALVE->valve_LRc->value(rkr->efx_Valve->getpar(2)-64);
       VALVE->valve_LRc->redraw();
       break;
       case 171:
       VALVE->valve_pan->value(rkr->efx_Valve->getpar(1)-64);
       VALVE->valve_pan->redraw();
       break;
       case 172:
       VALVE->valve_level->value(rkr->efx_Valve->getpar(4));
       VALVE->valve_level->redraw();
       break;
       case 173:
       VALVE->valve_drive->value(rkr->efx_Valve->getpar(3));
       VALVE->valve_drive->redraw();
       break;
       case 174:
       VALVE->valve_Q->value(rkr->efx_Valve->getpar(10));
       VALVE->valve_Q->redraw();
       break;
       case 175:
       VALVE->valve_Pre->value(rkr->efx_Valve->getpar(12));
       VALVE->valve_Pre->redraw();
       break;
       case 176:
       VALVE->valve_lpf->value(rkr->efx_Valve->getpar(6));
       VALVE->valve_lpf->redraw();
       break;
       case 177:
       VALVE->valve_hpf->value(rkr->efx_Valve->getpar(7));
       VALVE->valve_hpf->redraw();
       break;
       case 178:
       RING->ring_WD->value(rkr->efx_Ring->getpar(0));
       RING->ring_WD->redraw();
       break;  
       case 179:
       RING->ring_LRc->value(rkr->efx_Ring->getpar(2));
       RING->ring_LRc->redraw();
       break;  
       case 180:
       RING->ring_input->value(rkr->efx_Ring->getpar(11));
       RING->ring_input->redraw();
       break;  
       case 181:
       RING->ring_level->value(rkr->efx_Ring->getpar(3));
       RING->ring_level->redraw();
       break;  
       case 182:
       RING->ring_pan->value(rkr->efx_Ring->getpar(1));
       RING->ring_pan->redraw();
       break;  
       case 183:
       RING->ring_depth->value(rkr->efx_Ring->getpar(4));
       RING->ring_depth->redraw();
       break;  
       case 184:
       RING->ring_freq->value(rkr->efx_Ring->getpar(5));
       RING->ring_freq->redraw();
       break;  
       case 185:
       RING->ring_sin->value(rkr->efx_Ring->getpar(7));
       RING->ring_sin->redraw();
       break;  
       case 186:
       RING->ring_tri->value(rkr->efx_Ring->getpar(8));
       RING->ring_tri->redraw();
       break;  
       case 187:
       RING->ring_saw->value(rkr->efx_Ring->getpar(9));
       RING->ring_saw->redraw();
       break;  
       case 188:
       RING->ring_squ->value(rkr->efx_Ring->getpar(10));
       RING->ring_squ->redraw();
       break;  
       case 189:
       EXCITER->ex_Gain->value(rkr->efx_Exciter->getpar(0));
       EXCITER->ex_Gain->redraw();
       break;
       case 190:
       EXCITER->ex_hfreq->value(rkr->efx_Exciter->getpar(11));
       EXCITER->ex_hfreq->redraw();
       break;
       case 191:
       EXCITER->ex_lfreq->value(rkr->efx_Exciter->getpar(12));
       EXCITER->ex_lfreq->redraw();
       break;
       case 192:
       EXCITER->ex_1->value(rkr->efx_Exciter->getpar(1));
       EXCITER->ex_1->redraw();
       break;
       case 193:
       EXCITER->ex_2->value(rkr->efx_Exciter->getpar(2));
       EXCITER->ex_2->redraw();
       break;
       case 194:
       EXCITER->ex_3->value(rkr->efx_Exciter->getpar(3));
       EXCITER->ex_3->redraw();
       break;
       case 195:
       EXCITER->ex_4->value(rkr->efx_Exciter->getpar(4));
       EXCITER->ex_4->redraw();
       break;
       case 196:
       EXCITER->ex_5->value(rkr->efx_Exciter->getpar(5));
       EXCITER->ex_5->redraw();
       break;
       case 197:
       EXCITER->ex_6->value(rkr->efx_Exciter->getpar(6));
       EXCITER->ex_6->redraw();
       break;
       case 198:
       EXCITER->ex_7->value(rkr->efx_Exciter->getpar(7));
       EXCITER->ex_7->redraw();
       break;
       case 199:
       EXCITER->ex_8->value(rkr->efx_Exciter->getpar(8));
       EXCITER->ex_8->redraw();
       break;
       case 200:
       EXCITER->ex_9->value(rkr->efx_Exciter->getpar(9));
       EXCITER->ex_9->redraw();
       break;
       case 201:
       EXCITER->ex_10->value(rkr->efx_Exciter->getpar(10));
       EXCITER->ex_10->redraw();
       break;
       case 202:
       MBDIST->mbdist_WD->value(rkr->efx_MBDist->getpar(0)-64);
       MBDIST->mbdist_WD->redraw();
       break;
       case 203:
       MBDIST->mbdist_LRc->value(rkr->efx_MBDist->getpar(2)-64);
       MBDIST->mbdist_LRc->redraw();
       break;
       case 204:
       MBDIST->mbdist_drive->value(rkr->efx_MBDist->getpar(3));
       MBDIST->mbdist_drive->redraw();
       break;
       case 205:
       MBDIST->mbdist_level->value(rkr->efx_MBDist->getpar(4));
       MBDIST->mbdist_level->redraw();
       break;
       case 206:
       MBDIST->mbdist_volL->value(rkr->efx_MBDist->getpar(8));
       MBDIST->mbdist_volL->redraw();
       break;
       case 207:
       MBDIST->mbdist_volM->value(rkr->efx_MBDist->getpar(9));
       MBDIST->mbdist_volM->redraw();
       break;
       case 208:
       MBDIST->mbdist_volH->value(rkr->efx_MBDist->getpar(10));
       MBDIST->mbdist_volH->redraw();
       break;
       case 209:
       MBDIST->mbdist_cross1->value(rkr->efx_MBDist->getpar(12));
       MBDIST->mbdist_cross1->redraw();
       break;
       case 210:
       MBDIST->mbdist_cross2->value(rkr->efx_MBDist->getpar(13));
       MBDIST->mbdist_cross2->redraw();
       break;
       case 211:
       MBDIST->mbdist_pan->value(rkr->efx_MBDist->getpar(1)-64);
       MBDIST->mbdist_pan->redraw();
       break;
       case 212:
       ARPIE->arpie_WD->value(rkr->efx_Arpie->getpar(0));
       ARPIE->arpie_WD->redraw();
       break; 	
       case 213:
       ARPIE->arpie_arpe->value(rkr->efx_Arpie->getpar(7));
       ARPIE->arpie_arpe->redraw();
       break; 	
       case 214:
       ARPIE->arpie_pan->value(rkr->efx_Arpie->getpar(1));
       ARPIE->arpie_pan->redraw();
       break; 	
       case 215:
       ARPIE->arpie_delay->value(rkr->efx_Arpie->getpar(2));
       ARPIE->arpie_delay->redraw();
       break; 	
       case 216:
       ARPIE->arpie_LRdl->value(rkr->efx_Arpie->getpar(3));
       ARPIE->arpie_LRdl->redraw();
       break; 	
       case 217:
       ARPIE->arpie_LRc->value(rkr->efx_Arpie->getpar(4));
       ARPIE->arpie_LRc->redraw();
       break; 	
       case 218:
       ARPIE->arpie_fb->value(rkr->efx_Arpie->getpar(5));
       ARPIE->arpie_fb->redraw();
       break; 	
       case 219:
       ARPIE->arpie_damp->value(rkr->efx_Arpie->getpar(6));
       ARPIE->arpie_damp->redraw();
       break; 	
       case 220:
       EXPANDER->expander_ATime->value(rkr->efx_Expander->getpar(3));
       EXPANDER->expander_ATime->redraw();
       break;
       case 221:
       EXPANDER->expander_RTime->value(rkr->efx_Expander->getpar(4));
       EXPANDER->expander_RTime->redraw();
       break;
       case 222:
       EXPANDER->expander_shape->value(rkr->efx_Expander->getpar(2));
       EXPANDER->expander_shape->redraw();
       break;
       case 223:
       EXPANDER->expander_threshold->value(rkr->efx_Expander->getpar(1));
       EXPANDER->expander_threshold->redraw();
       break;
       case 224:
       EXPANDER->expander_level->value(rkr->efx_Expander->getpar(7));
       EXPANDER->expander_level->redraw();
       break;
       case 225:
       EXPANDER->expander_LPF->value(rkr->efx_Expander->getpar(5));
       EXPANDER->expander_LPF->redraw();
       break;
       case 226:
       EXPANDER->expander_HPF->value(rkr->efx_Expander->getpar(6));
       EXPANDER->expander_HPF->redraw();
       break;
       case 227:
       SHUFFLE->shuffle_WD->value(rkr->efx_Shuffle->getpar(0)-64);
       SHUFFLE->shuffle_WD->redraw();
       break;
       case 228:
       SHUFFLE->shuffle_cross1->value(rkr->efx_Shuffle->getpar(5));
       SHUFFLE->shuffle_cross1->redraw();
       break; 
       case 229:
       SHUFFLE->shuffle_volL->value(rkr->efx_Shuffle->getpar(1));
       SHUFFLE->shuffle_volL->redraw();
       break; 
       case 230:
       SHUFFLE->shuffle_cross2->value(rkr->efx_Shuffle->getpar(6));
       SHUFFLE->shuffle_cross2->redraw();
       break; 
       case 231:
       SHUFFLE->shuffle_volML->value(rkr->efx_Shuffle->getpar(2));
       SHUFFLE->shuffle_volML->redraw();
       break; 
       case 232:
       SHUFFLE->shuffle_cross3->value(rkr->efx_Shuffle->getpar(7));
       SHUFFLE->shuffle_cross3->redraw();
       break; 
       case 233:
       SHUFFLE->shuffle_volMH->value(rkr->efx_Shuffle->getpar(3));
       SHUFFLE->shuffle_volMH->redraw();
       break; 
       case 234:
       SHUFFLE->shuffle_cross4->value(rkr->efx_Shuffle->getpar(8));
       SHUFFLE->shuffle_cross4->redraw();
       break; 
       case 235:
       SHUFFLE->shuffle_volH->value(rkr->efx_Shuffle->getpar(4));
       SHUFFLE->shuffle_volH->redraw();
       break; 
       case 236:
       SHUFFLE->shuffle_Q->value(rkr->efx_Shuffle->getpar(9));
       SHUFFLE->shuffle_Q->redraw();
       break; 
       case 237:
       SYNTHFILTER->synthfilter_WD->value(rkr->efx_Synthfilter->getpar(0)-64);
       SYNTHFILTER->synthfilter_WD->redraw();
       break;
       case 238:
       SYNTHFILTER->synthfilter_Distort->value(rkr->efx_Synthfilter->getpar(1));
       SYNTHFILTER->synthfilter_Distort->redraw();
       break;
       case 239:
       SYNTHFILTER->synthfilter_freq->value(rkr->efx_Synthfilter->getpar(2));
       SYNTHFILTER->synthfilter_freq->redraw();
       break;
       case 240:
       SYNTHFILTER->synthfilter_stdf->value(rkr->efx_Synthfilter->getpar(5));
       SYNTHFILTER->synthfilter_stdf->redraw();
       break;
       case 241:
       SYNTHFILTER->synthfilter_width->value(rkr->efx_Synthfilter->getpar(6));
       SYNTHFILTER->synthfilter_width->redraw();
       break;
       case 242:
       SYNTHFILTER->synthfilter_fb->value(rkr->efx_Synthfilter->getpar(7));
       SYNTHFILTER->synthfilter_fb->redraw();
       break;
       case 243:
       SYNTHFILTER->synthfilter_dpth->value(rkr->efx_Synthfilter->getpar(11));
       SYNTHFILTER->synthfilter_dpth->redraw();
       break;
       case 244:
       SYNTHFILTER->synthfilter_EnvSens->value(rkr->efx_Synthfilter->getpar(12));
       SYNTHFILTER->synthfilter_EnvSens->redraw();
       break;
       case 245:
       SYNTHFILTER->synthfilter_ATime->value(rkr->efx_Synthfilter->getpar(13));
       SYNTHFILTER->synthfilter_ATime->redraw();
       break;
       case 246:
       SYNTHFILTER->synthfilter_RTime->value(rkr->efx_Synthfilter->getpar(14));
       SYNTHFILTER->synthfilter_RTime->redraw();
       break;
       case 247:
       SYNTHFILTER->synthfilter_Offset->value(rkr->efx_Synthfilter->getpar(15));
       SYNTHFILTER->synthfilter_Offset->redraw();
       break;
       case 248:
       MBVVOL->mbvvol_WD->value(rkr->efx_MBVvol->getpar(0)-64);
       MBVVOL->mbvvol_WD->redraw();
       break;
       case 249:
       MBVVOL->mbvvol_freq1->value(rkr->efx_MBVvol->getpar(1));
       MBVVOL->mbvvol_freq1->redraw();
       break;
       case 250:
       MBVVOL->mbvvol_stdf1->value(rkr->efx_MBVvol->getpar(3));
       MBVVOL->mbvvol_stdf1->redraw();
       break;
       case 251:
       MBVVOL->mbvvol_freq2->value(rkr->efx_MBVvol->getpar(4));
       MBVVOL->mbvvol_freq2->redraw();
       break;
       case 252:
       MBVVOL->mbvvol_stdf2->value(rkr->efx_MBVvol->getpar(6));
       MBVVOL->mbvvol_stdf2->redraw();
       break;
       case 253:
       MBVVOL->mbvvol_cross1->value(rkr->efx_MBVvol->getpar(7));
       MBVVOL->mbvvol_cross1->redraw();
       break;
       case 254:
       MBVVOL->mbvvol_cross2->value(rkr->efx_MBVvol->getpar(8));
       MBVVOL->mbvvol_cross2->redraw();
       break;
       case 255:
       MBVVOL->mbvvol_cross3->value(rkr->efx_MBVvol->getpar(9));
       MBVVOL->mbvvol_cross3->redraw();
       break;
       case 256:
       RYANWAH->ryanwah_WD->value(rkr->efx_RyanWah->getpar(0)-64);
       RYANWAH->ryanwah_WD->redraw();
       break;
       case 257:
       RYANWAH->ryanwah_lp->value(rkr->efx_RyanWah->getpar(10));
       RYANWAH->ryanwah_lp->redraw();
       break;
       case 258:
       RYANWAH->ryanwah_bp->value(rkr->efx_RyanWah->getpar(11));
       RYANWAH->ryanwah_bp->redraw();
       break;
       case 259:
       RYANWAH->ryanwah_hp->value(rkr->efx_RyanWah->getpar(12));
       RYANWAH->ryanwah_hp->redraw();
       break;
       case 260:
       RYANWAH->ryanwah_dpth->value(rkr->efx_RyanWah->getpar(6));
       RYANWAH->ryanwah_dpth->redraw();
       break;
       case 261:
       RYANWAH->ryanwah_freq->value(rkr->efx_RyanWah->getpar(2));
       RYANWAH->ryanwah_freq->redraw();
       break;
       case 262:
       RYANWAH->ryanwah_q->value(rkr->efx_RyanWah->getpar(1));
       RYANWAH->ryanwah_q->redraw();
       break;
       case 263:
       RYANWAH->ryanwah_rng->value(rkr->efx_RyanWah->getpar(14));
       RYANWAH->ryanwah_rng->redraw();
       break;
       case 264:
       RYANWAH->ryanwah_ampsnsinv->value(rkr->efx_RyanWah->getpar(8));
       RYANWAH->ryanwah_ampsnsinv->redraw();
       break;
       case 265:
       RYANWAH->ryanwah_ampsns->value(rkr->efx_RyanWah->getpar(7));
       RYANWAH->ryanwah_ampsns->redraw();
       break;
       case 266:
       RYANWAH->ryanwah_smooth->value(rkr->efx_RyanWah->getpar(9));
       RYANWAH->ryanwah_smooth->redraw();
       break;
       case 267:
       LOOPER->looper_WD->value(rkr->efx_Looper->getpar(0)-64);
       LOOPER->looper_WD->redraw();
       break;
       case 268:
       LOOPER->looper_level1->value(rkr->efx_Looper->getpar(6));
       LOOPER->looper_level1->redraw();
       break; 
       case 269:
       LOOPER->looper_level2->value(rkr->efx_Looper->getpar(10));
       LOOPER->looper_level2->redraw();
       break; 
       case 270:
       LOOPER->looper_rv->value(rkr->efx_Looper->getpar(5));
       LOOPER->looper_rv->redraw();
       break;
       case 271:
       LOOPER->looper_ap->value(rkr->efx_Looper->getpar(9));
       LOOPER->looper_ap->redraw();
       break;
       case 272:
       LOOPER->looper_play->value(rkr->efx_Looper->getpar(1));
       update_looper();
       break;
       case 273:
       LOOPER->looper_stop->value(rkr->efx_Looper->getpar(2));
       update_looper();
       break;
       case 274:
       LOOPER->looper_record->value(rkr->efx_Looper->getpar(3));
       update_looper();
       break;
       case 275:
       LOOPER->looper_r1->value(rkr->efx_Looper->getpar(11));
       LOOPER->looper_r1->redraw();
       break;
       case 276:
       LOOPER->looper_r2->value(rkr->efx_Looper->getpar(12));
       LOOPER->looper_r2->redraw();
       break;
       case 277:
       LOOPER->looper_t1->value(rkr->efx_Looper->getpar(7));
       update_looper();
       break;
       case 278:
       LOOPER->looper_t2->value(rkr->efx_Looper->getpar(8));
       update_looper();
       break;
       case 279:
       LOOPER->looper_clear->value(rkr->efx_Looper->getpar(4));
       update_looper();
       break;
       case 280:
       CONVOLOTRON->convo_WD->value(rkr->efx_Convol->getpar(0)-64);
       CONVOLOTRON->convo_WD->redraw();
       break;
       case 281:
       CONVOLOTRON->convo_pan->value(rkr->efx_Convol->getpar(1)-64);
       CONVOLOTRON->convo_pan->redraw();
       break;
       case 282:
       CONVOLOTRON->convo_level->value(rkr->efx_Convol->getpar(7));
       CONVOLOTRON->convo_level->redraw();
       break;
       case 283:
       CONVOLOTRON->convo_damp->value(rkr->efx_Convol->getpar(6));
       CONVOLOTRON->convo_damp->redraw();
       break;
       case 284:
       CONVOLOTRON->convo_fb->value(rkr->efx_Convol->getpar(10));
       CONVOLOTRON->convo_fb->redraw();
       break;
       case 285:
       CONVOLOTRON->convo_length->value(rkr->efx_Convol->getpar(3));
       CONVOLOTRON->convo_length->redraw();
       break;
       case 286:
       COILCRAFTER->coil_WD->value(rkr->efx_CoilCrafter->getpar(0));
       COILCRAFTER->coil_WD->redraw();
       break;
       case 287:
       COILCRAFTER->coil_tone->value(rkr->efx_CoilCrafter->getpar(7));
       COILCRAFTER->coil_tone->redraw();
       break;
       case 288:
       COILCRAFTER->coil_freq1->value(rkr->efx_CoilCrafter->getpar(3));
       COILCRAFTER->coil_freq1->redraw();
       break;
       case 289:
       COILCRAFTER->coil_q1->value(rkr->efx_CoilCrafter->getpar(4));
       COILCRAFTER->coil_q1->redraw();
       break;
       case 290:
       COILCRAFTER->coil_freq2->value(rkr->efx_CoilCrafter->getpar(5));
       COILCRAFTER->coil_freq2->redraw();
       break;
       case 291:
       COILCRAFTER->coil_q2->value(rkr->efx_CoilCrafter->getpar(6));
       COILCRAFTER->coil_q2->redraw();
       break;
       case 292:
       SHELFBOOST->shelf_gain->value(rkr->efx_ShelfBoost->getpar(0));
       SHELFBOOST->shelf_gain->redraw();     
       break;
       case 293:
       SHELFBOOST->shelf_level->value(rkr->efx_ShelfBoost->getpar(4));
       SHELFBOOST->shelf_level->redraw();     
       break;
       case 294:
       SHELFBOOST->shelf_freq1->value(rkr->efx_ShelfBoost->getpar(2));
       SHELFBOOST->shelf_freq1->redraw();     
       break;
       case 295:
       SHELFBOOST->shelf_q1->value(rkr->efx_ShelfBoost->getpar(1));
       SHELFBOOST->shelf_q1->redraw();     
       break;
       case 296:
       VOCODER->vo_WD->value(rkr->efx_Vocoder->getpar(0)-64); 
       VOCODER->vo_WD->redraw();
       break;
       case 297:
       VOCODER->vo_pan->value(rkr->efx_Vocoder->getpar(1)-64); 
       VOCODER->vo_pan->redraw();
       break;
       case 298:
       VOCODER->vo_input->value(rkr->efx_Vocoder->getpar(4)); 
       VOCODER->vo_input->redraw();
       break;
       case 299:
       VOCODER->vo_mu->value(rkr->efx_Vocoder->getpar(2)); 
       VOCODER->vo_mu->redraw();
       break;
       case 300:
       VOCODER->vo_q->value(rkr->efx_Vocoder->getpar(3)); 
       VOCODER->vo_q->redraw();
       break;
       case 301:
       VOCODER->vo_ring->value(rkr->efx_Vocoder->getpar(6)); 
       VOCODER->vo_ring->redraw();
       break;
       case 302:
       VOCODER->vo_level->value(rkr->efx_Vocoder->getpar(5)); 
       VOCODER->vo_level->redraw();
       break;
       case 303:
       RBECHO->rbecho_WD->value(rkr->efx_RBEcho->getpar(0)-64);
       RBECHO->rbecho_WD->redraw();
       break;
       case 304:
       RBECHO->rbecho_RV->value(rkr->efx_RBEcho->getpar(7));
       RBECHO->rbecho_RV->redraw();
       break;
       case 305:
       RBECHO->rbecho_pan->value(rkr->efx_RBEcho->getpar(1)-64);
       RBECHO->rbecho_pan->redraw();
       break;
       case 306:
       RBECHO->rbecho_delay->value(rkr->efx_RBEcho->getpar(2));
       RBECHO->rbecho_delay->redraw();
       break;
       case 307:
       RBECHO->rbecho_LRdl->value(rkr->efx_RBEcho->getpar(3));
       RBECHO->rbecho_LRdl->redraw();
       break;
       case 308:
       RBECHO->rbecho_fb->value(rkr->efx_RBEcho->getpar(5));
       RBECHO->rbecho_fb->redraw();
       break;
       case 309:
       RBECHO->rbecho_damp->value(rkr->efx_RBEcho->getpar(6));
       RBECHO->rbecho_damp->redraw();
       break;
       case 310:
       RBECHO->rbecho_es->value(rkr->efx_RBEcho->getpar(9));
       RBECHO->rbecho_es->redraw();
       break;
       case 311:
       RBECHO->rbecho_angle->value(rkr->efx_RBEcho->getpar(4)-64);
       RBECHO->rbecho_angle->redraw();
       break;
       case 312:
       SUSTAINER->sus_gain->value(rkr->efx_Sustainer->getpar(0));
       SUSTAINER->sus_gain->redraw();
       break;
       case 313:
       SUSTAINER->sus_sus->value(rkr->efx_Sustainer->getpar(1));
       SUSTAINER->sus_sus->redraw();
       break;
       case 314:
       SEQUENCE->seq_WD->value(rkr->efx_Sequence->getpar(8)-64);
       SEQUENCE->seq_WD->redraw();
       break;
       case 315:
       SEQUENCE->seq_1->value(rkr->efx_Sequence->getpar(0));
       SEQUENCE->seq_1->redraw();
       break;
       case 316:
       SEQUENCE->seq_2->value(rkr->efx_Sequence->getpar(1));
       SEQUENCE->seq_2->redraw();
       break;
       case 317:
       SEQUENCE->seq_3->value(rkr->efx_Sequence->getpar(2));
       SEQUENCE->seq_3->redraw();
       break;
       case 318:
       SEQUENCE->seq_4->value(rkr->efx_Sequence->getpar(3));
       SEQUENCE->seq_4->redraw();
       break;
       case 319:
       SEQUENCE->seq_5->value(rkr->efx_Sequence->getpar(4));
       SEQUENCE->seq_5->redraw();
       break;
       case 320:
       SEQUENCE->seq_6->value(rkr->efx_Sequence->getpar(5));
       SEQUENCE->seq_6->redraw();
       break;
       case 321:
       SEQUENCE->seq_7->value(rkr->efx_Sequence->getpar(6));
       SEQUENCE->seq_7->redraw();
       break;
       case 322:
       SEQUENCE->seq_8->value(rkr->efx_Sequence->getpar(7));
       SEQUENCE->seq_8->redraw();
       break;
       case 323:
       SEQUENCE->seq_tempo->value(rkr->efx_Sequence->getpar(9));
       SEQUENCE->seq_tempo->redraw();
       break;
       case 324:
       SEQUENCE->seq_q->value(rkr->efx_Sequence->getpar(10)-64);
       SEQUENCE->seq_q->redraw();
       break;
       case 325:
       SEQUENCE->seq_stdf->value(rkr->efx_Sequence->getpar(12));
       SEQUENCE->seq_stdf->redraw();
       break;
       case 326:
       SHIFTER->shifter_WD->value(rkr->efx_Shifter->getpar(0)-64);
       SHIFTER->shifter_WD->redraw();
       break;
       case 327:
       SHIFTER->shifter_int->value(rkr->efx_Shifter->getpar(6));
       SHIFTER->shifter_int->redraw();
       break;
       case 328:
       SHIFTER->shifter_gain->value(rkr->efx_Shifter->getpar(2)-64);
       SHIFTER->shifter_gain->redraw();
       break;
       case 329:
       SHIFTER->shifter_pan->value(rkr->efx_Shifter->getpar(1)-64);
       SHIFTER->shifter_pan->redraw();
       break;
       case 330:
       SHIFTER->shifter_attack->value(rkr->efx_Shifter->getpar(3));
       SHIFTER->shifter_attack->redraw();
       break;
       case 331:
       SHIFTER->shifter_decay->value(rkr->efx_Shifter->getpar(4));
       SHIFTER->shifter_decay->redraw();
       break;
       case 332:
       SHIFTER->shifter_thre->value(rkr->efx_Shifter->getpar(5));
       SHIFTER->shifter_thre->redraw();
       break;
       case 333:
       SHIFTER->shifter_whammy->value(rkr->efx_Shifter->getpar(9));
       SHIFTER->shifter_whammy->redraw();
       break;
       case 334:
       STOMPBOX->stomp_WD->value(rkr->efx_StompBox->getpar(0));
       STOMPBOX->stomp_WD->redraw();
       break;
       case 335:
       STOMPBOX->stomp_gain->value(rkr->efx_StompBox->getpar(4));
       STOMPBOX->stomp_gain->redraw();
       break;
       case 336:
       STOMPBOX->stomp_low->value(rkr->efx_StompBox->getpar(3)-64);
       STOMPBOX->stomp_low->redraw();
       break;
       case 337:
       STOMPBOX->stomp_mid->value(rkr->efx_StompBox->getpar(2)-64);
       STOMPBOX->stomp_mid->redraw();
       break;
       case 338:
       STOMPBOX->stomp_high->value(rkr->efx_StompBox->getpar(1)-64);
       STOMPBOX->stomp_high->redraw();
       break;
       case 339:
       REVERBTRON->revtron_WD->value(rkr->efx_Reverbtron->getpar(0)-64);
       REVERBTRON->revtron_WD->redraw();
       break;
       case 340:
       REVERBTRON->revtron_pan->value(rkr->efx_Reverbtron->getpar(11)-64);
       REVERBTRON->revtron_pan->redraw();
       break;
       case 341:
       REVERBTRON->revtron_level->value(rkr->efx_Reverbtron->getpar(7));
       REVERBTRON->revtron_level->redraw();
       break;
       case 342:
       REVERBTRON->revtron_damp->value(rkr->efx_Reverbtron->getpar(6));
       REVERBTRON->revtron_damp->redraw();
       break;
       case 343:
       REVERBTRON->revtron_fb->value(rkr->efx_Reverbtron->getpar(10)-64);
       REVERBTRON->revtron_fb->redraw();
       break;
       case 344:
       REVERBTRON->revtron_length->value(rkr->efx_Reverbtron->getpar(3));
       REVERBTRON->revtron_length->redraw();
       break;
       case 345:
       REVERBTRON->revtron_strech->value(rkr->efx_Reverbtron->getpar(9)-64);
       REVERBTRON->revtron_strech->redraw();
       break;
       case 346:
       REVERBTRON->revtron_idelay->value(rkr->efx_Reverbtron->getpar(5));
       REVERBTRON->revtron_idelay->redraw();
       break;
       case 347:
       REVERBTRON->revtron_fade->value(rkr->efx_Reverbtron->getpar(1));
       REVERBTRON->revtron_fade->redraw();
       break;
       case 348:
       ECHOTRON->echotron_WD->value(rkr->efx_Echotron->getpar(0)-64);
       ECHOTRON->echotron_WD->redraw();
       break;
       case 349:
       ECHOTRON->echotron_pan->value(rkr->efx_Echotron->getpar(11)-64);
       ECHOTRON->echotron_pan->redraw();
       break;
       case 350:
       ECHOTRON->echotron_tempo->value(rkr->efx_Echotron->getpar(5));
       ECHOTRON->echotron_tempo->redraw();
       break;
       case 351:
       ECHOTRON->echotron_damp->value(rkr->efx_Echotron->getpar(6));
       ECHOTRON->echotron_damp->redraw();
       break;
       case 352:
       ECHOTRON->echotron_fb->value(rkr->efx_Echotron->getpar(10)-64);
       ECHOTRON->echotron_fb->redraw();
       break;
       case 353:
       ECHOTRON->echotron_lrcross->value(rkr->efx_Echotron->getpar(7)-64);
       ECHOTRON->echotron_lrcross->redraw();
       break;
       case 354:
       ECHOTRON->echotron_width->value(rkr->efx_Echotron->getpar(2));
       ECHOTRON->echotron_width->redraw();
       break;
       case 355:
       ECHOTRON->echotron_deep->value(rkr->efx_Echotron->getpar(1)-64);
       ECHOTRON->echotron_deep->redraw();
       break;
       case 356:
       ECHOTRON->echotron_stdf->value(rkr->efx_Echotron->getpar(9));
       ECHOTRON->echotron_stdf->redraw();
       break;
       case 357:
       ECHOTRON->echotron_length->value(rkr->efx_Echotron->getpar(3));
       ECHOTRON->echotron_length->redraw();
       break;
       case 358:
       SHAR->shar_WD->value(rkr->efx_StereoHarm->getpar(0)-64);
       SHAR->shar_WD->redraw();
       break;
       case 359:
       SHAR->shar_intl->value(rkr->efx_StereoHarm->getpar(2));
       SHAR->shar_intl->redraw();
       break;
       case 360:
       SHAR->shar_chl->value(rkr->efx_StereoHarm->getpar(3));
       SHAR->shar_chl->redraw();
       break;
       case 361:
       SHAR->shar_ganl->value(rkr->efx_StereoHarm->getpar(1)-64);
       SHAR->shar_ganl->redraw();
       break;
       case 362:
       SHAR->shar_intr->value(rkr->efx_StereoHarm->getpar(5));
       SHAR->shar_intr->redraw();
       break;
       case 363:
       SHAR->shar_chr->value(rkr->efx_StereoHarm->getpar(6));
       SHAR->shar_chr->redraw();
       break;
       case 364:
       SHAR->shar_ganr->value(rkr->efx_StereoHarm->getpar(4)-64);
       SHAR->shar_ganr->redraw();
       break;
       case 365:
       SHAR->shar_lrc->value(rkr->efx_StereoHarm->getpar(11)-64);
       SHAR->shar_lrc->redraw();
       break;
       case 366:
       SHAR->shar_note->value(rkr->efx_StereoHarm->getpar(8));
       SHAR->shar_note->redraw();
       Chord(1);
       break;
       case 367:
       SHAR->shar_type->value(rkr->efx_StereoHarm->getpar(9));
       SHAR->shar_type->redraw();
       Chord(1);
       break;
       case 368:
       cband_WD->value(rkr->efx_CompBand->getpar(0)-64);
       cband_WD->redraw();
       break;
       case 369:
       cband_gain->value(rkr->efx_CompBand->getpar(12));
       cband_gain->redraw();
       break;
       case 370:
       cband_Lratio->value(rkr->efx_CompBand->getpar(1));
       cband_Lratio->redraw();
       break;
       case 371:
       cband_MLratio->value(rkr->efx_CompBand->getpar(2));
       cband_MLratio->redraw();
       break;
       case 372:
       cband_MHratio->value(rkr->efx_CompBand->getpar(3));
       cband_MHratio->redraw();
       break;
       case 373:
       cband_Hratio->value(rkr->efx_CompBand->getpar(4));
       cband_Hratio->redraw();
       break;
       case 374:
       cband_Lthres->value(rkr->efx_CompBand->getpar(5));
       cband_Lthres->redraw();
       break;
       case 375:
       cband_MLthres->value(rkr->efx_CompBand->getpar(6));
       cband_MLthres->redraw();
       break;
       case 376:
       cband_MHthres->value(rkr->efx_CompBand->getpar(7));
       cband_MHthres->redraw();
       break;
       case 377:
       cband_Hthres->value(rkr->efx_CompBand->getpar(8));
       cband_Hthres->redraw();
       break;
       case 378:
       cband_cross1->value(rkr->efx_CompBand->getpar(9));
       cband_cross1->redraw();
       break;
       case 379:
       cband_cross2->value(rkr->efx_CompBand->getpar(10));
       cband_cross2->redraw();
       break;
       case 380:
       cband_cross3->value(rkr->efx_CompBand->getpar(11));
       cband_cross3->redraw();
       break;
       case 381:
       otrem_dpth->value(rkr->efx_Opticaltrem->getpar(0));
       otrem_dpth->redraw();
       break;
       case 382:
       otrem_freq->value(rkr->efx_Opticaltrem->getpar(1));
       otrem_freq->redraw();
       break;
       case 383:
       otrem_rnd->value(rkr->efx_Opticaltrem->getpar(2));
       otrem_rnd->redraw();
       break;
       case 384:
       otrem_stdf->value(rkr->efx_Opticaltrem->getpar(4));
       otrem_stdf->redraw();
       break;
       case 385:
       otrem_pan->value(rkr->efx_Opticaltrem->getpar(5)-64);
       otrem_pan->redraw();
       break;
       case 386:
       vibe_WD->value(rkr->efx_Vibe->getpar(6)-64);
       vibe_WD->redraw();
       break;
       case 387:
       vibe_width->value(rkr->efx_Vibe->getpar(0));
       vibe_width->redraw();
       break;
       case 388:
       vibe_dpth->value(rkr->efx_Vibe->getpar(8));
       vibe_dpth->redraw();
       break;
       case 389:
       vibe_freq->value(rkr->efx_Vibe->getpar(1));
       vibe_freq->redraw();
       break;
       case 390:
       vibe_rnd->value(rkr->efx_Vibe->getpar(2));
       vibe_rnd->redraw();
       break;
       case 391:
       vibe_stdf->value(rkr->efx_Vibe->getpar(4));
       vibe_stdf->redraw();
       break;
       case 392:
       vibe_fb->value(rkr->efx_Vibe->getpar(7)-64);
       vibe_fb->redraw();
       break;
       case 393:
       vibe_LR->value(rkr->efx_Vibe->getpar(9)-64);
       vibe_LR->redraw();
       break;
       case 394:
       vibe_pan->value(rkr->efx_Vibe->getpar(6)-64);
       vibe_pan->redraw();
       break;
       case 395:
       infinity_WD->value(rkr->efx_Infinity->getpar(0)-64);
       infinity_WD->redraw();
       break;  	
       case 396:
       infinity_Q->value(rkr->efx_Infinity->getpar(9));
       infinity_Q->redraw();
       break;  	
       case 397:
       infinity_pan->value(rkr->efx_Infinity->getpar(15));
       infinity_pan->redraw();
       break;  	
       case 398:
       infinity_stdf->value(rkr->efx_Infinity->getpar(13)-64);
       infinity_stdf->redraw();
       break;  	
       case 399:
       infinity_start->value(rkr->efx_Infinity->getpar(10));
       infinity_start->redraw();
       break;  	
       case 400:
       infinity_end->value(rkr->efx_Infinity->getpar(11));
       infinity_end->redraw();
       break;  	
       case 401:
       infinity_rate->value(rkr->efx_Infinity->getpar(12));
       infinity_rate->redraw();
       break;  	
       case 402:
       infinity_subdiv->value(rkr->efx_Infinity->getpar(14));
       infinity_subdiv->redraw();
       break;  	
  
  
       
        
  }
  
  
  }
  
  
  rkr->Mvalue=0;
}

void RKRGUI::ActOnOff() {
  int miralo;
  
  
  while(rkr->OnOffC>0)
  {
  
  
  if(rkr->Mnumeff[rkr->OnOffC] >2000) miralo = rkr->Mnumeff[rkr->OnOffC]-2000;
  else
  if(rkr->Mnumeff[rkr->OnOffC] >=1000) miralo=rkr->Mnumeff[rkr->OnOffC]-1000;
  else
  miralo = rkr->efx_order[rkr->Mnumeff[rkr->OnOffC]];
  
  switch(miralo)
  {
    case 0:
    EQ->eq_activar->value(rkr->EQ1_Bypass);
    EQ->eq_activar->do_callback();
    break;
    case 1:
    COMPRESS->compress_activar->value(rkr->Compressor_Bypass);
    COMPRESS->compress_activar->do_callback();
    break;
    case 2:
    DIST->dist_activar->value(rkr->Distorsion_Bypass);
    DIST->dist_activar->do_callback();
    break;
    case 3:
    OVRD->ovrd_activar->value(rkr->Overdrive_Bypass);
    OVRD->ovrd_activar->do_callback();
    break;
    case 4:
    ECHO->echo_activar->value(rkr->Echo_Bypass);
    ECHO->echo_activar->do_callback();
    break;
    case 5:
    CHORUS->chorus_activar->value(rkr->Chorus_Bypass);
    CHORUS->chorus_activar->do_callback();
    break;
    case 6:
    PHASER->phaser_activar->value(rkr->Phaser_Bypass);
    PHASER->phaser_activar->do_callback();
    break;
    case 7:
    FLANGER->flanger_activar->value(rkr->Flanger_Bypass);
    FLANGER->flanger_activar->do_callback();
    break;
    case 8:
    REVERB->reverb_activar->value(rkr->Reverb_Bypass);
    REVERB->reverb_activar->do_callback();
    break;
    case 9:
    PEQ->eqp_activar->value(rkr->EQ2_Bypass);
    PEQ->eqp_activar->do_callback();
    break;
    case 10:
    WHAWHA->WhaWha_activar->value(rkr->WhaWha_Bypass);
    WHAWHA->WhaWha_activar->do_callback();
    break;
    case 11:
    ALIENWAH->Alienwah_activar->value(rkr->Alienwah_Bypass);
    ALIENWAH->Alienwah_activar->do_callback();
    break;
    case 12:
    CABINET->Cabinet_activar->value(rkr->Cabinet_Bypass);
    CABINET->Cabinet_activar->do_callback();
    break;
    case 13:
    PAN->pan_activar->value(rkr->Pan_Bypass);
    PAN->pan_activar->do_callback();
    break;
    case 14:
    HAR->har_activar->value(rkr->Harmonizer_Bypass);
    HAR->har_activar->do_callback();
    break;
    case 15:
    MUSDELAY->musdelay_activar->value(rkr->MusDelay_Bypass);
    MUSDELAY->musdelay_activar->do_callback();
    break;
    case 16:
    GATE->gate_activar->value(rkr->Gate_Bypass);
    GATE->gate_activar->do_callback();
    break;
    case 17:
    NEWDIST->newdist_activar->value(rkr->NewDist_Bypass);
    NEWDIST->newdist_activar->do_callback();
    break;
    case 18:
    APHASER->aphaser_activar->value(rkr->APhaser_Bypass);
    APHASER->aphaser_activar->do_callback();
    break;
    case 19:
    VALVE->valve_activar->value(rkr->Valve_Bypass);
    VALVE->valve_activar->do_callback();
    break;
    case 20:
    DFLANGE->dflange_activar->value(rkr->DFlange_Bypass);
    DFLANGE->dflange_activar->do_callback();
    break;
    case 21:
    RING->ring_activar->value(rkr->Ring_Bypass);
    RING->ring_activar->do_callback();
    break;
    case 22:
    EXCITER->exciter_activar->value(rkr->Exciter_Bypass);
    EXCITER->exciter_activar->do_callback();
    break;
    case 23:
    MBDIST->mbdist_activar->value(rkr->MBDist_Bypass);
    MBDIST->mbdist_activar->do_callback();
    break;
    case 24:
    ARPIE->arpie_activar->value(rkr->Arpie_Bypass);
    ARPIE->arpie_activar->do_callback();
    break;
    case 25:
    EXPANDER->expander_activar->value(rkr->Expander_Bypass);
    EXPANDER->expander_activar->do_callback();
    break;
    case 26:
    SHUFFLE->shuffle_activar->value(rkr->Shuffle_Bypass);
    SHUFFLE->shuffle_activar->do_callback();
    break;
    case 27:
    SYNTHFILTER->synthfilter_activar->value(rkr->Synthfilter_Bypass);
    SYNTHFILTER->synthfilter_activar->do_callback();
    break;
    case 28:
    MBVVOL->mbvvol_activar->value(rkr->MBVvol_Bypass);
    MBVVOL->mbvvol_activar->do_callback();
    break;
    case 29:
    CONVOLOTRON->convo_activar->value(rkr->Convol_Bypass);
    CONVOLOTRON->convo_activar->do_callback();
    break;
    case 30:
    LOOPER->looper_activar->value(rkr->Looper_Bypass);
    LOOPER->looper_activar->do_callback();
    break;
    case 31:
    RYANWAH->ryanwah_activar->value(rkr->RyanWah_Bypass);
    RYANWAH->ryanwah_activar->do_callback();
    break;  
    case 32:
    RBECHO->rbecho_activar->value(rkr->RBEcho_Bypass);
    RBECHO->rbecho_activar->do_callback();
    break;
    case 33:
    COILCRAFTER->coil_activar->value(rkr->CoilCrafter_Bypass);
    COILCRAFTER->coil_activar->do_callback();
    break;
    case 34:
    SHELFBOOST->shelf_activar->value(rkr->ShelfBoost_Bypass);
    SHELFBOOST->shelf_activar->do_callback();
    break;
    case 35:
    VOCODER->vo_activar->value(rkr->Vocoder_Bypass);
    VOCODER->vo_activar->do_callback();
    break;
    case 36:
    SUSTAINER->sus_activar->value(rkr->Sustainer_Bypass);
    SUSTAINER->sus_activar->do_callback();
    break;
    case 37:
    SEQUENCE->seq_activar->value(rkr->Sequence_Bypass);
    SEQUENCE->seq_activar->do_callback();
    break;
   case 38:
    SHIFTER->shifter_activar->value(rkr->Shifter_Bypass);
    SHIFTER->shifter_activar->do_callback();
    break;
   case 39:
    STOMPBOX->stomp_activar->value(rkr->StompBox_Bypass);
    STOMPBOX->stomp_activar->do_callback();
    break;
   case 40:
    REVERBTRON->revtron_activar->value(rkr->Reverbtron_Bypass);
    REVERBTRON->revtron_activar->do_callback();
    break;
   case 41:
    ECHOTRON->echotron_activar->value(rkr->Echotron_Bypass);
    ECHOTRON->echotron_activar->do_callback();
    break;
   case 42:
    SHAR->shar_activar->value(rkr->StereoHarm_Bypass);
    SHAR->shar_activar->do_callback();
    break;
   case 43:
    cband_activar->value(rkr->CompBand_Bypass);
    cband_activar->do_callback();
    break;
   case 44:
    otrem_activar->value(rkr->Opticaltrem_Bypass);
    otrem_activar->do_callback();
    break;
  case 45:
    vibe_activar->value(rkr->Vibe_Bypass);
    vibe_activar->do_callback();
    break;
  case 46:
    infinity_activar->value(rkr->Infinity_Bypass);
    infinity_activar->do_callback();
    break;
    
    case 121:
    Tap_activar->value(rkr->Tap_Bypass);
    Tap_activar->do_callback();
    break;
    case 122:
    midi_activar->value(rkr->MIDIConverter_Bypass);
    midi_activar->do_callback();
    break;
    case 123:
    tuner_activar->value(rkr->Tuner_Bypass);
    tuner_activar->do_callback();
    break;
    case 124:
    ActivarGeneral->value(rkr->Bypass);
    ActivarGeneral->do_callback();
    break;
       
  
  }
  
  rkr->OnOffC--;
  
  
  }
}

void RKRGUI::light_preset(int npreset) {
  if(!made) return;
  
  for (int t=0; t<ob->children();t++)
    {
      Fl_Widget *w = ob->child(t);
      long long temp = (long long) w->user_data();
      if (temp == npreset)
      {
       w->color(fl_darker(leds_color));
       break;
       }
    
    }
}

void RKRGUI::unlight_preset(int npreset) {
  if(!made) return;
  
  for (int t=0; t<ob->children();t++)
    {
      Fl_Widget *w = ob->child(t);
      long long temp = (long long) w->user_data();
      if (temp == npreset)
      {
       w->color(fore_color);
       break;
       }
    
    }
}

void RKRGUI::PutBackground() {
  delete back;
  back = new Fl_Tiled_Image(new Fl_PNG_Image(rkr->BackgroundImage),1600,1200);
  if(!rkr->EnableBackgroundImage)
  back->color_average(back_color,0.0);
  
  InOut->image(back);
  EQ->image(InOut->image());
  COMPRESS->image(InOut->image());
  DIST->image(InOut->image());
  OVRD->image(InOut->image());
  ECHO->image(InOut->image());
  CHORUS->image(InOut->image());
  FLANGER->image(InOut->image());
  WHAWHA->image(InOut->image());
  ALIENWAH->image(InOut->image());
  PHASER->image(InOut->image());
  REVERB->image(InOut->image());
  PEQ->image(InOut->image());
  CABINET->image(InOut->image());
  PAN->image(InOut->image());
  HAR->image(InOut->image());
  MUSDELAY->image(InOut->image());
  GATE->image(InOut->image());
  NEWDIST->image(InOut->image());
  APHASER->image(InOut->image());
  VALVE->image(InOut->image());
  DFLANGE->image(InOut->image());
  RING->image(InOut->image());
  EXCITER->image(InOut->image());
  MBDIST->image(InOut->image());
  ARPIE->image(InOut->image());
  EXPANDER->image(InOut->image());
  SHUFFLE->image(InOut->image());
  SYNTHFILTER->image(InOut->image());
  MBVVOL->image(InOut->image());
  CONVOLOTRON->image(InOut->image());
  LOOPER->image(InOut->image());
  RYANWAH->image(InOut->image());
  RBECHO->image(InOut->image());
  COILCRAFTER->image(InOut->image());
  SHELFBOOST->image(InOut->image());
  VOCODER->image(InOut->image());
  SUSTAINER->image(InOut->image());
  SEQUENCE->image(InOut->image());
  SHIFTER->image(InOut->image());
  STOMPBOX->image(InOut->image());
  REVERBTRON->image(InOut->image());
  ECHOTRON->image(InOut->image());
  SHAR->image(InOut->image());
  COMPBAND->image(InOut->image());
  OTREM->image(InOut->image());
  VIBE->image(InOut->image());
  INFINIT->image(InOut->image());
  
  Tap->image(InOut->image());
  Presets->image(InOut->image());
  Tuner->image(InOut->image());
  Midi->image(InOut->image());
  Metro->image(InOut->image());
  fondo->image(InOut->image());
  TITTLE_L->image(InOut->image());
  Fondo1->image(InOut->image());
  Fondo2->image(InOut->image());
  Fondo3->image(InOut->image());
  Fondo4->image(InOut->image());
  Fondo5->image(InOut->image());
  Fondo6->image(InOut->image());
  Fondo7->image(InOut->image());
  Fondo8->image(InOut->image());
  Fondo9->image(InOut->image());
  Fondo10->image(InOut->image());
  Fondo11->image(InOut->image());
  
  
  
  
  
  
  
  
  
  
  Etit->image(InOut->image());
  Ares->image(InOut->image());
  
  MenuP->image(InOut->image());
  MenuB->image(InOut->image());
  
  
  Fl::redraw();
}

void RKRGUI::chfsize(int value) {
  unsigned char k;
  
  
  
  for (int t=0; t<Principal->children();t++)
    {
      Fl_Widget *w = Principal->child(t);
      long long ud = (long long) w->user_data();
    
       k= w->labelsize();
       k+=value;
       if((ud<770) || (ud>779))
       {
       if((k>2)&&(k<16)) w->labelsize(k);
       }
       else
       if((k>6)&&(k<20)) w->labelsize(k);
       
       if(ud != 5) w->labelcolor(label_color); else w->labelcolor(leds_color); 
       if (ud !=2) w->selection_color(back_color); else w->selection_color(leds_color);
       
     
      
      if (ud==1)
      {
            
       Fl_Group *g = (Fl_Group *)w;     
        
       for(int i=0;i<g->children();i++)
         {
  
           Fl_Widget *c = g->child(i);
           long long uh = (long long) c->user_data();
           
  
            k= c->labelsize();
            k+=value;
            if((uh==7) || (uh == 77))
            {
            if((k>6)&&(k<20))c->labelsize(k);
            }
            else
            if((k>2)&&(k<16))c->labelsize(k);
            if(uh != 5) c->labelcolor(label_color); else c->labelcolor(leds_color);
            if (uh !=7) c->selection_color(back_color); 
            if ((uh==2)||(uh==7)||(uh==77) || (uh == 78)) c->selection_color(leds_color);
            c->color(fore_color);
            c->labelfont(rkr->font);
         
            if(((uh >=12000) && (uh <=12100)) || (uh ==12))
             {
    
               Fl_Menu_*n = (Fl_Menu_*)c;
               
               Fl_Menu_Item *m = (Fl_Menu_Item*) n->menu(); 
               Fl_Menu_Item *p;  
               for(int s=0; s<m->size(); s++)
                    {
                      p=m->next(s);
                      k=p->labelsize();
                      k+=value;
                      if((k>2) &&(k<16))p->labelsize(k);
                      
                     }
               
         
    
              } 
         
    
    
            
         } 
      } 
   
    }
  
  
  
            k= WPreset_Name->textsize();
            k+=value;
            if((k>10)&&(k<32))WPreset_Name->textsize(k);
  
  
            CLIP_LED->selection_color(FL_RED);
  
  
  
  
  
  ChangeActives();
  
   
  Fl::redraw();
}

void RKRGUI::adjustfont() {
  int change,value;
  
  change = Principal->w() - rkr->resolution;
  value=change/100;
  rkr->resolution=Principal->w();
  rkr->relfontsize +=value;
  chfsize(value);
}

void RKRGUI::ChangeActives() {
  Fl_Color on =  fl_lighter(fl_lighter(label_color));
  Fl_Color off = fl_darker(label_color);
  
  
  if(rkr->active[0]) L1->labelcolor(on); else L1->labelcolor(off);
  if(rkr->active[1]) L2->labelcolor(on); else L2->labelcolor(off);
  if(rkr->active[2]) L3->labelcolor(on); else L3->labelcolor(off);
  if(rkr->active[3]) L4->labelcolor(on); else L4->labelcolor(off);
  if(rkr->active[4]) L5->labelcolor(on); else L5->labelcolor(off);
  if(rkr->active[5]) L6->labelcolor(on); else L6->labelcolor(off);
  if(rkr->active[6]) L7->labelcolor(on); else L7->labelcolor(off);
  if(rkr->active[7]) L8->labelcolor(on); else L8->labelcolor(off);
  if(rkr->active[8]) L9->labelcolor(on); else L9->labelcolor(off);
  if(rkr->active[9]) L10->labelcolor(on); else L10->labelcolor(off);
  
  
  
  if(rkr->MIDIConverter_Bypass) MIDI_LABEL->labelcolor(on); else MIDI_LABEL->labelcolor(off);
  if(rkr->Metro_Bypass) Metro_Label->labelcolor(on); else Metro_Label->labelcolor(off);
  if(rkr->Tap_Bypass) TAP_LABEL->labelcolor(on); else TAP_LABEL->labelcolor(off);
  if(rkr->Tuner_Bypass) TUNER_LABEL->labelcolor(on); else TUNER_LABEL->labelcolor(off);
  if(rkr->Bypass) LABEL_IO->labelcolor(on); else LABEL_IO->labelcolor(off);
  if((rkr->upsample) && (rkr->Bypass)) 
  {
  UPS_LED->color(leds_color);
  UPS_LED->redraw();
  }
   else
  { 
   UPS_LED->color(fl_darker(leds_color));
   UPS_LED->redraw();
  }
  CLIP_LED->color(fl_darker(FL_RED));
  LMT_LED->color(fl_darker(leds_color));
}

void RKRGUI::findpos(int num, int value, Fl_Widget*) {
  int i;
  Fl_Color on = fl_lighter(fl_lighter(label_color));
  Fl_Color off= fl_darker(label_color);
  
  for(i=0; i<10; i++)
   {
      if (rkr->efx_order[i]== num)
        {
          rkr->active[i]=value;
          break;
         }
    }
    
    
    
    
    switch(i)
    
    {
    
       case 0:
       if(value) L1->labelcolor(on); else L1->labelcolor(off);
       L1->redraw_label();
       break;  
       
       case 1:
       if(value) L2->labelcolor(on); else L2->labelcolor(off);
       L2->redraw_label();
       break;  
         
       case 2:
       if(value) L3->labelcolor(on); else L3->labelcolor(off);
       L3->redraw_label();
       break;  
         
       case 3:
       if(value) L4->labelcolor(on); else L4->labelcolor(off);
       L4->redraw_label();
       break;  
         
       case 4:
       if(value) L5->labelcolor(on); else L5->labelcolor(off);
       L5->redraw_label();
       break;  
         
       case 5:
       if(value) L6->labelcolor(on); else L6->labelcolor(off);
       L6->redraw_label();
       break;  
         
       case 6:
       if(value) L7->labelcolor(on); else L7->labelcolor(off);
       L7->redraw_label();
       break;  
         
       case 7:
       if(value) L8->labelcolor(on); else L8->labelcolor(off);
       L8->redraw_label();
       break;  
         
       case 8:
       if(value) L9->labelcolor(on); else L9->labelcolor(off);
       L9->redraw_label();
       break;  
         
       case 9:
       if(value) L10->labelcolor(on); else L10->labelcolor(off);
       L10->redraw_label();
       break;  
         
   }
}

void RKRGUI::Put_Skin(int last) {
  Principal->resize(Principal->x(),Principal->y(),rkr->resolution,rkr->sh);
  
  back_color=(Fl_Color)rkr->sback_color;
  fore_color=(Fl_Color)rkr->sfore_color;
  leds_color=(Fl_Color)rkr->sleds_color;
  label_color=(Fl_Color)rkr->slabel_color;
  
  scheme_ch->value(rkr->sschema);
  scheme_ch->do_callback();
  PutBackground();
  chfsize(rkr->relfontsize - last);
  Leds_Color_Change(leds_color);
  Buttons_Color_Change(fore_color);
  
  
  save_stat(3);
  Fl::redraw();
}

void RKRGUI::FillML(int type) {
  int i,j,k;
  char tmp[256];
  memset(tmp,0, sizeof(tmp));
  
  
  sprintf(tmp,"%s   v%s - MIDI Learn - Preset : %s",rkr->jackcliname,VERSION,rkr->Bank[rkr->Selected_Preset].Preset_Name);
  MIDILearn->copy_label(tmp);
  
  memset(rkr->ML_clist,0,sizeof(rkr->ML_clist));
  Epar->clear();
  k=0;
  
  switch(rkr->ML_filter) 
  {
    
   case 0:
   for(i=0; i<rkr->NumParams; i++) Epar->add(rkr->efx_params[i].Nom);  
   break;
  
   case 1:
   for(i=0;i<rkr->NumParams;i++)
        {
          if(rkr->efx_params[i].Effect==50)
           { 
           Epar->add(rkr->efx_params[i].Nom); 
           rkr->ML_clist[k]=rkr->efx_params[i].Ato;
           k++;
           }
        
        } 
   for(j=0;j<10;j++)
    {
      for(i=0;i<rkr->NumParams;i++)
        {
          if(rkr->efx_params[i].Effect==rkr->efx_order[j])
           { 
           Epar->add(rkr->efx_params[i].Nom); 
           rkr->ML_clist[k]=rkr->efx_params[i].Ato;
           k++;
           }
        
        } 
        
    }
    
    
    break;
  }
  
  Epar->redraw();
  
  
  
  
  TPresets->clear();
  for(i=1; i<=60; i++)  TPresets->add(rkr->Bank[i].Preset_Name);
  TPresets->select(rkr->Selected_Preset,1);
  TPresets->redraw();
  
  DisAssigns();
}

void RKRGUI::DisAssigns() {
  int i,j,k;
  char tmp[8];
  
  int the_one = 0;
  
  if((int)Epar->value())
  {
    if (rkr->ML_filter==0)
      the_one = rkr->efx_params[(int)Epar->value()-1].Ato;
    else
      the_one = rkr->ML_clist[(int)Epar->value()-1];
  }
  
  k=0;
  
  for(i=0;i<128;i++)
    {
      for(j=0;j<20;j++)
        { 
          
         if(rkr->XUserMIDI[i][j] == the_one)
           {
             k++;     
             memset(tmp,0, sizeof(tmp));
             sprintf(tmp, "%d", i);
             
             switch (k)
             {
             case 1:
                Ar1->copy_label(tmp);
                Ar1->redraw();
                break;     
                              
             case 2:
                Ar2->copy_label(tmp);
                Ar2->redraw();
                break;     
          
             case 3:
                Ar3->copy_label(tmp);
                Ar3->redraw();
                break;     
          
             case 4:
                Ar4->copy_label(tmp);
                Ar4->redraw();
                break;     
          
             case 5:
                Ar5->copy_label(tmp);
                Ar5->redraw();
                break;     
          
             case 6:
                Ar6->copy_label(tmp);
                Ar6->redraw();
                break;     
      
             case 7:
                Ar7->copy_label(tmp);
                Ar7->redraw();
                break;     
      
             case 8:
                Ar8->copy_label(tmp);
                Ar8->redraw();
                break;     
      
             case 9:
                Ar9->copy_label(tmp);
                Ar9->redraw();
                break;     
      
             case 10:
                Ar10->copy_label(tmp);
                Ar10->redraw();
                break;     
          
             case 11:
                Ar11->copy_label(tmp);
                Ar11->redraw();
                break;     
          
             case 12:
                Ar12->copy_label(tmp);
                Ar12->redraw();
                break;     
          
             case 13:
                Ar13->copy_label(tmp);
                Ar13->redraw();
                break;     
      
             case 14:
                Ar14->copy_label(tmp);
                Ar14->redraw();
                break;     
  
             case 15:
                Ar15->copy_label(tmp);
                Ar15->redraw();
                break;     
  
             case 16:
                Ar16->copy_label(tmp);
                Ar16->redraw();
                break;     
          
             case 17:
                Ar17->copy_label(tmp);
                Ar17->redraw();
                break;     
          
             case 18:
                Ar18->copy_label(tmp);
                Ar18->redraw();
                break;     
      
             case 19:
                Ar19->copy_label(tmp);
                Ar19->redraw();
                break;     
  
             case 20:
                Ar20->copy_label(tmp);
                Ar20->redraw();
                break;     
  
  
             }
  
  
  
         } 
  
   }         
  
  }
  
  
             k++;     
             
             for(i=k;i<=20;i++)
             {
   
             memset(tmp,0,sizeof(tmp));
             
             switch (i)
             {
             case 1:
                Ar1->copy_label(tmp);
                Ar1->redraw();
                break;     
                              
             case 2:
                Ar2->copy_label(tmp);
                Ar2->redraw();
                break;     
          
             case 3:
                Ar3->copy_label(tmp);
                Ar3->redraw();
                break;     
          
             case 4:
                Ar4->copy_label(tmp);
                Ar4->redraw();
                break;     
          
             case 5:
                Ar5->copy_label(tmp);
                Ar5->redraw();
                break;     
          
             case 6:
                Ar6->copy_label(tmp);
                Ar6->redraw();
                break;     
      
             case 7:
                Ar7->copy_label(tmp);
                Ar7->redraw();
                break;     
      
             case 8:
                Ar8->copy_label(tmp);
                Ar8->redraw();
                break;     
      
             case 9:
                Ar9->copy_label(tmp);
                Ar9->redraw();
                break;     
      
             case 10:
                Ar10->copy_label(tmp);
                Ar10->redraw();
                break;     
          
             case 11:
                Ar11->copy_label(tmp);
                Ar11->redraw();
                break;     
          
             case 12:
                Ar12->copy_label(tmp);
                Ar12->redraw();
                break;     
          
             case 13:
                Ar13->copy_label(tmp);
                Ar13->redraw();
                break;     
      
             case 14:
                Ar14->copy_label(tmp);
                Ar14->redraw();
                break;     
  
             case 15:
                Ar15->copy_label(tmp);
                Ar15->redraw();
                break;     
  
             case 16:
                Ar16->copy_label(tmp);
                Ar16->redraw();
                break;     
          
             case 17:
                Ar17->copy_label(tmp);
                Ar17->redraw();
                break;     
          
             case 18:
                Ar18->copy_label(tmp);
                Ar18->redraw();
                break;     
      
             case 19:
                Ar19->copy_label(tmp);
                Ar19->redraw();
                break;     
  
             case 20:
                Ar20->copy_label(tmp);
                Ar20->redraw();
                break;     
  
  
  }          
  
  }
}

void RKRGUI::Prepare_Order() {
  int i;
  Order_Bro->clear();
  
  
  for (i=0; i<10;i++) 
  {
  rkr->new_order[i]=rkr->efx_order[i];
  rkr->saved_order[i]=rkr->efx_order[i];
  Order_Bro->add(rkr->efx_names[Busca_Eff(rkr->efx_order[i])].Nom);
  }
  
  Fill_Avail(rkr->eff_filter);
  
  Order_Bro->select(1);
}

void RKRGUI::Show_Next_Time() {
  if(rkr->mess_dis) return;
  Fl_Widget *w = fl_message_icon();
  w->parent()->copy_label(rkr->jackcliname);         
  fl_message("This setting will be changed the next time you run rakarrack");
}

void RKRGUI::update_looper() {
  rkr->efx_Looper->getstate();
  
  LOOPER->looper_play->value(rkr->efx_Looper->progstate[0]);
  LOOPER->looper_play->redraw();
  LOOPER->looper_record->value(rkr->efx_Looper->progstate[2]);
  LOOPER->looper_record->redraw();
  LOOPER->looper_stop->value(rkr->efx_Looper->progstate[1]);
  LOOPER->looper_stop->redraw();
  if(rkr->efx_Looper->progstate[2])
  {
    LOOPER->Box_P->copy_label("Stop");
    LOOPER->looper_stop->copy_label("@square");  
  }
  else
  {
    LOOPER->Box_P->copy_label("Pause");
    LOOPER->looper_stop->copy_label("@||");
  }
    
  LOOPER->looper_t1->value(rkr->efx_Looper->progstate[4]);
  LOOPER->looper_t1->redraw();
  LOOPER->looper_t2->value(rkr->efx_Looper->progstate[5]);
  LOOPER->looper_t2->redraw();
}

void RKRGUI::UpdateTGUI() {
  if(rkr->Looper_Bypass)
     {
     LOOPER->looper_Tempo->value(rkr->efx_Looper->getpar(14));
     LOOPER->looper_Tempo->redraw();
     }  
  
  if(rkr->Chorus_Bypass)
    {
    CHORUS->chorus_freq->value(rkr->efx_Chorus->getpar(2));
    CHORUS->chorus_freq->redraw();
    }
    
    if(rkr->Flanger_Bypass)
    {
    FLANGER->flanger_freq->value(rkr->efx_Flanger->getpar(2));
    FLANGER->flanger_freq->redraw();
    }
    
    if(rkr->Phaser_Bypass)
    {
    PHASER->phaser_freq->value(rkr->efx_Phaser->getpar(2));
    PHASER->phaser_freq->redraw();
    }
    
    if(rkr->Pan_Bypass)
    {
    PAN->pan_freq->value(rkr->efx_Pan->getpar(2));
    PAN->pan_freq->redraw();
    }
    
    if(rkr->WhaWha_Bypass)
    {
    WHAWHA->WhaWha_freq->value(rkr->efx_WhaWha->getpar(2));
    WHAWHA->WhaWha_freq->redraw();
    }
    
    if(rkr->Alienwah_Bypass)
    {
    ALIENWAH->Alienwah_freq->value(rkr->efx_Alienwah->getpar(2));
    ALIENWAH->Alienwah_freq->redraw();
    }
    
    if(rkr->MusDelay_Bypass)
    {
    MUSDELAY->musdelay_tempo->value(rkr->efx_MusDelay->getpar(10));
    MUSDELAY->musdelay_tempo->redraw();
    }
    
    if(rkr->APhaser_Bypass)
    {
    APHASER->aphaser_freq->value(rkr->efx_APhaser->getpar(2));
    APHASER->aphaser_freq->redraw();
    }
    
    if(rkr->DFlange_Bypass)
    {
    DFLANGE->dflange_freq->value(rkr->efx_DFlange->getpar(10));
    DFLANGE->dflange_freq->redraw();
    }
    
    if(rkr->Synthfilter_Bypass)
    {
    SYNTHFILTER->synthfilter_freq->value(rkr->efx_Synthfilter->getpar(2));
    SYNTHFILTER->synthfilter_freq->redraw();
    }
    
    if(rkr->RyanWah_Bypass)
    {
    RYANWAH->ryanwah_freq->value(rkr->efx_RyanWah->getpar(2));
    RYANWAH->ryanwah_freq->redraw();
    }
      
    if(rkr->MBVvol_Bypass)
    {
    MBVVOL->mbvvol_freq1->value(rkr->efx_MBVvol->getpar(1));
    MBVVOL->mbvvol_freq1->redraw();
    }
    
    if(rkr->MBVvol_Bypass)
    {
    MBVVOL->mbvvol_freq2->value(rkr->efx_MBVvol->getpar(4));
    MBVVOL->mbvvol_freq2->redraw();
    }
    
    if(rkr->Arpie_Bypass)
    {
    ARPIE->arpie_delay->value(rkr->efx_Arpie->getpar(2));
    ARPIE->arpie_delay->redraw();
    }
   
    if(rkr->RBEcho_Bypass)
    {
     RBECHO->rbecho_delay->value(rkr->efx_RBEcho->getpar(2));
     RBECHO->rbecho_delay->redraw();
    }
    if(rkr->Sequence_Bypass)
    {
     SEQUENCE->seq_tempo->value(rkr->efx_Sequence->getpar(9));
     SEQUENCE->seq_tempo->redraw();
    }
    if(rkr->Echo_Bypass)
    { 
     ECHO->echo_delay->value(rkr->efx_Echo->getpar(2));
     ECHO->echo_delay->redraw();
    }
    if(rkr->Echotron_Bypass)
    { 
     ECHOTRON->echotron_tempo->value(rkr->efx_Echotron->getpar(5));
     ECHOTRON->echotron_tempo->redraw();
    }
    if(rkr->Opticaltrem_Bypass)
    {
      otrem_freq->value(rkr->efx_Opticaltrem->getpar(1));
      otrem_freq->redraw();  
    }
    if(rkr->Vibe_Bypass)
    {
      vibe_freq->value(rkr->efx_Vibe->getpar(1));
      vibe_freq->redraw();  
    }
    if(rkr->Infinity_Bypass)
    {
      infinity_rate->value(rkr->efx_Infinity->getpar(12));
      infinity_rate->redraw();  
    }
}

void RKRGUI::ActACI() {
  int value;
  int i,amax,amin;
  float gain =  0.0;
  float tmp = 0.0;
  
  switch(rkr->Aux_Source)
  {
     case 0:
        gain =  dB2rap (75.0f * (float)rkr->Aux_Gain / 127.0f);
        tmp = rkr->val_a_sum * gain;
        break;
     case 1:
        gain =  (float)rkr->Aux_Gain / 127.0f;
        tmp = dB2rap(rkr->val_il_sum) * 12.0f * gain ;
        break;
     case 2:
        gain =  (float)rkr->Aux_Gain / 127.0f;
        tmp = dB2rap(rkr->val_ir_sum) * 12.0f * gain;
        break;
  }
  
  float aux_vulevel =  (float)CLAMP(rap2dB(tmp), -48.0, 15.0);
  
  float threshold = (float) rkr->Aux_Threshold;
  aux_vu->value(aux_vulevel);
  
  if (aux_vulevel < threshold) tmp=0.0;
  
  if(tmp>1.0) tmp= 1.0f;
  
   amax = rkr->Aux_Maximum;
   amin = rkr->Aux_Minimum;
  
  value = amin + lrintf((float)(amax - amin)* tmp);
  
  if(value != rkr->last_auxvalue)
  {
  
  if(rkr->MIDIway)
  {
  
  for(i=0; i<20;i++)
      {
        if (rkr->XUserMIDI[rkr->Aux_MIDI][i])
            rkr->process_midi_controller_events(rkr->XUserMIDI[rkr->Aux_MIDI][i],value);
            else break;
     }        
  
  }
  else rkr->process_midi_controller_events(rkr->Aux_MIDI,value);   
  
  rkr->last_auxvalue = value;
  
  }
}

int RKRGUI::Busca_Eff(int num) {
  int i;
  for(i=0; i<rkr->NumEffects;i++)
   {
     if(rkr->efx_names[i].Pos==num) 
     break;
   }  
   return(i);
}

void RKRGUI::Fill_Avail(int filter) {
  int i,j,t,k;
  
  Avail_Bro->clear();
  
  t=1;
  for (i=0; i<rkr->NumEffects;i++)
  {
    
      k=0;
   for (j=0;j<10;j++)
     { 
       if (rkr->new_order[j]==rkr->efx_names[i].Pos) k=1;
     }     
   
   if(!k)
   
   { 
   
    if((rkr->efx_names[i].Type&rkr->eff_filter)==filter) 
   { 
    Avail_Bro->add(rkr->efx_names[i].Nom);
    rkr->availables[t]=rkr->efx_names[i].Pos;
    t++;
   }
   
   }
  
  }
  
  Avail_Bro->select(1);
}

void RKRGUI::highlight() {
  int tipo=0;
  long long k=0;
  
  Fl_Widget *w;
  
  if (Fl::focus() == TITTLE_L) Fl::focus(Open_Order);
  if (Fl::focus() == Etit) Fl::focus(Open_Order);
  w = Fl::belowmouse();
  
  if(w != NULL)
  {
  tipo=(int)w->type();
  k = (long long) w->user_data();
  }
  else
  {
  if(old != NULL)
  {
  old->color(fore_color);
  old->redraw();
  }
  }
  
  
  if((tipo==1) || (k == 77)) 
  {
  if(old != NULL)
  {
  old->color(fore_color);
  old->redraw();
  }
     w->color(fl_color_average(fore_color,fl_lighter(fore_color),.8));
     w->redraw();
     old = w;
  }
  
  else
  {
  if(old != NULL)
  {
  old->color(fore_color);
  old->redraw();
  old->redraw_label();
  }
  }
  
  if(k==99)
  {
  Fl_Browser *b;
  b = (Fl_Browser *) w;
  int tecla=Fl::event_key();
  if(tecla != last_tecla)
  {
   last_tecla = tecla; 
   for(int i=1; i<=b->size(); i++)
    {
      if (b->text(i)[0]>=tecla-32) 
       {
         b->select(i,1);
         break;
       }  
  
    }
  
  }
  
  
  
  }
}

int RKRGUI::search_but(int x, int y) {
  for (int t=0; t<ob->children();t++)
    {
      Fl_Widget *w = ob->child(t);
  
      if( (x>=w->x() ) && (x<=(w->x()+w->w())) && (y>=w->y() ) && (y<=(w->y()+w->h())))   
      
      { 
        long long kn = (long long) w->user_data();
        return((int)kn);
      }
  
  
  
    }
    
    
  return(1000);
}

void RKRGUI::ScanDir() {
  char nombre[64];
    char *nombank;
    nombank = (char *)calloc(1, 256);
    char * const  forFree = nombank; /* <--- saving calloc() returned value */ 
    DIR *dir;
    struct dirent *fs;
  
    ClearBankNames();     /* This will free all memory allocated for names */
    CH_UB->clear();
  
    dir=opendir(DATADIR);
    if (dir==NULL) return;
  
    while ((fs=readdir(dir)))
    {
    if (strstr(fs->d_name,".rkrb")!=NULL)
      {
        sprintf(nombank,"%s/%s",DATADIR, fs->d_name);
        AddBankName(nombank);
        if(rkr->CheckOldBank(nombank)==0)
        {
         memset(nombre,0,sizeof(nombre));
         strncpy(nombre,fs->d_name,strlen(fs->d_name)-5);
         if(nombre != NULL)
         {
            CH_UB->add((const char *)nombre, 0, (Fl_Callback *)cb_CH_UB, (void *)nombank, 0);
         }
        }
  
       }
    }
    closedir(dir);
  
    dir=opendir(rkr->UDirFilename);
    if (dir==NULL) return;
  
    while ((fs=readdir(dir)))
    {
    if (strstr(fs->d_name,".rkrb")!=NULL)
      {
        sprintf(nombank,"%s/%s",rkr->UDirFilename,fs->d_name);
        AddBankName(nombank);
        if(rkr->CheckOldBank(nombank)==0)
        {
         memset(nombre,0,sizeof(nombre));
         strncpy(nombre,fs->d_name,strlen(fs->d_name)-5);
         if(nombre != NULL)
         {
            CH_UB->add((const char *)nombre, 0, (Fl_Callback *)cb_CH_UB, (void *)nombank, 0);
         }
        }
  
       }
    }
    closedir(dir);
  
    CH_UB->value(0);
    free(forFree);
}

int RKRGUI::prevnext(int e) {
  if(e==5)
  {
   Fl_Widget *w = Fl::belowmouse();
   long long k = (long long) w->user_data();
   if((k<770)||( k>779)) return 0;
   drag=k-770;
   return 1;
  } 
  
  
  if(e != 12) return 0;
  else
  {
  
  if((Fl::event_key(43)) || (Fl::event_key(FL_KP + 43)))     // +(plus) key
  {
  stecla=1;
  return 1;
  }
  
  if((Fl::event_key(45)) || (Fl::event_key(FL_KP + 45)))     // -(minus) key
  {
  stecla=2;
  return 1;
  }
  
  if(Fl::event_key(65471))      // F2 key - decrease output volume
  {
  stecla=3;
  return 1;
  }
  
  if(Fl::event_key(65472))      // F3 key - increase output volume
  {
  stecla=4;
  return 1;
  }
  
  if(Fl::event_key(65379))      // Insert key - add user preset
  {
   Fl_Widget *w = Fl::belowmouse();
   if(w == NULL)
     return 0;
   long long k = (long long) w->user_data();
   if((k>11999) && (k<12100)) 
   ((RKRGUI*)(w->parent()->parent()->user_data()))->addpreset(w,k-12000);
  return 1;
  
  }
  
  
  if(Fl::event_key(65535))      // Delete key - delete user preset
  {
   Fl_Widget *w = Fl::belowmouse();
   if(w == NULL)
      return 0;
   long long k = (long long) w->user_data();
   if((k>11999) && (k<12100)) 
   ((RKRGUI*)(w->parent()->parent()->user_data()))->delpreset(w,k-12000);
  return 1;
  
  }
  
  
  
  
  
  
  
  
  
  }
  
  return 0;
}

bool RKRGUI::install_signal_handlers() {
  /*install signal handlers*/
      struct sigaction action;
      memset(&action, 0, sizeof(action));
      action.sa_handler = sigterm_handler;
  
      if (sigaction(SIGUSR1, &action, NULL) == -1)
      {
          printf("sigaction() failed: \n");
          return false;
      }
  
      if (sigaction(SIGINT, &action, NULL) == -1)
      {
          printf("sigaction() failed: \n");
          return false;
      }
  
      return true;
}

void RKRGUI::sigterm_handler(int sig) {
  if(sig == SIGUSR1)
      {
          got_sigusr1 = sig;
      }
  
      if(sig == SIGINT)
      {
          got_sigint = sig;
      }
}

void RKRGUI::check_signals(void *usrPtr) {
  RKRGUI  *gui = NULL;
      gui = (RKRGUI*)usrPtr;
      
      if(!gui)
          return;
      
      if(got_sigusr1 == SIGUSR1)
      {
          if(filetoload != NULL)      // individual preset
          {
              printf("Saving file: %s\n", filetoload);
              got_sigusr1 = 0;
              rkr->savefile(filetoload);
          }
          return;
      }
      
      if(got_sigint == SIGINT)
      {
          printf( "Got SIGTERM, quitting...\n" );
          got_sigint = 0;
          Pexitprogram = 1;
      }
}

void RKRGUI::getMIDIControl(int num) {
  int i = 0;
  rkr->comemouse=1;
  PrepareML();
  while (i<Epar->size())
  {
  
   if ((rkr->ML_filter==0) && (rkr->efx_params[i].Ato == num))
   
    {
      Epar->select(i+1);
      break;
     }
  
   if ((rkr->ML_filter==1) && (rkr->ML_clist[i] == num))
    {
      Epar->select(i+1);
      break;
     }
  
  
  i++;
  
  }
  
  DisAssigns();
  GMM->do_callback();
}

void RKRGUI::PrepareML() {
  FillML(0);
  if(rkr->comemouse==0)
  {
   MIDILearn->show();
   put_icon(MIDILearn);
   return;
  } 
  
  if(rkr->comemouse) 
  {
   if(rkr->autoassign==0)
     {
         MIDILearn->show();
         put_icon(MIDILearn);
         return;
     } 
  }
}

inline void RKRGUI::addpreset(Fl_Widget *w, int num) {
  if(num==12) return;
  const char *name = fl_input("Preset Name?","");
  if(name==NULL) return;
  char NewName[64];
  memset(NewName,0,sizeof(NewName));
  sprintf(NewName,"*%s",name);
  add_name(w,NewName);
  rkr->SaveIntPreset(num,NewName);
}

void RKRGUI::add_name(Fl_Widget *w, char *name) {
  Fl_Choice *s = (Fl_Choice * ) w;
  s->add(name);
  
  
  Fl_Menu_*n = (Fl_Menu_*)s->menu();
  Fl_Menu_Item *m = (Fl_Menu_Item*) n; 
  Fl_Menu_Item *p;  
  int k=10;
  
  for(int i=0; i<m->size(); i++)
      {
       p=m->next(i);
       if(i==0)k=p->labelsize();
       p->labelsize(k);
       }
}

Fl_Widget * RKRGUI::FindWidget(int num) {
  for (int t=0; t<Principal->children();t++)
    {
      Fl_Widget *w = Principal->child(t);
      long long ud = (long long) w->user_data();
       
      if (ud==1)
      {
            
       Fl_Group *g = (Fl_Group *)w;     
        
       for(int i=0;i<g->children();i++)
         {
  
           Fl_Widget *c = g->child(i);
           long long uh = (long long) c->user_data();
           if(uh==(num+12000)) return c;
          }
       }          
     }
     
  return NULL;
}

void RKRGUI::ReadIntPresets() {
  FILE *fn;
  char tempfile[256];
  char buf[256];
  char *name;
  char *sbuf;
  int num=0;
  memset(tempfile,0,sizeof(tempfile));
  
  sprintf (tempfile, "%s%s", getenv ("HOME"), "/.rkrintpreset");
  
  if (( fn = fopen (tempfile, "r")) != NULL)
  {
     while (fgets (buf, sizeof buf, fn) != NULL)
      
       {
          
         sbuf = buf;
         sscanf(buf,"%d",&num);
         name = strsep(&sbuf,",");
         name = strsep(&sbuf,",");
         add_name(FindWidget(num), name);
       }
   fclose(fn);
  }
}

inline void RKRGUI::delpreset(Fl_Widget *w, int num) {
  if(num==12) return;
  int ok = 0;
  char Rname[128];
  Fl_Choice *s = (Fl_Choice * ) w;
  if(strncmp(s->text(),"*",1)!=0) 
  {
   fl_message("Internal Presets can not be deleted ");
   return;
  } 
  
  ok=fl_choice("Delete \"%s\"?","No","Yes",NULL, s->text());
  if (!ok) return;
  memset(Rname,0,sizeof(Rname));
  sprintf(Rname,"%s",s->text());
  s->remove(s->value());
  s->value(0);
  s->redraw();
  rkr->DelIntPreset(num,Rname);
}

void RKRGUI::Prep_Reorden(int source, int dest) {
  int x = rkr->efx_order[source];
  int y = rkr->efx_order[dest];
  
  rkr->efx_order[source]=y;
  rkr->efx_order[dest]=x;
  
  reordena();
  
  if (Order->visible())Prepare_Order();
}

void RKRGUI::make_table_window() {
  scroll->begin();
  
    for (intptr_t y=0; y<128; y++)
     {
      char buf[20]; sprintf(buf,"%d",(int)y);
    
      Fl_Box* b = new Fl_Box(6,y*25+22,60,25);
      b->box(FL_DOWN_BOX);
      b->copy_label(buf);
      b->labelcolor(FL_WHITE);
      b->user_data((void *) 8000);
      
      Fl_Choice* cb = new Fl_Choice(120,y*25+25,60,20);
      cb->copy_label("Bank");
      cb->labelcolor(FL_WHITE);
      cb->add("1");
      cb->add("2");
      cb->add("3");
      cb->add("U");
      cb->user_data((void *) (1000+y));
      cb->callback((Fl_Callback *)bank_click); 
      scroll->add(cb);
      
      Fl_Choice* cp = new Fl_Choice(260,y*25+25,220,20);
      cp->copy_label("Preset");
      cp->labelcolor(FL_WHITE);
      cp->user_data((void *) (2000+y));
      cp->callback((Fl_Callback *)p_click); 
      scroll->add(cp);
    
    
    }
    scroll->end();
    
  Put_MidiTable();
   
  
   scroll->position(0,-339);
}

void RKRGUI::bank_click(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->parent()->user_data()))->bank_click_i(o,v);
}

inline void RKRGUI::bank_click_i(Fl_Choice* o, void*) {
  long long kk = (long long) o->user_data();
  int num = (int) kk;
  
  rkr->M_table[num-1000].bank=(int) o->value();
  fill_mptable(num+1000,rkr->M_table[num-1000].bank);
}

void RKRGUI::p_click(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->parent()->user_data()))->p_click_i(o,v);
}

inline void RKRGUI::p_click_i(Fl_Choice* o, void*) {
  long long kk = (long long) o->user_data();
  int num = (int) kk;
  
  rkr->M_table[num-2000].preset=o->value();
}

void RKRGUI::fill_mptable(int num,int value) {
  for (int t=0; t<scroll->children();t++)
    {
      Fl_Widget *w = scroll->child(t);
      long long temp = (long long) w->user_data();
      if ((int)temp == num)
      {
       Fl_Choice *p = (Fl_Choice * ) w; 
       p->clear(); 
       for(int i=1; i<=60;i++)
       p->add(rkr->B_Names[value][i].Preset_Name);
       break;
      }
    }
}

void RKRGUI::mtfillvalue(int num,int value) {
  for (int t=0; t<scroll->children();t++)
    {
      Fl_Widget *w = scroll->child(t);
      long long temp = (long long) w->user_data();
      if ((int)temp == num)
      {
       Fl_Choice *p = (Fl_Choice * ) w; 
       p->value(value); 
       break;
      }
    }
}

void RKRGUI::Put_MidiTable() {
  for(int i=0;i<128;i++)
  {
   mtfillvalue(i+1000, rkr->M_table[i].bank);
   fill_mptable(i+2000, rkr->M_table[i].bank);
   mtfillvalue(i+2000, rkr->M_table[i].preset);
  }
}

void RKRGUI::RandomPreset() {
  int i,j,l;
  int SelEff[10];
  int numEff = (int) (RND*6) + 1;
  long long k;
  
  
  S_new->do_callback();
  
  SelEff[0]=(int)(RND*rkr->NumEffects);
  
  for(i=1;i<10;i++) 
  {
   l=0;
   while (l==0)
   {
     SelEff[i]=(int)(RND* rkr->NumEffects);
     for(j=0;j<i;j++)
      {
        if(SelEff[j]==SelEff[i])
         {
           l=0; 
           break;
         }    
        else
        l=1;
      }
   }
  
  
  }
  
  
  
  
  
   for(i=0; i<10; i++)
  {
    rkr->efx_order[i]=SelEff[i];
    
  }
  
  
    
  
  
  for(i=0;i<10;i++)
   {
  
     switch(rkr->efx_order[i])
      {
        
  
       case 0: //EQ1
       if (i<numEff)rkr->EQ1_Bypass=1; else rkr->EQ1_Bypass=0;
       EQ->eq_activar->value(rkr->EQ1_Bypass);
       break;
  
       case 1://Compressor
       if (i<numEff)rkr->Compressor_Bypass=1; else rkr->Compressor_Bypass=0;
       COMPRESS->compress_activar->value(rkr->Compressor_Bypass);
       break;
  
       case 2://Distorsion
       if (i<numEff) rkr->Distorsion_Bypass=1; else rkr->Distorsion_Bypass=0; 
       DIST->dist_activar->value(rkr->Distorsion_Bypass);
       break;
  
       case 3://Overdrive
       if (i<numEff)rkr->Overdrive_Bypass=1; else rkr->Overdrive_Bypass=0;
       OVRD->ovrd_activar->value(rkr->Overdrive_Bypass);
       break; 
  
       case 4://Echo
       if (i<numEff)rkr->Echo_Bypass=1; else rkr->Echo_Bypass=0;
       ECHO->echo_activar->value(rkr->Echo_Bypass);
       break;
       
       case 5://Chorus
       if (i<numEff)rkr->Chorus_Bypass=1; else rkr->Chorus_Bypass=0;
       CHORUS->chorus_activar->value(rkr->Chorus_Bypass);
       break;
       
       case 6://Phaser
       if (i<numEff)rkr->Phaser_Bypass=1; else rkr->Phaser_Bypass=0;
       PHASER->phaser_activar->value(rkr->Phaser_Bypass);
       break;  
  
       case 7://Flanger
       if (i<numEff)rkr->Flanger_Bypass=1; else rkr->Flanger_Bypass=0;
       FLANGER->flanger_activar->value(rkr->Flanger_Bypass);
       break;
   
       case 8://Reverb
       if (i<numEff)rkr->Reverb_Bypass=1; else rkr->Reverb_Bypass=0;
       REVERB->reverb_activar->value(rkr->Reverb_Bypass);
       break;  
  
       case 9://EQ2
       if (i<numEff)rkr->EQ2_Bypass=1; else rkr->EQ2_Bypass=0; 
       PEQ->eqp_activar->value(rkr->EQ2_Bypass);
       break; 
       
       case 10://WahWah
       if (i<numEff)rkr->WhaWha_Bypass=1; else rkr->WhaWha_Bypass=0;
       WHAWHA->WhaWha_activar->value(rkr->WhaWha_Bypass);
       break;
  
       case 11://AlienWah
       if (i<numEff)rkr->Alienwah_Bypass=1; else rkr->Alienwah_Bypass=0;
       ALIENWAH->Alienwah_activar->value(rkr->Alienwah_Bypass);
       break;
       
       case 12://Cabinet
       if (i<numEff)rkr->Cabinet_Bypass=1; else rkr->Cabinet_Bypass=0;
       CABINET->Cabinet_activar->value(rkr->Cabinet_Bypass);
       break;
   
       case 13://Pan
       if (i<numEff)rkr->Pan_Bypass=1; else rkr->Pan_Bypass=0;
       PAN->pan_activar->value(rkr->Pan_Bypass);
       break;
       
       case 14://Har
       if (i<numEff)rkr->Harmonizer_Bypass=1; else rkr->Harmonizer_Bypass=0;
       HAR->har_activar->value(rkr->Harmonizer_Bypass);
       break;
  
       case 15://MsicalDelay
       if (i<numEff)rkr->MusDelay_Bypass=1; else rkr->MusDelay_Bypass=0;
       MUSDELAY->musdelay_activar->value(rkr->MusDelay_Bypass);
       break; 
  
       case 16://NoiseGate
       if (i<numEff)rkr->Gate_Bypass=1; else rkr->Gate_Bypass=0;
       GATE->gate_activar->value(rkr->Gate_Bypass);
       break; 
  
       case 17://NewDist
       if (i<numEff)rkr->NewDist_Bypass=1; else rkr->NewDist_Bypass=0;
       NEWDIST->newdist_activar->value(rkr->NewDist_Bypass);
       break;
       
       case 18://APhaser
       if (i<numEff)rkr->APhaser_Bypass=1; else rkr->APhaser_Bypass=0;
       APHASER->aphaser_activar->value(rkr->APhaser_Bypass);
       break;
  
       case 19://Valve
       if (i<numEff)rkr->Valve_Bypass=1; else rkr->Valve_Bypass=0;
       VALVE->valve_activar->value(rkr->Valve_Bypass);
       break;
  
       case 20://Dual_Flange
       if (i<numEff)rkr->DFlange_Bypass=1; else rkr->DFlange_Bypass=0;
       DFLANGE->dflange_activar->value(rkr->DFlange_Bypass);
       break;
  
       case 21:// Ring
       if (i<numEff)rkr->Ring_Bypass=1; else rkr->Ring_Bypass=0;
       RING->ring_activar->value(rkr->Ring_Bypass);
       break;  
  
       case 22:// Exciter
       if (i<numEff)rkr->Exciter_Bypass=1; else rkr->Exciter_Bypass=0;
       EXCITER->exciter_activar->value(rkr->Exciter_Bypass);
       break; 
  
       case 23://MBDist
       if (i<numEff)rkr->MBDist_Bypass=1; else rkr->MBDist_Bypass=0;
       MBDIST->mbdist_activar->value(rkr->MBDist_Bypass);
       break;
  
       case 24://Arpie
       if (i<numEff)rkr->Arpie_Bypass=1;else rkr->Arpie_Bypass=0;
       ARPIE->arpie_activar->value(rkr->Arpie_Bypass);
       break;
  
       case 25://Expander
       if (i<numEff)rkr->Expander_Bypass=1; else rkr->Expander_Bypass=0;
       EXPANDER->expander_activar->value(rkr->Expander_Bypass);
       break;
  
       case 26://Shuffle
       if (i<numEff)rkr->Shuffle_Bypass=1; else rkr->Shuffle_Bypass=0;
       SHUFFLE->shuffle_activar->value(rkr->Shuffle_Bypass);
       break;
  
       case 27://Synthfilter
       if (i<numEff)rkr->Synthfilter_Bypass=1; else rkr->Synthfilter_Bypass=0;
       SYNTHFILTER->synthfilter_activar->value(rkr->Synthfilter_Bypass);
       break; 
  
       case 28://VaryBand
       if (i<numEff)rkr->MBVvol_Bypass=1; else rkr->MBVvol_Bypass=0;
       MBVVOL->mbvvol_activar->value(rkr->MBVvol_Bypass);
       break;
  
       case 29://Convolotron
       if (i<numEff)rkr->Convol_Bypass=1; else rkr->Convol_Bypass=0;
       CONVOLOTRON->convo_activar->value(rkr->Convol_Bypass);
       break; 
  
       case 30://Looper
       if (i<numEff)rkr->Looper_Bypass=1; else rkr->Looper_Bypass=0;
       LOOPER->looper_activar->value(rkr->Looper_Bypass);
       update_looper();
       break;
  
       case 31://RyanWah
       if (i<numEff)rkr->RyanWah_Bypass=1; else rkr->RyanWah_Bypass=0;
       RYANWAH->ryanwah_activar->value(rkr->RyanWah_Bypass);
       break;  
       
       case 32:// RBEcho
       if (i<numEff)rkr->RBEcho_Bypass=1; else rkr->RBEcho_Bypass=0;
       RBECHO->rbecho_activar->value(rkr->RBEcho_Bypass);
       break;
       
       case 33:// CoilCrafter
       if (i<numEff)rkr->CoilCrafter_Bypass=1; else rkr->CoilCrafter_Bypass=0;
       COILCRAFTER->coil_activar->value(rkr->CoilCrafter_Bypass);
       break;
  
       case 34://ShelfBoost
       if (i<numEff)rkr->ShelfBoost_Bypass=1; else rkr->ShelfBoost_Bypass=0;
       SHELFBOOST->shelf_activar->value(rkr->ShelfBoost_Bypass);
       break;
       
       case 35://Vocoder
       if (i<numEff)rkr->Vocoder_Bypass=1; else rkr->Vocoder_Bypass=0;
       VOCODER->vo_activar->value(rkr->Vocoder_Bypass);
       break;
  
       case 36://Sustainer
       if (i<numEff)rkr->Sustainer_Bypass=1; else rkr->Sustainer_Bypass=0;
       SUSTAINER->sus_activar->value(rkr->Sustainer_Bypass);
       break;
       
      case 37://Sequence
      if (i<numEff)rkr->Sequence_Bypass=1; else rkr->Sequence_Bypass=0;
      SEQUENCE->seq_activar->value(rkr->Sequence_Bypass);
      break;
  
      case 38://Shifter
      if (i<numEff)rkr->Shifter_Bypass=1; else rkr->Shifter_Bypass=0;
      SHIFTER->shifter_activar->value(rkr->Shifter_Bypass);
      break;
  
      case 39://StompBox
      if (i<numEff)rkr->StompBox_Bypass=1; else rkr->StompBox_Bypass=0;
      STOMPBOX->stomp_activar->value(rkr->StompBox_Bypass);
      break;
  
      case 40://Reverbtron
      if (i<numEff)rkr->Reverbtron_Bypass=1; else rkr->Reverbtron_Bypass=0;
      REVERBTRON->revtron_activar->value(rkr->Reverbtron_Bypass);
      break;
  
      case 41://Echotron
      if (i<numEff)rkr->Echotron_Bypass=1; else rkr->Echotron_Bypass=0;
      ECHOTRON->echotron_activar->value(rkr->Echotron_Bypass);
      break;
  
      case 42://StereoHarm
      if (i<numEff)rkr->StereoHarm_Bypass=1; else rkr->StereoHarm_Bypass=0;
      SHAR->shar_activar->value(rkr->StereoHarm_Bypass);
      break; 
  
      case 43://CompBand
      if (i<numEff)rkr->CompBand_Bypass=1; else rkr->CompBand_Bypass=0;
      cband_activar->value(rkr->CompBand_Bypass);
      break;
  
      case 44://Opticaltrem
      if (i<numEff)rkr->Opticaltrem_Bypass=1; else rkr->Opticaltrem_Bypass=0;
      otrem_activar->value(rkr->Opticaltrem_Bypass);
      break;
  
      case 45://Vibe
      if (i<numEff)rkr->Vibe_Bypass=1; else rkr->Vibe_Bypass=0;
      vibe_activar->value(rkr->Vibe_Bypass);
      break;
    }
  
  
  
  
   Fl_Widget *w = FindWidget(SelEff[i]);
   Fl_Choice *s = (Fl_Choice *) w;
   k = (long long) s->user_data();
   int Esel = (int)(RND * s->size());
   s->value(Esel);
   s->do_callback(w,k);
  }
  
  FillML(0);
  Prepare_Order();
  Put_Loaded();
  
  ActivarGeneral->value(1);
  ActivarGeneral->do_callback();
}

void RKRGUI::drag_effect() {
  if((drag!=1000) && (Fl::event_button1()==0))
  {
  Fl_Widget *w = Fl::belowmouse();
  if (w !=NULL)
  {
  long long k = (long long) w->user_data();
  if((k<770)||( k>779)) return;
  if(drag != (int)k-770) Prep_Reorden(drag,(int)k-770);
  }
  drag=1000;
  }
}

int RKRGUI::AddBankName(const char *name) {
  struct list_element *elem;
  
          elem = (struct list_element *)calloc(1,sizeof(struct list_element));
          if (elem == NULL) {
                  return 0;
          }
          elem->name = (char *)calloc(1,256);
          if (elem->name == NULL) {
                  free(elem);
                  return 0;
          }
          strncpy(elem->name, name, 255);
          if (mBankNameList == NULL) {
                  mBankNameList = elem;
                  insque(elem, NULL);
          } else {
                  insque(elem, mBankNameListTail);
          }
          mBankNameListTail = elem;
          return 1;
}

void RKRGUI::ClearBankNames() {
  struct list_element *elem;
          while (mBankNameList != NULL) {
                  elem = mBankNameList;
                  mBankNameList = elem->forward;
                  free(elem->name);
                  remque(elem);
                  free(elem);
          }
}
