// generated by Fast Light User Interface Designer (fluid) version 1.0305

#ifndef reverb_gui_h
#define reverb_gui_h
#include <FL/Fl.H>
#include "RKR_Light_Button.h"
#include "RKR_Choice.h"
#include <FL/Fl_Group.H>
#include "sliderW.h"
#include "../process.h"
#include "rakarrack.h"

class ReverbGui : public Fl_Group {
public:
  ReverbGui(int X, int Y, int W, int H, const char *L = 0);
  RKR_Light_Button *reverb_activar;
private:
  inline void cb_reverb_activar_i(RKR_Light_Button*, void*);
  static void cb_reverb_activar(RKR_Light_Button*, void*);
public:
  RKR_Choice *reverb_preset;
private:
  inline void cb_reverb_preset_i(RKR_Choice*, void*);
  static void cb_reverb_preset(RKR_Choice*, void*);
  static Fl_Menu_Item menu_reverb_preset[];
public:
  SliderW *reverb_WD;
private:
  inline void cb_reverb_WD_i(SliderW*, void*);
  static void cb_reverb_WD(SliderW*, void*);
public:
  SliderW *reverb_pan;
private:
  inline void cb_reverb_pan_i(SliderW*, void*);
  static void cb_reverb_pan(SliderW*, void*);
public:
  SliderW *reverb_time;
private:
  inline void cb_reverb_time_i(SliderW*, void*);
  static void cb_reverb_time(SliderW*, void*);
public:
  SliderW *reverb_ldel;
private:
  inline void cb_reverb_ldel_i(SliderW*, void*);
  static void cb_reverb_ldel(SliderW*, void*);
public:
  SliderW *reverb_ldelft;
private:
  inline void cb_reverb_ldelft_i(SliderW*, void*);
  static void cb_reverb_ldelft(SliderW*, void*);
public:
  RKR_Choice *reverb_type;
private:
  inline void cb_reverb_type_i(RKR_Choice*, void*);
  static void cb_reverb_type(RKR_Choice*, void*);
  static Fl_Menu_Item menu_reverb_type[];
  inline void cb_Random_i(Fl_Menu_*, void*);
  static void cb_Random(Fl_Menu_*, void*);
public:
  SliderW *reverb_RS;
private:
  inline void cb_reverb_RS_i(SliderW*, void*);
  static void cb_reverb_RS(SliderW*, void*);
public:
  SliderW *reverb_LPF;
private:
  inline void cb_reverb_LPF_i(SliderW*, void*);
  static void cb_reverb_LPF(SliderW*, void*);
public:
  SliderW *reverb_HPF;
private:
  inline void cb_reverb_HPF_i(SliderW*, void*);
  static void cb_reverb_HPF(SliderW*, void*);
public:
  SliderW *reverb_damp;
private:
  inline void cb_reverb_damp_i(SliderW*, void*);
  static void cb_reverb_damp(SliderW*, void*);
};
#endif
