// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "ovrd_gui.h"

void OvrdGui::cb_ovrd_activar_i(Fl_Light_Button* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(116);
 o->value(rkr->Overdrive_Bypass);
 return;
}
rkr->Overdrive_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Overdrive->cleanup();
rgui->findpos(3,(int)o->value(),o);
}
void OvrdGui::cb_ovrd_activar(Fl_Light_Button* o, void* v) {
  ((OvrdGui*)(o->parent()))->cb_ovrd_activar_i(o,v);
}

void OvrdGui::cb_ovrd_preset_i(Fl_Choice* o, void* v) {
  long long ud= (long long) v;
if((ud==0)||(ud==12003))rkr->efx_Overdrive->setpreset(1,(int) o->value());
ovrd_WD->value(Dry_Wet(rkr->efx_Overdrive->getpar(0)));
ovrd_pan->value(rkr->efx_Overdrive->getpar(1)-64);
ovrd_LRc->value(rkr->efx_Overdrive->getpar(2));
ovrd_drive->value(rkr->efx_Overdrive->getpar(3));
ovrd_level->value(rkr->efx_Overdrive->getpar(4));
ovrd_tipo->value(rkr->efx_Overdrive->getpar(5));
ovrd_neg->value(rkr->efx_Overdrive->getpar(6));
ovrd_lpf->value(rkr->efx_Overdrive->getpar(7));
ovrd_hpf->value(rkr->efx_Overdrive->getpar(8));
ovrd_st->value(rkr->efx_Overdrive->getpar(9));
ovrd_pf->value(rkr->efx_Overdrive->getpar(10));
}
void OvrdGui::cb_ovrd_preset(Fl_Choice* o, void* v) {
  ((OvrdGui*)(o->parent()))->cb_ovrd_preset_i(o,v);
}

Fl_Menu_Item OvrdGui::menu_ovrd_preset[] = {
 {"Overdrive 1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {"Overdrive 2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void OvrdGui::cb_ovrd_WD_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(29);
 return;
} 
rkr->efx_Overdrive->changepar(0,Dry_Wet((int)(o->value())));
}
void OvrdGui::cb_ovrd_WD(SliderW* o, void* v) {
  ((OvrdGui*)(o->parent()))->cb_ovrd_WD_i(o,v);
}

void OvrdGui::cb_ovrd_LRc_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(94);
 return;
} 
rkr->efx_Overdrive->changepar(2,(int)(o->value()));
}
void OvrdGui::cb_ovrd_LRc(SliderW* o, void* v) {
  ((OvrdGui*)(o->parent()))->cb_ovrd_LRc_i(o,v);
}

void OvrdGui::cb_ovrd_drive_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(68);
 return;
} 
rkr->efx_Overdrive->changepar(3,(int)o->value());
}
void OvrdGui::cb_ovrd_drive(SliderW* o, void* v) {
  ((OvrdGui*)(o->parent()))->cb_ovrd_drive_i(o,v);
}

void OvrdGui::cb_ovrd_level_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(70);
 return;
} 
rkr->efx_Overdrive->changepar(4,(int)o->value());
}
void OvrdGui::cb_ovrd_level(SliderW* o, void* v) {
  ((OvrdGui*)(o->parent()))->cb_ovrd_level_i(o,v);
}

void OvrdGui::cb_ovrd_tipo_i(Fl_Choice* o, void*) {
  rkr->efx_Overdrive->changepar(5,(int)o->value());
}
void OvrdGui::cb_ovrd_tipo(Fl_Choice* o, void* v) {
  ((OvrdGui*)(o->parent()))->cb_ovrd_tipo_i(o,v);
}

void OvrdGui::cb_ovrd_neg_i(Fl_Check_Button* o, void*) {
  rkr->efx_Overdrive->changepar(6,(int)o->value());
}
void OvrdGui::cb_ovrd_neg(Fl_Check_Button* o, void* v) {
  ((OvrdGui*)(o->parent()))->cb_ovrd_neg_i(o,v);
}

void OvrdGui::cb_ovrd_st_i(Fl_Check_Button* o, void*) {
  rkr->efx_Overdrive->changepar(9,(int)o->value());
}
void OvrdGui::cb_ovrd_st(Fl_Check_Button* o, void* v) {
  ((OvrdGui*)(o->parent()))->cb_ovrd_st_i(o,v);
}

void OvrdGui::cb_ovrd_pan_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(47);
 return;
} 
rkr->efx_Overdrive->changepar(1,(int)(o->value()+64));
}
void OvrdGui::cb_ovrd_pan(SliderW* o, void* v) {
  ((OvrdGui*)(o->parent()))->cb_ovrd_pan_i(o,v);
}

void OvrdGui::cb_ovrd_pf_i(Fl_Check_Button* o, void*) {
  rkr->efx_Overdrive->changepar(10,(int)o->value());
}
void OvrdGui::cb_ovrd_pf(Fl_Check_Button* o, void* v) {
  ((OvrdGui*)(o->parent()))->cb_ovrd_pf_i(o,v);
}

void OvrdGui::cb_ovrd_lpf_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(85);
 return;
} 
rkr->efx_Overdrive->changepar(7,(int)o->value());
}
void OvrdGui::cb_ovrd_lpf(SliderW* o, void* v) {
  ((OvrdGui*)(o->parent()))->cb_ovrd_lpf_i(o,v);
}

void OvrdGui::cb_ovrd_hpf_i(SliderW* o, void*) {
  if(Fl::event_button()==3)
{
 rgui->getMIDIControl(88);
 return;
} 
rkr->efx_Overdrive->changepar(8,(int)o->value());
}
void OvrdGui::cb_ovrd_hpf(SliderW* o, void* v) {
  ((OvrdGui*)(o->parent()))->cb_ovrd_hpf_i(o,v);
}
OvrdGui::OvrdGui(int X, int Y, int W, int H, const char *L)
  : Fl_Group(0, 0, W, H, L) {
this->box(FL_UP_BOX);
this->color(FL_FOREGROUND_COLOR);
this->selection_color(FL_FOREGROUND_COLOR);
this->user_data((void*)(1));
this->align(Fl_Align(96|FL_ALIGN_INSIDE));
{ ovrd_activar = new Fl_Light_Button(5, 4, 34, 18, "On");
  ovrd_activar->shortcut(0x34);
  ovrd_activar->color((Fl_Color)62);
  ovrd_activar->selection_color((Fl_Color)1);
  ovrd_activar->labelsize(10);
  ovrd_activar->callback((Fl_Callback*)cb_ovrd_activar, (void*)(2));
  ovrd_activar->align(Fl_Align(68|FL_ALIGN_INSIDE));
  ovrd_activar->when(FL_WHEN_CHANGED);
} // Fl_Light_Button* ovrd_activar
{ ovrd_preset = new Fl_Choice(77, 4, 76, 18, "Preset");
  ovrd_preset->down_box(FL_BORDER_BOX);
  ovrd_preset->selection_color(FL_FOREGROUND_COLOR);
  ovrd_preset->labelsize(10);
  ovrd_preset->labelcolor(FL_BACKGROUND2_COLOR);
  ovrd_preset->textsize(10);
  ovrd_preset->textcolor(FL_BACKGROUND2_COLOR);
  ovrd_preset->callback((Fl_Callback*)cb_ovrd_preset, (void*)(12003));
  ovrd_preset->when(FL_WHEN_RELEASE_ALWAYS);
  ovrd_preset->menu(menu_ovrd_preset);
} // Fl_Choice* ovrd_preset
{ ovrd_WD = new SliderW(56, 35, 100, 10, "Dry/Wet");
  ovrd_WD->type(5);
  ovrd_WD->box(FL_FLAT_BOX);
  ovrd_WD->color((Fl_Color)178);
  ovrd_WD->selection_color((Fl_Color)62);
  ovrd_WD->labeltype(FL_NORMAL_LABEL);
  ovrd_WD->labelfont(0);
  ovrd_WD->labelsize(10);
  ovrd_WD->labelcolor(FL_BACKGROUND2_COLOR);
  ovrd_WD->maximum(127);
  ovrd_WD->step(1);
  ovrd_WD->textcolor(FL_BACKGROUND2_COLOR);
  ovrd_WD->callback((Fl_Callback*)cb_ovrd_WD);
  ovrd_WD->align(Fl_Align(FL_ALIGN_LEFT));
  ovrd_WD->when(FL_WHEN_CHANGED);
} // SliderW* ovrd_WD
{ ovrd_LRc = new SliderW(56, 48, 100, 10, "L/R Cross");
  ovrd_LRc->type(5);
  ovrd_LRc->box(FL_FLAT_BOX);
  ovrd_LRc->color((Fl_Color)178);
  ovrd_LRc->selection_color((Fl_Color)62);
  ovrd_LRc->labeltype(FL_NORMAL_LABEL);
  ovrd_LRc->labelfont(0);
  ovrd_LRc->labelsize(10);
  ovrd_LRc->labelcolor(FL_BACKGROUND2_COLOR);
  ovrd_LRc->maximum(127);
  ovrd_LRc->step(1);
  ovrd_LRc->textcolor(FL_BACKGROUND2_COLOR);
  ovrd_LRc->callback((Fl_Callback*)cb_ovrd_LRc);
  ovrd_LRc->align(Fl_Align(FL_ALIGN_LEFT));
  ovrd_LRc->when(FL_WHEN_CHANGED);
} // SliderW* ovrd_LRc
{ ovrd_drive = new SliderW(56, 61, 100, 10, "Drive");
  ovrd_drive->type(5);
  ovrd_drive->box(FL_FLAT_BOX);
  ovrd_drive->color((Fl_Color)178);
  ovrd_drive->selection_color((Fl_Color)62);
  ovrd_drive->labeltype(FL_NORMAL_LABEL);
  ovrd_drive->labelfont(0);
  ovrd_drive->labelsize(10);
  ovrd_drive->labelcolor(FL_BACKGROUND2_COLOR);
  ovrd_drive->maximum(127);
  ovrd_drive->step(1);
  ovrd_drive->textcolor(FL_BACKGROUND2_COLOR);
  ovrd_drive->callback((Fl_Callback*)cb_ovrd_drive);
  ovrd_drive->align(Fl_Align(FL_ALIGN_LEFT));
  ovrd_drive->when(FL_WHEN_CHANGED);
} // SliderW* ovrd_drive
{ ovrd_level = new SliderW(56, 75, 100, 10, "Level");
  ovrd_level->type(5);
  ovrd_level->box(FL_FLAT_BOX);
  ovrd_level->color((Fl_Color)178);
  ovrd_level->selection_color((Fl_Color)62);
  ovrd_level->labeltype(FL_NORMAL_LABEL);
  ovrd_level->labelfont(0);
  ovrd_level->labelsize(10);
  ovrd_level->labelcolor(FL_BACKGROUND2_COLOR);
  ovrd_level->maximum(127);
  ovrd_level->step(1);
  ovrd_level->textcolor(FL_BACKGROUND2_COLOR);
  ovrd_level->callback((Fl_Callback*)cb_ovrd_level);
  ovrd_level->align(Fl_Align(FL_ALIGN_LEFT));
  ovrd_level->when(FL_WHEN_CHANGED);
} // SliderW* ovrd_level
{ Fl_Choice* o = ovrd_tipo = new Fl_Choice(33, 91, 72, 16, "Type");
  ovrd_tipo->down_box(FL_BORDER_BOX);
  ovrd_tipo->selection_color(FL_FOREGROUND_COLOR);
  ovrd_tipo->labelsize(10);
  ovrd_tipo->labelcolor(FL_BACKGROUND2_COLOR);
  ovrd_tipo->textsize(10);
  ovrd_tipo->textcolor(FL_BACKGROUND2_COLOR);
  ovrd_tipo->callback((Fl_Callback*)cb_ovrd_tipo);
  o->menu(m_dist_menu->get_distortion_type());
} // Fl_Choice* ovrd_tipo
{ ovrd_neg = new Fl_Check_Button(109, 92, 42, 15, "Neg.");
  ovrd_neg->down_box(FL_BORDER_BOX);
  ovrd_neg->labelsize(10);
  ovrd_neg->labelcolor(FL_BACKGROUND2_COLOR);
  ovrd_neg->callback((Fl_Callback*)cb_ovrd_neg, (void*)(2));
} // Fl_Check_Button* ovrd_neg
{ ovrd_st = new Fl_Check_Button(41, 110, 54, 15, "Stereo");
  ovrd_st->down_box(FL_BORDER_BOX);
  ovrd_st->labelsize(10);
  ovrd_st->labelcolor(FL_BACKGROUND2_COLOR);
  ovrd_st->callback((Fl_Callback*)cb_ovrd_st, (void*)(2));
} // Fl_Check_Button* ovrd_st
{ ovrd_pan = new SliderW(56, 125, 100, 10, "Pan");
  ovrd_pan->type(5);
  ovrd_pan->box(FL_FLAT_BOX);
  ovrd_pan->color((Fl_Color)178);
  ovrd_pan->selection_color((Fl_Color)62);
  ovrd_pan->labeltype(FL_NORMAL_LABEL);
  ovrd_pan->labelfont(0);
  ovrd_pan->labelsize(10);
  ovrd_pan->labelcolor(FL_BACKGROUND2_COLOR);
  ovrd_pan->minimum(-64);
  ovrd_pan->maximum(63);
  ovrd_pan->step(1);
  ovrd_pan->textcolor(FL_BACKGROUND2_COLOR);
  ovrd_pan->callback((Fl_Callback*)cb_ovrd_pan);
  ovrd_pan->align(Fl_Align(FL_ALIGN_LEFT));
  ovrd_pan->when(FL_WHEN_CHANGED);
} // SliderW* ovrd_pan
{ ovrd_pf = new Fl_Check_Button(41, 138, 68, 15, "Pre Filter");
  ovrd_pf->down_box(FL_BORDER_BOX);
  ovrd_pf->labelsize(10);
  ovrd_pf->labelcolor(FL_BACKGROUND2_COLOR);
  ovrd_pf->callback((Fl_Callback*)cb_ovrd_pf, (void*)(2));
} // Fl_Check_Button* ovrd_pf
{ ovrd_lpf = new SliderW(56, 157, 100, 10, "LPF");
  ovrd_lpf->type(5);
  ovrd_lpf->box(FL_FLAT_BOX);
  ovrd_lpf->color((Fl_Color)178);
  ovrd_lpf->selection_color((Fl_Color)62);
  ovrd_lpf->labeltype(FL_NORMAL_LABEL);
  ovrd_lpf->labelfont(0);
  ovrd_lpf->labelsize(10);
  ovrd_lpf->labelcolor(FL_BACKGROUND2_COLOR);
  ovrd_lpf->minimum(20);
  ovrd_lpf->maximum(26000);
  ovrd_lpf->step(1);
  ovrd_lpf->value(20000);
  ovrd_lpf->textcolor(FL_BACKGROUND2_COLOR);
  ovrd_lpf->callback((Fl_Callback*)cb_ovrd_lpf);
  ovrd_lpf->align(Fl_Align(FL_ALIGN_LEFT));
  ovrd_lpf->when(FL_WHEN_CHANGED);
} // SliderW* ovrd_lpf
{ ovrd_hpf = new SliderW(56, 169, 100, 10, "HPF");
  ovrd_hpf->type(5);
  ovrd_hpf->box(FL_FLAT_BOX);
  ovrd_hpf->color((Fl_Color)178);
  ovrd_hpf->selection_color((Fl_Color)62);
  ovrd_hpf->labeltype(FL_NORMAL_LABEL);
  ovrd_hpf->labelfont(0);
  ovrd_hpf->labelsize(10);
  ovrd_hpf->labelcolor(FL_BACKGROUND2_COLOR);
  ovrd_hpf->minimum(20);
  ovrd_hpf->maximum(20000);
  ovrd_hpf->step(1);
  ovrd_hpf->value(20);
  ovrd_hpf->textcolor(FL_BACKGROUND2_COLOR);
  ovrd_hpf->callback((Fl_Callback*)cb_ovrd_hpf);
  ovrd_hpf->align(Fl_Align(FL_ALIGN_LEFT));
  ovrd_hpf->when(FL_WHEN_CHANGED);
} // SliderW* ovrd_hpf
position(X, Y);
end();
}
