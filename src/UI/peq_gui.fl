# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class PeqGui {
  user_data 1 open selected
  xywh {1514 80 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button eqp_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Bypass[EFX_PARAMETRIC]);
 return;
}
m_process->EFX_Bypass[EFX_PARAMETRIC]=(int)o->value();
if((int) o->value()==0)
m_process->Rack_Effects[EFX_PARAMETRIC]->cleanup();
m_parent->findpos(EFX_PARAMETRIC,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x30 color 62 selection_color 1 labelsize 10 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice eqp_preset {
    label Preset
    user_data 12009
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12009)) m_process->Rack_Effects[EFX_PARAMETRIC]->setpreset((int)o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_PARAMETRIC]; i++)
{
    parameter_refresh(i);
};}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label Plain
      xywh {22 22 36 21} labelsize 10
    }
    MenuItem {} {
      label Pop
      xywh {22 22 36 21} labelsize 10
    }
    MenuItem {} {
      label Jazz
      xywh {22 22 36 21} labelsize 10
    }
  }
  Fl_Value_Slider eqp_Gain {
    label Gain
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Parametric_Gain);
 return;
} 
m_process->Rack_Effects[EFX_PARAMETRIC]->changepar(Parametric_Gain,(int)(o->value()+64));}
    xywh {56 26 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eqp_LF {
    label {Low F.}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Parametric_Low_Freq);
 return;
} 
m_process->Rack_Effects[EFX_PARAMETRIC]->changepar(Parametric_Low_Freq,(int)o->value());}
    tooltip {Low Frequency} xywh {56 50 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 1000 step 1 value 200 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eqp_LFg {
    label {Low G.}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Parametric_Low_Gain);
 return;
} 
m_process->Rack_Effects[EFX_PARAMETRIC]->changepar(Parametric_Low_Gain,(int)(o->value()+64));}
    tooltip {Low Gain} xywh {56 63 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eqp_LQ {
    label {Low Q.}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Parametric_Low_Q);
 return;
} 
m_process->Rack_Effects[EFX_PARAMETRIC]->changepar(Parametric_Low_Q,(int)(o->value()+64));}
    tooltip {Low Width} xywh {56 76 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eqp_MF {
    label {Mid F.}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Parametric_Mid_Freq);
 return;
} 
m_process->Rack_Effects[EFX_PARAMETRIC]->changepar(Parametric_Mid_Freq,(int)o->value());}
    tooltip {Mid Frequency} xywh {56 98 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 800 maximum 8000 step 1 value 800 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eqp_MFg {
    label {Mid G.}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Parametric_Mid_Gain);
 return;
} 
m_process->Rack_Effects[EFX_PARAMETRIC]->changepar(Parametric_Mid_Gain,(int)(o->value()+64));}
    tooltip {Mid Gain} xywh {56 110 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eqp_MQ {
    label {Mid Q.}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Parametric_Mid_Q);
 return;
} 
m_process->Rack_Effects[EFX_PARAMETRIC]->changepar(Parametric_Mid_Q,(int)(o->value()+64));}
    tooltip {Mid Width} xywh {56 122 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eqp_HF {
    label {High F.}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Parametric_High_Freq);
 return;
} 
m_process->Rack_Effects[EFX_PARAMETRIC]->changepar(Parametric_High_Freq,(int)o->value());}
    tooltip {High Frequency} xywh {56 144 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 6000 maximum 26000 step 1 value 12000 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eqp_HFg {
    label {High G.}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Parametric_High_Gain);
 return;
} 
m_process->Rack_Effects[EFX_PARAMETRIC]->changepar(Parametric_High_Gain,(int)(o->value()+64));}
    tooltip {High Gain} xywh {56 156 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider eqp_HQ {
    label {High Q.}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Parametric_High_Q);
 return;
} 
m_process->Rack_Effects[EFX_PARAMETRIC]->changepar(Parametric_High_Q,(int)(o->value()+64));}
    tooltip {High Width} xywh {56 168 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Function {parameter_refresh(int index)} {return_type void
  } {
    code {switch(index)
    {
    case Parametric_Low_Freq:
        eqp_LF->value(m_process->Rack_Effects[EFX_PARAMETRIC]->getpar(Parametric_Low_Freq));
        break;
    case Parametric_Low_Gain:
        eqp_LFg->value(m_process->Rack_Effects[EFX_PARAMETRIC]->getpar(Parametric_Low_Gain)-64);
        break;
    case Parametric_Low_Q:
        eqp_LQ->value(m_process->Rack_Effects[EFX_PARAMETRIC]->getpar(Parametric_Low_Q)-64);
        break;
    case Parametric_Mid_Freq:
        eqp_MF->value(m_process->Rack_Effects[EFX_PARAMETRIC]->getpar(Parametric_Mid_Freq));
        break;
    case Parametric_Mid_Gain:
        eqp_MFg->value(m_process->Rack_Effects[EFX_PARAMETRIC]->getpar(Parametric_Mid_Gain)-64);
        break;
    case Parametric_Mid_Q:
        eqp_MQ->value(m_process->Rack_Effects[EFX_PARAMETRIC]->getpar(Parametric_Mid_Q)-64);
        break;
    case Parametric_High_Freq:
        eqp_HF->value(m_process->Rack_Effects[EFX_PARAMETRIC]->getpar(Parametric_High_Freq));
        break;
    case Parametric_High_Gain:
        eqp_HFg->value(m_process->Rack_Effects[EFX_PARAMETRIC]->getpar(Parametric_High_Gain)-64);
        break;
    case Parametric_High_Q:
        eqp_HQ->value(m_process->Rack_Effects[EFX_PARAMETRIC]->getpar(Parametric_High_Q)-64);
        break;
    case Parametric_Gain:
        eqp_Gain->value(m_process->Rack_Effects[EFX_PARAMETRIC]->getpar(Parametric_Gain)-64);
        break;
    }} {}
  }
}
