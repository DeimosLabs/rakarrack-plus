# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

widget_class GateGui {
  user_data 1 open
  xywh {1618 106 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"} visible position_relative
} {
  Fl_Light_Button gate_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Multi_On_Off);
 o->value(rkr->EFX_Bypass[EFX_NOISEGATE]);
 return;
}
rkr->EFX_Bypass[EFX_NOISEGATE]=(int)o->value();
rgui->findpos(EFX_NOISEGATE,(int)o->value(),o);} selected
    xywh {5 4 34 18} shortcut 0x32 color 62 selection_color 1 labelsize 10 align 84 when 1
    class RKR_Light_Button
  }
  Fl_Choice gate_preset {
    label Preset
    user_data 12016
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12016))rkr->Rack_Effects[EFX_NOISEGATE]->setpreset((int) o->value());
gate_ATime->value(rkr->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_Attack));
gate_RTime->value(rkr->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_Release));
gate_range->value(rkr->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_Range));
gate_threshold->value(rkr->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_Threshold));
gate_hold->value(rkr->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_Hold));
gate_HPF->value(rkr->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_HPF));
gate_LPF->value(rkr->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_LPF));}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label 0dB
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label {-10dB}
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label {-20dB}
      xywh {42 42 36 21} labelsize 10
    }
  }
  Fl_Value_Slider gate_ATime {
    label {A. Time}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Gate_Attack);
 return;
}
rkr->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_Attack,(int)o->value());}
    tooltip {Attack Time} xywh {56 39 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 250 step 1 value 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider gate_RTime {
    label {R. Time}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Gate_Release);
 return;
}
rkr->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_Release, (int) o->value());}
    tooltip {Release Time} xywh {56 61 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2 maximum 250 step 1 value 120 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider gate_range {
    label Range
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Gate_Range);
 return;
}
rkr->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_Range, (int) o->value());}
    xywh {56 83 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -90 maximum 0 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider gate_threshold {
    label Threshold
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Gate_Threshold);
 return;
}
rkr->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_Threshold, (int)o->value());}
    xywh {56 105 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -70 maximum 20 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider gate_hold {
    label Hold
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Gate_Hold);
 return;
}
rkr->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_Hold,(int)o->value());}
    xywh {56 127 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2 maximum 500 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider gate_LPF {
    label LPF
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Gate_LPF);
 return;
}
rkr->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_LPF, (int)o->value());}
    xywh {56 146 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 26000 step 1 value 20000 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider gate_HPF {
    label HPF
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Gate_HPF);
 return;
}
rkr->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_HPF, (int)o->value());}
    xywh {56 162 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 20000 step 1 value 20 textcolor 7
    class RKR_Slider
  }
}
