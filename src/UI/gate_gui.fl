# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_GUI_Effect.h"} {public global
}

widget_class GateGui {open selected
  xywh {1618 106 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  class RKR_Gui_Effect visible position_relative
} {
  Fl_Light_Button gate_activar {
    label On
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Multi_On_Off);
 o->value(m_process->EFX_Active[EFX_NOISEGATE]);
 return;
}
m_process->EFX_Active[EFX_NOISEGATE]=(int)o->value();
m_parent->findpos(EFX_NOISEGATE,(int)o->value(),o);}
    xywh {5 4 34 18} shortcut 0x32 color 62 selection_color 1 labelsize 10 align 84 when 1
    code0 {activate_effect = o;}
    class RKR_Light_Button
  }
  Fl_Choice gate_preset {
    label Preset
    user_data UD_PRESET_NOISEGATE
    callback {long long ud= (long long) v;
if((ud==0)||(ud==UD_PRESET_NOISEGATE))
    m_process->Rack_Effects[EFX_NOISEGATE]->setpreset((int) o->value());

for (int i = 0; i < m_process->EFX_Param_Size[EFX_NOISEGATE]; i++)
{
    parameter_refresh(i);
};}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    code0 {preset_choice = o;}
    class RKR_Choice
  } {
    MenuItem {} {
      label 0dB
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label {-10dB}
      xywh {42 42 36 21} labelsize 10
    }
    MenuItem {} {
      label {-20dB}
      xywh {42 42 36 21} labelsize 10
    }
  }
  Fl_Value_Slider gate_ATime {
    label {A. Time}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Gate_Attack);
 return;
}
m_process->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_Attack,(int)o->value());}
    tooltip {Attack Time} xywh {56 39 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 250 step 1 value 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider gate_RTime {
    label {R. Time}
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Gate_Release);
 return;
}
m_process->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_Release, (int) o->value());}
    tooltip {Release Time} xywh {56 61 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2 maximum 250 step 1 value 120 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider gate_range {
    label Range
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Gate_Range);
 return;
}
m_process->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_Range, (int) o->value());}
    xywh {56 83 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -90 maximum 0 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider gate_threshold {
    label Threshold
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Gate_Threshold);
 return;
}
m_process->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_Threshold, (int)o->value());}
    xywh {56 105 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -70 maximum 20 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider gate_hold {
    label Hold
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Gate_Hold);
 return;
}
m_process->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_Hold,(int)o->value());}
    xywh {56 127 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 2 maximum 500 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider gate_LPF {
    label LPF
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Gate_LPF);
 return;
}
m_process->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_LPF, (int)o->value());}
    xywh {56 146 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 26000 step 1 value 20000 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider gate_HPF {
    label HPF
    callback {if(Fl::event_button()==FL_RIGHT_MOUSE)
{
 m_parent->getMIDIControl(MC_Gate_HPF);
 return;
}
m_process->Rack_Effects[EFX_NOISEGATE]->changepar(Gate_HPF, (int)o->value());}
    xywh {56 162 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 20 maximum 20000 step 1 value 20 textcolor 7
    class RKR_Slider
  }
  Function {parameter_refresh(int index)} {return_type void
  } {
    code {switch (index)
    {
    case Gate_Threshold:
        gate_threshold->value(m_process->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_Threshold));
        break;
    case Gate_Range:
        gate_range->value(m_process->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_Range));
        break;
    case Gate_Attack:
        gate_ATime->value(m_process->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_Attack));
        break;
    case Gate_Release:
        gate_RTime->value(m_process->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_Release));
        break;
    case Gate_LPF:
        gate_LPF->value(m_process->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_LPF));
        break;
    case Gate_HPF:
        gate_HPF->value(m_process->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_HPF));
        break;
    case Gate_Hold:
        gate_hold->value(m_process->Rack_Effects[EFX_NOISEGATE]->getpar(Gate_Hold));
        break;
    }} {}
  }
}
