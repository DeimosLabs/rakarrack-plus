// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "midiconv_gui.h"

void MidiGui::cb_midi_activar_i(RKR_Light_Button* o, void*) {
  if ((int)o->value()==0)
  { 
    m_process->efx_MIDIConverter->panic();
    Mled->color(fl_darker(FL_RED));
    Mled->redraw();
  }


  m_process->MIDIConverter_Bypass=(int)o->value();
  Midi_out_Counter->do_callback();

  if(m_parent != NULL)
    m_parent->ChangeActives();

  MIDI_LABEL->redraw_label();
}
void MidiGui::cb_midi_activar(RKR_Light_Button* o, void* v) {
  ((MidiGui*)(o->parent()))->cb_midi_activar_i(o,v);
}

void MidiGui::cb_MIDIOctave_i(RKR_Choice* o, void*) {
  switch((int)o->value())
{
  case 0:
  m_process->efx_MIDIConverter->changepar(MIDIConv_Octave,-2);
  break;
  
  case 1:
  m_process->efx_MIDIConverter->changepar(MIDIConv_Octave,-1);
  break;

  case 2:
  m_process->efx_MIDIConverter->changepar(MIDIConv_Octave,0);
  break;

  case 3:
  m_process->efx_MIDIConverter->changepar(MIDIConv_Octave,1);

  break;

  case 4:
  m_process->efx_MIDIConverter->changepar(MIDIConv_Octave,2);
  break;

};
}
void MidiGui::cb_MIDIOctave(RKR_Choice* o, void* v) {
  ((MidiGui*)(o->parent()))->cb_MIDIOctave_i(o,v);
}

Fl_Menu_Item MidiGui::menu_MIDIOctave[] = {
 {"-2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"-1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"0", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {"2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 9, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MidiGui::cb_Midi_out_Counter_i(RKR_Counter* o, void*) {
  m_process->efx_MIDIConverter->changepar(MIDIConv_Midi, (int)o->value());
}
void MidiGui::cb_Midi_out_Counter(RKR_Counter* o, void* v) {
  ((MidiGui*)(o->parent()))->cb_Midi_out_Counter_i(o,v);
}

void MidiGui::cb_Use_FFT_i(RKR_Check_Button* o, void*) {
  m_process->efx_MIDIConverter->changepar(MIDIConv_FFT, (int)o->value());
}
void MidiGui::cb_Use_FFT(RKR_Check_Button* o, void* v) {
  ((MidiGui*)(o->parent()))->cb_Use_FFT_i(o,v);
}

void MidiGui::cb_Trig_Adj_i(RKR_Slider* o, void*) {
  m_process->efx_MIDIConverter->changepar(MIDIConv_Trigger,(int)o->value());
}
void MidiGui::cb_Trig_Adj(RKR_Slider* o, void* v) {
  ((MidiGui*)(o->parent()))->cb_Trig_Adj_i(o,v);
}

void MidiGui::cb_Vel_Adj_i(RKR_Slider* o, void*) {
  m_process->efx_MIDIConverter->changepar(MIDIConv_Velocity,(int)o->value());
}
void MidiGui::cb_Vel_Adj(RKR_Slider* o, void* v) {
  ((MidiGui*)(o->parent()))->cb_Vel_Adj_i(o,v);
}
MidiGui::MidiGui(int X, int Y, int W, int H, const char *L)
  : Fl_Group(0, 0, W, H, L) {
this->box(FL_UP_BOX);
this->color(FL_FOREGROUND_COLOR);
this->selection_color(FL_FOREGROUND_COLOR);
this->user_data((void*)(1));
this->align(Fl_Align(96|FL_ALIGN_INSIDE));
{ midi_activar = new RKR_Light_Button(5, 4, 38, 18, "On");
  midi_activar->tooltip("Enable MIDI Converter - Shortcut \'M\'");
  midi_activar->box(FL_UP_BOX);
  midi_activar->shortcut(0x6d);
  midi_activar->color((Fl_Color)62);
  midi_activar->selection_color((Fl_Color)1);
  midi_activar->labeltype(FL_NORMAL_LABEL);
  midi_activar->labelfont(0);
  midi_activar->labelsize(10);
  midi_activar->labelcolor(FL_FOREGROUND_COLOR);
  midi_activar->callback((Fl_Callback*)cb_midi_activar);
  midi_activar->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
  midi_activar->when(FL_WHEN_CHANGED);
} // RKR_Light_Button* midi_activar
{ RKR_Choice* o = MIDIOctave = new RKR_Choice(107, 31, 37, 16, "Octave");
  MIDIOctave->tooltip("Adjust MIDI note out by octave.");
  MIDIOctave->box(FL_FLAT_BOX);
  MIDIOctave->down_box(FL_BORDER_BOX);
  MIDIOctave->color(FL_BACKGROUND_COLOR);
  MIDIOctave->selection_color(FL_FOREGROUND_COLOR);
  MIDIOctave->labeltype(FL_NORMAL_LABEL);
  MIDIOctave->labelfont(0);
  MIDIOctave->labelsize(8);
  MIDIOctave->labelcolor(FL_BACKGROUND2_COLOR);
  MIDIOctave->textsize(10);
  MIDIOctave->textcolor(FL_BACKGROUND2_COLOR);
  MIDIOctave->callback((Fl_Callback*)cb_MIDIOctave, (void*)(12));
  MIDIOctave->align(Fl_Align(FL_ALIGN_LEFT));
  MIDIOctave->when(FL_WHEN_CHANGED);
  MIDIOctave->menu(menu_MIDIOctave);
  o->set_label_offset(-2);
  o->set_text_offset(-1);
} // RKR_Choice* MIDIOctave
{ RKR_Counter* o = Midi_out_Counter = new RKR_Counter(94, 4, 50, 15, "Channel");
  Midi_out_Counter->tooltip("Channel to send MIDI out.");
  Midi_out_Counter->type(1);
  Midi_out_Counter->box(FL_UP_BOX);
  Midi_out_Counter->color((Fl_Color)62);
  Midi_out_Counter->selection_color(FL_INACTIVE_COLOR);
  Midi_out_Counter->labeltype(FL_NORMAL_LABEL);
  Midi_out_Counter->labelfont(0);
  Midi_out_Counter->labelsize(9);
  Midi_out_Counter->labelcolor(FL_BACKGROUND2_COLOR);
  Midi_out_Counter->minimum(1);
  Midi_out_Counter->maximum(16);
  Midi_out_Counter->step(1);
  Midi_out_Counter->value(1);
  Midi_out_Counter->textsize(11);
  Midi_out_Counter->callback((Fl_Callback*)cb_Midi_out_Counter);
  Midi_out_Counter->align(Fl_Align(FL_ALIGN_BOTTOM));
  Midi_out_Counter->when(FL_WHEN_CHANGED);
  o->set_label_offset(-1);
  o->set_text_offset(1);
} // RKR_Counter* Midi_out_Counter
{ Use_FFT = new RKR_Check_Button(51, 34, 15, 15, "FFT");
  Use_FFT->tooltip("FFT based algorithm which is much more\nCPU intensive but may provide better \
results.");
  Use_FFT->box(FL_NO_BOX);
  Use_FFT->down_box(FL_BORDER_BOX);
  Use_FFT->color(FL_BACKGROUND_COLOR);
  Use_FFT->selection_color(FL_FOREGROUND_COLOR);
  Use_FFT->labeltype(FL_NORMAL_LABEL);
  Use_FFT->labelfont(0);
  Use_FFT->labelsize(10);
  Use_FFT->labelcolor(FL_BACKGROUND2_COLOR);
  Use_FFT->callback((Fl_Callback*)cb_Use_FFT);
  Use_FFT->align(Fl_Align(FL_ALIGN_TOP));
  Use_FFT->when(FL_WHEN_RELEASE);
} // RKR_Check_Button* Use_FFT
{ RKR_Slider* o = Trig_Adj = new RKR_Slider(147, 15, 117, 11, "Trigger");
  Trig_Adj->type(5);
  Trig_Adj->box(FL_FLAT_BOX);
  Trig_Adj->color((Fl_Color)178);
  Trig_Adj->selection_color((Fl_Color)62);
  Trig_Adj->labeltype(FL_NORMAL_LABEL);
  Trig_Adj->labelfont(0);
  Trig_Adj->labelsize(8);
  Trig_Adj->labelcolor(FL_BACKGROUND2_COLOR);
  Trig_Adj->minimum(2);
  Trig_Adj->maximum(60);
  Trig_Adj->step(1);
  Trig_Adj->textcolor(FL_BACKGROUND2_COLOR);
  Trig_Adj->callback((Fl_Callback*)cb_Trig_Adj);
  Trig_Adj->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
  Trig_Adj->when(FL_WHEN_CHANGED);
  o->set_label_offset(-2);
  o->shut_off_pixel_adjustment();
} // RKR_Slider* Trig_Adj
{ RKR_Slider* o = Vel_Adj = new RKR_Slider(147, 34, 117, 11, "Velocity");
  Vel_Adj->type(5);
  Vel_Adj->box(FL_FLAT_BOX);
  Vel_Adj->color((Fl_Color)178);
  Vel_Adj->selection_color((Fl_Color)62);
  Vel_Adj->labeltype(FL_NORMAL_LABEL);
  Vel_Adj->labelfont(0);
  Vel_Adj->labelsize(8);
  Vel_Adj->labelcolor(FL_BACKGROUND2_COLOR);
  Vel_Adj->minimum(1);
  Vel_Adj->maximum(100);
  Vel_Adj->step(1);
  Vel_Adj->textcolor(FL_BACKGROUND2_COLOR);
  Vel_Adj->callback((Fl_Callback*)cb_Vel_Adj);
  Vel_Adj->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
  Vel_Adj->when(FL_WHEN_CHANGED);
  o->set_label_offset(-2);
  o->shut_off_pixel_adjustment();
} // RKR_Slider* Vel_Adj
{ Mled = new Fl_Box(51, 5, 10, 10);
  Mled->box(FL_ROUNDED_BOX);
  Mled->color(FL_RED);
  Mled->labelsize(18);
} // Fl_Box* Mled
{ MIDI_LABEL = new RKR_Box(4, 32, 44, 14, "MIDI");
  MIDI_LABEL->box(FL_NO_BOX);
  MIDI_LABEL->color(FL_BACKGROUND_COLOR);
  MIDI_LABEL->selection_color(FL_BACKGROUND_COLOR);
  MIDI_LABEL->labeltype(FL_NORMAL_LABEL);
  MIDI_LABEL->labelfont(1);
  MIDI_LABEL->labelsize(14);
  MIDI_LABEL->labelcolor(FL_BACKGROUND2_COLOR);
  MIDI_LABEL->user_data((void*)(7));
  MIDI_LABEL->align(Fl_Align(FL_ALIGN_CENTER));
  MIDI_LABEL->when(FL_WHEN_NEVER);
} // RKR_Box* MIDI_LABEL
this->m_parent = NULL; this->m_process = NULL;
position(X, Y);
end();
}

void MidiGui::initialize(RKR* _rkr, RKRGUI* _rgui) {
  m_process = _rkr;
  m_parent= _rgui;
}
