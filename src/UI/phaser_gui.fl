# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Light_Button.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Counter.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

widget_class {\#include "common_gui_menu.h"} PhaserGui {
  user_data 1 open
  xywh {1285 103 155 180} type Double box UP_BOX color 0 selection_color 0 align 112
  code0 {\#include "RKR_Slider.h"}
  code1 {\#include "../process.h"}
  code2 {\#include "rakarrack.h"}
  code3 {\#include "common_gui_menu.h"} visible position_relative
} {
  Fl_Light_Button phaser_activar {
    label On
    user_data 2
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Multi_On_Off);
 o->value(rkr->EFX_Bypass[EFX_PHASER]);
 return;
}
rkr->EFX_Bypass[EFX_PHASER]=(int)o->value();
if((int) o->value()==0)
rkr->efx_Phaser->cleanup();
rgui->findpos(EFX_PHASER,(int)o->value(),o);} selected
    xywh {5 4 34 18} shortcut 0x37 color 62 selection_color 1 labelsize 10 align 84 when 1
    class RKR_Light_Button
  }
  Fl_Choice phaser_preset {
    label Preset
    user_data 12006
    callback {long long ud= (long long) v;
if((ud==0)||(ud==12006))rkr->efx_Phaser->setpreset((int) o->value());
phaser_WD->value(Dry_Wet(rkr->efx_Phaser->getpar(Phaser_DryWet)));
phaser_pan->value(rkr->efx_Phaser->getpar(Phaser_Pan)-64);
phaser_freq->value(rkr->efx_Phaser->getpar(Phaser_LFO_Tempo));
phaser_rnd->value(rkr->efx_Phaser->getpar(Phaser_LFO_Random));
phaser_lfotype->value(rkr->efx_Phaser->getpar(Phaser_LFO_Type));
phaser_stdf->value(rkr->efx_Phaser->getpar(Phaser_LFO_Stereo));
phaser_dpth->value(rkr->efx_Phaser->getpar(Phaser_Depth));
phaser_fb->value(rkr->efx_Phaser->getpar(Phaser_Feedback));
phaser_stages->value(rkr->efx_Phaser->getpar(Phaser_Stages));
phaser_LR->value(rkr->efx_Phaser->getpar(Phaser_LR_Cross)-64);
phaser_subs->value(rkr->efx_Phaser->getpar(Phaser_Subtract));
phaser_phase->value(rkr->efx_Phaser->getpar(Phaser_Phase));}
    xywh {77 4 76 18} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 when 6 textsize 10 textcolor 7
    class RKR_Choice
  } {
    MenuItem {} {
      label {Phaser 1}
      xywh {62 62 36 21} labelsize 10
    }
    MenuItem {} {
      label {Phaser 2}
      xywh {62 62 36 21} labelsize 10
    }
    MenuItem {} {
      label {Phaser 3}
      xywh {62 62 36 21} labelsize 10
    }
    MenuItem {} {
      label {Phaser 4}
      xywh {72 72 36 21} labelsize 10
    }
    MenuItem {} {
      label {Phaser 5}
      xywh {82 82 36 21} labelsize 10
    }
    MenuItem {} {
      label {Phaser 6}
      xywh {92 92 36 21} labelsize 10
    }
  }
  Fl_Value_Slider phaser_WD {
    label {Dry/Wet}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Phaser_DryWet);
 return;
} 
rkr->efx_Phaser->changepar(Phaser_DryWet,Dry_Wet((int)(o->value())));}
    xywh {56 29 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider phaser_pan {
    label Pan
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Phaser_Pan);
 return;
} 
rkr->efx_Phaser->changepar(Phaser_Pan,(int)(o->value()+64));}
    xywh {56 41 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider phaser_freq {
    label Tempo
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Phaser_LFO_Tempo);
 return;
} 
rkr->efx_Phaser->changepar(Phaser_LFO_Tempo,(int)o->value());}
    xywh {56 53 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum 1 maximum 600 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider phaser_rnd {
    label Random
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Phaser_LFO_Random);
 return;
} 
rkr->efx_Phaser->changepar(Phaser_LFO_Random,(int)o->value());}
    xywh {56 65 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Choice phaser_lfotype {
    label {LFO Type}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Phaser_LFO_Type);
 return;
} 

rkr->efx_Phaser->changepar(Phaser_LFO_Type,(int)o->value());} open
    xywh {78 77 72 16} down_box BORDER_BOX selection_color 0 labelsize 10 labelcolor 7 textsize 10 textcolor 7
    code0 {o->menu(m_lfo_menu->get_lfo_type());}
    class RKR_Choice
  } {}
  Fl_Check_Button phaser_subs {
    label Subtract
    user_data 2
    callback {rkr->efx_Phaser->changepar(Phaser_Subtract,(int)o->value())}
    xywh {40 94 65 15} down_box BORDER_BOX labelsize 10 labelcolor 7
    class RKR_Check_Button
  }
  Fl_Value_Slider phaser_phase {
    label Phase
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Phaser_Phase);
 return;
} 
rkr->efx_Phaser->changepar(Phaser_Phase,(int)o->value());}
    xywh {56 110 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider phaser_stdf {
    label {Stereo Df}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Phaser_LFO_Stereo);
 return;
} 
rkr->efx_Phaser->changepar(Phaser_LFO_Stereo,(int)o->value());}
    tooltip {LFO L/R Delay} xywh {56 121 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider phaser_dpth {
    label Depth
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Phaser_Depth);
 return;
} 
rkr->efx_Phaser->changepar(Phaser_Depth,(int)o->value());}
    tooltip {Phase Depth} xywh {56 132 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Value_Slider phaser_fb {
    label Feedback
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Phaser_Feedback);
 return;
} 
rkr->efx_Phaser->changepar(Phaser_Feedback,(int)o->value());}
    xywh {56 144 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 maximum 127 step 1 textcolor 7
    class RKR_Slider
  }
  Fl_Counter phaser_stages {
    label Stages
    callback {rkr->efx_Phaser->changepar(Phaser_Stages,(int)o->value());}
    xywh {72 156 52 12} type Simple box THIN_UP_BOX labelsize 10 labelcolor 7 align 4 minimum 1 maximum 12 step 1 value 1 textsize 9
    code0 {o->set_text_offset(-1);}
    class RKR_Counter
  }
  Fl_Value_Slider phaser_LR {
    label {L/R Cross}
    callback {if(Fl::event_button()==3)
{
 rgui->getMIDIControl(MC_Phaser_LR_Cross);
 return;
} 
rkr->efx_Phaser->changepar(Phaser_LR_Cross,(int)(o->value()+64));}
    xywh {56 171 100 10} type {Horz Knob} box FLAT_BOX color 178 selection_color 62 labelsize 10 labelcolor 7 align 4 minimum -64 maximum 63 step 1 textcolor 7
    class RKR_Slider
  }
  decl {CommonGuiMenu *m_lfo_menu;} {private local
  }
}
