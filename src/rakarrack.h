// generated by Fast Light User Interface Designer (fluid) version 1.0110

#ifndef rakarrack_h
#define rakarrack_h
#include <FL/Fl.H>
#include "global.h"
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Progress.H>
#include <FL/x.H>
#include <FL/Fl_PNG_Image.H>
#include <FL/Fl_Tiled_Image.H>
#include <FL/Fl_Help_Dialog.H>
#include <FL/Fl_File_Chooser.H>
#include <FL/Fl_Color_Chooser.H>

class Analyzer : public Fl_Box {
public:
  Analyzer(int x,int y, int w, int h, const char *label=0);
  void init(float *smpsl, float *smpsr, int PERIOD, int SAMPLERATE);
  void draw();
  int handle(int event);
private:
  EQ *efx_EQ1; 
};

class Scope : public Fl_Box {
public:
  Scope(int x,int y, int w, int h, const char *label=0);
  void init(float *smpsl, float *smpsr, int PERIOD);
  void draw();
  int handle(int event);
private:
  EQ *efx_EQ1; 
};

class NewVum : public Fl_Slider {
public:
  NewVum(int x,int y, int w, int h, const char *label=0);
  void draw_bg(int X, int Y, int W, int H);
  void draw_rest(int X, int Y, int W, int H);
  void draw();
  int handle(int event);
};

class TunerLed : public Fl_Slider {
public:
  TunerLed(int x,int y, int w, int h, const char *label=0);
  void draw_bg(int X, int Y, int W, int H);
  void draw_rest(int X, int Y, int W, int H);
  void draw();
  int handle(int event);
};

class SliderW : public Fl_Value_Slider {
public:
  SliderW(int x,int y, int w, int h, const char *label=0);
  int handle(int event);
  int handle2(int event, int X, int Y, int W, int H);
  void draw();
};
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Counter.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_File_Input.H>
#include <FL/Fl_Value_Input.H>

class RKRGUI {
  RKR *rkr; 
  int made; 
  Fl_Help_Dialog *visor; 
public:
  Fl_Double_Window* make_window();
  Fl_Double_Window *Principal;
private:
  void cb_Principal_i(Fl_Double_Window*, void*);
  static void cb_Principal(Fl_Double_Window*, void*);
public:
  Fl_Box *fondo;
  Fl_Menu_Bar *MenuP;
  static Fl_Menu_Item menu_MenuP[];
  static Fl_Menu_Item *Archivo;
  static Fl_Menu_Item *Menu_New;
private:
  void cb_Menu_New_i(Fl_Menu_*, void*);
  static void cb_Menu_New(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Load_Preset;
private:
  void cb_Load_Preset_i(Fl_Menu_*, void*);
  static void cb_Load_Preset(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_Preset;
private:
  void cb_Save_Preset_i(Fl_Menu_*, void*);
  static void cb_Save_Preset(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Load_Bank_M;
private:
  void cb_Load_Bank_M_i(Fl_Menu_*, void*);
  static void cb_Load_Bank_M(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_Bank_M;
private:
  void cb_Save_Bank_M_i(Fl_Menu_*, void*);
  static void cb_Save_Bank_M(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Load_Skin;
private:
  void cb_Load_Skin_i(Fl_Menu_*, void*);
  static void cb_Load_Skin(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_Skin;
private:
  void cb_Save_Skin_i(Fl_Menu_*, void*);
  static void cb_Save_Skin(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *salir;
private:
  void cb_salir_i(Fl_Menu_*, void*);
  static void cb_salir(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Bank_Menu;
private:
  void cb_Bank_Menu_i(Fl_Menu_*, void*);
  static void cb_Bank_Menu(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Ajustes;
private:
  void cb_Ajustes_i(Fl_Menu_*, void*);
  static void cb_Ajustes(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ML_Menu;
private:
  void cb_ML_Menu_i(Fl_Menu_*, void*);
  static void cb_ML_Menu(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Ayuda;
  static Fl_Menu_Item *Contenido;
private:
  void cb_Contenido_i(Fl_Menu_*, void*);
  static void cb_Contenido(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Acerca_de;
private:
  void cb_Acerca_de_i(Fl_Menu_*, void*);
  static void cb_Acerca_de(Fl_Menu_*, void*);
public:
  Fl_Box *MT;
private:
  void cb_MT_i(Fl_Box*, void*);
  static void cb_MT(Fl_Box*, void*);
public:
  Fl_Button *TITTLE_L;
private:
  void cb_TITTLE_L_i(Fl_Button*, void*);
  static void cb_TITTLE_L(Fl_Button*, void*);
public:
  Fl_Box *DESC_L;
  Scope *Sco;
  Fl_Box *E1;
  Fl_Box *E2;
  Fl_Box *E3;
  Fl_Box *E4;
  Fl_Box *E5;
  Fl_Box *E6;
  Fl_Box *E7;
  Fl_Box *E8;
  Fl_Box *E9;
  Fl_Box *E10;
  Fl_Box *L1;
  Fl_Box *L2;
  Fl_Box *L3;
  Fl_Box *L4;
  Fl_Box *L5;
  Fl_Box *L6;
  Fl_Box *L7;
  Fl_Box *L8;
  Fl_Box *L9;
  Fl_Box *L10;
  Fl_Group *EQ;
  Fl_Light_Button *eq_activar;
private:
  void cb_eq_activar_i(Fl_Light_Button*, void*);
  static void cb_eq_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *eq_preset;
private:
  void cb_eq_preset_i(Fl_Choice*, void*);
  static void cb_eq_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_eq_preset[];
public:
  SliderW *eq_Gain;
private:
  void cb_eq_Gain_i(SliderW*, void*);
  static void cb_eq_Gain(SliderW*, void*);
public:
  SliderW *eq_Q;
private:
  void cb_eq_Q_i(SliderW*, void*);
  static void cb_eq_Q(SliderW*, void*);
public:
  SliderW *eq_1;
private:
  void cb_eq_1_i(SliderW*, void*);
  static void cb_eq_1(SliderW*, void*);
public:
  SliderW *eq_2;
private:
  void cb_eq_2_i(SliderW*, void*);
  static void cb_eq_2(SliderW*, void*);
public:
  SliderW *eq_3;
private:
  void cb_eq_3_i(SliderW*, void*);
  static void cb_eq_3(SliderW*, void*);
public:
  SliderW *eq_4;
private:
  void cb_eq_4_i(SliderW*, void*);
  static void cb_eq_4(SliderW*, void*);
public:
  SliderW *eq_5;
private:
  void cb_eq_5_i(SliderW*, void*);
  static void cb_eq_5(SliderW*, void*);
public:
  SliderW *eq_6;
private:
  void cb_eq_6_i(SliderW*, void*);
  static void cb_eq_6(SliderW*, void*);
public:
  SliderW *eq_7;
private:
  void cb_eq_7_i(SliderW*, void*);
  static void cb_eq_7(SliderW*, void*);
public:
  SliderW *eq_8;
private:
  void cb_eq_8_i(SliderW*, void*);
  static void cb_eq_8(SliderW*, void*);
public:
  SliderW *eq_9;
private:
  void cb_eq_9_i(SliderW*, void*);
  static void cb_eq_9(SliderW*, void*);
public:
  SliderW *eq_10;
private:
  void cb_eq_10_i(SliderW*, void*);
  static void cb_eq_10(SliderW*, void*);
public:
  Fl_Group *COMPRESS;
  Fl_Light_Button *compress_activar;
private:
  void cb_compress_activar_i(Fl_Light_Button*, void*);
  static void cb_compress_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *compress_preset;
private:
  void cb_compress_preset_i(Fl_Choice*, void*);
  static void cb_compress_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_compress_preset[];
public:
  SliderW *compress_ATime;
private:
  void cb_compress_ATime_i(SliderW*, void*);
  static void cb_compress_ATime(SliderW*, void*);
public:
  SliderW *compress_RTime;
private:
  void cb_compress_RTime_i(SliderW*, void*);
  static void cb_compress_RTime(SliderW*, void*);
public:
  SliderW *compress_Ratio;
private:
  void cb_compress_Ratio_i(SliderW*, void*);
  static void cb_compress_Ratio(SliderW*, void*);
public:
  SliderW *compress_Knee;
private:
  void cb_compress_Knee_i(SliderW*, void*);
  static void cb_compress_Knee(SliderW*, void*);
public:
  SliderW *compress_threshold;
private:
  void cb_compress_threshold_i(SliderW*, void*);
  static void cb_compress_threshold(SliderW*, void*);
public:
  SliderW *compress_output;
private:
  void cb_compress_output_i(SliderW*, void*);
  static void cb_compress_output(SliderW*, void*);
public:
  Fl_Check_Button *Auto_Output;
private:
  void cb_Auto_Output_i(Fl_Check_Button*, void*);
  static void cb_Auto_Output(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *Stereo;
private:
  void cb_Stereo_i(Fl_Check_Button*, void*);
  static void cb_Stereo(Fl_Check_Button*, void*);
public:
  Fl_Group *DIST;
  Fl_Light_Button *dist_activar;
private:
  void cb_dist_activar_i(Fl_Light_Button*, void*);
  static void cb_dist_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *dist_preset;
private:
  void cb_dist_preset_i(Fl_Choice*, void*);
  static void cb_dist_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_dist_preset[];
public:
  SliderW *dist_WD;
private:
  void cb_dist_WD_i(SliderW*, void*);
  static void cb_dist_WD(SliderW*, void*);
public:
  SliderW *dist_LRc;
private:
  void cb_dist_LRc_i(SliderW*, void*);
  static void cb_dist_LRc(SliderW*, void*);
public:
  SliderW *dist_drive;
private:
  void cb_dist_drive_i(SliderW*, void*);
  static void cb_dist_drive(SliderW*, void*);
public:
  SliderW *dist_level;
private:
  void cb_dist_level_i(SliderW*, void*);
  static void cb_dist_level(SliderW*, void*);
public:
  Fl_Choice *dist_tipo;
private:
  void cb_dist_tipo_i(Fl_Choice*, void*);
  static void cb_dist_tipo(Fl_Choice*, void*);
  static Fl_Menu_Item menu_dist_tipo[];
public:
  Fl_Check_Button *dist_neg;
private:
  void cb_dist_neg_i(Fl_Check_Button*, void*);
  static void cb_dist_neg(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *dist_pf;
private:
  void cb_dist_pf_i(Fl_Check_Button*, void*);
  static void cb_dist_pf(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *dist_st;
private:
  void cb_dist_st_i(Fl_Check_Button*, void*);
  static void cb_dist_st(Fl_Check_Button*, void*);
public:
  SliderW *dist_pan;
private:
  void cb_dist_pan_i(SliderW*, void*);
  static void cb_dist_pan(SliderW*, void*);
public:
  SliderW *dist_oct;
private:
  void cb_dist_oct_i(SliderW*, void*);
  static void cb_dist_oct(SliderW*, void*);
public:
  SliderW *dist_lpf;
private:
  void cb_dist_lpf_i(SliderW*, void*);
  static void cb_dist_lpf(SliderW*, void*);
public:
  SliderW *dist_hpf;
private:
  void cb_dist_hpf_i(SliderW*, void*);
  static void cb_dist_hpf(SliderW*, void*);
public:
  Fl_Group *OVRD;
  Fl_Light_Button *ovrd_activar;
private:
  void cb_ovrd_activar_i(Fl_Light_Button*, void*);
  static void cb_ovrd_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *ovrd_preset;
private:
  void cb_ovrd_preset_i(Fl_Choice*, void*);
  static void cb_ovrd_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_ovrd_preset[];
public:
  SliderW *ovrd_WD;
private:
  void cb_ovrd_WD_i(SliderW*, void*);
  static void cb_ovrd_WD(SliderW*, void*);
public:
  SliderW *ovrd_LRc;
private:
  void cb_ovrd_LRc_i(SliderW*, void*);
  static void cb_ovrd_LRc(SliderW*, void*);
public:
  SliderW *ovrd_drive;
private:
  void cb_ovrd_drive_i(SliderW*, void*);
  static void cb_ovrd_drive(SliderW*, void*);
public:
  SliderW *ovrd_level;
private:
  void cb_ovrd_level_i(SliderW*, void*);
  static void cb_ovrd_level(SliderW*, void*);
public:
  Fl_Choice *ovrd_tipo;
private:
  void cb_ovrd_tipo_i(Fl_Choice*, void*);
  static void cb_ovrd_tipo(Fl_Choice*, void*);
  static Fl_Menu_Item menu_ovrd_tipo[];
public:
  Fl_Check_Button *ovrd_neg;
private:
  void cb_ovrd_neg_i(Fl_Check_Button*, void*);
  static void cb_ovrd_neg(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *ovrd_st;
private:
  void cb_ovrd_st_i(Fl_Check_Button*, void*);
  static void cb_ovrd_st(Fl_Check_Button*, void*);
public:
  SliderW *ovrd_pan;
private:
  void cb_ovrd_pan_i(SliderW*, void*);
  static void cb_ovrd_pan(SliderW*, void*);
public:
  Fl_Check_Button *ovrd_pf;
private:
  void cb_ovrd_pf_i(Fl_Check_Button*, void*);
  static void cb_ovrd_pf(Fl_Check_Button*, void*);
public:
  SliderW *ovrd_lpf;
private:
  void cb_ovrd_lpf_i(SliderW*, void*);
  static void cb_ovrd_lpf(SliderW*, void*);
public:
  SliderW *ovrd_hpf;
private:
  void cb_ovrd_hpf_i(SliderW*, void*);
  static void cb_ovrd_hpf(SliderW*, void*);
public:
  Fl_Group *ECHO;
  Fl_Light_Button *echo_activar;
private:
  void cb_echo_activar_i(Fl_Light_Button*, void*);
  static void cb_echo_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *echo_preset;
private:
  void cb_echo_preset_i(Fl_Choice*, void*);
  static void cb_echo_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_echo_preset[];
public:
  SliderW *echo_WD;
private:
  void cb_echo_WD_i(SliderW*, void*);
  static void cb_echo_WD(SliderW*, void*);
public:
  SliderW *echo_RV;
private:
  void cb_echo_RV_i(SliderW*, void*);
  static void cb_echo_RV(SliderW*, void*);
public:
  SliderW *echo_pan;
private:
  void cb_echo_pan_i(SliderW*, void*);
  static void cb_echo_pan(SliderW*, void*);
public:
  SliderW *echo_delay;
private:
  void cb_echo_delay_i(SliderW*, void*);
  static void cb_echo_delay(SliderW*, void*);
public:
  SliderW *echo_LRdl;
private:
  void cb_echo_LRdl_i(SliderW*, void*);
  static void cb_echo_LRdl(SliderW*, void*);
public:
  SliderW *echo_LRc;
private:
  void cb_echo_LRc_i(SliderW*, void*);
  static void cb_echo_LRc(SliderW*, void*);
public:
  SliderW *echo_fb;
private:
  void cb_echo_fb_i(SliderW*, void*);
  static void cb_echo_fb(SliderW*, void*);
public:
  SliderW *echo_damp;
private:
  void cb_echo_damp_i(SliderW*, void*);
  static void cb_echo_damp(SliderW*, void*);
public:
  Fl_Group *CHORUS;
  Fl_Light_Button *chorus_activar;
private:
  void cb_chorus_activar_i(Fl_Light_Button*, void*);
  static void cb_chorus_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *chorux_preset;
private:
  void cb_chorux_preset_i(Fl_Choice*, void*);
  static void cb_chorux_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_chorux_preset[];
public:
  SliderW *chorus_WD;
private:
  void cb_chorus_WD_i(SliderW*, void*);
  static void cb_chorus_WD(SliderW*, void*);
public:
  SliderW *chorus_pan;
private:
  void cb_chorus_pan_i(SliderW*, void*);
  static void cb_chorus_pan(SliderW*, void*);
public:
  SliderW *chorus_freq;
private:
  void cb_chorus_freq_i(SliderW*, void*);
  static void cb_chorus_freq(SliderW*, void*);
public:
  SliderW *chorus_rnd;
private:
  void cb_chorus_rnd_i(SliderW*, void*);
  static void cb_chorus_rnd(SliderW*, void*);
public:
  Fl_Choice *chorus_lfotype;
private:
  void cb_chorus_lfotype_i(Fl_Choice*, void*);
  static void cb_chorus_lfotype(Fl_Choice*, void*);
  static Fl_Menu_Item menu_chorus_lfotype[];
public:
  Fl_Check_Button *chorus_subs;
private:
  void cb_chorus_subs_i(Fl_Check_Button*, void*);
  static void cb_chorus_subs(Fl_Check_Button*, void*);
public:
  SliderW *chorus_stdf;
private:
  void cb_chorus_stdf_i(SliderW*, void*);
  static void cb_chorus_stdf(SliderW*, void*);
public:
  SliderW *chorus_dpth;
private:
  void cb_chorus_dpth_i(SliderW*, void*);
  static void cb_chorus_dpth(SliderW*, void*);
public:
  SliderW *chorus_delay;
private:
  void cb_chorus_delay_i(SliderW*, void*);
  static void cb_chorus_delay(SliderW*, void*);
public:
  SliderW *chorus_fb;
private:
  void cb_chorus_fb_i(SliderW*, void*);
  static void cb_chorus_fb(SliderW*, void*);
public:
  SliderW *chorus_LR;
private:
  void cb_chorus_LR_i(SliderW*, void*);
  static void cb_chorus_LR(SliderW*, void*);
public:
  Fl_Group *PHASER;
  Fl_Light_Button *phaser_activar;
private:
  void cb_phaser_activar_i(Fl_Light_Button*, void*);
  static void cb_phaser_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *phaser_preset;
private:
  void cb_phaser_preset_i(Fl_Choice*, void*);
  static void cb_phaser_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_phaser_preset[];
public:
  SliderW *phaser_WD;
private:
  void cb_phaser_WD_i(SliderW*, void*);
  static void cb_phaser_WD(SliderW*, void*);
public:
  SliderW *phaser_pan;
private:
  void cb_phaser_pan_i(SliderW*, void*);
  static void cb_phaser_pan(SliderW*, void*);
public:
  SliderW *phaser_freq;
private:
  void cb_phaser_freq_i(SliderW*, void*);
  static void cb_phaser_freq(SliderW*, void*);
public:
  SliderW *phaser_rnd;
private:
  void cb_phaser_rnd_i(SliderW*, void*);
  static void cb_phaser_rnd(SliderW*, void*);
public:
  Fl_Choice *phaser_lfotype;
private:
  void cb_phaser_lfotype_i(Fl_Choice*, void*);
  static void cb_phaser_lfotype(Fl_Choice*, void*);
  static Fl_Menu_Item menu_phaser_lfotype[];
public:
  Fl_Check_Button *phaser_subs;
private:
  void cb_phaser_subs_i(Fl_Check_Button*, void*);
  static void cb_phaser_subs(Fl_Check_Button*, void*);
public:
  SliderW *phaser_phase;
private:
  void cb_phaser_phase_i(SliderW*, void*);
  static void cb_phaser_phase(SliderW*, void*);
public:
  SliderW *phaser_stdf;
private:
  void cb_phaser_stdf_i(SliderW*, void*);
  static void cb_phaser_stdf(SliderW*, void*);
public:
  SliderW *phaser_dpth;
private:
  void cb_phaser_dpth_i(SliderW*, void*);
  static void cb_phaser_dpth(SliderW*, void*);
public:
  SliderW *phaser_fb;
private:
  void cb_phaser_fb_i(SliderW*, void*);
  static void cb_phaser_fb(SliderW*, void*);
public:
  Fl_Counter *phaser_stages;
private:
  void cb_phaser_stages_i(Fl_Counter*, void*);
  static void cb_phaser_stages(Fl_Counter*, void*);
public:
  SliderW *phaser_LR;
private:
  void cb_phaser_LR_i(SliderW*, void*);
  static void cb_phaser_LR(SliderW*, void*);
public:
  Fl_Group *FLANGER;
  Fl_Light_Button *flanger_activar;
private:
  void cb_flanger_activar_i(Fl_Light_Button*, void*);
  static void cb_flanger_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *flanger_preset;
private:
  void cb_flanger_preset_i(Fl_Choice*, void*);
  static void cb_flanger_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_flanger_preset[];
public:
  SliderW *flanger_WD;
private:
  void cb_flanger_WD_i(SliderW*, void*);
  static void cb_flanger_WD(SliderW*, void*);
public:
  SliderW *flanger_pan;
private:
  void cb_flanger_pan_i(SliderW*, void*);
  static void cb_flanger_pan(SliderW*, void*);
public:
  SliderW *flanger_freq;
private:
  void cb_flanger_freq_i(SliderW*, void*);
  static void cb_flanger_freq(SliderW*, void*);
public:
  SliderW *flanger_rnd;
private:
  void cb_flanger_rnd_i(SliderW*, void*);
  static void cb_flanger_rnd(SliderW*, void*);
public:
  Fl_Choice *flanger_lfotype;
private:
  void cb_flanger_lfotype_i(Fl_Choice*, void*);
  static void cb_flanger_lfotype(Fl_Choice*, void*);
  static Fl_Menu_Item menu_flanger_lfotype[];
public:
  Fl_Check_Button *flanger_subs;
private:
  void cb_flanger_subs_i(Fl_Check_Button*, void*);
  static void cb_flanger_subs(Fl_Check_Button*, void*);
public:
  SliderW *flanger_stdf;
private:
  void cb_flanger_stdf_i(SliderW*, void*);
  static void cb_flanger_stdf(SliderW*, void*);
public:
  SliderW *flanger_dpth;
private:
  void cb_flanger_dpth_i(SliderW*, void*);
  static void cb_flanger_dpth(SliderW*, void*);
public:
  SliderW *flanger_delay;
private:
  void cb_flanger_delay_i(SliderW*, void*);
  static void cb_flanger_delay(SliderW*, void*);
public:
  SliderW *flanger_fb;
private:
  void cb_flanger_fb_i(SliderW*, void*);
  static void cb_flanger_fb(SliderW*, void*);
public:
  SliderW *flanger_LR;
private:
  void cb_flanger_LR_i(SliderW*, void*);
  static void cb_flanger_LR(SliderW*, void*);
public:
  Fl_Group *REVERB;
  Fl_Light_Button *reverb_activar;
private:
  void cb_reverb_activar_i(Fl_Light_Button*, void*);
  static void cb_reverb_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *reverb_preset;
private:
  void cb_reverb_preset_i(Fl_Choice*, void*);
  static void cb_reverb_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_reverb_preset[];
public:
  SliderW *reverb_WD;
private:
  void cb_reverb_WD_i(SliderW*, void*);
  static void cb_reverb_WD(SliderW*, void*);
public:
  SliderW *reverb_pan;
private:
  void cb_reverb_pan_i(SliderW*, void*);
  static void cb_reverb_pan(SliderW*, void*);
public:
  SliderW *reverb_time;
private:
  void cb_reverb_time_i(SliderW*, void*);
  static void cb_reverb_time(SliderW*, void*);
public:
  SliderW *reverb_ldel;
private:
  void cb_reverb_ldel_i(SliderW*, void*);
  static void cb_reverb_ldel(SliderW*, void*);
public:
  SliderW *reverb_ldelft;
private:
  void cb_reverb_ldelft_i(SliderW*, void*);
  static void cb_reverb_ldelft(SliderW*, void*);
public:
  Fl_Choice *reverb_type;
private:
  void cb_reverb_type_i(Fl_Choice*, void*);
  static void cb_reverb_type(Fl_Choice*, void*);
  static Fl_Menu_Item menu_reverb_type[];
  void cb_Random_i(Fl_Menu_*, void*);
  static void cb_Random(Fl_Menu_*, void*);
public:
  SliderW *reverb_RS;
private:
  void cb_reverb_RS_i(SliderW*, void*);
  static void cb_reverb_RS(SliderW*, void*);
public:
  SliderW *reverb_LPF;
private:
  void cb_reverb_LPF_i(SliderW*, void*);
  static void cb_reverb_LPF(SliderW*, void*);
public:
  SliderW *reverb_HPF;
private:
  void cb_reverb_HPF_i(SliderW*, void*);
  static void cb_reverb_HPF(SliderW*, void*);
public:
  SliderW *reverb_damp;
private:
  void cb_reverb_damp_i(SliderW*, void*);
  static void cb_reverb_damp(SliderW*, void*);
public:
  Fl_Group *PEQ;
  Fl_Light_Button *eqp_activar;
private:
  void cb_eqp_activar_i(Fl_Light_Button*, void*);
  static void cb_eqp_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *eqp_preset;
private:
  void cb_eqp_preset_i(Fl_Choice*, void*);
  static void cb_eqp_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_eqp_preset[];
public:
  SliderW *eqp_Gain;
private:
  void cb_eqp_Gain_i(SliderW*, void*);
  static void cb_eqp_Gain(SliderW*, void*);
public:
  SliderW *eqp_LF;
private:
  void cb_eqp_LF_i(SliderW*, void*);
  static void cb_eqp_LF(SliderW*, void*);
public:
  SliderW *eqp_LFg;
private:
  void cb_eqp_LFg_i(SliderW*, void*);
  static void cb_eqp_LFg(SliderW*, void*);
public:
  SliderW *eqp_LQ;
private:
  void cb_eqp_LQ_i(SliderW*, void*);
  static void cb_eqp_LQ(SliderW*, void*);
public:
  SliderW *eqp_MF;
private:
  void cb_eqp_MF_i(SliderW*, void*);
  static void cb_eqp_MF(SliderW*, void*);
public:
  SliderW *eqp_MFg;
private:
  void cb_eqp_MFg_i(SliderW*, void*);
  static void cb_eqp_MFg(SliderW*, void*);
public:
  SliderW *eqp_MQ;
private:
  void cb_eqp_MQ_i(SliderW*, void*);
  static void cb_eqp_MQ(SliderW*, void*);
public:
  SliderW *eqp_HF;
private:
  void cb_eqp_HF_i(SliderW*, void*);
  static void cb_eqp_HF(SliderW*, void*);
public:
  SliderW *eqp_HFg;
private:
  void cb_eqp_HFg_i(SliderW*, void*);
  static void cb_eqp_HFg(SliderW*, void*);
public:
  SliderW *eqp_HQ;
private:
  void cb_eqp_HQ_i(SliderW*, void*);
  static void cb_eqp_HQ(SliderW*, void*);
public:
  Fl_Group *WHAWHA;
  Fl_Light_Button *WhaWha_activar;
private:
  void cb_WhaWha_activar_i(Fl_Light_Button*, void*);
  static void cb_WhaWha_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *WhaWha_preset;
private:
  void cb_WhaWha_preset_i(Fl_Choice*, void*);
  static void cb_WhaWha_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_WhaWha_preset[];
public:
  SliderW *WhaWha_WD;
private:
  void cb_WhaWha_WD_i(SliderW*, void*);
  static void cb_WhaWha_WD(SliderW*, void*);
public:
  SliderW *WhaWha_pan;
private:
  void cb_WhaWha_pan_i(SliderW*, void*);
  static void cb_WhaWha_pan(SliderW*, void*);
public:
  SliderW *WhaWha_freq;
private:
  void cb_WhaWha_freq_i(SliderW*, void*);
  static void cb_WhaWha_freq(SliderW*, void*);
public:
  SliderW *WhaWha_rnd;
private:
  void cb_WhaWha_rnd_i(SliderW*, void*);
  static void cb_WhaWha_rnd(SliderW*, void*);
public:
  Fl_Choice *WhaWha_lfotype;
private:
  void cb_WhaWha_lfotype_i(Fl_Choice*, void*);
  static void cb_WhaWha_lfotype(Fl_Choice*, void*);
  static Fl_Menu_Item menu_WhaWha_lfotype[];
public:
  SliderW *WhaWha_stdf;
private:
  void cb_WhaWha_stdf_i(SliderW*, void*);
  static void cb_WhaWha_stdf(SliderW*, void*);
public:
  SliderW *WhaWha_dpth;
private:
  void cb_WhaWha_dpth_i(SliderW*, void*);
  static void cb_WhaWha_dpth(SliderW*, void*);
public:
  SliderW *WhaWha_ampsns;
private:
  void cb_WhaWha_ampsns_i(SliderW*, void*);
  static void cb_WhaWha_ampsns(SliderW*, void*);
public:
  SliderW *WhaWha_ampsnsinv;
private:
  void cb_WhaWha_ampsnsinv_i(SliderW*, void*);
  static void cb_WhaWha_ampsnsinv(SliderW*, void*);
public:
  SliderW *WhaWha_smooth;
private:
  void cb_WhaWha_smooth_i(SliderW*, void*);
  static void cb_WhaWha_smooth(SliderW*, void*);
public:
  Fl_Group *ALIENWAH;
  Fl_Light_Button *Alienwah_activar;
private:
  void cb_Alienwah_activar_i(Fl_Light_Button*, void*);
  static void cb_Alienwah_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *Alienwah_preset;
private:
  void cb_Alienwah_preset_i(Fl_Choice*, void*);
  static void cb_Alienwah_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Alienwah_preset[];
public:
  SliderW *Alienwah_WD;
private:
  void cb_Alienwah_WD_i(SliderW*, void*);
  static void cb_Alienwah_WD(SliderW*, void*);
public:
  SliderW *Alienwah_pan;
private:
  void cb_Alienwah_pan_i(SliderW*, void*);
  static void cb_Alienwah_pan(SliderW*, void*);
public:
  SliderW *Alienwah_freq;
private:
  void cb_Alienwah_freq_i(SliderW*, void*);
  static void cb_Alienwah_freq(SliderW*, void*);
public:
  SliderW *Alienwah_rnd;
private:
  void cb_Alienwah_rnd_i(SliderW*, void*);
  static void cb_Alienwah_rnd(SliderW*, void*);
public:
  Fl_Choice *Alienwah_lfotype;
private:
  void cb_Alienwah_lfotype_i(Fl_Choice*, void*);
  static void cb_Alienwah_lfotype(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Alienwah_lfotype[];
public:
  SliderW *Alienwah_phase;
private:
  void cb_Alienwah_phase_i(SliderW*, void*);
  static void cb_Alienwah_phase(SliderW*, void*);
public:
  SliderW *Alienwah_stdf;
private:
  void cb_Alienwah_stdf_i(SliderW*, void*);
  static void cb_Alienwah_stdf(SliderW*, void*);
public:
  SliderW *Alienwah_dpth;
private:
  void cb_Alienwah_dpth_i(SliderW*, void*);
  static void cb_Alienwah_dpth(SliderW*, void*);
public:
  SliderW *Alienwah_delay;
private:
  void cb_Alienwah_delay_i(SliderW*, void*);
  static void cb_Alienwah_delay(SliderW*, void*);
public:
  SliderW *Alienwah_fb;
private:
  void cb_Alienwah_fb_i(SliderW*, void*);
  static void cb_Alienwah_fb(SliderW*, void*);
public:
  SliderW *Alienwah_LR;
private:
  void cb_Alienwah_LR_i(SliderW*, void*);
  static void cb_Alienwah_LR(SliderW*, void*);
public:
  Fl_Group *CABINET;
  Fl_Light_Button *Cabinet_activar;
private:
  void cb_Cabinet_activar_i(Fl_Light_Button*, void*);
  static void cb_Cabinet_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *Cabinet_preset;
private:
  void cb_Cabinet_preset_i(Fl_Choice*, void*);
  static void cb_Cabinet_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Cabinet_preset[];
public:
  SliderW *Cabinet_output;
private:
  void cb_Cabinet_output_i(SliderW*, void*);
  static void cb_Cabinet_output(SliderW*, void*);
public:
  Fl_Group *PAN;
  Fl_Light_Button *pan_activar;
private:
  void cb_pan_activar_i(Fl_Light_Button*, void*);
  static void cb_pan_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *pan_preset;
private:
  void cb_pan_preset_i(Fl_Choice*, void*);
  static void cb_pan_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_pan_preset[];
public:
  SliderW *pan_WD;
private:
  void cb_pan_WD_i(SliderW*, void*);
  static void cb_pan_WD(SliderW*, void*);
public:
  Fl_Check_Button *pan_autopan;
private:
  void cb_pan_autopan_i(Fl_Check_Button*, void*);
  static void cb_pan_autopan(Fl_Check_Button*, void*);
public:
  SliderW *pan_pan;
private:
  void cb_pan_pan_i(SliderW*, void*);
  static void cb_pan_pan(SliderW*, void*);
public:
  SliderW *pan_freq;
private:
  void cb_pan_freq_i(SliderW*, void*);
  static void cb_pan_freq(SliderW*, void*);
public:
  SliderW *pan_rnd;
private:
  void cb_pan_rnd_i(SliderW*, void*);
  static void cb_pan_rnd(SliderW*, void*);
public:
  Fl_Choice *pan_lfotype;
private:
  void cb_pan_lfotype_i(Fl_Choice*, void*);
  static void cb_pan_lfotype(Fl_Choice*, void*);
  static Fl_Menu_Item menu_pan_lfotype[];
public:
  SliderW *pan_stdf;
private:
  void cb_pan_stdf_i(SliderW*, void*);
  static void cb_pan_stdf(SliderW*, void*);
public:
  Fl_Check_Button *pan_extraon;
private:
  void cb_pan_extraon_i(Fl_Check_Button*, void*);
  static void cb_pan_extraon(Fl_Check_Button*, void*);
public:
  SliderW *pan_extra;
private:
  void cb_pan_extra_i(SliderW*, void*);
  static void cb_pan_extra(SliderW*, void*);
public:
  Fl_Group *HAR;
  Fl_Light_Button *har_activar;
private:
  void cb_har_activar_i(Fl_Light_Button*, void*);
  static void cb_har_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *har_preset;
private:
  void cb_har_preset_i(Fl_Choice*, void*);
  static void cb_har_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_har_preset[];
public:
  SliderW *har_WD;
private:
  void cb_har_WD_i(SliderW*, void*);
  static void cb_har_WD(SliderW*, void*);
public:
  SliderW *har_int;
private:
  void cb_har_int_i(SliderW*, void*);
  static void cb_har_int(SliderW*, void*);
public:
  SliderW *har_gan;
private:
  void cb_har_gan_i(SliderW*, void*);
  static void cb_har_gan(SliderW*, void*);
public:
  SliderW *har_pan;
private:
  void cb_har_pan_i(SliderW*, void*);
  static void cb_har_pan(SliderW*, void*);
public:
  SliderW *har_freq1;
private:
  void cb_har_freq1_i(SliderW*, void*);
  static void cb_har_freq1(SliderW*, void*);
public:
  SliderW *har_gan1;
private:
  void cb_har_gan1_i(SliderW*, void*);
  static void cb_har_gan1(SliderW*, void*);
public:
  SliderW *har_q1;
private:
  void cb_har_q1_i(SliderW*, void*);
  static void cb_har_q1(SliderW*, void*);
public:
  Fl_Check_Button *har_MIDI;
private:
  void cb_har_MIDI_i(Fl_Check_Button*, void*);
  static void cb_har_MIDI(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *har_SELECT;
private:
  void cb_har_SELECT_i(Fl_Check_Button*, void*);
  static void cb_har_SELECT(Fl_Check_Button*, void*);
public:
  Fl_Box *har_chordname;
  SliderW *har_note;
private:
  void cb_har_note_i(SliderW*, void*);
  static void cb_har_note(SliderW*, void*);
public:
  SliderW *har_type;
private:
  void cb_har_type_i(SliderW*, void*);
  static void cb_har_type(SliderW*, void*);
public:
  Fl_Group *MUSDELAY;
  Fl_Light_Button *musdelay_activar;
private:
  void cb_musdelay_activar_i(Fl_Light_Button*, void*);
  static void cb_musdelay_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *musdelay_preset;
private:
  void cb_musdelay_preset_i(Fl_Choice*, void*);
  static void cb_musdelay_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_musdelay_preset[];
public:
  SliderW *musdelay_WD;
private:
  void cb_musdelay_WD_i(SliderW*, void*);
  static void cb_musdelay_WD(SliderW*, void*);
public:
  SliderW *musdelay_LRc;
private:
  void cb_musdelay_LRc_i(SliderW*, void*);
  static void cb_musdelay_LRc(SliderW*, void*);
public:
  SliderW *musdelay_pan1;
private:
  void cb_musdelay_pan1_i(SliderW*, void*);
  static void cb_musdelay_pan1(SliderW*, void*);
public:
  SliderW *musdelay_pan2;
private:
  void cb_musdelay_pan2_i(SliderW*, void*);
  static void cb_musdelay_pan2(SliderW*, void*);
public:
  Fl_Choice *musdelay_delay1;
private:
  void cb_musdelay_delay1_i(Fl_Choice*, void*);
  static void cb_musdelay_delay1(Fl_Choice*, void*);
  static Fl_Menu_Item menu_musdelay_delay1[];
public:
  Fl_Choice *musdelay_delay3;
private:
  void cb_musdelay_delay3_i(Fl_Choice*, void*);
  static void cb_musdelay_delay3(Fl_Choice*, void*);
  static Fl_Menu_Item menu_musdelay_delay3[];
public:
  Fl_Choice *musdelay_delay2;
private:
  void cb_musdelay_delay2_i(Fl_Choice*, void*);
  static void cb_musdelay_delay2(Fl_Choice*, void*);
  static Fl_Menu_Item menu_musdelay_delay2[];
public:
  SliderW *musdelay_tempo;
private:
  void cb_musdelay_tempo_i(SliderW*, void*);
  static void cb_musdelay_tempo(SliderW*, void*);
public:
  SliderW *musdelay_gain1;
private:
  void cb_musdelay_gain1_i(SliderW*, void*);
  static void cb_musdelay_gain1(SliderW*, void*);
public:
  SliderW *musdelay_gain2;
private:
  void cb_musdelay_gain2_i(SliderW*, void*);
  static void cb_musdelay_gain2(SliderW*, void*);
public:
  SliderW *musdelay_fb1;
private:
  void cb_musdelay_fb1_i(SliderW*, void*);
  static void cb_musdelay_fb1(SliderW*, void*);
public:
  SliderW *musdelay_fb2;
private:
  void cb_musdelay_fb2_i(SliderW*, void*);
  static void cb_musdelay_fb2(SliderW*, void*);
public:
  SliderW *musdelay_damp;
private:
  void cb_musdelay_damp_i(SliderW*, void*);
  static void cb_musdelay_damp(SliderW*, void*);
public:
  Fl_Group *GATE;
  Fl_Light_Button *gate_activar;
private:
  void cb_gate_activar_i(Fl_Light_Button*, void*);
  static void cb_gate_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *gate_preset;
private:
  void cb_gate_preset_i(Fl_Choice*, void*);
  static void cb_gate_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_gate_preset[];
public:
  SliderW *gate_ATime;
private:
  void cb_gate_ATime_i(SliderW*, void*);
  static void cb_gate_ATime(SliderW*, void*);
public:
  SliderW *gate_RTime;
private:
  void cb_gate_RTime_i(SliderW*, void*);
  static void cb_gate_RTime(SliderW*, void*);
public:
  SliderW *gate_range;
private:
  void cb_gate_range_i(SliderW*, void*);
  static void cb_gate_range(SliderW*, void*);
public:
  SliderW *gate_threshold;
private:
  void cb_gate_threshold_i(SliderW*, void*);
  static void cb_gate_threshold(SliderW*, void*);
public:
  SliderW *gate_hold;
private:
  void cb_gate_hold_i(SliderW*, void*);
  static void cb_gate_hold(SliderW*, void*);
public:
  SliderW *gate_LPF;
private:
  void cb_gate_LPF_i(SliderW*, void*);
  static void cb_gate_LPF(SliderW*, void*);
public:
  SliderW *gate_HPF;
private:
  void cb_gate_HPF_i(SliderW*, void*);
  static void cb_gate_HPF(SliderW*, void*);
public:
  Fl_Group *NEWDIST;
  Fl_Light_Button *newdist_activar;
private:
  void cb_newdist_activar_i(Fl_Light_Button*, void*);
  static void cb_newdist_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *newdist_preset;
private:
  void cb_newdist_preset_i(Fl_Choice*, void*);
  static void cb_newdist_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_newdist_preset[];
public:
  SliderW *newdist_WD;
private:
  void cb_newdist_WD_i(SliderW*, void*);
  static void cb_newdist_WD(SliderW*, void*);
public:
  SliderW *newdist_LRc;
private:
  void cb_newdist_LRc_i(SliderW*, void*);
  static void cb_newdist_LRc(SliderW*, void*);
public:
  SliderW *newdist_drive;
private:
  void cb_newdist_drive_i(SliderW*, void*);
  static void cb_newdist_drive(SliderW*, void*);
public:
  SliderW *newdist_level;
private:
  void cb_newdist_level_i(SliderW*, void*);
  static void cb_newdist_level(SliderW*, void*);
public:
  Fl_Choice *newdist_tipo;
private:
  void cb_newdist_tipo_i(Fl_Choice*, void*);
  static void cb_newdist_tipo(Fl_Choice*, void*);
  static Fl_Menu_Item menu_newdist_tipo[];
public:
  Fl_Check_Button *newdist_neg;
private:
  void cb_newdist_neg_i(Fl_Check_Button*, void*);
  static void cb_newdist_neg(Fl_Check_Button*, void*);
public:
  SliderW *newdist_st;
private:
  void cb_newdist_st_i(SliderW*, void*);
  static void cb_newdist_st(SliderW*, void*);
public:
  SliderW *newdist_oct;
private:
  void cb_newdist_oct_i(SliderW*, void*);
  static void cb_newdist_oct(SliderW*, void*);
public:
  SliderW *newdist_pan;
private:
  void cb_newdist_pan_i(SliderW*, void*);
  static void cb_newdist_pan(SliderW*, void*);
public:
  Fl_Check_Button *newdist_pf;
private:
  void cb_newdist_pf_i(Fl_Check_Button*, void*);
  static void cb_newdist_pf(Fl_Check_Button*, void*);
public:
  SliderW *newdist_lpf;
private:
  void cb_newdist_lpf_i(SliderW*, void*);
  static void cb_newdist_lpf(SliderW*, void*);
public:
  SliderW *newdist_hpf;
private:
  void cb_newdist_hpf_i(SliderW*, void*);
  static void cb_newdist_hpf(SliderW*, void*);
public:
  Fl_Group *APHASER;
  Fl_Light_Button *aphaser_activar;
private:
  void cb_aphaser_activar_i(Fl_Light_Button*, void*);
  static void cb_aphaser_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *aphaser_preset;
private:
  void cb_aphaser_preset_i(Fl_Choice*, void*);
  static void cb_aphaser_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_aphaser_preset[];
public:
  SliderW *aphaser_WD;
private:
  void cb_aphaser_WD_i(SliderW*, void*);
  static void cb_aphaser_WD(SliderW*, void*);
public:
  Fl_Choice *aphaser_lfotype;
private:
  void cb_aphaser_lfotype_i(Fl_Choice*, void*);
  static void cb_aphaser_lfotype(Fl_Choice*, void*);
  static Fl_Menu_Item menu_aphaser_lfotype[];
public:
  SliderW *aphaser_freq;
private:
  void cb_aphaser_freq_i(SliderW*, void*);
  static void cb_aphaser_freq(SliderW*, void*);
public:
  SliderW *aphaser_dpth;
private:
  void cb_aphaser_dpth_i(SliderW*, void*);
  static void cb_aphaser_dpth(SliderW*, void*);
public:
  SliderW *aphaser_phase;
private:
  void cb_aphaser_phase_i(SliderW*, void*);
  static void cb_aphaser_phase(SliderW*, void*);
public:
  SliderW *aphaser_fb;
private:
  void cb_aphaser_fb_i(SliderW*, void*);
  static void cb_aphaser_fb(SliderW*, void*);
public:
  SliderW *aphaser_LR;
private:
  void cb_aphaser_LR_i(SliderW*, void*);
  static void cb_aphaser_LR(SliderW*, void*);
public:
  SliderW *aphaser_pan;
private:
  void cb_aphaser_pan_i(SliderW*, void*);
  static void cb_aphaser_pan(SliderW*, void*);
public:
  SliderW *aphaser_stdf;
private:
  void cb_aphaser_stdf_i(SliderW*, void*);
  static void cb_aphaser_stdf(SliderW*, void*);
public:
  Fl_Counter *aphaser_stages;
private:
  void cb_aphaser_stages_i(Fl_Counter*, void*);
  static void cb_aphaser_stages(Fl_Counter*, void*);
public:
  Fl_Check_Button *aphaser_hyper;
private:
  void cb_aphaser_hyper_i(Fl_Check_Button*, void*);
  static void cb_aphaser_hyper(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *aphaser_subs;
private:
  void cb_aphaser_subs_i(Fl_Check_Button*, void*);
  static void cb_aphaser_subs(Fl_Check_Button*, void*);
public:
  Fl_Group *VALVE;
  Fl_Light_Button *valve_activar;
private:
  void cb_valve_activar_i(Fl_Light_Button*, void*);
  static void cb_valve_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *valve_preset;
private:
  void cb_valve_preset_i(Fl_Choice*, void*);
  static void cb_valve_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_valve_preset[];
public:
  SliderW *valve_WD;
private:
  void cb_valve_WD_i(SliderW*, void*);
  static void cb_valve_WD(SliderW*, void*);
public:
  SliderW *valve_LRc;
private:
  void cb_valve_LRc_i(SliderW*, void*);
  static void cb_valve_LRc(SliderW*, void*);
public:
  SliderW *valve_drive;
private:
  void cb_valve_drive_i(SliderW*, void*);
  static void cb_valve_drive(SliderW*, void*);
public:
  SliderW *valve_Q;
private:
  void cb_valve_Q_i(SliderW*, void*);
  static void cb_valve_Q(SliderW*, void*);
public:
  SliderW *valve_level;
private:
  void cb_valve_level_i(SliderW*, void*);
  static void cb_valve_level(SliderW*, void*);
public:
  Fl_Check_Button *valve_pf;
private:
  void cb_valve_pf_i(Fl_Check_Button*, void*);
  static void cb_valve_pf(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *valve_st;
private:
  void cb_valve_st_i(Fl_Check_Button*, void*);
  static void cb_valve_st(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *valve_neg;
private:
  void cb_valve_neg_i(Fl_Check_Button*, void*);
  static void cb_valve_neg(Fl_Check_Button*, void*);
public:
  SliderW *valve_pan;
private:
  void cb_valve_pan_i(SliderW*, void*);
  static void cb_valve_pan(SliderW*, void*);
public:
  SliderW *valve_lpf;
private:
  void cb_valve_lpf_i(SliderW*, void*);
  static void cb_valve_lpf(SliderW*, void*);
public:
  SliderW *valve_hpf;
private:
  void cb_valve_hpf_i(SliderW*, void*);
  static void cb_valve_hpf(SliderW*, void*);
public:
  Fl_Group *DFLANGE;
  Fl_Light_Button *dflange_activar;
private:
  void cb_dflange_activar_i(Fl_Light_Button*, void*);
  static void cb_dflange_activar(Fl_Light_Button*, void*);
public:
  Fl_Choice *dflange_preset;
private:
  void cb_dflange_preset_i(Fl_Choice*, void*);
  static void cb_dflange_preset(Fl_Choice*, void*);
  static Fl_Menu_Item menu_dflange_preset[];
public:
  SliderW *dflange_WD;
private:
  void cb_dflange_WD_i(SliderW*, void*);
  static void cb_dflange_WD(SliderW*, void*);
public:
  SliderW *dflange_pan;
private:
  void cb_dflange_pan_i(SliderW*, void*);
  static void cb_dflange_pan(SliderW*, void*);
public:
  SliderW *dflange_LR;
private:
  void cb_dflange_LR_i(SliderW*, void*);
  static void cb_dflange_LR(SliderW*, void*);
public:
  SliderW *dflange_depth;
private:
  void cb_dflange_depth_i(SliderW*, void*);
  static void cb_dflange_depth(SliderW*, void*);
public:
  SliderW *dflange_width;
private:
  void cb_dflange_width_i(SliderW*, void*);
  static void cb_dflange_width(SliderW*, void*);
public:
  SliderW *dflange_offset;
private:
  void cb_dflange_offset_i(SliderW*, void*);
  static void cb_dflange_offset(SliderW*, void*);
public:
  SliderW *dflange_fb;
private:
  void cb_dflange_fb_i(SliderW*, void*);
  static void cb_dflange_fb(SliderW*, void*);
public:
  SliderW *dflange_lpf;
private:
  void cb_dflange_lpf_i(SliderW*, void*);
  static void cb_dflange_lpf(SliderW*, void*);
public:
  Fl_Check_Button *dflange_subs;
private:
  void cb_dflange_subs_i(Fl_Check_Button*, void*);
  static void cb_dflange_subs(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *dflange_tz;
private:
  void cb_dflange_tz_i(Fl_Check_Button*, void*);
  static void cb_dflange_tz(Fl_Check_Button*, void*);
public:
  SliderW *dflange_freq;
private:
  void cb_dflange_freq_i(SliderW*, void*);
  static void cb_dflange_freq(SliderW*, void*);
public:
  SliderW *dflange_stdf;
private:
  void cb_dflange_stdf_i(SliderW*, void*);
  static void cb_dflange_stdf(SliderW*, void*);
public:
  Fl_Choice *dflange_lfotype;
private:
  void cb_dflange_lfotype_i(Fl_Choice*, void*);
  static void cb_dflange_lfotype(Fl_Choice*, void*);
  static Fl_Menu_Item menu_dflange_lfotype[];
public:
  SliderW *dflange_rnd;
private:
  void cb_dflange_rnd_i(SliderW*, void*);
  static void cb_dflange_rnd(SliderW*, void*);
public:
  Fl_Group *Tuner;
  Fl_Light_Button *tuner_activar;
private:
  void cb_tuner_activar_i(Fl_Light_Button*, void*);
  static void cb_tuner_activar(Fl_Light_Button*, void*);
public:
  TunerLed *tuner_bar;
  Fl_Box *WNote;
  Fl_Box *WRfreq;
  Fl_Box *WNfreq;
  Fl_Box *PINCHO;
  Fl_Box *TUNER_LABEL;
  Fl_Group *InOut;
  Fl_Light_Button *ActivarGeneral;
private:
  void cb_ActivarGeneral_i(Fl_Light_Button*, void*);
  static void cb_ActivarGeneral(Fl_Light_Button*, void*);
public:
  SliderW *Balance;
private:
  void cb_Balance_i(SliderW*, void*);
  static void cb_Balance(SliderW*, void*);
public:
  SliderW *Nivel_Entrada;
private:
  void cb_Nivel_Entrada_i(SliderW*, void*);
  static void cb_Nivel_Entrada(SliderW*, void*);
public:
  SliderW *Nivel_Salida;
private:
  void cb_Nivel_Salida_i(SliderW*, void*);
  static void cb_Nivel_Salida(SliderW*, void*);
public:
  NewVum *input_vu;
  NewVum *output_vu;
  Fl_Box *LABEL_IO;
  Fl_Group *Midi;
  Fl_Light_Button *nidi_activar;
private:
  void cb_nidi_activar_i(Fl_Light_Button*, void*);
  static void cb_nidi_activar(Fl_Light_Button*, void*);
public:
  Fl_Counter *Midi_out_Counter;
private:
  void cb_Midi_out_Counter_i(Fl_Counter*, void*);
  static void cb_Midi_out_Counter(Fl_Counter*, void*);
public:
  SliderW *Trig_Adj;
private:
  void cb_Trig_Adj_i(SliderW*, void*);
  static void cb_Trig_Adj(SliderW*, void*);
public:
  SliderW *Vel_Adj;
private:
  void cb_Vel_Adj_i(SliderW*, void*);
  static void cb_Vel_Adj(SliderW*, void*);
public:
  Fl_Box *MIDI_LABEL;
private:
  void cb_MIDI_LABEL_i(Fl_Box*, void*);
  static void cb_MIDI_LABEL(Fl_Box*, void*);
public:
  Fl_Box *Mled;
  Fl_Group *Presets;
  Fl_Box *PRESETS_LABEL;
  Fl_Button *S_new;
private:
  void cb_S_new_i(Fl_Button*, void*);
  static void cb_S_new(Fl_Button*, void*);
public:
  Fl_Button *L_preset;
private:
  void cb_L_preset_i(Fl_Button*, void*);
  static void cb_L_preset(Fl_Button*, void*);
public:
  Fl_Button *S_preset;
private:
  void cb_S_preset_i(Fl_Button*, void*);
  static void cb_S_preset(Fl_Button*, void*);
public:
  Fl_Light_Button *Compare;
private:
  void cb_Compare_i(Fl_Light_Button*, void*);
  static void cb_Compare(Fl_Light_Button*, void*);
public:
  Fl_Button *B_preset;
private:
  void cb_B_preset_i(Fl_Button*, void*);
  static void cb_B_preset(Fl_Button*, void*);
public:
  Fl_Input *WPreset_Name;
private:
  void cb_WPreset_Name_i(Fl_Input*, void*);
  static void cb_WPreset_Name(Fl_Input*, void*);
public:
  Fl_Counter *Preset_Counter;
private:
  void cb_Preset_Counter_i(Fl_Counter*, void*);
  static void cb_Preset_Counter(Fl_Counter*, void*);
public:
  Fl_Box *DAuthor;
  Fl_Button *Open_Order;
private:
  void cb_Open_Order_i(Fl_Button*, void*);
  static void cb_Open_Order(Fl_Button*, void*);
public:
  Fl_Button *Etit;
private:
  void cb_Etit_i(Fl_Button*, void*);
  static void cb_Etit(Fl_Button*, void*);
public:
  Analyzer *Analy;
  Fl_Double_Window *BankWindow;
private:
  void cb_BankWindow_i(Fl_Double_Window*, void*);
  static void cb_BankWindow(Fl_Double_Window*, void*);
public:
  Fl_Box *Fondo3;
  Fl_Menu_Bar *MenuB;
  static Fl_Menu_Item menu_MenuB[];
  static Fl_Menu_Item *ArchivoB;
  static Fl_Menu_Item *NewB;
private:
  void cb_NewB_i(Fl_Menu_*, void*);
  static void cb_NewB(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Load_Bank;
private:
  void cb_Load_Bank_i(Fl_Menu_*, void*);
  static void cb_Load_Bank(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save_Bank;
private:
  void cb_Save_Bank_i(Fl_Menu_*, void*);
  static void cb_Save_Bank(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Convert_Old_Bank;
private:
  void cb_Convert_Old_Bank_i(Fl_Menu_*, void*);
  static void cb_Convert_Old_Bank(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *salirB;
private:
  void cb_salirB_i(Fl_Menu_*, void*);
  static void cb_salirB(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *AyudaB;
  static Fl_Menu_Item *ContenidoB;
private:
  void cb_ContenidoB_i(Fl_Menu_*, void*);
  static void cb_ContenidoB(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Acerca_deB;
private:
  void cb_Acerca_deB_i(Fl_Menu_*, void*);
  static void cb_Acerca_deB(Fl_Menu_*, void*);
public:
  Fl_Group *ob;
  Fl_Double_Window *Order;
private:
  void cb_Order_i(Fl_Double_Window*, void*);
  static void cb_Order(Fl_Double_Window*, void*);
public:
  Fl_Box *Fondo1;
  Fl_Box *O_TITLE;
  Fl_Browser *Avail_Bro;
  Fl_Button *Pon;
private:
  void cb_Pon_i(Fl_Button*, void*);
  static void cb_Pon(Fl_Button*, void*);
public:
  Fl_Browser *Order_Bro;
  Fl_Button *Sube;
private:
  void cb_Sube_i(Fl_Button*, void*);
  static void cb_Sube(Fl_Button*, void*);
public:
  Fl_Button *Baja;
private:
  void cb_Baja_i(Fl_Button*, void*);
  static void cb_Baja(Fl_Button*, void*);
public:
  Fl_Button *ok_order;
private:
  void cb_ok_order_i(Fl_Button*, void*);
  static void cb_ok_order(Fl_Button*, void*);
public:
  Fl_Button *Cancel_order;
private:
  void cb_Cancel_order_i(Fl_Button*, void*);
  static void cb_Cancel_order(Fl_Button*, void*);
public:
  Fl_Double_Window *Settings;
private:
  void cb_Settings_i(Fl_Double_Window*, void*);
  static void cb_Settings(Fl_Double_Window*, void*);
public:
  Fl_Box *Fondo2;
  Fl_Button *Prefs_OK;
private:
  void cb_Prefs_OK_i(Fl_Button*, void*);
  static void cb_Prefs_OK(Fl_Button*, void*);
public:
  Fl_Group *Look;
  Fl_Button *B_C;
private:
  void cb_B_C_i(Fl_Button*, void*);
  static void cb_B_C(Fl_Button*, void*);
public:
  Fl_Button *L_C;
private:
  void cb_L_C_i(Fl_Button*, void*);
  static void cb_L_C(Fl_Button*, void*);
public:
  Fl_Button *K_C;
private:
  void cb_K_C_i(Fl_Button*, void*);
  static void cb_K_C(Fl_Button*, void*);
public:
  Fl_Button *A_C;
private:
  void cb_A_C_i(Fl_Button*, void*);
  static void cb_A_C(Fl_Button*, void*);
public:
  Fl_Choice *scheme_ch;
private:
  void cb_scheme_ch_i(Fl_Choice*, void*);
  static void cb_scheme_ch(Fl_Choice*, void*);
  static Fl_Menu_Item menu_scheme_ch[];
public:
  Fl_File_Input *BackFiname;
  Fl_Button *BI_Browser;
private:
  void cb_BI_Browser_i(Fl_Button*, void*);
  static void cb_BI_Browser(Fl_Button*, void*);
public:
  Fl_Box *FSLabel;
  Fl_Button *FSplus;
private:
  void cb_FSplus_i(Fl_Button*, void*);
  static void cb_FSplus(Fl_Button*, void*);
public:
  Fl_Button *FSless;
private:
  void cb_FSless_i(Fl_Button*, void*);
  static void cb_FSless(Fl_Button*, void*);
public:
  Fl_Group *AUDIO_SET;
  Fl_Check_Button *Pre_Serve;
private:
  void cb_Pre_Serve_i(Fl_Check_Button*, void*);
  static void cb_Pre_Serve(Fl_Check_Button*, void*);
public:
  Fl_Choice *Har_Qual;
private:
  void cb_Har_Qual_i(Fl_Choice*, void*);
  static void cb_Har_Qual(Fl_Choice*, void*);
  static Fl_Menu_Item menu_Har_Qual[];
public:
  Fl_Check_Button *INSTATE;
private:
  void cb_INSTATE_i(Fl_Check_Button*, void*);
  static void cb_INSTATE(Fl_Check_Button*, void*);
public:
  Fl_Group *MIDI_SET;
  Fl_Check_Button *D_A_Connect;
private:
  void cb_D_A_Connect_i(Fl_Check_Button*, void*);
  static void cb_D_A_Connect(Fl_Check_Button*, void*);
public:
  Fl_Browser *BMidiIn;
private:
  void cb_BMidiIn_i(Fl_Browser*, void*);
  static void cb_BMidiIn(Fl_Browser*, void*);
public:
  Fl_Counter *Midi_In_Counter;
private:
  void cb_Midi_In_Counter_i(Fl_Counter*, void*);
  static void cb_Midi_In_Counter(Fl_Counter*, void*);
public:
  Fl_Counter *Har_In_Counter;
private:
  void cb_Har_In_Counter_i(Fl_Counter*, void*);
  static void cb_Har_In_Counter(Fl_Counter*, void*);
public:
  Fl_Group *wMIDI;
  Fl_Check_Button *Mw0;
private:
  void cb_Mw0_i(Fl_Check_Button*, void*);
  static void cb_Mw0(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *Mw1;
private:
  void cb_Mw1_i(Fl_Check_Button*, void*);
  static void cb_Mw1(Fl_Check_Button*, void*);
public:
  Fl_Group *JACK_SET;
  Fl_Check_Button *D_J_Connect;
private:
  void cb_D_J_Connect_i(Fl_Check_Button*, void*);
  static void cb_D_J_Connect(Fl_Check_Button*, void*);
public:
  Fl_Browser *JackCo;
  Fl_Group *MISC_SET;
  Fl_Input *Username;
private:
  void cb_Username_i(Fl_Input*, void*);
  static void cb_Username(Fl_Input*, void*);
public:
  Fl_Group *BANK_SET;
  Fl_File_Input *BFiname;
  Fl_Button *BF_Browser;
private:
  void cb_BF_Browser_i(Fl_Button*, void*);
  static void cb_BF_Browser(Fl_Button*, void*);
public:
  Fl_Double_Window *MIDILearn;
private:
  void cb_MIDILearn_i(Fl_Double_Window*, void*);
  static void cb_MIDILearn(Fl_Double_Window*, void*);
public:
  Fl_Box *Fondo4;
  Fl_Browser *Epar;
private:
  void cb_Epar_i(Fl_Browser*, void*);
  static void cb_Epar(Fl_Browser*, void*);
public:
  Fl_Button *GMM;
private:
  void cb_GMM_i(Fl_Button*, void*);
  static void cb_GMM(Fl_Button*, void*);
public:
  Fl_Browser *TPresets;
  Fl_Button *CopyF;
private:
  void cb_CopyF_i(Fl_Button*, void*);
  static void cb_CopyF(Fl_Button*, void*);
public:
  Fl_Button *CopyT;
private:
  void cb_CopyT_i(Fl_Button*, void*);
  static void cb_CopyT(Fl_Button*, void*);
public:
  Fl_Group *Ares;
  Fl_Box *Ar1;
  Fl_Box *Ar2;
  Fl_Box *Ar3;
  Fl_Box *Ar4;
  Fl_Box *Ar5;
  Fl_Box *Ar6;
  Fl_Box *Ar7;
  Fl_Box *Ar8;
  Fl_Box *Ar9;
  Fl_Box *Ar10;
  Fl_Box *Ar11;
  Fl_Box *Ar12;
  Fl_Box *Ar13;
  Fl_Box *Ar14;
  Fl_Box *Ar15;
  Fl_Box *Ar16;
  Fl_Box *Ar17;
  Fl_Box *Ar18;
  Fl_Box *Ar19;
  Fl_Box *Ar20;
  Fl_Button *ClearA;
private:
  void cb_ClearA_i(Fl_Button*, void*);
  static void cb_ClearA(Fl_Button*, void*);
public:
  Fl_Button *ClearP;
private:
  void cb_ClearP_i(Fl_Button*, void*);
  static void cb_ClearP(Fl_Button*, void*);
public:
  Fl_Button *Assign;
private:
  void cb_Assign_i(Fl_Button*, void*);
  static void cb_Assign(Fl_Button*, void*);
public:
  Fl_Button *CloseML;
private:
  void cb_CloseML_i(Fl_Button*, void*);
  static void cb_CloseML(Fl_Button*, void*);
public:
  Fl_Button *CancelRec;
private:
  void cb_CancelRec_i(Fl_Button*, void*);
  static void cb_CancelRec(Fl_Button*, void*);
public:
  Fl_Value_Input *Disp_Control;
  Fl_Double_Window *AboutWin;
private:
  void cb_AboutWin_i(Fl_Double_Window*, void*);
  static void cb_AboutWin(Fl_Double_Window*, void*);
public:
  Fl_Box *AB_Title;
  Fl_Box *AB_SubTitle;
  Fl_Box *About_Version;
  Fl_Box *AB_url;
  Fl_Box *AB_Authors;
  Fl_Box *AB_A1;
  Fl_Box *AB_A2;
  Fl_Box *AB_A3;
private:
  void cb_LICENSE_i(Fl_Button*, void*);
  static void cb_LICENSE(Fl_Button*, void*);
  void cb_OK_i(Fl_Button*, void*);
  static void cb_OK(Fl_Button*, void*);
public:
  RKRGUI(int argc, char**argv,RKR *rkr_);
  void Background_Color_Change(Fl_Color bcolor);
  void Label_Color_Change(Fl_Color bcolor);
  void Buttons_Color_Change(Fl_Color bcolor);
  void Leds_Color_Change(Fl_Color bcolor);
  void put_icon(Fl_Window* window);
  void load_stat();
  void save_stat(int i);
  void Put_Loaded();
  static void tick(void* v);
  static void preset_click(Fl_Button* o, void* v);
  inline void preset_click_i(Fl_Button* o, void*);
  void make_window_banks();
  void reordena();
  void show_help();
  void show_lic();
  void MiraClientes();
  void MiraConfig();
  void BankWin_Label(char *filename);
  void is_modified();
  void Put_Loaded_Bank();
  void Chord();
  void ActMIDI();
  void ActOnOff();
  void light_preset(int npreset);
  void unlight_preset(int npreset);
  void PutBackground();
  void chfsize(int value);
  void adjustfont();
  void ChangeActives();
  void findpos(int num, int value);
  void Put_Skin(int last);
  void FillML(int type);
  void DisAssigns();
  void ChangeActivesB(int num,int value);
};
#endif
