// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include <libintl.h>
#include "rakarrack.h"
#include "icono_rakarrack_128x128.xpm"
static Fl_Tiled_Image *back; 
static Fl_Color leds_color; 
static Fl_Color back_color; 
static Fl_Color fore_color; 
static Fl_Color label_color; 
static float *spl; 
static float *spr; 
static int sr; 
static int ns; 
static int at; 
static int nt; 
static int tta; 
static int Scope_ON; 
static int Analyzer_ON; 

Analyzer::Analyzer(int x,int y, int w, int h, const char *label):Fl_Box(x,y,w,h,label) {
  spl=NULL;
spr=NULL;
ns=NULL;
}

void Analyzer::init(float *smpsl, float *smpsr, int PERIOD, int SAMPLERATE) {
  spl = smpsl;
spr = smpsr;
ns = PERIOD;
sr = SAMPLERATE;
}

void Analyzer::draw() {
  int ox=x(),oy=y(),lx=w(),ly=h();
int i,j;
int px,py,hy;
double y=0.0;
double t=0.0;
double nsp = 1.0 / (double) ns;
double dsr = (double) sr;
double acoeff= (1.0/dsr)/(0.005+(1.0/dsr));
double image=0.0;
double oldimage =0.0;
double factor = (double) ns / 64.0;
char buf[1];
int xscale[] = {22,31, 39, 62, 79, 125, 158, 200, 251, 317, 400, 503, 634,800, 1000,1200,1500,2000,2500,3200,4000,5000,6000,8000,10000,12000,16000,20000};

sprintf(buf," ");

px = (lx-22) / 30;
hy = ly;

double scale = (double) ly ;


if (Analyzer_ON)
{

//Draw Response  
// draw_box(FL_FLAT_BOX,ox,oy,lx,ly,back_color);

fl_draw(buf, ox, oy, lx, ly, FL_ALIGN_CLIP ,back);

    
fl_color(leds_color);

for(i=0; i<30; i++)
{
      y = 0.0;
      double coeff = (double)xscale[i]/dsr;

      for(j=0; j<ns; j++)
      {
                   
       t = cos(2.0 * M_PI * (double) j * coeff);
       image = t * spl[j];
       oldimage = acoeff*image + ( 1.0 - acoeff) * oldimage;

       y += fabs(oldimage);
      }
       
      y=sqrtf(y*nsp*factor);   
     
      if (y<0.0) y=0.0;
      if (y>1.0) y=1.0;     
                  
      py = lrintf(y*scale); 
            
      
      fl_color(leds_color);
      fl_rectf(px+ox+px*i+4,oy+ly-py,px-2,py);

   
   //   printf("%d %f %d\n",py,y,i);
} 
 
 
}

else
{
draw_box(box(),ox,oy,lx,ly,back_color);
draw_label();
}
}

int Analyzer::handle(int event) {
  if ((event==FL_PUSH)||(event==FL_DRAG)||(event==FL_RELEASE)) {

switch(event)
{
case FL_RELEASE:

if(Analyzer_ON) 
{
Analyzer_ON=0; 
at=0;
tta=1;
}
return(1);
break;
}
}
return(0);
}

Scope::Scope(int x,int y, int w, int h, const char *label):Fl_Box(x,y,w,h,label) {
  spl=NULL;
spr=NULL;
ns=NULL;
}

void Scope::init(float *smpsl, float *smpsr, int PERIOD) {
  spl = smpsl;
spr = smpsr;
ns = PERIOD;
}

void Scope::draw() {
  int ox=x(),oy=y(),lx=w(),ly=h();
int i;
int Xl,Xr,Yl,Yr;
int SW,SH;
int px,py,old_px,old_py,oldr_px,oldr_py;
int posx;
double pP = (double) ns; 
double value=0.0;

SW=lx/2-5;
SH=ly;

Xl=ox;
Yl=oy+ly/2;


Xr=ox+SW+5;
Yr=Yl;


double dSW = (double) SW;
double coeff = 1.0 / pP * dSW;



if (Scope_ON)
{

//Draw Curve Reponse  
 


back->draw(ox,oy);

fl_color(leds_color);


old_px = Xl;
old_py = Yl;
oldr_px = Xr;
oldr_py = Yr;

for(i=0; i<ns; i++)
{
  posx = (int) ((double) i * coeff);

  value=spr[i];
  if (value>1.0) value=1.0;
  if (value<-1.0) value=-1.0;
  

  px = Xl + posx;
  py = Yl + (int) (value / 2.0 * SH);
   
  // printf("%d %d %d\n",i,px,py);
   

if (i>0) fl_line(old_px, old_py,px,py);
  
  old_px=px; old_py=py;
  
  value=spl[i];
  if (value>1.0) value=1.0;
  if (value<-1.0) value=-1.0;



  px = Xr + posx;
  py = Yr + (int) (value / 2.0 * SH);
 
if (i>0) fl_line(oldr_px, oldr_py,px,py);

  oldr_px=px; oldr_py=py;
 
 
 }
 
}

else
{
draw_box(box(),ox,oy,lx,ly,back_color);
draw_label();
}
}

int Scope::handle(int event) {
  if ((event==FL_PUSH)||(event==FL_DRAG)||(event==FL_RELEASE)) {

switch(event)
{
case FL_RELEASE:

if(Scope_ON) 
{
Scope_ON=0; 
nt = 1;
}
return(1);
break;
}

}

return(0);
}

NewVum::NewVum(int x,int y, int w, int h, const char *label):Fl_Slider(x,y,w,h,label) {
}

void NewVum::draw_bg(int X, int Y, int W, int H) {
  fl_push_clip(X, Y, W, H);
//  draw_box(FL_THIN_DOWN_BOX,X,Y,W,H,back_color);
back->draw(X,Y);

  fl_pop_clip();

//Fl_Color black = active_r() ? FL_FOREGROUND_COLOR : FL_INACTIVE_COLOR;
}

void NewVum::draw_rest(int X, int Y, int W, int H) {
  double val;
int x = X;
int y = Y;
int h = H;
int w = W;

float fred,fyel,fora;

fred=.239f;
fora=.35f;
fyel=.508f;


    val = 1.0-((value() + 48.0) / 63.0);
    if (val > 1.0) val = 1.0;
    else if (val < 0.0) val = 0.0;
  
  
  int S,S1,S2,S3;
  
   
   S = h - int(val*h+.5); 
  
   S1 = h - int(fred*(float)h+.5f);
   S2 = h - int(fora*(float)h+.5f); 
   S3 = h - int(fyel*(float)h+.5f);
 

    draw_bg(X, Y, W, H);
 
  int ko=H+Y-S;

 if (val < fred)  
  {
  
   
  
  fl_color(fl_darker(FL_RED)); 
  fl_rectf(x+1,h+y-S,3,S-S1);
  fl_color(FL_RED); 
  fl_rectf(x+4,h+y-S,w-7,S-S1); 
  fl_color(fl_darker(FL_RED)); 
  fl_rectf(x+w-3,h+y-S,2,S-S1);
 
   S=S1;
  }   
  
 if (val < fora)  
  {
   
   
 
 
 fl_color(fl_darker((Fl_Color) 93)); 
  fl_rectf(x+1,h+y-S,3,S-S2);
  fl_color((Fl_Color)93); 
  fl_rectf(x+4,h+y-S,w-7,S-S2); 
 fl_color(fl_darker((Fl_Color)93)); 
  fl_rectf(x+w-3,h+y-S,2,S-S2);
 
   S=S2;
  }       

  if (val < fyel)  
  {
  
  
  
  fl_color(fl_darker(FL_YELLOW)); 
  fl_rectf(x+1,h+y-S,3,S-S3);
  fl_color(FL_YELLOW); 
  fl_rectf(x+4,h+y-S,w-7,S-S3); 
  fl_color(fl_darker(FL_YELLOW)); 
  fl_rectf(x+w-3,h+y-S,2,S-S3);
  
  
   S=S3;
  }   
   
  
  fl_color(fl_darker(FL_GREEN)); 
  fl_rectf(x+1,h+y-S,3,S);
  fl_color(FL_GREEN); 
  fl_rectf(x+4,h+y-S,w-7,S); 
  fl_color(fl_darker(FL_GREEN)); 
  fl_rectf(x+w-3,h+y-S,2,S);
  
 
if (val < 1.0)
 {
 fl_color(FL_BLACK);
   
 for(int i=H+Y-4;i>ko;i=i-4)   
  fl_line(x, i, x+w-1,i);
  
}
}

void NewVum::draw() {
  if (damage()&FL_DAMAGE_ALL) draw_box();


  draw_rest(x()+Fl::box_dx(box()),
       y()+Fl::box_dy(box()),
       w()-Fl::box_dw(box()),
       h()-Fl::box_dh(box()));
}

int NewVum::handle(int event) {
  switch(event)
{
case FL_SHOW:
             
             
case FL_HIDE:
             

case FL_RELEASE:

{
return 0;
}


case FL_DRAG: 
{
return 0;
}

case FL_SHORTCUT:
return 0;

default:
return 0;
}

return 1;
}

TunerLed::TunerLed(int x,int y, int w, int h, const char *label):Fl_Slider(x,y,w,h,label) {
}

void TunerLed::draw_bg(int X, int Y, int W, int H) {
  fl_push_clip(X, Y, W, H);
 // draw_box(FL_THIN_DOWN_BOX,X,Y,W,H,back_color);
 
 back->draw(X,Y);
  fl_pop_clip();

//Fl_Color black = active_r() ? FL_FOREGROUND_COLOR : FL_INACTIVE_COLOR;
}

void TunerLed::draw_rest(int X, int Y, int W, int H) {
  double val;
int x = X;
int y = Y;
int h = H;
int w = W;

   val = (float)(value()-minimum())/(maximum()-minimum());
   if (val > 1.0) val = 1.0;
   else if (val < 0.0) val = 0.0;
  
  
  int S = (int)((double)w*val);  
 
  
  draw_bg(X, Y, W, H);
 
   
   
  if ((val > .1) && (val < .9))
  {
  fl_color(fl_lighter(FL_RED)); 
  fl_rectf(x+S-3,y+2,7,h-4);
  
  
  }
}

void TunerLed::draw() {
  if (damage()&FL_DAMAGE_ALL) draw_box();


  draw_rest(x()+Fl::box_dx(box()),
       y()+Fl::box_dy(box()),
       w()-Fl::box_dw(box()),
       h()-Fl::box_dh(box()));
}

int TunerLed::handle(int event) {
  switch(event)
{
case FL_SHOW:
             
             
case FL_HIDE:
             

case FL_RELEASE:

{
return 0;
}


case FL_DRAG: 
{
return 0;
}

case FL_SHORTCUT:
return 0;

default:
return 0;
}

return 1;
}

SliderW::SliderW(int x,int y, int w, int h, const char *label):Fl_Value_Slider(x,y,w,h,label) {
}

int SliderW::handle(int event) {
  if (event == FL_PUSH && Fl::visible_focus()) {
    Fl::focus(this);
    redraw();
}  
  
  int sxx = x(), syy = y(), sww = w(), shh = h();
  
  if (horizontal()) {
    sxx += 35; sww -= 35;
  } else {
    syy += 25; shh -= 25;
 }
  
return handle2(event,
                  sxx+Fl::box_dx(box()),
                  syy+Fl::box_dy(box()),
                  sww-Fl::box_dw(box()),
                  shh-Fl::box_dh(box()));
}

int SliderW::handle2(int event, int X, int Y, int W, int H) {
  switch (event) {
  case FL_PUSH:
    if (!Fl::event_inside(X, Y, W, H)) return 0;
    handle_push();
  case FL_DRAG: {

    double val;
    if (minimum() == maximum())
      val = 0.5;
    else {
      val = (value()-minimum())/(maximum()-minimum());
      if (val > 1.0) val = 1.0;
      else if (val < 0.0) val = 0.0;
    }

    int ww = (horizontal() ? W : H);
    int mx = (horizontal() ? Fl::event_x()-X : Fl::event_y()-Y);
    int S=0;
    static int offcenter;

    if (type() == FL_HOR_FILL_SLIDER || type() == FL_VERT_FILL_SLIDER) {

      S = 1;
      if (event == FL_PUSH) {
        int xx = int(val*ww+.5);
        offcenter = mx-xx;
        if (offcenter < -10 || offcenter > 10) offcenter = 0;
        else return 1;
      }

    } else {

      S = int(0*ww+.5); if (S >= ww) return 0;
      int T = (horizontal() ? H : W)/2+1;
      if (type()==FL_VERT_NICE_SLIDER || type()==FL_HOR_NICE_SLIDER) T += 4;
      if (S < T) S = T;
      if (event == FL_PUSH) {
       int xx = int(val*(ww-S)+.5);
        offcenter = mx-xx;
        if (offcenter < 0) offcenter = 0;
        else if (offcenter > S) offcenter = S;
        else return 1;
      }
    }

    int xx = mx-offcenter;
    double v;
    char tryAgain = 1;
    while (tryAgain)
    {
      tryAgain = 0;
      if (xx < 0) {
        xx = 0;
        offcenter = mx; if (offcenter < 0) offcenter = 0;
      } else if (xx > (ww-S)) {
        xx = ww-S;
        offcenter = mx-xx; if (offcenter > S) offcenter = S;
      }
      v = round(xx*(maximum()-minimum())/(ww-S) + minimum());
      // make sure a click outside the sliderbar moves it:
      if (event == FL_PUSH && v == value()) {
        offcenter = S/2;
        event = FL_DRAG;
        tryAgain = 1;
      }
    }


   handle_drag(clamp(v));
    } return 1;
 
    case FL_MOUSEWHEEL :
  
      if (Fl::e_dy==0) return 0;
      handle_push();
      handle_drag(clamp(increment(value(),Fl::e_dy)));
      handle_release();
      return 1;
    
 
  case FL_RELEASE:
    handle_release();
    return 1;
  case FL_KEYBOARD :
    switch (Fl::event_key()) {
      case FL_Up:
        if (horizontal()) return 0;
        handle_push();
        handle_drag(clamp(increment(value(),-1)));
        handle_release();
        return 1;
      case FL_Down:
        if (horizontal()) return 0;
        handle_push();
        handle_drag(clamp(increment(value(),1)));
        handle_release();
        return 1;
      case FL_Left:
        if (!horizontal()) return 0;
        handle_push();
        handle_drag(clamp(increment(value(),-1)));
        handle_release();
        return 1;
      case FL_Right:
        if (!horizontal()) return 0;
        handle_push();
        handle_drag(clamp(increment(value(),1)));
        handle_release();
        return 1;
      default:
        return 0;
    }
    // break not required because of switch...
  case FL_FOCUS :
  case FL_UNFOCUS :
    if (Fl::visible_focus()) {
      redraw();
      return 1;
    } else return 0;
  case FL_ENTER :
  case FL_LEAVE :
    return 1;
  default:
    return 0;
  }
}

void SliderW::draw() {
  int X,Y,W,H;





int sxx = x(), syy = y(), sww = w(), shh = h();
int bxx = x(), byy = y(), bww = w(), bhh = h();
 
  if (horizontal()) {
    bww = 35; sxx += 35; sww -= 35;
  } else {
    syy += 25; bhh = 25; shh -= 25;
  }
 

//  if (damage()&FL_DAMAGE_ALL) draw_box(box(),sxx,syy,sww,shh,back_color);

                  X=sxx+Fl::box_dx(box());
                  Y=syy+Fl::box_dy(box());
                  W=sww-Fl::box_dw(box());
                  H=shh-Fl::box_dh(box());
 
 
 
 
  double val;
  if (minimum() == maximum())
    val = 0.5;
  else {
    val = (value()-minimum())/(maximum()-minimum());
    if (val > 1.0) val = 1.0;
    else if (val < 0.0) val = 0.0;
  }

 int ww = (horizontal() ? W : H);
  int xx, S;

    S = int(.25*ww+.5)+1;
    // S= 1;
 
    int T = (horizontal() ? H : W)/2+1;
    if (type()==FL_VERT_NICE_SLIDER || type()==FL_HOR_NICE_SLIDER) T += 12;
    // if (S < T) S = T;
   
    xx = int(val*(ww-S)+.5);
  
  int xsl, ysl, wsl, hsl;
  if (horizontal()) {
    xsl = X+xx;
    wsl = S-4;
    ysl = Y;
    hsl = H-1;
  } else {
    ysl = Y+xx;
    hsl = S;
    xsl = X;
    wsl = W-1;
  }


  fl_push_clip(X, Y, W, H);
 
  back->draw(X,Y);
    
  fl_pop_clip();

  Fl_Color black = active_r() ? FL_FOREGROUND_COLOR : FL_INACTIVE_COLOR;
 
  if (type() == FL_VERT_NICE_SLIDER) {
   draw_box(FL_THIN_DOWN_BOX, X+W/2-2, Y, 4, H, black);
   } else if (type() == FL_HOR_NICE_SLIDER) {
     draw_box(FL_THIN_DOWN_BOX, X, Y+H/2-2, W-4, 4, black);
  }
 
 
 //Line to the knob --- I dont like 

/*
 
 if (type() == FL_VERT_NICE_SLIDER) {
   draw_box(FL_THIN_DOWN_BOX, X+W/2-2, ysl, 3,Y+H-ysl , fl_darker(leds_color));
  }
  else
  {
    draw_box(FL_THIN_DOWN_BOX, X, Y+H/2-2,xsl-X,3, fl_darker(leds_color));
  }  
  
*/  
  
  
  Fl_Color juan,pepe;
  float vval=fabsf((float)val);
  
  juan = fl_color_average(fl_darker(leds_color),fl_lighter(leds_color),vval);
  pepe = fl_color_average(fl_lighter(leds_color),fl_darker(leds_color),vval);
  
  

 Fl_Boxtype box1 = slider();
   

  if (!box1) {box1 = (Fl_Boxtype)(box()&-2); if (!box1) box1 = FL_UP_BOX;}
  if (type() == FL_VERT_NICE_SLIDER) {
     
    draw_box(box1, xsl, ysl, wsl, hsl, fore_color);
    int d = (hsl-4)/2;
   
    draw_box(FL_THIN_DOWN_BOX, xsl+2, ysl+d, wsl-4, hsl-2*d,juan);
  } else if (type() == FL_HOR_NICE_SLIDER) {
    draw_box(box1, xsl, ysl, wsl, hsl, fore_color);
    int d = (wsl-4)/2;
    draw_box(FL_THIN_DOWN_BOX, xsl+d, ysl+2, wsl-2*d, hsl-4,pepe);
  } else {
    if (wsl>0 && hsl>0) draw_box(box1, xsl, ysl, wsl, hsl, juan);


    if (type()!=FL_HOR_FILL_SLIDER && type() != FL_VERT_FILL_SLIDER &&
        Fl::scheme_ && !strcmp(Fl::scheme_, "gtk+")) {
 

 
      if (W>H && wsl>(hsl+8)) {
        // Draw horizontal grippers
        int yy, hh;
        hh = hsl-8;
        xx = xsl+(wsl-hsl-4)/2;
        yy = ysl+3;

        fl_color(fl_darker(pepe));
        fl_line(xx, yy+hh, xx+hh, yy);
        fl_line(xx+6, yy+hh, xx+hh+6, yy);
        fl_line(xx+12, yy+hh, xx+hh+12, yy);

        xx++;
        fl_color(fl_lighter(pepe));
        fl_line(xx, yy+hh, xx+hh, yy);
        fl_line(xx+6, yy+hh, xx+hh+6, yy);
        fl_line(xx+12, yy+hh, xx+hh+12, yy);
      } else if (H>W && hsl>(wsl+8)) {
        // Draw vertical grippers
        int yy;
        xx = xsl+4;
        ww = wsl-8;
        yy = ysl+(hsl-wsl-4)/2;

        fl_color(fl_darker(juan));
        fl_line(xx, yy+ww, xx+ww, yy);
        fl_line(xx, yy+ww+6, xx+ww, yy+6);
        fl_line(xx, yy+ww+12, xx+ww, yy+12);



        yy++;
        fl_color(fl_lighter(juan));
        fl_line(xx, yy+ww, xx+ww, yy);
        fl_line(xx, yy+ww+6, xx+ww, yy+6);
        fl_line(xx, yy+ww+12, xx+ww, yy+12);
      }
    }
 
      
  }

  
  labelcolor(label_color);
 
  draw_label(xsl, ysl, wsl, hsl);


   
  if (Fl::focus() == this) {
    if (type() == FL_HOR_FILL_SLIDER || type() == FL_VERT_FILL_SLIDER) draw_focus();
    else draw_focus(box1, xsl, ysl, wsl, hsl);
  }
  
/*  if (( Fl::scheme_) && (strcmp(Fl::scheme_, "plastic")==0)) 
  {
  
  
   if (type() == FL_HOR_NICE_SLIDER)
     back->draw(bxx+2,byy);
     
   else
     back->draw(bxx,byy); 
  
   }
   else
    back->draw(bxx,byy);
*/    
  char buf[128];
  format(buf);
  fl_font(textfont(), textsize());
  if (( Fl::scheme_) && (strcmp(Fl::scheme_, "plastic")==0)) 
  fl_color(active_r() ? label_color: fl_inactive(textcolor()));
  else
  fl_color(active_r() ? textcolor(): fl_inactive(textcolor()));
  fl_draw(buf, bxx, byy, bww, bhh, FL_ALIGN_CLIP ,back);
   fl_draw(buf, bxx, byy, bww, bhh, FL_ALIGN_CLIP);
}

void RKRGUI::cb_Principal_i(Fl_Double_Window*, void*) {
  is_modified();
save_stat(0);
Pexitprogram=1;
}
void RKRGUI::cb_Principal(Fl_Double_Window* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_Principal_i(o,v);
}

void RKRGUI::cb_Menu_New_i(Fl_Menu_*, void*) {
  S_new->do_callback();
}
void RKRGUI::cb_Menu_New(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Menu_New_i(o,v);
}

void RKRGUI::cb_Load_Preset_i(Fl_Menu_*, void*) {
  L_preset->do_callback();
}
void RKRGUI::cb_Load_Preset(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Load_Preset_i(o,v);
}

void RKRGUI::cb_Save_Preset_i(Fl_Menu_*, void*) {
  S_preset->do_callback();
}
void RKRGUI::cb_Save_Preset(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Save_Preset_i(o,v);
}

void RKRGUI::cb_Load_Bank_M_i(Fl_Menu_* o, void*) {
  Load_Bank->do_callback(o);
}
void RKRGUI::cb_Load_Bank_M(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Load_Bank_M_i(o,v);
}

void RKRGUI::cb_Save_Bank_M_i(Fl_Menu_* o, void*) {
  Save_Bank->do_callback(o);
}
void RKRGUI::cb_Save_Bank_M(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Save_Bank_M_i(o,v);
}

void RKRGUI::cb_Load_Skin_i(Fl_Menu_*, void*) {
  char *filename;
filename=fl_file_chooser("Load Skin:","(*.rkrs)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkrs");
int last = rkr->relfontsize;
rkr->loadskin(filename);
Put_Skin(last);
}
void RKRGUI::cb_Load_Skin(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Load_Skin_i(o,v);
}

void RKRGUI::cb_Save_Skin_i(Fl_Menu_*, void*) {
  char *filename;
#define EXT ".rkrs"
filename=fl_file_chooser("Save Skin:","(*"EXT")","",0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
#undef EXT

rkr->slabel_color = (int) label_color;
rkr->sback_color = (int) back_color;
rkr->sfore_color = (int) fore_color;
rkr->sleds_color = (int) leds_color;
rkr->sh = (int) Principal->h();
rkr->sschema = scheme_ch->value();


rkr->saveskin(filename);
}
void RKRGUI::cb_Save_Skin(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Save_Skin_i(o,v);
}

void RKRGUI::cb_salir_i(Fl_Menu_*, void*) {
  Principal->do_callback();
}
void RKRGUI::cb_salir(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_salir_i(o,v);
}

void RKRGUI::cb_Bank_Menu_i(Fl_Menu_*, void*) {
  B_preset->do_callback();
}
void RKRGUI::cb_Bank_Menu(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Bank_Menu_i(o,v);
}

void RKRGUI::cb_Ajustes_i(Fl_Menu_*, void*) {
  MiraClientes();
MiraConfig();
Settings->show();
put_icon(Settings);
}
void RKRGUI::cb_Ajustes(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Ajustes_i(o,v);
}

void RKRGUI::cb_ML_Menu_i(Fl_Menu_*, void*) {
  FillML(0);
MIDILearn->show();
put_icon(MIDILearn);
}
void RKRGUI::cb_ML_Menu(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_ML_Menu_i(o,v);
}

void RKRGUI::cb_Contenido_i(Fl_Menu_*, void*) {
  show_help();
}
void RKRGUI::cb_Contenido(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Contenido_i(o,v);
}

void RKRGUI::cb_Acerca_de_i(Fl_Menu_*, void*) {
  int x,y;

x = Principal->x()+((Principal->w()-420)/2);
y = Principal->y()+((Principal->h()-230)/2);

AboutWin->position(x,y);
AboutWin->show();
put_icon(AboutWin);
}
void RKRGUI::cb_Acerca_de(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Acerca_de_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_MenuP[] = {
 {gettext("&File"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 7},
 {gettext("New"), 0,  (Fl_Callback*)RKRGUI::cb_Menu_New, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Load Preset"), 0,  (Fl_Callback*)RKRGUI::cb_Load_Preset, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Save Preset"), 0,  (Fl_Callback*)RKRGUI::cb_Save_Preset, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Load Bank"), 0,  (Fl_Callback*)RKRGUI::cb_Load_Bank_M, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Save Bank"), 0,  (Fl_Callback*)RKRGUI::cb_Save_Bank_M, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Load Skin"), 0,  (Fl_Callback*)RKRGUI::cb_Load_Skin, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Save Skin"), 0,  (Fl_Callback*)RKRGUI::cb_Save_Skin, 0, 128, FL_NORMAL_LABEL, 0, 14, 7},
 {gettext("Exit"), 0,  (Fl_Callback*)RKRGUI::cb_salir, 0, 0, FL_NORMAL_LABEL, 0, 14, 7},
 {0,0,0,0,0,0,0,0,0},
 {gettext("&Bank"), 0x62,  (Fl_Callback*)RKRGUI::cb_Bank_Menu, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("&Settings"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Preferences"), 0x69,  (Fl_Callback*)RKRGUI::cb_Ajustes, 0, 128, FL_NORMAL_LABEL, 0, 14, 7},
 {gettext("MIDI Learn"), 0x65,  (Fl_Callback*)RKRGUI::cb_ML_Menu, 0, 0, FL_NORMAL_LABEL, 0, 14, 7},
 {0,0,0,0,0,0,0,0,0},
 {gettext("&Help"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 7},
 {gettext("Help Contents"), 0xffbe,  (Fl_Callback*)RKRGUI::cb_Contenido, 0, 128, FL_NORMAL_LABEL, 0, 14, 7},
 {gettext("About..."), 0,  (Fl_Callback*)RKRGUI::cb_Acerca_de, 0, 128, FL_NORMAL_LABEL, 0, 14, 7},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* RKRGUI::Archivo = RKRGUI::menu_MenuP + 0;
Fl_Menu_Item* RKRGUI::Menu_New = RKRGUI::menu_MenuP + 1;
Fl_Menu_Item* RKRGUI::Load_Preset = RKRGUI::menu_MenuP + 2;
Fl_Menu_Item* RKRGUI::Save_Preset = RKRGUI::menu_MenuP + 3;
Fl_Menu_Item* RKRGUI::Load_Bank_M = RKRGUI::menu_MenuP + 4;
Fl_Menu_Item* RKRGUI::Save_Bank_M = RKRGUI::menu_MenuP + 5;
Fl_Menu_Item* RKRGUI::Load_Skin = RKRGUI::menu_MenuP + 6;
Fl_Menu_Item* RKRGUI::Save_Skin = RKRGUI::menu_MenuP + 7;
Fl_Menu_Item* RKRGUI::salir = RKRGUI::menu_MenuP + 8;
Fl_Menu_Item* RKRGUI::Bank_Menu = RKRGUI::menu_MenuP + 10;
Fl_Menu_Item* RKRGUI::Ajustes = RKRGUI::menu_MenuP + 12;
Fl_Menu_Item* RKRGUI::ML_Menu = RKRGUI::menu_MenuP + 13;
Fl_Menu_Item* RKRGUI::Ayuda = RKRGUI::menu_MenuP + 15;
Fl_Menu_Item* RKRGUI::Contenido = RKRGUI::menu_MenuP + 16;
Fl_Menu_Item* RKRGUI::Acerca_de = RKRGUI::menu_MenuP + 17;

void RKRGUI::cb_MT_i(Fl_Box*, void*) {
  if (rkr->Tuner_Bypass)
{

if(rkr->efx_Tuner->note_actual != rkr->note_old)
{
char notas[3];
sprintf(notas,"%-2s",rkr->efx_Tuner->notes[rkr->efx_Tuner->note_actual]);
WNote->copy_label(notas);
rkr->note_old=rkr->efx_Tuner->note_actual;
}

if(rkr->efx_Tuner->nfreq != rkr->nfreq_old)
{
char refreq[60];
sprintf(refreq,"%8.3f",rkr->efx_Tuner->nfreq);
WRfreq->copy_label(refreq);
rkr->nfreq_old=rkr->efx_Tuner->nfreq;
}

if(rkr->efx_Tuner->afreq != rkr->afreq_old)
{
char nofreq[60];
sprintf(nofreq,"%8.3f",rkr->efx_Tuner->afreq);
if (abs(rkr->efx_Tuner->cents)>5) WNfreq->labelcolor(FL_RED); else WNfreq->labelcolor(label_color);
WNfreq->copy_label(nofreq);
rkr->afreq_old=rkr->efx_Tuner->afreq;
}


if(rkr->efx_Tuner->cents != rkr->cents_old)
{
tuner_bar->value(rkr->efx_Tuner->cents);
rkr->cents_old=rkr->efx_Tuner->cents;
}

}



if (Principal->w() != rkr->resolution) adjustfont();


if (preset!=1000)
{
 Preset_Counter->value(preset);
 Preset_Counter->do_callback();
 preset=1000;
}

ActMIDI();

if (rkr->Bypass)
{ 
  if (rkr->val_i_sum != rkr->old_i_sum)
  {
  input_vu->value(rkr->val_i_sum);
  rkr->old_i_sum=rkr->val_i_sum;
  }
  
  if (rkr->val_v_sum != rkr->old_v_sum)
  {
  output_vu->value(rkr->val_v_sum);
  rkr->old_v_sum=rkr->val_v_sum;
  }



if (Scope_ON)Sco->redraw();

if (nt)
  { 
  nt = 0;
  Sco->hide();
  TITTLE_L->show();
  TITTLE_L->redraw();
  DESC_L->redraw();
  }  


if (Analyzer_ON)
{ 
 at++;
 if(at==3)
   { Analy->redraw();
     at=0; 
   }
}

if(tta)
{
 tta=0;
 Analy->hide();
 Etit->show();
 Etit->redraw();
}  


}

if (rkr->MIDIConverter_Bypass)
{
  if ((rkr->efx_MIDIConverter->hay) && ( (int) Mled->color() != (int) fl_lighter(FL_RED)))
  
     {
       Mled->color(fl_lighter(FL_RED));
       Mled->redraw();
     }  
  
  if ((!rkr->efx_MIDIConverter->hay) && ( (int) Mled->color() != (int) fl_darker(FL_RED)))   
     {  
     Mled->color(fl_darker(FL_RED));
     Mled->redraw();
     } 
}


if (rkr->Harmonizer_Bypass)
{

    if((rkr->efx_Har->PSELECT)|| (rkr->efx_Har->PMIDI))
     {

    if (rkr->RC->cc) 
    {
    har_chordname->copy_label(rkr->RC->NombreAcorde);
    rkr->RC->cc=0;  
    har_chordname->redraw(); 
    rkr->RC->Vamos(rkr->efx_Har->Pinterval-12);      
    }
     }

}


if (rkr->RControl)
{ 
   rkr->CountWait++;
   if (rkr->CountWait==25)
      {
        GMM->color(leds_color);
        GMM->redraw();
       } 
        
   if (rkr->CountWait==50)
       {
         GMM->color(fore_color); 
         GMM->redraw();
         rkr->CountWait=0;
       } 
      

  if (rkr->ControlGet != 0)
    {
      rkr->RControl = 0;
      Disp_Control->value(rkr->ControlGet);
      Disp_Control->redraw();
      GMM->color(fore_color);
      GMM->redraw();
    }   
};
}
void RKRGUI::cb_MT(Fl_Box* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_MT_i(o,v);
}

void RKRGUI::cb_TITTLE_L_i(Fl_Button* o, void*) {
  if(rkr->Bypass)
{
o->hide();
Sco->show();
Scope_ON=1;
};
}
void RKRGUI::cb_TITTLE_L(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_TITTLE_L_i(o,v);
}

void RKRGUI::cb_eq_activar_i(Fl_Light_Button* o, void*) {
  rkr->EQ1_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_EQ1->cleanup();
findpos(0,(int)o->value());
}
void RKRGUI::cb_eq_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eq_activar_i(o,v);
}

void RKRGUI::cb_eq_preset_i(Fl_Choice* o, void*) {
  int i=0;
i=rkr->EQ1_setpreset(0,0,(unsigned char)o->value());
eq_1->value(rkr->EQ1_setpreset(1,0,(unsigned char)o->value())-64);
eq_2->value(rkr->EQ1_setpreset(1,1,(unsigned char)o->value())-64);
eq_3->value(rkr->EQ1_setpreset(1,2,(unsigned char)o->value())-64);
eq_4->value(rkr->EQ1_setpreset(1,3,(unsigned char)o->value())-64);
eq_5->value(rkr->EQ1_setpreset(1,4,(unsigned char)o->value())-64);
eq_6->value(rkr->EQ1_setpreset(1,5,(unsigned char)o->value())-64);
eq_7->value(rkr->EQ1_setpreset(1,6,(unsigned char)o->value())-64);
eq_8->value(rkr->EQ1_setpreset(1,7,(unsigned char)o->value())-64);
eq_9->value(rkr->EQ1_setpreset(1,8,(unsigned char)o->value())-64);
eq_10->value(rkr->EQ1_setpreset(1,9,(unsigned char)o->value())-64);
eq_Gain->value(rkr->EQ1_setpreset(1,10,(unsigned char)o->value())-64);
eq_Q->value(rkr->EQ1_setpreset(1,11,(unsigned char)o->value())-64);
}
void RKRGUI::cb_eq_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eq_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_eq_preset[] = {
 {gettext("Plain"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Pop"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Jazz"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_eq_Gain_i(SliderW* o, void*) {
  rkr->efx_EQ1->changepar(0,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eq_Gain(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eq_Gain_i(o,v);
}

void RKRGUI::cb_eq_Q_i(SliderW* o, void*) {
  int i;
for(i=0;i<10;i++) rkr->efx_EQ1->changepar(i*5+13,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eq_Q(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eq_Q_i(o,v);
}

void RKRGUI::cb_eq_1_i(SliderW* o, void*) {
  rkr->efx_EQ1->changepar(12,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eq_1(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eq_1_i(o,v);
}

void RKRGUI::cb_eq_2_i(SliderW* o, void*) {
  rkr->efx_EQ1->changepar(5+12,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eq_2(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eq_2_i(o,v);
}

void RKRGUI::cb_eq_3_i(SliderW* o, void*) {
  rkr->efx_EQ1->changepar(10+12,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eq_3(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eq_3_i(o,v);
}

void RKRGUI::cb_eq_4_i(SliderW* o, void*) {
  rkr->efx_EQ1->changepar(15+12,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eq_4(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eq_4_i(o,v);
}

void RKRGUI::cb_eq_5_i(SliderW* o, void*) {
  rkr->efx_EQ1->changepar(20+12,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eq_5(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eq_5_i(o,v);
}

void RKRGUI::cb_eq_6_i(SliderW* o, void*) {
  rkr->efx_EQ1->changepar(25+12,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eq_6(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eq_6_i(o,v);
}

void RKRGUI::cb_eq_7_i(SliderW* o, void*) {
  rkr->efx_EQ1->changepar(30+12,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eq_7(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eq_7_i(o,v);
}

void RKRGUI::cb_eq_8_i(SliderW* o, void*) {
  rkr->efx_EQ1->changepar(35+12,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eq_8(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eq_8_i(o,v);
}

void RKRGUI::cb_eq_9_i(SliderW* o, void*) {
  rkr->efx_EQ1->changepar(40+12,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eq_9(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eq_9_i(o,v);
}

void RKRGUI::cb_eq_10_i(SliderW* o, void*) {
  rkr->efx_EQ1->changepar(45+12,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eq_10(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eq_10_i(o,v);
}

void RKRGUI::cb_compress_activar_i(Fl_Light_Button* o, void*) {
  rkr->Compressor_Bypass=(int)o->value();
rkr->efx_Compressor->cleanup();
findpos(1,(int)o->value());
}
void RKRGUI::cb_compress_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_compress_activar_i(o,v);
}

void RKRGUI::cb_compress_preset_i(Fl_Choice* o, void*) {
  rkr->efx_Compressor->Compressor_Change_Preset((int) o->value());
compress_ATime->value(rkr->efx_Compressor->getpar(4));
compress_RTime->value(rkr->efx_Compressor->getpar(5));
compress_Ratio->value(rkr->efx_Compressor->getpar(2));
compress_Knee->value(rkr->efx_Compressor->getpar(7));
compress_threshold->value(rkr->efx_Compressor->getpar(1));
compress_output->value(rkr->efx_Compressor->getpar(3));
Auto_Output->value(rkr->efx_Compressor->getpar(6));
Stereo->value(rkr->efx_Compressor->getpar(8));
}
void RKRGUI::cb_compress_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_compress_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_compress_preset[] = {
 {gettext("2:1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("4:1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("8:1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_compress_ATime_i(SliderW* o, void*) {
  rkr->efx_Compressor->Compressor_Change(4,(int)o->value());
}
void RKRGUI::cb_compress_ATime(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_compress_ATime_i(o,v);
}

void RKRGUI::cb_compress_RTime_i(SliderW* o, void*) {
  rkr->efx_Compressor->Compressor_Change(5, (int) o->value());
}
void RKRGUI::cb_compress_RTime(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_compress_RTime_i(o,v);
}

void RKRGUI::cb_compress_Ratio_i(SliderW* o, void*) {
  rkr->efx_Compressor->Compressor_Change(2, (int) o->value());
}
void RKRGUI::cb_compress_Ratio(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_compress_Ratio_i(o,v);
}

void RKRGUI::cb_compress_Knee_i(SliderW* o, void*) {
  rkr->efx_Compressor->Compressor_Change(7, (int) o->value());
}
void RKRGUI::cb_compress_Knee(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_compress_Knee_i(o,v);
}

void RKRGUI::cb_compress_threshold_i(SliderW* o, void*) {
  rkr->efx_Compressor->Compressor_Change(1, (int)o->value());
}
void RKRGUI::cb_compress_threshold(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_compress_threshold_i(o,v);
}

void RKRGUI::cb_compress_output_i(SliderW* o, void*) {
  rkr->efx_Compressor->Compressor_Change(3,(int)o->value());
}
void RKRGUI::cb_compress_output(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_compress_output_i(o,v);
}

void RKRGUI::cb_Auto_Output_i(Fl_Check_Button* o, void*) {
  rkr->efx_Compressor->Compressor_Change(6,(int)o->value());
if ((int) o->value() == 0) compress_output->do_callback();
}
void RKRGUI::cb_Auto_Output(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Auto_Output_i(o,v);
}

void RKRGUI::cb_Stereo_i(Fl_Check_Button* o, void*) {
  rkr->efx_Compressor->Compressor_Change(8,(int)o->value());
if ((int) o->value() == 0) compress_output->do_callback();
}
void RKRGUI::cb_Stereo(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Stereo_i(o,v);
}

void RKRGUI::cb_dist_activar_i(Fl_Light_Button* o, void*) {
  rkr->Distorsion_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Distorsion->cleanup();
findpos(2,(int)o->value());
}
void RKRGUI::cb_dist_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dist_activar_i(o,v);
}

void RKRGUI::cb_dist_preset_i(Fl_Choice* o, void*) {
  rkr->efx_Distorsion->setpreset((unsigned char)(o->value()+2));
dist_WD->value(rkr->efx_Distorsion->getpar(0)-64);
dist_LRc->value(rkr->efx_Distorsion->getpar(2)-64);
dist_drive->value(rkr->efx_Distorsion->getpar(3));
dist_level->value(rkr->efx_Distorsion->getpar(4));
dist_tipo->value(rkr->efx_Distorsion->getpar(5));
dist_neg->value(rkr->efx_Distorsion->getpar(6));
dist_st->value(rkr->efx_Distorsion->getpar(9));
dist_pan->value(rkr->efx_Distorsion->getpar(1)-64);
dist_pf->value(rkr->efx_Distorsion->getpar(10));
dist_lpf->value(rkr->efx_Distorsion->getpar(7));
dist_hpf->value(rkr->efx_Distorsion->getpar(8));
dist_oct->value(rkr->efx_Distorsion->getpar(12));
}
void RKRGUI::cb_dist_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dist_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_dist_preset[] = {
 {gettext("Distorsion 1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Distorsion 2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Distorsion 3"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Guitar Amp"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_dist_WD_i(SliderW* o, void*) {
  rkr->efx_Distorsion->changepar(0,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_dist_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dist_WD_i(o,v);
}

void RKRGUI::cb_dist_LRc_i(SliderW* o, void*) {
  rkr->efx_Distorsion->changepar(2,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_dist_LRc(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dist_LRc_i(o,v);
}

void RKRGUI::cb_dist_drive_i(SliderW* o, void*) {
  rkr->efx_Distorsion->changepar(3,(unsigned char)o->value());
}
void RKRGUI::cb_dist_drive(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dist_drive_i(o,v);
}

void RKRGUI::cb_dist_level_i(SliderW* o, void*) {
  rkr->efx_Distorsion->changepar(4,(unsigned char)o->value());
}
void RKRGUI::cb_dist_level(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dist_level_i(o,v);
}

void RKRGUI::cb_dist_tipo_i(Fl_Choice* o, void*) {
  rkr->efx_Distorsion->changepar(5,(unsigned char)o->value());
}
void RKRGUI::cb_dist_tipo(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dist_tipo_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_dist_tipo[] = {
 {gettext("Atan"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Asym1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Pow"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Sine"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Qnts"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Zigzg"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Lmt"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("LmtU"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("LmtL"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("ILmt"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Clip"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Asym2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Pow2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Sgm"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Crunch"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Hard Crunch"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Dirty Octave+"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M.Square"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M.Saw"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_dist_neg_i(Fl_Check_Button* o, void*) {
  rkr->efx_Distorsion->changepar(6,(unsigned char)o->value());
}
void RKRGUI::cb_dist_neg(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dist_neg_i(o,v);
}

void RKRGUI::cb_dist_pf_i(Fl_Check_Button* o, void*) {
  rkr->efx_Distorsion->changepar(10,(unsigned char)o->value());
}
void RKRGUI::cb_dist_pf(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dist_pf_i(o,v);
}

void RKRGUI::cb_dist_st_i(Fl_Check_Button* o, void*) {
  rkr->efx_Distorsion->changepar(9,(unsigned char)o->value());
}
void RKRGUI::cb_dist_st(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dist_st_i(o,v);
}

void RKRGUI::cb_dist_pan_i(SliderW* o, void*) {
  rkr->efx_Distorsion->changepar(1,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_dist_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dist_pan_i(o,v);
}

void RKRGUI::cb_dist_oct_i(SliderW* o, void*) {
  rkr->efx_Distorsion->changepar(12,(unsigned char)o->value());
}
void RKRGUI::cb_dist_oct(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dist_oct_i(o,v);
}

void RKRGUI::cb_dist_lpf_i(SliderW* o, void*) {
  rkr->efx_Distorsion->changepar(7,(unsigned char)o->value());
}
void RKRGUI::cb_dist_lpf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dist_lpf_i(o,v);
}

void RKRGUI::cb_dist_hpf_i(SliderW* o, void*) {
  rkr->efx_Distorsion->changepar(8,(unsigned char)o->value());
}
void RKRGUI::cb_dist_hpf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dist_hpf_i(o,v);
}

void RKRGUI::cb_ovrd_activar_i(Fl_Light_Button* o, void*) {
  rkr->Overdrive_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Overdrive->cleanup();
findpos(3,(int)o->value());
}
void RKRGUI::cb_ovrd_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ovrd_activar_i(o,v);
}

void RKRGUI::cb_ovrd_preset_i(Fl_Choice* o, void*) {
  rkr->efx_Overdrive->setpreset((unsigned char) o->value());
ovrd_WD->value(rkr->efx_Overdrive->getpar(0)-64);
ovrd_LRc->value(rkr->efx_Overdrive->getpar(2)-64);
ovrd_drive->value(rkr->efx_Overdrive->getpar(3));
ovrd_level->value(rkr->efx_Overdrive->getpar(4));
ovrd_tipo->value(rkr->efx_Overdrive->getpar(5));
ovrd_neg->value(rkr->efx_Overdrive->getpar(6));
ovrd_st->value(rkr->efx_Overdrive->getpar(9));
ovrd_pan->value(rkr->efx_Overdrive->getpar(1)-64);
ovrd_pf->value(rkr->efx_Overdrive->getpar(10));
ovrd_lpf->value(rkr->efx_Overdrive->getpar(7));
ovrd_hpf->value(rkr->efx_Overdrive->getpar(8));
}
void RKRGUI::cb_ovrd_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ovrd_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_ovrd_preset[] = {
 {gettext("Overdrive 1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Overdrive 2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_ovrd_WD_i(SliderW* o, void*) {
  rkr->efx_Overdrive->changepar(0,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_ovrd_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ovrd_WD_i(o,v);
}

void RKRGUI::cb_ovrd_LRc_i(SliderW* o, void*) {
  rkr->efx_Overdrive->changepar(2,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_ovrd_LRc(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ovrd_LRc_i(o,v);
}

void RKRGUI::cb_ovrd_drive_i(SliderW* o, void*) {
  rkr->efx_Overdrive->changepar(3,(unsigned char)o->value());
}
void RKRGUI::cb_ovrd_drive(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ovrd_drive_i(o,v);
}

void RKRGUI::cb_ovrd_level_i(SliderW* o, void*) {
  rkr->efx_Overdrive->changepar(4,(unsigned char)o->value());
}
void RKRGUI::cb_ovrd_level(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ovrd_level_i(o,v);
}

void RKRGUI::cb_ovrd_tipo_i(Fl_Choice* o, void*) {
  rkr->efx_Overdrive->changepar(5,(unsigned char)o->value());
}
void RKRGUI::cb_ovrd_tipo(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ovrd_tipo_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_ovrd_tipo[] = {
 {gettext("Atan"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Asym1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Pow"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Sine"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Qnts"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Zigzg"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Lmt"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("LmtU"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("LmtL"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("ILmt"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Clip"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Asym2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Pow2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Sgm"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Crunch"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Hard Crunch"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Dirty Octave+"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M.Square"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M.Saw"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_ovrd_neg_i(Fl_Check_Button* o, void*) {
  rkr->efx_Overdrive->changepar(6,(unsigned char)o->value());
}
void RKRGUI::cb_ovrd_neg(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ovrd_neg_i(o,v);
}

void RKRGUI::cb_ovrd_st_i(Fl_Check_Button* o, void*) {
  rkr->efx_Overdrive->changepar(9,(unsigned char)o->value());
}
void RKRGUI::cb_ovrd_st(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ovrd_st_i(o,v);
}

void RKRGUI::cb_ovrd_pan_i(SliderW* o, void*) {
  rkr->efx_Overdrive->changepar(1,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_ovrd_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ovrd_pan_i(o,v);
}

void RKRGUI::cb_ovrd_pf_i(Fl_Check_Button* o, void*) {
  rkr->efx_Overdrive->changepar(10,(unsigned char)o->value());
}
void RKRGUI::cb_ovrd_pf(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ovrd_pf_i(o,v);
}

void RKRGUI::cb_ovrd_lpf_i(SliderW* o, void*) {
  rkr->efx_Overdrive->changepar(7,(unsigned char)o->value());
}
void RKRGUI::cb_ovrd_lpf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ovrd_lpf_i(o,v);
}

void RKRGUI::cb_ovrd_hpf_i(SliderW* o, void*) {
  rkr->efx_Overdrive->changepar(8,(unsigned char)o->value());
}
void RKRGUI::cb_ovrd_hpf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ovrd_hpf_i(o,v);
}

void RKRGUI::cb_echo_activar_i(Fl_Light_Button* o, void*) {
  rkr->Echo_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Echo->cleanup();
findpos(4,(int)o->value());
}
void RKRGUI::cb_echo_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_echo_activar_i(o,v);
}

void RKRGUI::cb_echo_preset_i(Fl_Choice* o, void*) {
  rkr->Echo_Bypass=0;
rkr->efx_Echo->setpreset((unsigned char) o->value());
echo_WD->value(rkr->efx_Echo->getpar(0)-64);
echo_pan->value(rkr->efx_Echo->getpar(1)-64);
echo_delay->value(rkr->efx_Echo->getpar(2));
echo_LRdl->value(rkr->efx_Echo->getpar(3));
echo_LRc->value(rkr->efx_Echo->getpar(4)-64);
echo_fb->value(rkr->efx_Echo->getpar(5));
echo_damp->value(rkr->efx_Echo->getpar(6));
echo_RV->value(rkr->efx_Echo->getpar(7));
if((int)echo_activar->value())rkr->Echo_Bypass=1;
}
void RKRGUI::cb_echo_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_echo_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_echo_preset[] = {
 {gettext("Echo 1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Echo 2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Echo 3"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Simple Echo"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Canyon"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Panning Echo 1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Panning Echo 2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Panning Echo 3"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Feedback Echo"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_echo_WD_i(SliderW* o, void*) {
  rkr->efx_Echo->changepar(0,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_echo_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_echo_WD_i(o,v);
}

void RKRGUI::cb_echo_RV_i(SliderW* o, void*) {
  rkr->efx_Echo->changepar(7,(unsigned char)o->value());
}
void RKRGUI::cb_echo_RV(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_echo_RV_i(o,v);
}

void RKRGUI::cb_echo_pan_i(SliderW* o, void*) {
  rkr->efx_Echo->changepar(1,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_echo_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_echo_pan_i(o,v);
}

void RKRGUI::cb_echo_delay_i(SliderW* o, void*) {
  rkr->Echo_Bypass=0;
rkr->efx_Echo->changepar(2,(unsigned char)o->value());
if((int)echo_activar->value())rkr->Echo_Bypass=1;
}
void RKRGUI::cb_echo_delay(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_echo_delay_i(o,v);
}

void RKRGUI::cb_echo_LRdl_i(SliderW* o, void*) {
  rkr->Echo_Bypass=0;
rkr->efx_Echo->changepar(3,(unsigned char)o->value());
if((int)echo_activar->value())rkr->Echo_Bypass=1;
}
void RKRGUI::cb_echo_LRdl(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_echo_LRdl_i(o,v);
}

void RKRGUI::cb_echo_LRc_i(SliderW* o, void*) {
  rkr->efx_Echo->changepar(4,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_echo_LRc(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_echo_LRc_i(o,v);
}

void RKRGUI::cb_echo_fb_i(SliderW* o, void*) {
  rkr->efx_Echo->changepar(5,(unsigned char)o->value());
}
void RKRGUI::cb_echo_fb(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_echo_fb_i(o,v);
}

void RKRGUI::cb_echo_damp_i(SliderW* o, void*) {
  rkr->efx_Echo->changepar(6,(unsigned char)o->value());
}
void RKRGUI::cb_echo_damp(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_echo_damp_i(o,v);
}

void RKRGUI::cb_chorus_activar_i(Fl_Light_Button* o, void*) {
  rkr->Chorus_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Chorus->cleanup();
findpos(5,(int)o->value());
}
void RKRGUI::cb_chorus_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_chorus_activar_i(o,v);
}

void RKRGUI::cb_chorux_preset_i(Fl_Choice* o, void*) {
  rkr->efx_Chorus->setpreset((int) o->value());
chorus_WD->value(rkr->efx_Chorus->getpar(0)-64);
chorus_pan->value(rkr->efx_Chorus->getpar(1)-64);
chorus_freq->value(rkr->efx_Chorus->getpar(2));
chorus_rnd->value(rkr->efx_Chorus->getpar(3));
chorus_lfotype->value(rkr->efx_Chorus->getpar(4));
chorus_stdf->value(rkr->efx_Chorus->getpar(5));
chorus_dpth->value(rkr->efx_Chorus->getpar(6));
chorus_delay->value(rkr->efx_Chorus->getpar(7));
chorus_fb->value(rkr->efx_Chorus->getpar(8));
chorus_LR->value(rkr->efx_Chorus->getpar(9)-64);
chorus_subs->value(rkr->efx_Chorus->getpar(11));
}
void RKRGUI::cb_chorux_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_chorux_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_chorux_preset[] = {
 {gettext("Chorus 1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Chorus 2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Chorus 3"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Celeste 1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Celeste 2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_chorus_WD_i(SliderW* o, void*) {
  rkr->efx_Chorus->changepar(0,(int)(o->value()+64));
}
void RKRGUI::cb_chorus_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_chorus_WD_i(o,v);
}

void RKRGUI::cb_chorus_pan_i(SliderW* o, void*) {
  rkr->efx_Chorus->changepar(1,(int)(o->value()+64));
}
void RKRGUI::cb_chorus_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_chorus_pan_i(o,v);
}

void RKRGUI::cb_chorus_freq_i(SliderW* o, void*) {
  rkr->efx_Chorus->changepar(2,(int)o->value());
}
void RKRGUI::cb_chorus_freq(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_chorus_freq_i(o,v);
}

void RKRGUI::cb_chorus_rnd_i(SliderW* o, void*) {
  rkr->efx_Chorus->changepar(3,(int)o->value());
}
void RKRGUI::cb_chorus_rnd(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_chorus_rnd_i(o,v);
}

void RKRGUI::cb_chorus_lfotype_i(Fl_Choice* o, void*) {
  rkr->efx_Chorus->changepar(4,(int)o->value());
}
void RKRGUI::cb_chorus_lfotype(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_chorus_lfotype_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_chorus_lfotype[] = {
 {gettext("Sine"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Tri"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Ramp Up"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Ramp Down"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("ZigZag"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M. Sqare"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M.Saw"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_chorus_subs_i(Fl_Check_Button* o, void*) {
  rkr->efx_Chorus->changepar(11,(int)o->value());
}
void RKRGUI::cb_chorus_subs(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_chorus_subs_i(o,v);
}

void RKRGUI::cb_chorus_stdf_i(SliderW* o, void*) {
  rkr->efx_Chorus->changepar(5,(int)o->value());
}
void RKRGUI::cb_chorus_stdf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_chorus_stdf_i(o,v);
}

void RKRGUI::cb_chorus_dpth_i(SliderW* o, void*) {
  rkr->efx_Chorus->changepar(6,(int)o->value());
}
void RKRGUI::cb_chorus_dpth(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_chorus_dpth_i(o,v);
}

void RKRGUI::cb_chorus_delay_i(SliderW* o, void*) {
  rkr->efx_Chorus->changepar(7,(int)o->value());
}
void RKRGUI::cb_chorus_delay(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_chorus_delay_i(o,v);
}

void RKRGUI::cb_chorus_fb_i(SliderW* o, void*) {
  rkr->efx_Chorus->changepar(8,(int)o->value());
}
void RKRGUI::cb_chorus_fb(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_chorus_fb_i(o,v);
}

void RKRGUI::cb_chorus_LR_i(SliderW* o, void*) {
  rkr->efx_Chorus->changepar(9,(int)(o->value()+64));
}
void RKRGUI::cb_chorus_LR(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_chorus_LR_i(o,v);
}

void RKRGUI::cb_phaser_activar_i(Fl_Light_Button* o, void*) {
  rkr->Phaser_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Phaser->cleanup();
findpos(6,(int)o->value());
}
void RKRGUI::cb_phaser_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_phaser_activar_i(o,v);
}

void RKRGUI::cb_phaser_preset_i(Fl_Choice* o, void*) {
  rkr->efx_Phaser->setpreset((int) o->value());
phaser_WD->value(rkr->efx_Phaser->getpar(0)-64);
phaser_pan->value(rkr->efx_Phaser->getpar(1)-64);
phaser_freq->value(rkr->efx_Phaser->getpar(2));
phaser_rnd->value(rkr->efx_Phaser->getpar(3));
phaser_lfotype->value(rkr->efx_Phaser->getpar(4));
phaser_stdf->value(rkr->efx_Phaser->getpar(5));
phaser_dpth->value(rkr->efx_Phaser->getpar(6));
phaser_stages->value(rkr->efx_Phaser->getpar(8));
phaser_fb->value(rkr->efx_Phaser->getpar(7));
phaser_stages->value(rkr->efx_Phaser->getpar(8));
phaser_LR->value(rkr->efx_Phaser->getpar(9)-64);
phaser_subs->value(rkr->efx_Phaser->getpar(10));
phaser_phase->value(rkr->efx_Phaser->getpar(11));
}
void RKRGUI::cb_phaser_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_phaser_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_phaser_preset[] = {
 {gettext("Phaser 1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Phaser 2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Phaser 3"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Phaser 4"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Phaser 5"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Phaser 6"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_phaser_WD_i(SliderW* o, void*) {
  rkr->efx_Phaser->changepar(0,(int)(o->value()+64));
}
void RKRGUI::cb_phaser_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_phaser_WD_i(o,v);
}

void RKRGUI::cb_phaser_pan_i(SliderW* o, void*) {
  rkr->efx_Phaser->changepar(1,(int)(o->value()+64));
}
void RKRGUI::cb_phaser_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_phaser_pan_i(o,v);
}

void RKRGUI::cb_phaser_freq_i(SliderW* o, void*) {
  rkr->efx_Phaser->changepar(2,(int)o->value());
}
void RKRGUI::cb_phaser_freq(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_phaser_freq_i(o,v);
}

void RKRGUI::cb_phaser_rnd_i(SliderW* o, void*) {
  rkr->efx_Phaser->changepar(3,(int)o->value());
}
void RKRGUI::cb_phaser_rnd(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_phaser_rnd_i(o,v);
}

void RKRGUI::cb_phaser_lfotype_i(Fl_Choice* o, void*) {
  rkr->efx_Phaser->changepar(4,(int)o->value());
}
void RKRGUI::cb_phaser_lfotype(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_phaser_lfotype_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_phaser_lfotype[] = {
 {gettext("Sine"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Tri"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Ramp Up"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Ramp Down"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Zig Zag"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M.Square"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M.Saw"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_phaser_subs_i(Fl_Check_Button* o, void*) {
  rkr->efx_Phaser->changepar(10,(int)o->value());
}
void RKRGUI::cb_phaser_subs(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_phaser_subs_i(o,v);
}

void RKRGUI::cb_phaser_phase_i(SliderW* o, void*) {
  rkr->efx_Phaser->changepar(11,(int)o->value());
}
void RKRGUI::cb_phaser_phase(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_phaser_phase_i(o,v);
}

void RKRGUI::cb_phaser_stdf_i(SliderW* o, void*) {
  rkr->efx_Phaser->changepar(5,(int)o->value());
}
void RKRGUI::cb_phaser_stdf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_phaser_stdf_i(o,v);
}

void RKRGUI::cb_phaser_dpth_i(SliderW* o, void*) {
  rkr->efx_Phaser->changepar(6,(int)o->value());
}
void RKRGUI::cb_phaser_dpth(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_phaser_dpth_i(o,v);
}

void RKRGUI::cb_phaser_fb_i(SliderW* o, void*) {
  rkr->efx_Phaser->changepar(7,(int)o->value());
}
void RKRGUI::cb_phaser_fb(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_phaser_fb_i(o,v);
}

void RKRGUI::cb_phaser_stages_i(Fl_Counter* o, void*) {
  rkr->efx_Phaser->changepar(8,(int)o->value());
}
void RKRGUI::cb_phaser_stages(Fl_Counter* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_phaser_stages_i(o,v);
}

void RKRGUI::cb_phaser_LR_i(SliderW* o, void*) {
  rkr->efx_Phaser->changepar(9,(int)(o->value()+64));
}
void RKRGUI::cb_phaser_LR(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_phaser_LR_i(o,v);
}

void RKRGUI::cb_flanger_activar_i(Fl_Light_Button* o, void*) {
  rkr->Flanger_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Flanger->cleanup();
findpos(7,(int)o->value());
}
void RKRGUI::cb_flanger_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_flanger_activar_i(o,v);
}

void RKRGUI::cb_flanger_preset_i(Fl_Choice* o, void*) {
  rkr->efx_Flanger->setpreset((int)(o->value()+5));
flanger_WD->value(rkr->efx_Flanger->getpar(0)-64);
flanger_pan->value(rkr->efx_Flanger->getpar(1)-64);
flanger_freq->value(rkr->efx_Flanger->getpar(2));
flanger_rnd->value(rkr->efx_Flanger->getpar(3));
flanger_lfotype->value(rkr->efx_Flanger->getpar(4));
flanger_stdf->value(rkr->efx_Flanger->getpar(5));
flanger_dpth->value(rkr->efx_Flanger->getpar(6));
flanger_delay->value(rkr->efx_Flanger->getpar(7));
flanger_fb->value(rkr->efx_Flanger->getpar(8));
flanger_LR->value(rkr->efx_Flanger->getpar(9)-64);
flanger_subs->value(rkr->efx_Flanger->getpar(11));
}
void RKRGUI::cb_flanger_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_flanger_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_flanger_preset[] = {
 {gettext("Flange 1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Flange 2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Flange 3"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Flange 4"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Flange 5"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_flanger_WD_i(SliderW* o, void*) {
  rkr->efx_Flanger->changepar(0,(int)(o->value()+64));
}
void RKRGUI::cb_flanger_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_flanger_WD_i(o,v);
}

void RKRGUI::cb_flanger_pan_i(SliderW* o, void*) {
  rkr->efx_Flanger->changepar(1,(int)(o->value()+64));
}
void RKRGUI::cb_flanger_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_flanger_pan_i(o,v);
}

void RKRGUI::cb_flanger_freq_i(SliderW* o, void*) {
  rkr->efx_Flanger->changepar(2,(int)o->value());
}
void RKRGUI::cb_flanger_freq(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_flanger_freq_i(o,v);
}

void RKRGUI::cb_flanger_rnd_i(SliderW* o, void*) {
  rkr->efx_Flanger->changepar(3,(int)o->value());
}
void RKRGUI::cb_flanger_rnd(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_flanger_rnd_i(o,v);
}

void RKRGUI::cb_flanger_lfotype_i(Fl_Choice* o, void*) {
  rkr->efx_Flanger->changepar(4,(int)o->value());
}
void RKRGUI::cb_flanger_lfotype(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_flanger_lfotype_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_flanger_lfotype[] = {
 {gettext("Sine"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Tri"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Ramp Up"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Ramp Down"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Zig Zag"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M. Square"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("M.Saw"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_flanger_subs_i(Fl_Check_Button* o, void*) {
  rkr->efx_Flanger->changepar(11,(int)o->value());
}
void RKRGUI::cb_flanger_subs(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_flanger_subs_i(o,v);
}

void RKRGUI::cb_flanger_stdf_i(SliderW* o, void*) {
  rkr->efx_Flanger->changepar(5,(int)o->value());
}
void RKRGUI::cb_flanger_stdf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_flanger_stdf_i(o,v);
}

void RKRGUI::cb_flanger_dpth_i(SliderW* o, void*) {
  rkr->efx_Flanger->changepar(6,(int)o->value());
}
void RKRGUI::cb_flanger_dpth(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_flanger_dpth_i(o,v);
}

void RKRGUI::cb_flanger_delay_i(SliderW* o, void*) {
  rkr->efx_Flanger->changepar(7,(int)o->value());
}
void RKRGUI::cb_flanger_delay(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_flanger_delay_i(o,v);
}

void RKRGUI::cb_flanger_fb_i(SliderW* o, void*) {
  rkr->efx_Flanger->changepar(8,(int)o->value());
}
void RKRGUI::cb_flanger_fb(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_flanger_fb_i(o,v);
}

void RKRGUI::cb_flanger_LR_i(SliderW* o, void*) {
  rkr->efx_Flanger->changepar(9,(int)(o->value()+64));
}
void RKRGUI::cb_flanger_LR(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_flanger_LR_i(o,v);
}

void RKRGUI::cb_reverb_activar_i(Fl_Light_Button* o, void*) {
  rkr->Reverb_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Rev->cleanup();
findpos(8,(int)o->value());
}
void RKRGUI::cb_reverb_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_reverb_activar_i(o,v);
}

void RKRGUI::cb_reverb_preset_i(Fl_Choice* o, void*) {
  rkr->Reverb_Bypass=0;
rkr->efx_Rev->setpreset((unsigned char) o->value());
reverb_WD->value(rkr->efx_Rev->getpar(0)-64);
reverb_pan->value(rkr->efx_Rev->getpar(1)-64);
reverb_time->value(rkr->efx_Rev->getpar(2));
reverb_ldel->value(rkr->efx_Rev->getpar(3));
reverb_ldelft->value(rkr->efx_Rev->getpar(4));
reverb_LPF->value(rkr->efx_Rev->getpar(7));
reverb_HPF->value(rkr->efx_Rev->getpar(8));
reverb_damp->value(rkr->efx_Rev->getpar(9));
reverb_RS->value(rkr->efx_Rev->getpar(11));
reverb_type->value(rkr->efx_Rev->getpar(10));
if((int)reverb_activar->value())rkr->Reverb_Bypass=1;
}
void RKRGUI::cb_reverb_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_reverb_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_reverb_preset[] = {
 {gettext("Cathedral 1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Cathedral 2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Cathedral 3"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Hall 1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Hall 2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Room 1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Room 2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Basement"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Tunnel"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Echoed 1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Echoed 2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Very Long 1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Very Long 2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_reverb_WD_i(SliderW* o, void*) {
  rkr->efx_Rev->changepar(0,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_reverb_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_reverb_WD_i(o,v);
}

void RKRGUI::cb_reverb_pan_i(SliderW* o, void*) {
  rkr->efx_Rev->changepar(1,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_reverb_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_reverb_pan_i(o,v);
}

void RKRGUI::cb_reverb_time_i(SliderW* o, void*) {
  rkr->efx_Rev->changepar(2,(unsigned char)o->value());
}
void RKRGUI::cb_reverb_time(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_reverb_time_i(o,v);
}

void RKRGUI::cb_reverb_ldel_i(SliderW* o, void*) {
  rkr->efx_Rev->changepar(3,(unsigned char)o->value());
}
void RKRGUI::cb_reverb_ldel(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_reverb_ldel_i(o,v);
}

void RKRGUI::cb_reverb_ldelft_i(SliderW* o, void*) {
  rkr->efx_Rev->changepar(4,(unsigned char)o->value());
}
void RKRGUI::cb_reverb_ldelft(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_reverb_ldelft_i(o,v);
}

void RKRGUI::cb_reverb_type_i(Fl_Choice* o, void*) {
  rkr->efx_Rev->changepar(10,(unsigned char)o->value());
}
void RKRGUI::cb_reverb_type(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_reverb_type_i(o,v);
}

void RKRGUI::cb_Random_i(Fl_Menu_*, void*) {
  rkr->efx_Rev->changepar(10,1);
}
void RKRGUI::cb_Random(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Random_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_reverb_type[] = {
 {gettext("Freeverb"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Random"), 0,  (Fl_Callback*)RKRGUI::cb_Random, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_reverb_RS_i(SliderW* o, void*) {
  rkr->Reverb_Bypass=0;
rkr->efx_Rev->changepar(11,(unsigned char)o->value());
if((int)reverb_activar->value())rkr->Reverb_Bypass=1;
}
void RKRGUI::cb_reverb_RS(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_reverb_RS_i(o,v);
}

void RKRGUI::cb_reverb_LPF_i(SliderW* o, void*) {
  rkr->efx_Rev->changepar(7,(unsigned char)o->value());
}
void RKRGUI::cb_reverb_LPF(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_reverb_LPF_i(o,v);
}

void RKRGUI::cb_reverb_HPF_i(SliderW* o, void*) {
  rkr->efx_Rev->changepar(8,(unsigned char)o->value());
}
void RKRGUI::cb_reverb_HPF(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_reverb_HPF_i(o,v);
}

void RKRGUI::cb_reverb_damp_i(SliderW* o, void*) {
  rkr->efx_Rev->changepar(9,(unsigned char)o->value());
}
void RKRGUI::cb_reverb_damp(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_reverb_damp_i(o,v);
}

void RKRGUI::cb_eqp_activar_i(Fl_Light_Button* o, void*) {
  rkr->EQ2_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_EQ2->cleanup();
findpos(9,(int)o->value());
}
void RKRGUI::cb_eqp_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eqp_activar_i(o,v);
}

void RKRGUI::cb_eqp_preset_i(Fl_Choice* o, void*) {
  int i=0;

i=rkr->EQ2_setpreset(0,0,(unsigned char)o->value());
eqp_LF->value(rkr->EQ2_setpreset(1,0,(unsigned char)o->value()));
eqp_LFg->value(rkr->EQ2_setpreset(1,1,(unsigned char)o->value())-64);
eqp_LQ->value(rkr->EQ2_setpreset(1,2,(unsigned char)o->value())-64);
eqp_MF->value(rkr->EQ2_setpreset(1,3,(unsigned char)o->value()));
eqp_MFg->value(rkr->EQ2_setpreset(1,4,(unsigned char)o->value())-64);
eqp_MQ->value(rkr->EQ2_setpreset(1,5,(unsigned char)o->value())-64);
eqp_HF->value(rkr->EQ2_setpreset(1,6,(unsigned char)o->value()));
eqp_HFg->value(rkr->EQ2_setpreset(1,7,(unsigned char)o->value())-64);
eqp_HQ->value(rkr->EQ2_setpreset(1,8,(unsigned char)o->value())-64);
eqp_Gain->value(rkr->EQ2_setpreset(1,9,(unsigned char)o->value())-64);
}
void RKRGUI::cb_eqp_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eqp_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_eqp_preset[] = {
 {gettext("Plain"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Pop"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Jazz"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_eqp_Gain_i(SliderW* o, void*) {
  rkr->efx_EQ2->changepar(0,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eqp_Gain(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eqp_Gain_i(o,v);
}

void RKRGUI::cb_eqp_LF_i(SliderW* o, void*) {
  rkr->efx_EQ2->changepar(11,(unsigned char)o->value());
}
void RKRGUI::cb_eqp_LF(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eqp_LF_i(o,v);
}

void RKRGUI::cb_eqp_LFg_i(SliderW* o, void*) {
  rkr->efx_EQ2->changepar(12,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eqp_LFg(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eqp_LFg_i(o,v);
}

void RKRGUI::cb_eqp_LQ_i(SliderW* o, void*) {
  rkr->efx_EQ2->changepar(13,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eqp_LQ(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eqp_LQ_i(o,v);
}

void RKRGUI::cb_eqp_MF_i(SliderW* o, void*) {
  rkr->efx_EQ2->changepar(5+11,(unsigned char)o->value());
}
void RKRGUI::cb_eqp_MF(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eqp_MF_i(o,v);
}

void RKRGUI::cb_eqp_MFg_i(SliderW* o, void*) {
  rkr->efx_EQ2->changepar(5+12,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eqp_MFg(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eqp_MFg_i(o,v);
}

void RKRGUI::cb_eqp_MQ_i(SliderW* o, void*) {
  rkr->efx_EQ2->changepar(5+13,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eqp_MQ(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eqp_MQ_i(o,v);
}

void RKRGUI::cb_eqp_HF_i(SliderW* o, void*) {
  rkr->efx_EQ2->changepar(10+11,(unsigned char)o->value());
}
void RKRGUI::cb_eqp_HF(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eqp_HF_i(o,v);
}

void RKRGUI::cb_eqp_HFg_i(SliderW* o, void*) {
  rkr->efx_EQ2->changepar(10+12,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eqp_HFg(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eqp_HFg_i(o,v);
}

void RKRGUI::cb_eqp_HQ_i(SliderW* o, void*) {
  rkr->efx_EQ2->changepar(10+13,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_eqp_HQ(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_eqp_HQ_i(o,v);
}

void RKRGUI::cb_WhaWha_activar_i(Fl_Light_Button* o, void*) {
  rkr->WhaWha_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_WhaWha->cleanup();
findpos(10,(int)o->value());
}
void RKRGUI::cb_WhaWha_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_WhaWha_activar_i(o,v);
}

void RKRGUI::cb_WhaWha_preset_i(Fl_Choice* o, void*) {
  rkr->WhaWha_Bypass=0;
rkr->efx_WhaWha->setpreset((int) o->value());
WhaWha_WD->value(rkr->efx_WhaWha->getpar(0)-64);
WhaWha_pan->value(rkr->efx_WhaWha->getpar(1)-64);
WhaWha_freq->value(rkr->efx_WhaWha->getpar(2));
WhaWha_rnd->value(rkr->efx_WhaWha->getpar(3));
WhaWha_lfotype->value(rkr->efx_WhaWha->getpar(4));
WhaWha_stdf->value(rkr->efx_WhaWha->getpar(5));
WhaWha_dpth->value(rkr->efx_WhaWha->getpar(6));
WhaWha_ampsns->value(rkr->efx_WhaWha->getpar(7));
WhaWha_ampsnsinv->value(rkr->efx_WhaWha->getpar(8));
WhaWha_smooth->value(rkr->efx_WhaWha->getpar(9));
if((int)WhaWha_activar->value()) rkr->WhaWha_Bypass=1;
}
void RKRGUI::cb_WhaWha_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_WhaWha_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_WhaWha_preset[] = {
 {gettext("WahWah"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("AutoWah"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Sweep"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("VocalMorph1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("VocalMorph2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_WhaWha_WD_i(SliderW* o, void*) {
  rkr->efx_WhaWha->changepar(0,(int)(o->value()+64));
}
void RKRGUI::cb_WhaWha_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_WhaWha_WD_i(o,v);
}

void RKRGUI::cb_WhaWha_pan_i(SliderW* o, void*) {
  rkr->efx_WhaWha->changepar(1,(int)(o->value()+64));
}
void RKRGUI::cb_WhaWha_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_WhaWha_pan_i(o,v);
}

void RKRGUI::cb_WhaWha_freq_i(SliderW* o, void*) {
  rkr->efx_WhaWha->changepar(2,(int)o->value());
}
void RKRGUI::cb_WhaWha_freq(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_WhaWha_freq_i(o,v);
}

void RKRGUI::cb_WhaWha_rnd_i(SliderW* o, void*) {
  rkr->efx_WhaWha->changepar(3,(int)o->value());
}
void RKRGUI::cb_WhaWha_rnd(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_WhaWha_rnd_i(o,v);
}

void RKRGUI::cb_WhaWha_lfotype_i(Fl_Choice* o, void*) {
  rkr->efx_WhaWha->changepar(4,(int)o->value());
}
void RKRGUI::cb_WhaWha_lfotype(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_WhaWha_lfotype_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_WhaWha_lfotype[] = {
 {gettext("Sine"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Tri"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Ramp Up"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Ramp Down"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Zig Zag"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M.Square"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M.Saw"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_WhaWha_stdf_i(SliderW* o, void*) {
  rkr->efx_WhaWha->changepar(5,(int)o->value());
}
void RKRGUI::cb_WhaWha_stdf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_WhaWha_stdf_i(o,v);
}

void RKRGUI::cb_WhaWha_dpth_i(SliderW* o, void*) {
  rkr->efx_WhaWha->changepar(6,(int)o->value());
}
void RKRGUI::cb_WhaWha_dpth(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_WhaWha_dpth_i(o,v);
}

void RKRGUI::cb_WhaWha_ampsns_i(SliderW* o, void*) {
  rkr->efx_WhaWha->changepar(7,(int)o->value());
}
void RKRGUI::cb_WhaWha_ampsns(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_WhaWha_ampsns_i(o,v);
}

void RKRGUI::cb_WhaWha_ampsnsinv_i(SliderW* o, void*) {
  rkr->efx_WhaWha->changepar(8,(int)o->value());
}
void RKRGUI::cb_WhaWha_ampsnsinv(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_WhaWha_ampsnsinv_i(o,v);
}

void RKRGUI::cb_WhaWha_smooth_i(SliderW* o, void*) {
  rkr->efx_WhaWha->changepar(9,(int)o->value());
}
void RKRGUI::cb_WhaWha_smooth(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_WhaWha_smooth_i(o,v);
}

void RKRGUI::cb_Alienwah_activar_i(Fl_Light_Button* o, void*) {
  rkr->Alienwah_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Alienwah->cleanup();
findpos(11,(int)o->value());
}
void RKRGUI::cb_Alienwah_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Alienwah_activar_i(o,v);
}

void RKRGUI::cb_Alienwah_preset_i(Fl_Choice* o, void*) {
  rkr->Alienwah_Bypass=0;
rkr->efx_Alienwah->setpreset((int) o->value());
Alienwah_WD->value(rkr->efx_Alienwah->getpar(0)-64);
Alienwah_pan->value(rkr->efx_Alienwah->getpar(1)-64);
Alienwah_freq->value(rkr->efx_Alienwah->getpar(2));
Alienwah_rnd->value(rkr->efx_Alienwah->getpar(3));
Alienwah_lfotype->value(rkr->efx_Alienwah->getpar(4));
Alienwah_stdf->value(rkr->efx_Alienwah->getpar(5));
Alienwah_dpth->value(rkr->efx_Alienwah->getpar(6));
Alienwah_delay->value(rkr->efx_Alienwah->getpar(8));
Alienwah_fb->value(rkr->efx_Alienwah->getpar(7));
Alienwah_LR->value(rkr->efx_Alienwah->getpar(9)-64);
Alienwah_phase->value(rkr->efx_Alienwah->getpar(10));
if (Alienwah_activar->value()) rkr->Alienwah_Bypass=1;
}
void RKRGUI::cb_Alienwah_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Alienwah_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_Alienwah_preset[] = {
 {gettext("AlienWah1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("AlienWah2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("AlienWah3"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("AlienWah4"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_Alienwah_WD_i(SliderW* o, void*) {
  rkr->efx_Alienwah->changepar(0,(int)(o->value()+64));
}
void RKRGUI::cb_Alienwah_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Alienwah_WD_i(o,v);
}

void RKRGUI::cb_Alienwah_pan_i(SliderW* o, void*) {
  rkr->efx_Alienwah->changepar(1,(int)(o->value()+64));
}
void RKRGUI::cb_Alienwah_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Alienwah_pan_i(o,v);
}

void RKRGUI::cb_Alienwah_freq_i(SliderW* o, void*) {
  rkr->efx_Alienwah->changepar(2,(int)o->value());
}
void RKRGUI::cb_Alienwah_freq(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Alienwah_freq_i(o,v);
}

void RKRGUI::cb_Alienwah_rnd_i(SliderW* o, void*) {
  rkr->efx_Alienwah->changepar(3,(int)o->value());
}
void RKRGUI::cb_Alienwah_rnd(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Alienwah_rnd_i(o,v);
}

void RKRGUI::cb_Alienwah_lfotype_i(Fl_Choice* o, void*) {
  rkr->efx_Alienwah->changepar(4,(int)o->value());
}
void RKRGUI::cb_Alienwah_lfotype(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Alienwah_lfotype_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_Alienwah_lfotype[] = {
 {gettext("Sine"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Tri"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Ramp Up"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Ramp Down"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Zig Zag"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M.Square"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M.Saw"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_Alienwah_phase_i(SliderW* o, void*) {
  rkr->efx_Alienwah->changepar(10,(int)o->value());
}
void RKRGUI::cb_Alienwah_phase(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Alienwah_phase_i(o,v);
}

void RKRGUI::cb_Alienwah_stdf_i(SliderW* o, void*) {
  rkr->efx_Alienwah->changepar(5,(int)o->value());
}
void RKRGUI::cb_Alienwah_stdf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Alienwah_stdf_i(o,v);
}

void RKRGUI::cb_Alienwah_dpth_i(SliderW* o, void*) {
  rkr->efx_Alienwah->changepar(6,(int)o->value());
}
void RKRGUI::cb_Alienwah_dpth(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Alienwah_dpth_i(o,v);
}

void RKRGUI::cb_Alienwah_delay_i(SliderW* o, void*) {
  rkr->Alienwah_Bypass=0;
rkr->efx_Alienwah->changepar(8,(int)o->value());
if (Alienwah_activar->value()) rkr->Alienwah_Bypass=1;
}
void RKRGUI::cb_Alienwah_delay(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Alienwah_delay_i(o,v);
}

void RKRGUI::cb_Alienwah_fb_i(SliderW* o, void*) {
  rkr->efx_Alienwah->changepar(7,(int)o->value());
}
void RKRGUI::cb_Alienwah_fb(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Alienwah_fb_i(o,v);
}

void RKRGUI::cb_Alienwah_LR_i(SliderW* o, void*) {
  rkr->efx_Alienwah->changepar(9,(int)(o->value()+64));
}
void RKRGUI::cb_Alienwah_LR(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Alienwah_LR_i(o,v);
}

void RKRGUI::cb_Cabinet_activar_i(Fl_Light_Button* o, void*) {
  rkr->Cabinet_Bypass=(int)o->value();
findpos(12,(int)o->value());
}
void RKRGUI::cb_Cabinet_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Cabinet_activar_i(o,v);
}

void RKRGUI::cb_Cabinet_preset_i(Fl_Choice* o, void*) {
  rkr->Cabinet_setpreset((unsigned char) o->value());
}
void RKRGUI::cb_Cabinet_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Cabinet_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_Cabinet_preset[] = {
 {gettext("Marshall-4-12"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Celestion G12M"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Jensen Alnico P12N"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Jensen Alnico P15N"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Delta Demon"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Celestion-EVH12"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Eminence Copperhead"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Mesa Boogie"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Jazz-Chorus"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Vox-Bright"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Marshall-I"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_Cabinet_output_i(SliderW* o, void*) {
  rkr->efx_Cabinet->changepar(0,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_Cabinet_output(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Cabinet_output_i(o,v);
}

void RKRGUI::cb_pan_activar_i(Fl_Light_Button* o, void*) {
  rkr->Pan_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Pan->cleanup();
findpos(13,(int)o->value());
}
void RKRGUI::cb_pan_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_pan_activar_i(o,v);
}

void RKRGUI::cb_pan_preset_i(Fl_Choice* o, void*) {
  rkr->efx_Pan->setpreset((unsigned char) o->value());
pan_WD->value(rkr->efx_Pan->getpar(0)-64);
pan_pan->value(rkr->efx_Pan->getpar(1)-64);
pan_freq->value(rkr->efx_Pan->getpar(2));
pan_rnd->value(rkr->efx_Pan->getpar(3));
pan_lfotype->value(rkr->efx_Pan->getpar(4));
pan_stdf->value(rkr->efx_Pan->getpar(5));
pan_extra->value(rkr->efx_Pan->getpar(6));
pan_autopan->value(rkr->efx_Pan->getpar(7));
pan_extraon->value(rkr->efx_Pan->getpar(8));
}
void RKRGUI::cb_pan_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_pan_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_pan_preset[] = {
 {gettext("AutoPan"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Extra Stereo"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_pan_WD_i(SliderW* o, void*) {
  rkr->efx_Pan->changepar(0,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_pan_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_pan_WD_i(o,v);
}

void RKRGUI::cb_pan_autopan_i(Fl_Check_Button* o, void*) {
  rkr->efx_Pan->changepar(7,(unsigned char)o->value());
}
void RKRGUI::cb_pan_autopan(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_pan_autopan_i(o,v);
}

void RKRGUI::cb_pan_pan_i(SliderW* o, void*) {
  rkr->efx_Pan->changepar(1,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_pan_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_pan_pan_i(o,v);
}

void RKRGUI::cb_pan_freq_i(SliderW* o, void*) {
  rkr->efx_Pan->changepar(2,(unsigned char)o->value());
}
void RKRGUI::cb_pan_freq(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_pan_freq_i(o,v);
}

void RKRGUI::cb_pan_rnd_i(SliderW* o, void*) {
  rkr->efx_Pan->changepar(3,(unsigned char)o->value());
}
void RKRGUI::cb_pan_rnd(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_pan_rnd_i(o,v);
}

void RKRGUI::cb_pan_lfotype_i(Fl_Choice* o, void*) {
  rkr->efx_Pan->changepar(4,(unsigned char)o->value());
}
void RKRGUI::cb_pan_lfotype(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_pan_lfotype_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_pan_lfotype[] = {
 {gettext("Sine"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Tri"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Ramp Up"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Ramp Down"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Zig Zag"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M.Square"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M.Saw"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_pan_stdf_i(SliderW* o, void*) {
  rkr->efx_Pan->changepar(5,(unsigned char)o->value());
}
void RKRGUI::cb_pan_stdf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_pan_stdf_i(o,v);
}

void RKRGUI::cb_pan_extraon_i(Fl_Check_Button* o, void*) {
  rkr->efx_Pan->changepar(8,(unsigned char)o->value());
}
void RKRGUI::cb_pan_extraon(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_pan_extraon_i(o,v);
}

void RKRGUI::cb_pan_extra_i(SliderW* o, void*) {
  rkr->efx_Pan->changepar(6,(unsigned char)o->value());
}
void RKRGUI::cb_pan_extra(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_pan_extra_i(o,v);
}

void RKRGUI::cb_har_activar_i(Fl_Light_Button* o, void*) {
  rkr->Harmonizer_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Har->cleanup();
findpos(14,(int)o->value());
}
void RKRGUI::cb_har_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_har_activar_i(o,v);
}

void RKRGUI::cb_har_preset_i(Fl_Choice* o, void*) {
  rkr->efx_Har->setpreset((unsigned char)o->value());
har_WD->value(rkr->efx_Har->getpar(0)-64);

har_pan->value(rkr->efx_Har->getpar(1)-64);
har_gan->value(rkr->efx_Har->getpar(2)-64);
har_int->value(rkr->efx_Har->getpar(3)-12);
har_SELECT->value(rkr->efx_Har->getpar(5));
har_note->value(rkr->efx_Har->getpar(6));
har_type->value(rkr->efx_Har->getpar(7));
har_freq1->value(rkr->efx_Har->getpar(4));
har_gan1->value(rkr->efx_Har->getpar(8)-64);
har_q1->value(rkr->efx_Har->getpar(9)-64);
har_MIDI->value(rkr->efx_Har->getpar(10));
Chord();
}
void RKRGUI::cb_har_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_har_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_har_preset[] = {
 {gettext("Plain"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Octavator"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("3m Down"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_har_WD_i(SliderW* o, void*) {
  rkr->efx_Har->changepar(0,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_har_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_har_WD_i(o,v);
}

void RKRGUI::cb_har_int_i(SliderW* o, void*) {
  rkr->Harmonizer_Bypass=0;
rkr->efx_Har->changepar(3,(unsigned char)(o->value()+12));
if((int)har_activar->value())rkr->Harmonizer_Bypass=1;
}
void RKRGUI::cb_har_int(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_har_int_i(o,v);
}

void RKRGUI::cb_har_gan_i(SliderW* o, void*) {
  rkr->efx_Har->changepar(2,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_har_gan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_har_gan_i(o,v);
}

void RKRGUI::cb_har_pan_i(SliderW* o, void*) {
  rkr->efx_Har->changepar(1,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_har_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_har_pan_i(o,v);
}

void RKRGUI::cb_har_freq1_i(SliderW* o, void*) {
  rkr->efx_Har->changepar(4,(unsigned char)o->value());
}
void RKRGUI::cb_har_freq1(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_har_freq1_i(o,v);
}

void RKRGUI::cb_har_gan1_i(SliderW* o, void*) {
  rkr->efx_Har->changepar(8,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_har_gan1(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_har_gan1_i(o,v);
}

void RKRGUI::cb_har_q1_i(SliderW* o, void*) {
  rkr->efx_Har->changepar(9,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_har_q1(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_har_q1_i(o,v);
}

void RKRGUI::cb_har_MIDI_i(Fl_Check_Button* o, void*) {
  rkr->efx_Har->changepar(10,(unsigned char)o->value());
rkr->RC->cleanup();
}
void RKRGUI::cb_har_MIDI(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_har_MIDI_i(o,v);
}

void RKRGUI::cb_har_SELECT_i(Fl_Check_Button* o, void*) {
  rkr->efx_Har->changepar(5,(unsigned char)o->value());
rkr->RC->cleanup();
Chord();
}
void RKRGUI::cb_har_SELECT(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_har_SELECT_i(o,v);
}

void RKRGUI::cb_har_note_i(SliderW* o, void*) {
  rkr->efx_Har->changepar(6,(unsigned char)o->value());
Chord();
}
void RKRGUI::cb_har_note(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_har_note_i(o,v);
}

void RKRGUI::cb_har_type_i(SliderW* o, void*) {
  rkr->efx_Har->changepar(7,(unsigned char)o->value());
Chord();
}
void RKRGUI::cb_har_type(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_har_type_i(o,v);
}

void RKRGUI::cb_musdelay_activar_i(Fl_Light_Button* o, void*) {
  rkr->MusDelay_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_MusDelay->cleanup();
findpos(15,(int)o->value());
}
void RKRGUI::cb_musdelay_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_musdelay_activar_i(o,v);
}

void RKRGUI::cb_musdelay_preset_i(Fl_Choice* o, void*) {
  rkr->MusDelay_Bypass=0;
rkr->efx_MusDelay->setpreset(o->value());
musdelay_WD->value(rkr->efx_MusDelay->getpar(0)-64);
musdelay_tempo->value(rkr->efx_MusDelay->getpar(10));
musdelay_pan1->value(rkr->efx_MusDelay->getpar(1)-64);
musdelay_pan2->value(rkr->efx_MusDelay->getpar(7)-64);
musdelay_delay1->value(rkr->efx_MusDelay->getpar(2)-1);
musdelay_delay2->value(rkr->efx_MusDelay->getpar(8)-1);
musdelay_delay3->value(rkr->efx_MusDelay->getpar(3)-1);
musdelay_fb1->value(rkr->efx_MusDelay->getpar(5));
musdelay_fb2->value(rkr->efx_MusDelay->getpar(9));
musdelay_LRc->value(rkr->efx_MusDelay->getpar(4)-64);
musdelay_gain1->value(rkr->efx_MusDelay->getpar(11)-64);
musdelay_gain2->value(rkr->efx_MusDelay->getpar(12)-64);
musdelay_damp->value(rkr->efx_MusDelay->getpar(6));
if((int)musdelay_activar->value())rkr->MusDelay_Bypass=1;
}
void RKRGUI::cb_musdelay_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_musdelay_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_musdelay_preset[] = {
 {gettext("Echo 1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Echo 2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_musdelay_WD_i(SliderW* o, void*) {
  rkr->efx_MusDelay->changepar(0,(int)o->value()+64);
}
void RKRGUI::cb_musdelay_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_musdelay_WD_i(o,v);
}

void RKRGUI::cb_musdelay_LRc_i(SliderW* o, void*) {
  rkr->efx_MusDelay->changepar(4,(int)o->value()+64);
}
void RKRGUI::cb_musdelay_LRc(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_musdelay_LRc_i(o,v);
}

void RKRGUI::cb_musdelay_pan1_i(SliderW* o, void*) {
  rkr->efx_MusDelay->changepar(1,(int)o->value()+64);
}
void RKRGUI::cb_musdelay_pan1(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_musdelay_pan1_i(o,v);
}

void RKRGUI::cb_musdelay_pan2_i(SliderW* o, void*) {
  rkr->efx_MusDelay->changepar(7,(int)o->value()+64);
}
void RKRGUI::cb_musdelay_pan2(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_musdelay_pan2_i(o,v);
}

void RKRGUI::cb_musdelay_delay1_i(Fl_Choice* o, void*) {
  rkr->MusDelay_Bypass=0;
rkr->efx_MusDelay->changepar(2,o->value()+1);
if((int)musdelay_activar->value())rkr->MusDelay_Bypass=1;
}
void RKRGUI::cb_musdelay_delay1(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_musdelay_delay1_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_musdelay_delay1[] = {
 {gettext("1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("1/2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("1/3"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("1/4"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("1/5"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("1/6"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_musdelay_delay3_i(Fl_Choice* o, void*) {
  rkr->MusDelay_Bypass=0;
rkr->efx_MusDelay->changepar(3,o->value()+1);
if((int)musdelay_activar->value())rkr->MusDelay_Bypass=1;
}
void RKRGUI::cb_musdelay_delay3(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_musdelay_delay3_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_musdelay_delay3[] = {
 {gettext("1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("1/2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("1/3"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("1/4"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("1/5"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("1/6"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("0"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_musdelay_delay2_i(Fl_Choice* o, void*) {
  rkr->MusDelay_Bypass=0;
rkr->efx_MusDelay->changepar(8,o->value()+1);
if((int)musdelay_activar->value())rkr->MusDelay_Bypass=1;
}
void RKRGUI::cb_musdelay_delay2(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_musdelay_delay2_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_musdelay_delay2[] = {
 {gettext("1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("1/2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("1/3"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("1/4"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("1/5"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("1/6"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_musdelay_tempo_i(SliderW* o, void*) {
  rkr->MusDelay_Bypass=0;
rkr->efx_MusDelay->changepar(10,(int)o->value());
if((int)musdelay_activar->value())rkr->MusDelay_Bypass=1;
}
void RKRGUI::cb_musdelay_tempo(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_musdelay_tempo_i(o,v);
}

void RKRGUI::cb_musdelay_gain1_i(SliderW* o, void*) {
  rkr->efx_MusDelay->changepar(11,(int)o->value()+64);
}
void RKRGUI::cb_musdelay_gain1(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_musdelay_gain1_i(o,v);
}

void RKRGUI::cb_musdelay_gain2_i(SliderW* o, void*) {
  rkr->efx_MusDelay->changepar(12,(int)o->value()+64);
}
void RKRGUI::cb_musdelay_gain2(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_musdelay_gain2_i(o,v);
}

void RKRGUI::cb_musdelay_fb1_i(SliderW* o, void*) {
  rkr->efx_MusDelay->changepar(5,(int)o->value());
}
void RKRGUI::cb_musdelay_fb1(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_musdelay_fb1_i(o,v);
}

void RKRGUI::cb_musdelay_fb2_i(SliderW* o, void*) {
  rkr->efx_MusDelay->changepar(9,(int)o->value());
}
void RKRGUI::cb_musdelay_fb2(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_musdelay_fb2_i(o,v);
}

void RKRGUI::cb_musdelay_damp_i(SliderW* o, void*) {
  rkr->efx_MusDelay->changepar(6,(int)o->value());
}
void RKRGUI::cb_musdelay_damp(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_musdelay_damp_i(o,v);
}

void RKRGUI::cb_gate_activar_i(Fl_Light_Button* o, void*) {
  rkr->Gate_Bypass=(int)o->value();
findpos(16,(int)o->value());
}
void RKRGUI::cb_gate_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_gate_activar_i(o,v);
}

void RKRGUI::cb_gate_preset_i(Fl_Choice* o, void*) {
  rkr->efx_Gate->Gate_Change_Preset((int) o->value());
gate_ATime->value(rkr->efx_Gate->getpar(3));
gate_RTime->value(rkr->efx_Gate->getpar(4));
gate_range->value(rkr->efx_Gate->getpar(2));
gate_threshold->value(rkr->efx_Gate->getpar(1));
gate_hold->value(rkr->efx_Gate->getpar(7));
gate_HPF->value(rkr->efx_Gate->getpar(6));
gate_LPF->value(rkr->efx_Gate->getpar(5));
}
void RKRGUI::cb_gate_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_gate_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_gate_preset[] = {
 {gettext("0dB"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("-10dB"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("-20dB"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_gate_ATime_i(SliderW* o, void*) {
  rkr->efx_Gate->Gate_Change(3,(int)o->value());
}
void RKRGUI::cb_gate_ATime(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_gate_ATime_i(o,v);
}

void RKRGUI::cb_gate_RTime_i(SliderW* o, void*) {
  rkr->efx_Gate->Gate_Change(4, (int) o->value());
}
void RKRGUI::cb_gate_RTime(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_gate_RTime_i(o,v);
}

void RKRGUI::cb_gate_range_i(SliderW* o, void*) {
  rkr->efx_Gate->Gate_Change(2, (int) o->value());
}
void RKRGUI::cb_gate_range(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_gate_range_i(o,v);
}

void RKRGUI::cb_gate_threshold_i(SliderW* o, void*) {
  rkr->efx_Gate->Gate_Change(1, (int)o->value());
}
void RKRGUI::cb_gate_threshold(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_gate_threshold_i(o,v);
}

void RKRGUI::cb_gate_hold_i(SliderW* o, void*) {
  rkr->efx_Gate->Gate_Change(7,(int)o->value());
}
void RKRGUI::cb_gate_hold(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_gate_hold_i(o,v);
}

void RKRGUI::cb_gate_LPF_i(SliderW* o, void*) {
  rkr->efx_Gate->Gate_Change(5, (int)o->value());
}
void RKRGUI::cb_gate_LPF(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_gate_LPF_i(o,v);
}

void RKRGUI::cb_gate_HPF_i(SliderW* o, void*) {
  rkr->efx_Gate->Gate_Change(6, (int)o->value());
}
void RKRGUI::cb_gate_HPF(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_gate_HPF_i(o,v);
}

void RKRGUI::cb_newdist_activar_i(Fl_Light_Button* o, void*) {
  rkr->NewDist_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_NewDist->cleanup();
findpos(17,(int)o->value());
}
void RKRGUI::cb_newdist_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_newdist_activar_i(o,v);
}

void RKRGUI::cb_newdist_preset_i(Fl_Choice* o, void*) {
  rkr->efx_NewDist->setpreset((unsigned char) o->value());
newdist_WD->value(rkr->efx_NewDist->getpar(0)-64);
newdist_LRc->value(rkr->efx_NewDist->getpar(2)-64);
newdist_drive->value(rkr->efx_NewDist->getpar(3));
newdist_level->value(rkr->efx_NewDist->getpar(4));
newdist_tipo->value(rkr->efx_NewDist->getpar(5));
newdist_neg->value(rkr->efx_NewDist->getpar(6));
newdist_st->value(rkr->efx_NewDist->getpar(9));
newdist_oct->value(rkr->efx_NewDist->getpar(11));
newdist_pan->value(rkr->efx_NewDist->getpar(1)-64);
newdist_pf->value(rkr->efx_NewDist->getpar(10));
newdist_lpf->value(rkr->efx_NewDist->getpar(7));
newdist_hpf->value(rkr->efx_NewDist->getpar(8));
}
void RKRGUI::cb_newdist_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_newdist_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_newdist_preset[] = {
 {gettext("New Dist 1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("New Dist 2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("New Dist 3"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_newdist_WD_i(SliderW* o, void*) {
  rkr->efx_NewDist->changepar(0,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_newdist_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_newdist_WD_i(o,v);
}

void RKRGUI::cb_newdist_LRc_i(SliderW* o, void*) {
  rkr->efx_NewDist->changepar(2,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_newdist_LRc(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_newdist_LRc_i(o,v);
}

void RKRGUI::cb_newdist_drive_i(SliderW* o, void*) {
  rkr->efx_NewDist->changepar(3,(unsigned char)o->value());
}
void RKRGUI::cb_newdist_drive(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_newdist_drive_i(o,v);
}

void RKRGUI::cb_newdist_level_i(SliderW* o, void*) {
  rkr->efx_NewDist->changepar(4,(unsigned char)o->value());
}
void RKRGUI::cb_newdist_level(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_newdist_level_i(o,v);
}

void RKRGUI::cb_newdist_tipo_i(Fl_Choice* o, void*) {
  rkr->efx_NewDist->changepar(5,(unsigned char)o->value());
}
void RKRGUI::cb_newdist_tipo(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_newdist_tipo_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_newdist_tipo[] = {
 {gettext("Atan"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Asym1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Pow"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Sine"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Qnts"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Zigzg"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Lmt"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("LmtU"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("LmtL"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("ILmt"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Clip"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Asym2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Pow2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Sgm"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Crunch"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Hard Crunch"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Dirty Octave+"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M.Square"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M.Saw"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_newdist_neg_i(Fl_Check_Button* o, void*) {
  rkr->efx_NewDist->changepar(6,(unsigned char)o->value());
}
void RKRGUI::cb_newdist_neg(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_newdist_neg_i(o,v);
}

void RKRGUI::cb_newdist_st_i(SliderW* o, void*) {
  rkr->efx_NewDist->changepar(9,(unsigned char)o->value());
}
void RKRGUI::cb_newdist_st(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_newdist_st_i(o,v);
}

void RKRGUI::cb_newdist_oct_i(SliderW* o, void*) {
  rkr->efx_NewDist->changepar(11,(unsigned char)o->value());
}
void RKRGUI::cb_newdist_oct(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_newdist_oct_i(o,v);
}

void RKRGUI::cb_newdist_pan_i(SliderW* o, void*) {
  rkr->efx_NewDist->changepar(1,(unsigned char)(o->value()+64));
}
void RKRGUI::cb_newdist_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_newdist_pan_i(o,v);
}

void RKRGUI::cb_newdist_pf_i(Fl_Check_Button* o, void*) {
  rkr->efx_NewDist->changepar(10,(unsigned char)o->value());
}
void RKRGUI::cb_newdist_pf(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_newdist_pf_i(o,v);
}

void RKRGUI::cb_newdist_lpf_i(SliderW* o, void*) {
  rkr->efx_NewDist->changepar(7,(unsigned char)o->value());
}
void RKRGUI::cb_newdist_lpf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_newdist_lpf_i(o,v);
}

void RKRGUI::cb_newdist_hpf_i(SliderW* o, void*) {
  rkr->efx_NewDist->changepar(8,(unsigned char)o->value());
}
void RKRGUI::cb_newdist_hpf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_newdist_hpf_i(o,v);
}

void RKRGUI::cb_aphaser_activar_i(Fl_Light_Button* o, void*) {
  rkr->APhaser_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_APhaser->cleanup();
findpos(18,(int)o->value());
}
void RKRGUI::cb_aphaser_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_aphaser_activar_i(o,v);
}

void RKRGUI::cb_aphaser_preset_i(Fl_Choice* o, void*) {
  rkr->efx_APhaser->setpreset((int) o->value());
aphaser_WD->value(rkr->efx_APhaser->getpar(0)-64);
aphaser_pan->value(rkr->efx_APhaser->getpar(1));
aphaser_freq->value(rkr->efx_APhaser->getpar(2));
aphaser_lfotype->value(rkr->efx_APhaser->getpar(4));
aphaser_stdf->value(rkr->efx_APhaser->getpar(5));
aphaser_dpth->value(rkr->efx_APhaser->getpar(6));
aphaser_stages->value(rkr->efx_APhaser->getpar(8));
aphaser_fb->value(rkr->efx_APhaser->getpar(7)-64);
aphaser_LR->value(rkr->efx_APhaser->getpar(9));
aphaser_subs->value(rkr->efx_APhaser->getpar(10));
aphaser_phase->value(rkr->efx_APhaser->getpar(11));
aphaser_hyper->value(rkr->efx_APhaser->getpar(12));
}
void RKRGUI::cb_aphaser_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_aphaser_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_aphaser_preset[] = {
 {gettext("Phaser 1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Phaser 2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Phaser 3"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Phaser 4"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Phaser 5"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Phaser 6"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_aphaser_WD_i(SliderW* o, void*) {
  rkr->efx_APhaser->changepar(0,(int)(o->value()+64));
}
void RKRGUI::cb_aphaser_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_aphaser_WD_i(o,v);
}

void RKRGUI::cb_aphaser_lfotype_i(Fl_Choice* o, void*) {
  rkr->efx_APhaser->changepar(4,(int)o->value());
}
void RKRGUI::cb_aphaser_lfotype(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_aphaser_lfotype_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_aphaser_lfotype[] = {
 {gettext("Sine"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Tri"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Ramp Up"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Ramp Down"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Zig Zag"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M.Square"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M.Saw"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_aphaser_freq_i(SliderW* o, void*) {
  rkr->efx_APhaser->changepar(2,(int)o->value());
}
void RKRGUI::cb_aphaser_freq(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_aphaser_freq_i(o,v);
}

void RKRGUI::cb_aphaser_dpth_i(SliderW* o, void*) {
  rkr->efx_APhaser->changepar(6,(int)o->value());
}
void RKRGUI::cb_aphaser_dpth(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_aphaser_dpth_i(o,v);
}

void RKRGUI::cb_aphaser_phase_i(SliderW* o, void*) {
  rkr->efx_APhaser->changepar(11,(int)o->value());
}
void RKRGUI::cb_aphaser_phase(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_aphaser_phase_i(o,v);
}

void RKRGUI::cb_aphaser_fb_i(SliderW* o, void*) {
  rkr->efx_APhaser->changepar(7,(int)(o->value()+64));
}
void RKRGUI::cb_aphaser_fb(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_aphaser_fb_i(o,v);
}

void RKRGUI::cb_aphaser_LR_i(SliderW* o, void*) {
  rkr->efx_APhaser->changepar(9,(int)o->value());
}
void RKRGUI::cb_aphaser_LR(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_aphaser_LR_i(o,v);
}

void RKRGUI::cb_aphaser_pan_i(SliderW* o, void*) {
  rkr->efx_APhaser->changepar(1,(int)o->value());
}
void RKRGUI::cb_aphaser_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_aphaser_pan_i(o,v);
}

void RKRGUI::cb_aphaser_stdf_i(SliderW* o, void*) {
  rkr->efx_APhaser->changepar(5,(int)o->value());
}
void RKRGUI::cb_aphaser_stdf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_aphaser_stdf_i(o,v);
}

void RKRGUI::cb_aphaser_stages_i(Fl_Counter* o, void*) {
  rkr->efx_APhaser->changepar(8,(int)o->value());
}
void RKRGUI::cb_aphaser_stages(Fl_Counter* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_aphaser_stages_i(o,v);
}

void RKRGUI::cb_aphaser_hyper_i(Fl_Check_Button* o, void*) {
  rkr->efx_APhaser->changepar(12,(int)o->value());
}
void RKRGUI::cb_aphaser_hyper(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_aphaser_hyper_i(o,v);
}

void RKRGUI::cb_aphaser_subs_i(Fl_Check_Button* o, void*) {
  rkr->efx_APhaser->changepar(10,(int)o->value());
}
void RKRGUI::cb_aphaser_subs(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_aphaser_subs_i(o,v);
}

void RKRGUI::cb_valve_activar_i(Fl_Light_Button* o, void*) {
  rkr->Valve_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Valve->cleanup();
findpos(19,(int)o->value());
}
void RKRGUI::cb_valve_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_valve_activar_i(o,v);
}

void RKRGUI::cb_valve_preset_i(Fl_Choice* o, void*) {
  rkr->efx_Valve->setpreset((int)o->value());
valve_WD->value(rkr->efx_Valve->getpar(0)-64);
valve_LRc->value(rkr->efx_Valve->getpar(2)-64);
valve_drive->value(rkr->efx_Valve->getpar(3));
valve_level->value(rkr->efx_Valve->getpar(4));
valve_neg->value(rkr->efx_Valve->getpar(5));
valve_st->value(rkr->efx_Valve->getpar(8));
valve_pan->value(rkr->efx_Valve->getpar(1)-64);
valve_pf->value(rkr->efx_Valve->getpar(9));
valve_lpf->value(rkr->efx_Valve->getpar(6));
valve_hpf->value(rkr->efx_Valve->getpar(7));
valve_Q->value(rkr->efx_Valve->getpar(10));
valve_ed->value(rkr->efx_Valve->getpar(11));
valve_Pre->value(rkr->efx_Valve->getpar(12));
}
void RKRGUI::cb_valve_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_valve_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_valve_preset[] = {
 {gettext("Valve 1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Valve 2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Valve 3"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_valve_WD_i(SliderW* o, void*) {
  rkr->efx_Valve->changepar(0,(int)(o->value()+64));
}
void RKRGUI::cb_valve_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_valve_WD_i(o,v);
}

void RKRGUI::cb_valve_LRc_i(SliderW* o, void*) {
  rkr->efx_Valve->changepar(2,(int)(o->value()+64));
}
void RKRGUI::cb_valve_LRc(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_valve_LRc_i(o,v);
}

void RKRGUI::cb_valve_pan_i(SliderW* o, void*) {
  rkr->efx_Valve->changepar(1,(int)(o->value()+64));
}
void RKRGUI::cb_valve_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_valve_pan_i(o,v);
}

void RKRGUI::cb_valve_level_i(SliderW* o, void*) {
  rkr->efx_Valve->changepar(4,(int)o->value());
}
void RKRGUI::cb_valve_level(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_valve_level_i(o,v);
}

void RKRGUI::cb_valve_drive_i(SliderW* o, void*) {
  rkr->efx_Valve->changepar(3,(int)o->value());
}
void RKRGUI::cb_valve_drive(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_valve_drive_i(o,v);
}

void RKRGUI::cb_valve_ed_i(Fl_Check_Button* o, void*) {
  rkr->efx_Valve->changepar(11,(int)o->value());
}
void RKRGUI::cb_valve_ed(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_valve_ed_i(o,v);
}

void RKRGUI::cb_valve_Q_i(SliderW* o, void*) {
  rkr->efx_Valve->changepar(10,(int)o->value());
}
void RKRGUI::cb_valve_Q(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_valve_Q_i(o,v);
}

void RKRGUI::cb_valve_Pre_i(SliderW* o, void*) {
  rkr->efx_Valve->changepar(12,(int)o->value());
}
void RKRGUI::cb_valve_Pre(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_valve_Pre_i(o,v);
}

void RKRGUI::cb_valve_pf_i(Fl_Check_Button* o, void*) {
  rkr->efx_Valve->changepar(9,(int)o->value());
}
void RKRGUI::cb_valve_pf(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_valve_pf_i(o,v);
}

void RKRGUI::cb_valve_st_i(Fl_Check_Button* o, void*) {
  rkr->efx_Valve->changepar(8,(int)o->value());
}
void RKRGUI::cb_valve_st(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_valve_st_i(o,v);
}

void RKRGUI::cb_valve_neg_i(Fl_Check_Button* o, void*) {
  rkr->efx_Valve->changepar(5,(int)o->value());
}
void RKRGUI::cb_valve_neg(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_valve_neg_i(o,v);
}

void RKRGUI::cb_valve_lpf_i(SliderW* o, void*) {
  rkr->efx_Valve->changepar(6,(int)o->value());
}
void RKRGUI::cb_valve_lpf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_valve_lpf_i(o,v);
}

void RKRGUI::cb_valve_hpf_i(SliderW* o, void*) {
  rkr->efx_Valve->changepar(7,(int)o->value());
}
void RKRGUI::cb_valve_hpf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_valve_hpf_i(o,v);
}

void RKRGUI::cb_dflange_activar_i(Fl_Light_Button* o, void*) {
  rkr->DFlange_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_DFlange->cleanup();
findpos(20,(int)o->value());
}
void RKRGUI::cb_dflange_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dflange_activar_i(o,v);
}

void RKRGUI::cb_dflange_preset_i(Fl_Choice* o, void*) {
  rkr->efx_DFlange->setpreset((int)o->value());
dflange_WD->value(rkr->efx_DFlange->getpar(0));
dflange_pan->value(rkr->efx_DFlange->getpar(1));
dflange_freq->value(rkr->efx_DFlange->getpar(10));
dflange_rnd->value(rkr->efx_DFlange->getpar(13));
dflange_lfotype->value(rkr->efx_DFlange->getpar(12));
dflange_stdf->value(rkr->efx_DFlange->getpar(11));
dflange_width->value(rkr->efx_DFlange->getpar(4));
dflange_depth->value(rkr->efx_DFlange->getpar(3));
dflange_fb->value(rkr->efx_DFlange->getpar(6));
dflange_LR->value(rkr->efx_DFlange->getpar(2));
dflange_subs->value(rkr->efx_DFlange->getpar(8));
dflange_tz->value(rkr->efx_DFlange->getpar(9));
dflange_offset->value(rkr->efx_DFlange->getpar(5));
dflange_lpf->value(rkr->efx_DFlange->getpar(7));
}
void RKRGUI::cb_dflange_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dflange_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_dflange_preset[] = {
 {gettext("Flange 1"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Flange 2"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Flange 3"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Flange 4"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Flange 5"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_dflange_WD_i(SliderW* o, void*) {
  rkr->efx_DFlange->changepar(0,(int)(o->value()));
}
void RKRGUI::cb_dflange_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dflange_WD_i(o,v);
}

void RKRGUI::cb_dflange_pan_i(SliderW* o, void*) {
  rkr->efx_DFlange->changepar(1,(int)o->value());
}
void RKRGUI::cb_dflange_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dflange_pan_i(o,v);
}

void RKRGUI::cb_dflange_LR_i(SliderW* o, void*) {
  rkr->efx_DFlange->changepar(2,(int)o->value());
}
void RKRGUI::cb_dflange_LR(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dflange_LR_i(o,v);
}

void RKRGUI::cb_dflange_depth_i(SliderW* o, void*) {
  rkr->efx_DFlange->changepar(3,(int)o->value());
}
void RKRGUI::cb_dflange_depth(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dflange_depth_i(o,v);
}

void RKRGUI::cb_dflange_width_i(SliderW* o, void*) {
  rkr->efx_DFlange->changepar(4,(int)o->value());
}
void RKRGUI::cb_dflange_width(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dflange_width_i(o,v);
}

void RKRGUI::cb_dflange_offset_i(SliderW* o, void*) {
  rkr->efx_DFlange->changepar(5,(int)o->value());
}
void RKRGUI::cb_dflange_offset(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dflange_offset_i(o,v);
}

void RKRGUI::cb_dflange_fb_i(SliderW* o, void*) {
  rkr->efx_DFlange->changepar(6,(int)o->value());
}
void RKRGUI::cb_dflange_fb(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dflange_fb_i(o,v);
}

void RKRGUI::cb_dflange_lpf_i(SliderW* o, void*) {
  rkr->efx_DFlange->changepar(7,(int)o->value());
}
void RKRGUI::cb_dflange_lpf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dflange_lpf_i(o,v);
}

void RKRGUI::cb_dflange_subs_i(Fl_Check_Button* o, void*) {
  rkr->efx_DFlange->changepar(8,(int)o->value());
}
void RKRGUI::cb_dflange_subs(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dflange_subs_i(o,v);
}

void RKRGUI::cb_dflange_tz_i(Fl_Check_Button* o, void*) {
  rkr->efx_DFlange->changepar(9,(int)o->value());
}
void RKRGUI::cb_dflange_tz(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dflange_tz_i(o,v);
}

void RKRGUI::cb_dflange_freq_i(SliderW* o, void*) {
  rkr->efx_DFlange->changepar(10,(int)o->value());
}
void RKRGUI::cb_dflange_freq(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dflange_freq_i(o,v);
}

void RKRGUI::cb_dflange_stdf_i(SliderW* o, void*) {
  rkr->efx_DFlange->changepar(11,(int)o->value());
}
void RKRGUI::cb_dflange_stdf(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dflange_stdf_i(o,v);
}

void RKRGUI::cb_dflange_lfotype_i(Fl_Choice* o, void*) {
  rkr->efx_DFlange->changepar(12,(int)o->value());
}
void RKRGUI::cb_dflange_lfotype(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dflange_lfotype_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_dflange_lfotype[] = {
 {gettext("Sine"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Tri"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Ramp Up"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Ramp Down"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("Zig Zag"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {gettext("M. Square"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("M.Saw"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 9, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_dflange_rnd_i(SliderW* o, void*) {
  rkr->efx_DFlange->changepar(13,(int)o->value());
}
void RKRGUI::cb_dflange_rnd(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_dflange_rnd_i(o,v);
}

void RKRGUI::cb_ring_activar_i(Fl_Light_Button* o, void*) {
  rkr->Ring_Bypass=(int)o->value();
if((int) o->value()==0)
rkr->efx_Ring->cleanup();
findpos(21,(int)o->value());
}
void RKRGUI::cb_ring_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ring_activar_i(o,v);
}

void RKRGUI::cb_ring_preset_i(Fl_Choice* o, void*) {
  rkr->efx_Ring->setpreset((int) o->value());
ring_WD->value(rkr->efx_Ring->getpar(0));
ring_LRc->value(rkr->efx_Ring->getpar(2));
ring_input->value(rkr->efx_Ring->getpar(11));
ring_level->value(rkr->efx_Ring->getpar(3));
ring_st->value(rkr->efx_Ring->getpar(6));
ring_depth->value(rkr->efx_Ring->getpar(4));
ring_freq->value(rkr->efx_Ring->getpar(5));
ring_sin->value(rkr->efx_Ring->getpar(7));
ring_tri->value(rkr->efx_Ring->getpar(8));
ring_saw->value(rkr->efx_Ring->getpar(9));
ring_squ->value(rkr->efx_Ring->getpar(10));
ring_pan->value(rkr->efx_Ring->getpar(1));
ring_afreq->value(rkr->efx_Ring->getpar(12));
}
void RKRGUI::cb_ring_preset(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ring_preset_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_ring_preset[] = {
 {gettext("Saw_Sin"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("E string"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("A string"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Dissonance"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Fast Beat"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("Ring Amp"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_ring_WD_i(SliderW* o, void*) {
  rkr->efx_Ring->changepar(0,(int)o->value());
}
void RKRGUI::cb_ring_WD(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ring_WD_i(o,v);
}

void RKRGUI::cb_ring_LRc_i(SliderW* o, void*) {
  rkr->efx_Ring->changepar(2,(int)o->value());
}
void RKRGUI::cb_ring_LRc(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ring_LRc_i(o,v);
}

void RKRGUI::cb_ring_input_i(SliderW* o, void*) {
  rkr->efx_Ring->changepar(11,(int)o->value());
}
void RKRGUI::cb_ring_input(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ring_input_i(o,v);
}

void RKRGUI::cb_ring_level_i(SliderW* o, void*) {
  rkr->efx_Ring->changepar(3,(int)o->value());
}
void RKRGUI::cb_ring_level(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ring_level_i(o,v);
}

void RKRGUI::cb_ring_pan_i(SliderW* o, void*) {
  rkr->efx_Ring->changepar(1,(int)o->value());
}
void RKRGUI::cb_ring_pan(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ring_pan_i(o,v);
}

void RKRGUI::cb_ring_st_i(Fl_Check_Button* o, void*) {
  rkr->efx_Ring->changepar(6,(int)o->value());
}
void RKRGUI::cb_ring_st(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ring_st_i(o,v);
}

void RKRGUI::cb_ring_afreq_i(Fl_Check_Button* o, void*) {
  rkr->efx_Ring->changepar(12,(int)o->value());
}
void RKRGUI::cb_ring_afreq(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ring_afreq_i(o,v);
}

void RKRGUI::cb_ring_depth_i(SliderW* o, void*) {
  rkr->efx_Ring->changepar(4,(int)o->value());
}
void RKRGUI::cb_ring_depth(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ring_depth_i(o,v);
}

void RKRGUI::cb_ring_freq_i(SliderW* o, void*) {
  rkr->efx_Ring->changepar(5,(int)o->value());
}
void RKRGUI::cb_ring_freq(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ring_freq_i(o,v);
}

void RKRGUI::cb_ring_sin_i(SliderW* o, void*) {
  rkr->efx_Ring->changepar(7,(int)o->value());
}
void RKRGUI::cb_ring_sin(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ring_sin_i(o,v);
}

void RKRGUI::cb_ring_tri_i(SliderW* o, void*) {
  rkr->efx_Ring->changepar(8,(int)o->value());
}
void RKRGUI::cb_ring_tri(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ring_tri_i(o,v);
}

void RKRGUI::cb_ring_saw_i(SliderW* o, void*) {
  rkr->efx_Ring->changepar(9,(int)o->value());
}
void RKRGUI::cb_ring_saw(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ring_saw_i(o,v);
}

void RKRGUI::cb_ring_squ_i(SliderW* o, void*) {
  rkr->efx_Ring->changepar(10,(int)o->value());
}
void RKRGUI::cb_ring_squ(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ring_squ_i(o,v);
}

void RKRGUI::cb_tuner_activar_i(Fl_Light_Button* o, void*) {
  rkr->Tuner_Bypass=(int)o->value();
tuner_bar->value(-32);
WNote->copy_label("");
WRfreq->copy_label("");
WNfreq->copy_label("");
ChangeActives();
TUNER_LABEL->redraw();
}
void RKRGUI::cb_tuner_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_tuner_activar_i(o,v);
}

void RKRGUI::cb_ActivarGeneral_i(Fl_Light_Button* o, void*) {
  rkr->Bypass=o->value();
rkr->val_i_sum=-50.0;
rkr->val_v_sum=-50.0;
rkr->old_v_sum=-50.0;
rkr->old_i_sum=-50.0;
input_vu->value(-50.0);
output_vu->value(-50.0);

ChangeActives();  
LABEL_IO->redraw();

if (!o->value())
   {
    if (rkr->Tuner_Bypass)
        {
           tuner_activar->value(0);
           tuner_activar->do_callback();
        } 
    if (rkr->MIDIConverter_Bypass)  
        {
            nidi_activar->value(0);
            nidi_activar->do_callback();
        }
             
  
rkr->cleanup_efx();

  
};
}
void RKRGUI::cb_ActivarGeneral(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_ActivarGeneral_i(o,v);
}

void RKRGUI::cb_Balance_i(SliderW* o, void*) {
  rkr->Fraction_Bypass=(float)(o->value()/100.0f);
}
void RKRGUI::cb_Balance(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Balance_i(o,v);
}

void RKRGUI::cb_Nivel_Entrada_i(SliderW* o, void*) {
  rkr->Input_Gain=(float)((o->value()+50)/100.0);
rkr->calculavol(1);
}
void RKRGUI::cb_Nivel_Entrada(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Nivel_Entrada_i(o,v);
}

void RKRGUI::cb_Nivel_Salida_i(SliderW* o, void*) {
  rkr->Master_Volume=(float)((o->value()+50)/100.0);
rkr->calculavol(2);
}
void RKRGUI::cb_Nivel_Salida(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Nivel_Salida_i(o,v);
}

void RKRGUI::cb_nidi_activar_i(Fl_Light_Button* o, void*) {
  if ((int)o->value()==0)
{ 
rkr->efx_MIDIConverter->panic();
  Mled->color(fl_darker(FL_RED));
  Mled->redraw();
}


rkr->MIDIConverter_Bypass=(int)o->value();

ChangeActives();
MIDI_LABEL->redraw();
}
void RKRGUI::cb_nidi_activar(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_nidi_activar_i(o,v);
}

void RKRGUI::cb_Midi_out_Counter_i(Fl_Counter* o, void*) {
  rkr->efx_MIDIConverter->setmidichannel((int)o->value()-1);
}
void RKRGUI::cb_Midi_out_Counter(Fl_Counter* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Midi_out_Counter_i(o,v);
}

void RKRGUI::cb_Trig_Adj_i(SliderW* o, void*) {
  rkr->efx_MIDIConverter->setTriggerAdjust((int)o->value());
}
void RKRGUI::cb_Trig_Adj(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Trig_Adj_i(o,v);
}

void RKRGUI::cb_Vel_Adj_i(SliderW* o, void*) {
  rkr->efx_MIDIConverter->setVelAdjust((int)o->value());
}
void RKRGUI::cb_Vel_Adj(SliderW* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Vel_Adj_i(o,v);
}

void RKRGUI::cb_MIDI_LABEL_i(Fl_Box*, void*) {
  int ok;
char *filename;

#define EXT ".rkrb"
filename=fl_file_chooser("Save Bank File:","(*"EXT")",rkr->Bank_Saved,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
#undef EXT
ok=rkr->savebank(filename);
if (ok)
{
strcpy(rkr->Bank_Saved,filename);
BankWin_Label(filename);
rkr->modified=0;
};
}
void RKRGUI::cb_MIDI_LABEL(Fl_Box* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_MIDI_LABEL_i(o,v);
}

void RKRGUI::cb_S_new_i(Fl_Button*, void*) {
  rkr->New();
DisAssigns();
Put_Loaded();
}
void RKRGUI::cb_S_new(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_S_new_i(o,v);
}

void RKRGUI::cb_L_preset_i(Fl_Button*, void*) {
  char *filename;
filename=fl_file_chooser("Load Preset:","(*.rkr)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkr");
rkr->loadfile(filename);
Put_Loaded();
}
void RKRGUI::cb_L_preset(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_L_preset_i(o,v);
}

void RKRGUI::cb_S_preset_i(Fl_Button*, void*) {
  char *filename;
#define EXT ".rkr"
filename=fl_file_chooser("Save Preset:","(*"EXT")",rkr->Preset_Name,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,EXT);
#undef EXT
rkr->savefile(filename);
}
void RKRGUI::cb_S_preset(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_S_preset_i(o,v);
}

void RKRGUI::cb_Compare_i(Fl_Light_Button* o, void*) {
  if ((int) o->value())
{
rkr->Preset_to_Bank(0);
rkr->Bank_to_Preset((int)Preset_Counter->value());
Put_Loaded();
}

else
{
 rkr->Bank_to_Preset(0);
 Put_Loaded();
};
}
void RKRGUI::cb_Compare(Fl_Light_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Compare_i(o,v);
}

void RKRGUI::cb_B_preset_i(Fl_Button*, void*) {
  BankWindow->show();
put_icon(BankWindow);
if(!made) make_window_banks();
}
void RKRGUI::cb_B_preset(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_B_preset_i(o,v);
}

void RKRGUI::cb_WPreset_Name_i(Fl_Input* o, void*) {
  strcpy(rkr->Preset_Name,o->value());
}
void RKRGUI::cb_WPreset_Name(Fl_Input* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_WPreset_Name_i(o,v);
}

void RKRGUI::cb_Preset_Counter_i(Fl_Counter* o, void*) {
  unlight_preset(rkr->Selected_Preset);
rkr->Bank_to_Preset((int) o->value());
light_preset((int)o->value());
rkr->Selected_Preset=(int)o->value();
FillML(0);
Put_Loaded();
}
void RKRGUI::cb_Preset_Counter(Fl_Counter* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Preset_Counter_i(o,v);
}

void RKRGUI::cb_Open_Order_i(Fl_Button*, void*) {
  int i,j,k,t;
Order_Bro->clear();
Avail_Bro->clear();

for (i=0; i<10;i++) 
{
rkr->new_order[i]=rkr->efx_order[i];
rkr->saved_order[i]=rkr->efx_order[i];
Order_Bro->add(rkr->efx_names[rkr->efx_order[i]].Nom);
}


t=1;

for (i=0; i<rkr->NumEffects;i++)
{
    k=0;
 for (j=0;j<10;j++)
   { 
     if (rkr->efx_order[j]==i) k=1;
   }     
 
 if(!k)
 
 { 
  Avail_Bro->add(rkr->efx_names[i].Nom);
  rkr->availables[t]=i;
  t++;
 }

}

Order_Bro->select(1);
Avail_Bro->select(1);

Order->show();
put_icon(Order);
}
void RKRGUI::cb_Open_Order(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Open_Order_i(o,v);
}

void RKRGUI::cb_Etit_i(Fl_Button* o, void*) {
  if(rkr->Bypass)
{
o->hide();
Analy->show();
Analyzer_ON=1;
};
}
void RKRGUI::cb_Etit(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Etit_i(o,v);
}

void RKRGUI::cb_BankWindow_i(Fl_Double_Window* o, void*) {
  o->hide();
save_stat(1);
}
void RKRGUI::cb_BankWindow(Fl_Double_Window* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_BankWindow_i(o,v);
}

void RKRGUI::cb_NewB_i(Fl_Menu_*, void*) {
  rkr->New_Bank();
BankWindow->redraw();
}
void RKRGUI::cb_NewB(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_NewB_i(o,v);
}

void RKRGUI::cb_Load_Bank_i(Fl_Menu_*, void*) {
  int ok;
char *filename;
is_modified();
filename=fl_file_chooser("Load Bank File:","(*.rkrb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkrb");
ok=rkr->loadbank(filename);
if(ok) 
{
BankWin_Label(filename);
Put_Loaded_Bank();

};
}
void RKRGUI::cb_Load_Bank(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Load_Bank_i(o,v);
}

void RKRGUI::cb_Save_Bank_i(Fl_Menu_*, void*) {
  MIDI_LABEL->do_callback();
}
void RKRGUI::cb_Save_Bank(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Save_Bank_i(o,v);
}

void RKRGUI::cb_Convert_Old_Bank_i(Fl_Menu_*, void*) {
  char *filename;
char name[64];
bzero(name,sizeof(name));
sprintf(name,"%s %s",rkr->jackcliname, VERSION);

filename=fl_file_chooser("Convert Old Bank File:","(*.rkrb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkrb");

if(rkr->CheckOldBank(filename))
{
rkr->ConvertOldFile(filename);
rkr->Message(name, "Please, now try to load the new files");
}
else
rkr->Message(name, "This file has already the new format");
}
void RKRGUI::cb_Convert_Old_Bank(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Convert_Old_Bank_i(o,v);
}

void RKRGUI::cb_salirB_i(Fl_Menu_*, void*) {
  BankWindow->do_callback();
}
void RKRGUI::cb_salirB(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_salirB_i(o,v);
}

void RKRGUI::cb_ContenidoB_i(Fl_Menu_*, void*) {
  show_help();
}
void RKRGUI::cb_ContenidoB(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_ContenidoB_i(o,v);
}

void RKRGUI::cb_Acerca_deB_i(Fl_Menu_*, void*) {
  int x,y;

x = BankWindow->x()+((BankWindow->w()-420)/2);
y = BankWindow->y()+((BankWindow->h()-230)/2);

AboutWin->position(x,y);
AboutWin->show();
put_icon(AboutWin);
}
void RKRGUI::cb_Acerca_deB(Fl_Menu_* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Acerca_deB_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_MenuB[] = {
 {gettext("&File"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 7},
 {gettext("New"), 0,  (Fl_Callback*)RKRGUI::cb_NewB, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Load Bank"), 0,  (Fl_Callback*)RKRGUI::cb_Load_Bank, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Save Bank"), 0,  (Fl_Callback*)RKRGUI::cb_Save_Bank, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Convert Old Bank"), 0,  (Fl_Callback*)RKRGUI::cb_Convert_Old_Bank, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Close"), 0,  (Fl_Callback*)RKRGUI::cb_salirB, 0, 0, FL_NORMAL_LABEL, 0, 14, 7},
 {0,0,0,0,0,0,0,0,0},
 {gettext("&Help"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 7},
 {gettext("Help Contents"), 0,  (Fl_Callback*)RKRGUI::cb_ContenidoB, 0, 0, FL_NORMAL_LABEL, 0, 14, 7},
 {gettext("About..."), 0,  (Fl_Callback*)RKRGUI::cb_Acerca_deB, 0, 0, FL_NORMAL_LABEL, 0, 14, 7},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* RKRGUI::ArchivoB = RKRGUI::menu_MenuB + 0;
Fl_Menu_Item* RKRGUI::NewB = RKRGUI::menu_MenuB + 1;
Fl_Menu_Item* RKRGUI::Load_Bank = RKRGUI::menu_MenuB + 2;
Fl_Menu_Item* RKRGUI::Save_Bank = RKRGUI::menu_MenuB + 3;
Fl_Menu_Item* RKRGUI::Convert_Old_Bank = RKRGUI::menu_MenuB + 4;
Fl_Menu_Item* RKRGUI::salirB = RKRGUI::menu_MenuB + 5;
Fl_Menu_Item* RKRGUI::AyudaB = RKRGUI::menu_MenuB + 7;
Fl_Menu_Item* RKRGUI::ContenidoB = RKRGUI::menu_MenuB + 8;
Fl_Menu_Item* RKRGUI::Acerca_deB = RKRGUI::menu_MenuB + 9;

void RKRGUI::cb_Order_i(Fl_Double_Window*, void*) {
  save_stat(2);
Order->hide();
}
void RKRGUI::cb_Order(Fl_Double_Window* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_Order_i(o,v);
}

void RKRGUI::cb_Pon_i(Fl_Button*, void*) {
  int x;



int i = Order_Bro->value();
int j = Avail_Bro->value();


Avail_Bro->insert(j,Order_Bro->text(i));
Order_Bro->insert(i,Avail_Bro->text(j+1));

Avail_Bro->remove(j+1);
Order_Bro->remove(i+1);

Order_Bro->select(1);
Avail_Bro->select(1);

x=rkr->new_order[i-1];
rkr->new_order[i-1]=rkr->availables[j];

rkr->availables[j]=x;
}
void RKRGUI::cb_Pon(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Pon_i(o,v);
}

void RKRGUI::cb_Sube_i(Fl_Button*, void*) {
  int x,x1;

int i = Order_Bro->value();

Order_Bro->move(i,i-1);

i--;

if (i>0) 
{
x=rkr->new_order[i];
x1=rkr->new_order[i-1];

rkr->new_order[i]=x1;
rkr->new_order[i-1]=x;
};
}
void RKRGUI::cb_Sube(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Sube_i(o,v);
}

void RKRGUI::cb_Baja_i(Fl_Button*, void*) {
  int x,x1;

int i = Order_Bro->value();

Order_Bro->move(i,i+1);

i--;

if (i<9)
{
x=rkr->new_order[i];
x1=rkr->new_order[i+1];

rkr->new_order[i]=x1;
rkr->new_order[i+1]=x;
};
}
void RKRGUI::cb_Baja(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Baja_i(o,v);
}

void RKRGUI::cb_ok_order_i(Fl_Button*, void*) {
  int i;
for (i=0;i<14;i++) rkr->efx_order[i]=rkr->new_order[i];
reordena();
Order->do_callback();
}
void RKRGUI::cb_ok_order(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_ok_order_i(o,v);
}

void RKRGUI::cb_Cancel_order_i(Fl_Button*, void*) {
  int i;
for (i=0;i<14;i++) rkr->efx_order[i]=rkr->saved_order[i];
Order->do_callback();
}
void RKRGUI::cb_Cancel_order(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Cancel_order_i(o,v);
}

void RKRGUI::cb_Settings_i(Fl_Double_Window*, void*) {
  save_stat(3);
Settings->hide();
}
void RKRGUI::cb_Settings(Fl_Double_Window* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_Settings_i(o,v);
}

void RKRGUI::cb_Prefs_OK_i(Fl_Button*, void*) {
  Settings->do_callback();
}
void RKRGUI::cb_Prefs_OK(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Prefs_OK_i(o,v);
}

void RKRGUI::cb_B_C_i(Fl_Button*, void*) {
  uchar r,g,b;

Fl::get_color(fore_color,r,g,b);
if (!fl_color_chooser("rakarrak buttons color:",r,g,b)) return;
fore_color=fl_rgb_color(r,g,b);
Buttons_Color_Change(fore_color);
}
void RKRGUI::cb_B_C(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_B_C_i(o,v);
}

void RKRGUI::cb_L_C_i(Fl_Button*, void*) {
  uchar r,g,b;
Fl::get_color(leds_color,r,g,b);
if (!fl_color_chooser("rakarrack leds color:",r,g,b)) return;
leds_color=fl_rgb_color(r,g,b);
Leds_Color_Change(leds_color);
}
void RKRGUI::cb_L_C(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_L_C_i(o,v);
}

void RKRGUI::cb_K_C_i(Fl_Button*, void*) {
  uchar r,g,b;
Fl::get_color(back_color,r,g,b);
if (!fl_color_chooser("rakarrack back color:",r,g,b)) return;
back_color=fl_rgb_color(r,g,b);
Background_Color_Change(back_color);
}
void RKRGUI::cb_K_C(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_K_C_i(o,v);
}

void RKRGUI::cb_A_C_i(Fl_Button*, void*) {
  uchar r,g,b;
Fl::get_color(label_color,r,g,b);
if (!fl_color_chooser("rakarrack label color:",r,g,b)) return;
label_color=fl_rgb_color(r,g,b);
Label_Color_Change(label_color);
}
void RKRGUI::cb_A_C(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_A_C_i(o,v);
}

void RKRGUI::cb_scheme_ch_i(Fl_Choice* o, void*) {
  switch ((int)o->value())

{

  case 0:

Fl::scheme("");
Fl::redraw();
break;

  case 1:

Fl::scheme("none");
Fl::redraw();
break;

  case 2:

Fl::scheme("gtk+");
Fl::redraw();
break;

  case 3:

Fl::scheme("plastic");
Fl::redraw();
break;

};
}
void RKRGUI::cb_scheme_ch(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_scheme_ch_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_scheme_ch[] = {
 {gettext("X11"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {gettext("fltk"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {gettext("gtk+"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {gettext("plastic"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_BI_Browser_i(Fl_Button*, void*) {
  char *filename;
filename=fl_file_chooser("Browse:","(*.png)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".png");
BackFiname->value(filename);
strcpy(rkr->BackgroundImage,filename);
PutBackground();
}
void RKRGUI::cb_BI_Browser(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_BI_Browser_i(o,v);
}

void RKRGUI::cb_FSplus_i(Fl_Button*, void*) {
  rkr->relfontsize++;
chfsize(1);
}
void RKRGUI::cb_FSplus(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_FSplus_i(o,v);
}

void RKRGUI::cb_FSless_i(Fl_Button*, void*) {
  rkr->relfontsize--;
chfsize(-1);
}
void RKRGUI::cb_FSless(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_FSless_i(o,v);
}

void RKRGUI::cb_Pre_Serve_i(Fl_Check_Button* o, void*) {
  rkr->actuvol=(int) o->value();
}
void RKRGUI::cb_Pre_Serve(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Pre_Serve_i(o,v);
}

void RKRGUI::cb_Har_Qual_i(Fl_Choice* o, void*) {
  int i = (int) o->value();

switch(i)
{
     case 0:
       rkr->HarQual=4;
       break;
     case 1:
       rkr->HarQual=8;
       break;
     case 2:
       rkr->HarQual=16;	
	break;	
}


Fl_Widget *w = fl_message_icon();
w->parent()->copy_label(rkr->jackcliname);         
fl_message("This setting will be changed the next time you run rakarrack");
}
void RKRGUI::cb_Har_Qual(Fl_Choice* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Har_Qual_i(o,v);
}

Fl_Menu_Item RKRGUI::menu_Har_Qual[] = {
 {gettext("4"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("8"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {gettext("16"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void RKRGUI::cb_INSTATE_i(Fl_Check_Button* o, void*) {
  rkr->init_state=(int) o->value();
}
void RKRGUI::cb_INSTATE(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_INSTATE_i(o,v);
}

void RKRGUI::cb_D_A_Connect_i(Fl_Check_Button* o, void*) {
  rkr->aconnect_MI=(int) o->value();

if (rkr->aconnect_MI) BMidiIn->activate();
else BMidiIn->deactivate();
}
void RKRGUI::cb_D_A_Connect(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_D_A_Connect_i(o,v);
}

void RKRGUI::cb_BMidiIn_i(Fl_Browser* o, void*) {
  int valor;
valor = (int) o->value();
strcpy(rkr->MID,o->text(valor));
o->select(valor,1);
rkr->Conecta();
}
void RKRGUI::cb_BMidiIn(Fl_Browser* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_BMidiIn_i(o,v);
}

void RKRGUI::cb_Midi_In_Counter_i(Fl_Counter* o, void*) {
  rkr->MidiCh=(int)o->value()-1;
}
void RKRGUI::cb_Midi_In_Counter(Fl_Counter* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Midi_In_Counter_i(o,v);
}

void RKRGUI::cb_Har_In_Counter_i(Fl_Counter* o, void*) {
  rkr->HarCh=(int)o->value()-1;
}
void RKRGUI::cb_Har_In_Counter(Fl_Counter* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Har_In_Counter_i(o,v);
}

void RKRGUI::cb_Mw0_i(Fl_Check_Button*, void*) {
  rkr->MIDIway=0;
ML_Menu->deactivate();
}
void RKRGUI::cb_Mw0(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Mw0_i(o,v);
}

void RKRGUI::cb_Mw1_i(Fl_Check_Button*, void*) {
  rkr->MIDIway=1;
ML_Menu->activate();
}
void RKRGUI::cb_Mw1(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Mw1_i(o,v);
}

void RKRGUI::cb_D_J_Connect_i(Fl_Check_Button* o, void*) {
  rkr->aconnect_JA=(int) o->value();

if (rkr->aconnect_JA) JackCo->activate();
else JackCo->deactivate();
}
void RKRGUI::cb_D_J_Connect(Fl_Check_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_D_J_Connect_i(o,v);
}

void RKRGUI::cb_Username_i(Fl_Input* o, void*) {
  rkr->UserRealName=(char*) o->value();
}
void RKRGUI::cb_Username(Fl_Input* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_Username_i(o,v);
}

void RKRGUI::cb_BF_Browser_i(Fl_Button*, void*) {
  char *filename;
filename=fl_file_chooser("Browse:","(*.rkrb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkrb");
BFiname->value(filename);
strcpy(rkr->BankFilename,filename);
}
void RKRGUI::cb_BF_Browser(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->cb_BF_Browser_i(o,v);
}

void RKRGUI::cb_MIDILearn_i(Fl_Double_Window*, void*) {
  save_stat(5);
MIDILearn->hide();
}
void RKRGUI::cb_MIDILearn(Fl_Double_Window* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_MIDILearn_i(o,v);
}

void RKRGUI::cb_Epar_i(Fl_Browser*, void*) {
  DisAssigns();
}
void RKRGUI::cb_Epar(Fl_Browser* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Epar_i(o,v);
}

void RKRGUI::cb_GMM_i(Fl_Button*, void*) {
  rkr->ControlGet=0;
rkr->CountWait=0;
rkr->RControl=1;
}
void RKRGUI::cb_GMM(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_GMM_i(o,v);
}

void RKRGUI::cb_CopyF_i(Fl_Button*, void*) {
  memcpy(rkr->XUserMIDI,rkr->Bank[TPresets->value()].XUserMIDI,sizeof(rkr->XUserMIDI));

DisAssigns();
}
void RKRGUI::cb_CopyF(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_CopyF_i(o,v);
}

void RKRGUI::cb_CopyT_i(Fl_Button*, void*) {
  memcpy(rkr->Bank[TPresets->value()].XUserMIDI,rkr->XUserMIDI, sizeof(rkr->XUserMIDI));
}
void RKRGUI::cb_CopyT(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_CopyT_i(o,v);
}

void RKRGUI::cb_ClearA_i(Fl_Button*, void*) {
  int i, j;

for(i=0; i<128; i++)
  {
    for(j=0;j<20;j++)
      {
         if (rkr->XUserMIDI[i][j] == rkr->efx_params[(int)Epar->value()-1].Ato)
            rkr->XUserMIDI[i][j]=0; 
       
       }  
   }
   
DisAssigns();
}
void RKRGUI::cb_ClearA(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_ClearA_i(o,v);
}

void RKRGUI::cb_ClearP_i(Fl_Button*, void*) {
  memset(rkr->XUserMIDI, 0, sizeof(rkr->XUserMIDI));
DisAssigns();
}
void RKRGUI::cb_ClearP(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_ClearP_i(o,v);
}

void RKRGUI::cb_Assign_i(Fl_Button*, void*) {
  int i;

for(i=0;i<20;i++)
 {
    if(rkr->XUserMIDI[(int)Disp_Control->value()][i] ==0)
       {
         rkr->XUserMIDI[(int)Disp_Control->value()][i]=rkr->efx_params[(int)Epar->value()-1].Ato;
         break;
        }
 }
 
 
DisAssigns();
}
void RKRGUI::cb_Assign(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_Assign_i(o,v);
}

void RKRGUI::cb_CloseML_i(Fl_Button*, void*) {
  MIDILearn->do_callback();
}
void RKRGUI::cb_CloseML(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_CloseML_i(o,v);
}

void RKRGUI::cb_CancelRec_i(Fl_Button*, void*) {
  rkr->RControl = 0;
GMM->color(fore_color);
GMM->redraw();
}
void RKRGUI::cb_CancelRec(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_CancelRec_i(o,v);
}

void RKRGUI::cb_AboutWin_i(Fl_Double_Window*, void*) {
  AboutWin->hide();
}
void RKRGUI::cb_AboutWin(Fl_Double_Window* o, void* v) {
  ((RKRGUI*)(o->user_data()))->cb_AboutWin_i(o,v);
}

void RKRGUI::cb_LICENSE_i(Fl_Button*, void*) {
  show_lic();
}
void RKRGUI::cb_LICENSE(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_LICENSE_i(o,v);
}

void RKRGUI::cb_OK_i(Fl_Button*, void*) {
  AboutWin->hide();
}
void RKRGUI::cb_OK(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

Fl_Double_Window* RKRGUI::make_window() {
  { Principal = new Fl_Double_Window(800, 600);
    Principal->box(FL_DOWN_BOX);
    Principal->color((Fl_Color)FL_FOREGROUND_COLOR);
    Principal->callback((Fl_Callback*)cb_Principal, (void*)(this));
    { fondo = new Fl_Box(1, 1, 800, 600);
    } // Fl_Box* fondo
    { MenuP = new Fl_Menu_Bar(2, 2, 795, 18);
      MenuP->box(FL_NO_BOX);
      MenuP->color((Fl_Color)178);
      MenuP->selection_color((Fl_Color)FL_BACKGROUND2_COLOR);
      MenuP->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      MenuP->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      MenuP->align(96|FL_ALIGN_INSIDE);
      MenuP->menu(menu_MenuP);
    } // Fl_Menu_Bar* MenuP
    { MT = new Fl_Box(579, 128, 20, 22);
      MT->labelsize(18);
      MT->callback((Fl_Callback*)cb_MT);
    } // Fl_Box* MT
    { TITTLE_L = new Fl_Button(555, 25, 226, 65, gettext("Rakarrack"));
      TITTLE_L->type(1);
      TITTLE_L->box(FL_NO_BOX);
      TITTLE_L->labeltype(FL_EMBOSSED_LABEL);
      TITTLE_L->labelfont(1);
      TITTLE_L->labelsize(40);
      TITTLE_L->callback((Fl_Callback*)cb_TITTLE_L);
      TITTLE_L->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
    } // Fl_Button* TITTLE_L
    { DESC_L = new Fl_Box(588, 64, 142, 14, gettext("Audio F/X"));
      DESC_L->labeltype(FL_EMBOSSED_LABEL);
      DESC_L->labelfont(1);
      DESC_L->labelsize(16);
      DESC_L->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
    } // Fl_Box* DESC_L
    { Sco = new Scope(545, 19, 226, 65, gettext("Rakarrack"));
      Sco->box(FL_NO_BOX);
      Sco->color((Fl_Color)FL_BACKGROUND_COLOR);
      Sco->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      Sco->labeltype(FL_EMBOSSED_LABEL);
      Sco->labelfont(1);
      Sco->labelsize(40);
      Sco->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      Sco->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
      Sco->when(FL_WHEN_RELEASE);
      Sco->hide();
    } // Scope* Sco
    { E1 = new Fl_Box(2, 212, 1, 1);
      E1->labelsize(18);
      E1->hide();
      E1->deactivate();
    } // Fl_Box* E1
    { E2 = new Fl_Box(162, 212, 1, 1);
      E2->labelsize(18);
      E2->hide();
      E2->deactivate();
    } // Fl_Box* E2
    { E3 = new Fl_Box(322, 212, 1, 1);
      E3->labelsize(18);
      E3->hide();
      E3->deactivate();
    } // Fl_Box* E3
    { E4 = new Fl_Box(482, 212, 1, 1);
      E4->labelsize(18);
      E4->hide();
      E4->deactivate();
    } // Fl_Box* E4
    { E5 = new Fl_Box(642, 212, 1, 1);
      E5->labelsize(18);
      E5->hide();
      E5->deactivate();
    } // Fl_Box* E5
    { E6 = new Fl_Box(2, 413, 1, 1);
      E6->labelsize(18);
      E6->hide();
      E6->deactivate();
    } // Fl_Box* E6
    { E7 = new Fl_Box(162, 413, 1, 1);
      E7->labelsize(18);
      E7->hide();
      E7->deactivate();
    } // Fl_Box* E7
    { E8 = new Fl_Box(322, 413, 1, 1);
      E8->labelsize(18);
      E8->hide();
      E8->deactivate();
    } // Fl_Box* E8
    { E9 = new Fl_Box(483, 413, 1, 1);
      E9->labelsize(18);
      E9->hide();
      E9->deactivate();
    } // Fl_Box* E9
    { E10 = new Fl_Box(642, 413, 1, 1);
      E10->labelsize(18);
      E10->hide();
      E10->deactivate();
    } // Fl_Box* E10
    { L1 = new Fl_Box(2, 195, 158, 17, gettext("label"));
      L1->labelfont(1);
      L1->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
    } // Fl_Box* L1
    { L2 = new Fl_Box(162, 195, 158, 17, gettext("label"));
      L2->labelfont(1);
      L2->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
    } // Fl_Box* L2
    { L3 = new Fl_Box(322, 195, 158, 17, gettext("label"));
      L3->labelfont(1);
      L3->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
    } // Fl_Box* L3
    { L4 = new Fl_Box(482, 195, 158, 17, gettext("label"));
      L4->labelfont(1);
      L4->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
    } // Fl_Box* L4
    { L5 = new Fl_Box(642, 195, 157, 17, gettext("label"));
      L5->labelfont(1);
      L5->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
    } // Fl_Box* L5
    { L6 = new Fl_Box(1, 396, 158, 17, gettext("label"));
      L6->labelfont(1);
      L6->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
    } // Fl_Box* L6
    { L7 = new Fl_Box(162, 396, 158, 17, gettext("label"));
      L7->labelfont(1);
      L7->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
    } // Fl_Box* L7
    { L8 = new Fl_Box(322, 396, 158, 17, gettext("label"));
      L8->labelfont(1);
      L8->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
    } // Fl_Box* L8
    { L9 = new Fl_Box(482, 396, 158, 17, gettext("label"));
      L9->labelfont(1);
      L9->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
    } // Fl_Box* L9
    { L10 = new Fl_Box(642, 396, 154, 17, gettext("label"));
      L10->labelfont(1);
      L10->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
    } // Fl_Box* L10
    { EQ = new Fl_Group(2, 212, 158, 184);
      EQ->box(FL_UP_BOX);
      EQ->color((Fl_Color)FL_FOREGROUND_COLOR);
      EQ->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      EQ->labelfont(1);
      EQ->align(96|FL_ALIGN_INSIDE);
      { eq_activar = new Fl_Light_Button(7, 216, 34, 18, gettext("On"));
        eq_activar->shortcut(0x31);
        eq_activar->color((Fl_Color)62);
        eq_activar->selection_color((Fl_Color)1);
        eq_activar->labelsize(10);
        eq_activar->callback((Fl_Callback*)cb_eq_activar);
        eq_activar->align(68|FL_ALIGN_INSIDE);
        eq_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* eq_activar
      { eq_preset = new Fl_Choice(79, 216, 76, 18, gettext("Preset"));
        eq_preset->down_box(FL_BORDER_BOX);
        eq_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        eq_preset->labelsize(10);
        eq_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_preset->textsize(10);
        eq_preset->callback((Fl_Callback*)cb_eq_preset);
        eq_preset->when(FL_WHEN_RELEASE_ALWAYS);
        eq_preset->menu(menu_eq_preset);
      } // Fl_Choice* eq_preset
      { eq_Gain = new SliderW(51, 238, 100, 10, gettext("Gain"));
        eq_Gain->type(5);
        eq_Gain->box(FL_FLAT_BOX);
        eq_Gain->color((Fl_Color)178);
        eq_Gain->selection_color((Fl_Color)62);
        eq_Gain->labeltype(FL_NORMAL_LABEL);
        eq_Gain->labelfont(0);
        eq_Gain->labelsize(10);
        eq_Gain->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_Gain->minimum(-64);
        eq_Gain->maximum(63);
        eq_Gain->step(1);
        eq_Gain->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_Gain->callback((Fl_Callback*)cb_eq_Gain);
        eq_Gain->align(FL_ALIGN_LEFT);
        eq_Gain->when(FL_WHEN_CHANGED);
      } // SliderW* eq_Gain
      { eq_Q = new SliderW(51, 251, 100, 10, gettext("Q"));
        eq_Q->type(5);
        eq_Q->box(FL_FLAT_BOX);
        eq_Q->color((Fl_Color)178);
        eq_Q->selection_color((Fl_Color)62);
        eq_Q->labeltype(FL_NORMAL_LABEL);
        eq_Q->labelfont(0);
        eq_Q->labelsize(10);
        eq_Q->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_Q->minimum(-64);
        eq_Q->maximum(63);
        eq_Q->step(1);
        eq_Q->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_Q->callback((Fl_Callback*)cb_eq_Q);
        eq_Q->align(FL_ALIGN_LEFT);
        eq_Q->when(FL_WHEN_CHANGED);
      } // SliderW* eq_Q
      { eq_1 = new SliderW(51, 270, 100, 10, gettext("31 Hz"));
        eq_1->type(5);
        eq_1->box(FL_FLAT_BOX);
        eq_1->color((Fl_Color)178);
        eq_1->selection_color((Fl_Color)62);
        eq_1->labeltype(FL_NORMAL_LABEL);
        eq_1->labelfont(0);
        eq_1->labelsize(10);
        eq_1->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_1->minimum(-64);
        eq_1->maximum(63);
        eq_1->step(1);
        eq_1->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_1->callback((Fl_Callback*)cb_eq_1);
        eq_1->align(FL_ALIGN_LEFT);
        eq_1->when(FL_WHEN_CHANGED);
      } // SliderW* eq_1
      { eq_2 = new SliderW(51, 282, 100, 10, gettext("63 Hz"));
        eq_2->type(5);
        eq_2->box(FL_FLAT_BOX);
        eq_2->color((Fl_Color)178);
        eq_2->selection_color((Fl_Color)62);
        eq_2->labeltype(FL_NORMAL_LABEL);
        eq_2->labelfont(0);
        eq_2->labelsize(10);
        eq_2->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_2->minimum(-64);
        eq_2->maximum(63);
        eq_2->step(1);
        eq_2->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_2->callback((Fl_Callback*)cb_eq_2);
        eq_2->align(FL_ALIGN_LEFT);
        eq_2->when(FL_WHEN_CHANGED);
      } // SliderW* eq_2
      { eq_3 = new SliderW(51, 294, 100, 10, gettext("125 Hz"));
        eq_3->type(5);
        eq_3->box(FL_FLAT_BOX);
        eq_3->color((Fl_Color)178);
        eq_3->selection_color((Fl_Color)62);
        eq_3->labeltype(FL_NORMAL_LABEL);
        eq_3->labelfont(0);
        eq_3->labelsize(10);
        eq_3->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_3->minimum(-64);
        eq_3->maximum(63);
        eq_3->step(1);
        eq_3->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_3->callback((Fl_Callback*)cb_eq_3);
        eq_3->align(FL_ALIGN_LEFT);
        eq_3->when(FL_WHEN_CHANGED);
      } // SliderW* eq_3
      { eq_4 = new SliderW(51, 307, 100, 10, gettext("250 Hz"));
        eq_4->type(5);
        eq_4->box(FL_FLAT_BOX);
        eq_4->color((Fl_Color)178);
        eq_4->selection_color((Fl_Color)62);
        eq_4->labeltype(FL_NORMAL_LABEL);
        eq_4->labelfont(0);
        eq_4->labelsize(10);
        eq_4->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_4->minimum(-64);
        eq_4->maximum(63);
        eq_4->step(1);
        eq_4->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_4->callback((Fl_Callback*)cb_eq_4);
        eq_4->align(FL_ALIGN_LEFT);
        eq_4->when(FL_WHEN_CHANGED);
      } // SliderW* eq_4
      { eq_5 = new SliderW(51, 319, 100, 10, gettext("500 Hz"));
        eq_5->type(5);
        eq_5->box(FL_FLAT_BOX);
        eq_5->color((Fl_Color)178);
        eq_5->selection_color((Fl_Color)62);
        eq_5->labeltype(FL_NORMAL_LABEL);
        eq_5->labelfont(0);
        eq_5->labelsize(10);
        eq_5->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_5->minimum(-64);
        eq_5->maximum(63);
        eq_5->step(1);
        eq_5->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_5->callback((Fl_Callback*)cb_eq_5);
        eq_5->align(FL_ALIGN_LEFT);
        eq_5->when(FL_WHEN_CHANGED);
      } // SliderW* eq_5
      { eq_6 = new SliderW(51, 331, 100, 10, gettext("1 Khz"));
        eq_6->type(5);
        eq_6->box(FL_FLAT_BOX);
        eq_6->color((Fl_Color)178);
        eq_6->selection_color((Fl_Color)62);
        eq_6->labeltype(FL_NORMAL_LABEL);
        eq_6->labelfont(0);
        eq_6->labelsize(10);
        eq_6->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_6->minimum(-64);
        eq_6->maximum(63);
        eq_6->step(1);
        eq_6->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_6->callback((Fl_Callback*)cb_eq_6);
        eq_6->align(FL_ALIGN_LEFT);
        eq_6->when(FL_WHEN_CHANGED);
      } // SliderW* eq_6
      { eq_7 = new SliderW(51, 344, 100, 10, gettext("2 Khz"));
        eq_7->type(5);
        eq_7->box(FL_FLAT_BOX);
        eq_7->color((Fl_Color)178);
        eq_7->selection_color((Fl_Color)62);
        eq_7->labeltype(FL_NORMAL_LABEL);
        eq_7->labelfont(0);
        eq_7->labelsize(10);
        eq_7->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_7->minimum(-64);
        eq_7->maximum(63);
        eq_7->step(1);
        eq_7->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_7->callback((Fl_Callback*)cb_eq_7);
        eq_7->align(FL_ALIGN_LEFT);
        eq_7->when(FL_WHEN_CHANGED);
      } // SliderW* eq_7
      { eq_8 = new SliderW(51, 356, 100, 10, gettext("4 Khz"));
        eq_8->type(5);
        eq_8->box(FL_FLAT_BOX);
        eq_8->color((Fl_Color)178);
        eq_8->selection_color((Fl_Color)62);
        eq_8->labeltype(FL_NORMAL_LABEL);
        eq_8->labelfont(0);
        eq_8->labelsize(10);
        eq_8->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_8->minimum(-64);
        eq_8->maximum(63);
        eq_8->step(1);
        eq_8->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_8->callback((Fl_Callback*)cb_eq_8);
        eq_8->align(FL_ALIGN_LEFT);
        eq_8->when(FL_WHEN_CHANGED);
      } // SliderW* eq_8
      { eq_9 = new SliderW(51, 368, 100, 10, gettext("8 Khz"));
        eq_9->type(5);
        eq_9->box(FL_FLAT_BOX);
        eq_9->color((Fl_Color)178);
        eq_9->selection_color((Fl_Color)62);
        eq_9->labeltype(FL_NORMAL_LABEL);
        eq_9->labelfont(0);
        eq_9->labelsize(10);
        eq_9->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_9->minimum(-64);
        eq_9->maximum(63);
        eq_9->step(1);
        eq_9->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_9->callback((Fl_Callback*)cb_eq_9);
        eq_9->align(FL_ALIGN_LEFT);
        eq_9->when(FL_WHEN_CHANGED);
      } // SliderW* eq_9
      { eq_10 = new SliderW(51, 381, 100, 10, gettext("16 Khz"));
        eq_10->type(5);
        eq_10->box(FL_FLAT_BOX);
        eq_10->color((Fl_Color)178);
        eq_10->selection_color((Fl_Color)62);
        eq_10->labeltype(FL_NORMAL_LABEL);
        eq_10->labelfont(0);
        eq_10->labelsize(10);
        eq_10->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_10->minimum(-64);
        eq_10->maximum(63);
        eq_10->step(1);
        eq_10->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eq_10->callback((Fl_Callback*)cb_eq_10);
        eq_10->align(FL_ALIGN_LEFT);
        eq_10->when(FL_WHEN_CHANGED);
      } // SliderW* eq_10
      EQ->end();
    } // Fl_Group* EQ
    { COMPRESS = new Fl_Group(161, 212, 158, 184);
      COMPRESS->box(FL_UP_BOX);
      COMPRESS->color((Fl_Color)FL_FOREGROUND_COLOR);
      COMPRESS->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      COMPRESS->labelfont(1);
      COMPRESS->align(96|FL_ALIGN_INSIDE);
      { compress_activar = new Fl_Light_Button(166, 216, 34, 18, gettext("On"));
        compress_activar->shortcut(0x32);
        compress_activar->color((Fl_Color)62);
        compress_activar->selection_color((Fl_Color)1);
        compress_activar->labelsize(10);
        compress_activar->callback((Fl_Callback*)cb_compress_activar);
        compress_activar->align(68|FL_ALIGN_INSIDE);
        compress_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* compress_activar
      { compress_preset = new Fl_Choice(238, 216, 76, 18, gettext("Preset"));
        compress_preset->down_box(FL_BORDER_BOX);
        compress_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        compress_preset->labelsize(10);
        compress_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        compress_preset->textsize(10);
        compress_preset->callback((Fl_Callback*)cb_compress_preset);
        compress_preset->when(FL_WHEN_RELEASE_ALWAYS);
        compress_preset->menu(menu_compress_preset);
      } // Fl_Choice* compress_preset
      { compress_ATime = new SliderW(212, 251, 100, 10, gettext("A. Time"));
        compress_ATime->type(5);
        compress_ATime->box(FL_FLAT_BOX);
        compress_ATime->color((Fl_Color)178);
        compress_ATime->selection_color((Fl_Color)62);
        compress_ATime->labeltype(FL_NORMAL_LABEL);
        compress_ATime->labelfont(0);
        compress_ATime->labelsize(10);
        compress_ATime->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        compress_ATime->minimum(10);
        compress_ATime->maximum(250);
        compress_ATime->step(1);
        compress_ATime->value(2);
        compress_ATime->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        compress_ATime->callback((Fl_Callback*)cb_compress_ATime);
        compress_ATime->align(FL_ALIGN_LEFT);
        compress_ATime->when(FL_WHEN_CHANGED);
      } // SliderW* compress_ATime
      { compress_RTime = new SliderW(211, 271, 100, 10, gettext("R. Time"));
        compress_RTime->type(5);
        compress_RTime->box(FL_FLAT_BOX);
        compress_RTime->color((Fl_Color)178);
        compress_RTime->selection_color((Fl_Color)62);
        compress_RTime->labeltype(FL_NORMAL_LABEL);
        compress_RTime->labelfont(0);
        compress_RTime->labelsize(10);
        compress_RTime->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        compress_RTime->minimum(10);
        compress_RTime->maximum(500);
        compress_RTime->step(1);
        compress_RTime->value(120);
        compress_RTime->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        compress_RTime->callback((Fl_Callback*)cb_compress_RTime);
        compress_RTime->align(FL_ALIGN_LEFT);
        compress_RTime->when(FL_WHEN_CHANGED);
      } // SliderW* compress_RTime
      { compress_Ratio = new SliderW(211, 291, 100, 10, gettext("Ratio"));
        compress_Ratio->type(5);
        compress_Ratio->box(FL_FLAT_BOX);
        compress_Ratio->color((Fl_Color)178);
        compress_Ratio->selection_color((Fl_Color)62);
        compress_Ratio->labeltype(FL_NORMAL_LABEL);
        compress_Ratio->labelfont(0);
        compress_Ratio->labelsize(10);
        compress_Ratio->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        compress_Ratio->minimum(2);
        compress_Ratio->maximum(42);
        compress_Ratio->step(1);
        compress_Ratio->value(2);
        compress_Ratio->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        compress_Ratio->callback((Fl_Callback*)cb_compress_Ratio);
        compress_Ratio->align(FL_ALIGN_LEFT);
        compress_Ratio->when(FL_WHEN_CHANGED);
      } // SliderW* compress_Ratio
      { compress_Knee = new SliderW(210, 311, 100, 10, gettext("Knee"));
        compress_Knee->type(5);
        compress_Knee->box(FL_FLAT_BOX);
        compress_Knee->color((Fl_Color)178);
        compress_Knee->selection_color((Fl_Color)62);
        compress_Knee->labeltype(FL_NORMAL_LABEL);
        compress_Knee->labelfont(0);
        compress_Knee->labelsize(10);
        compress_Knee->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        compress_Knee->maximum(100);
        compress_Knee->step(1);
        compress_Knee->value(3);
        compress_Knee->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        compress_Knee->callback((Fl_Callback*)cb_compress_Knee);
        compress_Knee->align(FL_ALIGN_LEFT);
        compress_Knee->when(FL_WHEN_CHANGED);
      } // SliderW* compress_Knee
      { compress_threshold = new SliderW(211, 331, 100, 10, gettext("Thrhold"));
        compress_threshold->type(5);
        compress_threshold->box(FL_FLAT_BOX);
        compress_threshold->color((Fl_Color)178);
        compress_threshold->selection_color((Fl_Color)62);
        compress_threshold->labeltype(FL_NORMAL_LABEL);
        compress_threshold->labelfont(0);
        compress_threshold->labelsize(10);
        compress_threshold->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        compress_threshold->minimum(-60);
        compress_threshold->maximum(-3);
        compress_threshold->step(1);
        compress_threshold->value(-3);
        compress_threshold->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        compress_threshold->callback((Fl_Callback*)cb_compress_threshold);
        compress_threshold->align(FL_ALIGN_LEFT);
        compress_threshold->when(FL_WHEN_CHANGED);
      } // SliderW* compress_threshold
      { compress_output = new SliderW(211, 351, 100, 10, gettext("Output"));
        compress_output->type(5);
        compress_output->box(FL_FLAT_BOX);
        compress_output->color((Fl_Color)178);
        compress_output->selection_color((Fl_Color)62);
        compress_output->labeltype(FL_NORMAL_LABEL);
        compress_output->labelfont(0);
        compress_output->labelsize(10);
        compress_output->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        compress_output->minimum(-40);
        compress_output->maximum(0);
        compress_output->step(1);
        compress_output->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        compress_output->callback((Fl_Callback*)cb_compress_output);
        compress_output->align(FL_ALIGN_LEFT);
        compress_output->when(FL_WHEN_CHANGED);
      } // SliderW* compress_output
      { Auto_Output = new Fl_Check_Button(180, 378, 20, 15, gettext("Auto Output"));
        Auto_Output->down_box(FL_BORDER_BOX);
        Auto_Output->labelsize(10);
        Auto_Output->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Auto_Output->callback((Fl_Callback*)cb_Auto_Output);
      } // Fl_Check_Button* Auto_Output
      { Stereo = new Fl_Check_Button(265, 378, 15, 15, gettext("Stereo"));
        Stereo->tooltip(gettext("Level detect Left and Right separately.  Unchecked compresses according to L/\
R average."));
        Stereo->down_box(FL_BORDER_BOX);
        Stereo->labelsize(10);
        Stereo->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Stereo->callback((Fl_Callback*)cb_Stereo);
      } // Fl_Check_Button* Stereo
      COMPRESS->end();
    } // Fl_Group* COMPRESS
    { DIST = new Fl_Group(321, 212, 158, 184);
      DIST->box(FL_UP_BOX);
      DIST->color((Fl_Color)FL_FOREGROUND_COLOR);
      DIST->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      DIST->labelfont(1);
      DIST->align(96|FL_ALIGN_INSIDE);
      { dist_activar = new Fl_Light_Button(326, 216, 34, 18, gettext("On"));
        dist_activar->shortcut(0x33);
        dist_activar->color((Fl_Color)62);
        dist_activar->selection_color((Fl_Color)1);
        dist_activar->labelsize(10);
        dist_activar->callback((Fl_Callback*)cb_dist_activar);
        dist_activar->align(68|FL_ALIGN_INSIDE);
        dist_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* dist_activar
      { dist_preset = new Fl_Choice(398, 216, 76, 18, gettext("Preset"));
        dist_preset->down_box(FL_BORDER_BOX);
        dist_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        dist_preset->labelsize(10);
        dist_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_preset->textsize(10);
        dist_preset->callback((Fl_Callback*)cb_dist_preset);
        dist_preset->when(FL_WHEN_RELEASE_ALWAYS);
        dist_preset->menu(menu_dist_preset);
      } // Fl_Choice* dist_preset
      { dist_WD = new SliderW(373, 247, 100, 10, gettext("Wet/Dry"));
        dist_WD->type(5);
        dist_WD->box(FL_FLAT_BOX);
        dist_WD->color((Fl_Color)178);
        dist_WD->selection_color((Fl_Color)62);
        dist_WD->labeltype(FL_NORMAL_LABEL);
        dist_WD->labelfont(0);
        dist_WD->labelsize(10);
        dist_WD->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_WD->minimum(-64);
        dist_WD->maximum(63);
        dist_WD->step(1);
        dist_WD->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_WD->callback((Fl_Callback*)cb_dist_WD);
        dist_WD->align(FL_ALIGN_LEFT);
        dist_WD->when(FL_WHEN_CHANGED);
      } // SliderW* dist_WD
      { dist_LRc = new SliderW(373, 260, 100, 10, gettext("L/R.Cr"));
        dist_LRc->type(5);
        dist_LRc->box(FL_FLAT_BOX);
        dist_LRc->color((Fl_Color)178);
        dist_LRc->selection_color((Fl_Color)62);
        dist_LRc->labeltype(FL_NORMAL_LABEL);
        dist_LRc->labelfont(0);
        dist_LRc->labelsize(10);
        dist_LRc->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_LRc->minimum(-64);
        dist_LRc->maximum(63);
        dist_LRc->step(1);
        dist_LRc->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_LRc->callback((Fl_Callback*)cb_dist_LRc);
        dist_LRc->align(FL_ALIGN_LEFT);
        dist_LRc->when(FL_WHEN_CHANGED);
      } // SliderW* dist_LRc
      { dist_drive = new SliderW(373, 273, 100, 10, gettext("Drive"));
        dist_drive->type(5);
        dist_drive->box(FL_FLAT_BOX);
        dist_drive->color((Fl_Color)178);
        dist_drive->selection_color((Fl_Color)62);
        dist_drive->labeltype(FL_NORMAL_LABEL);
        dist_drive->labelfont(0);
        dist_drive->labelsize(10);
        dist_drive->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_drive->maximum(127);
        dist_drive->step(1);
        dist_drive->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_drive->callback((Fl_Callback*)cb_dist_drive);
        dist_drive->align(FL_ALIGN_LEFT);
        dist_drive->when(FL_WHEN_CHANGED);
      } // SliderW* dist_drive
      { dist_level = new SliderW(373, 287, 100, 10, gettext("Level"));
        dist_level->type(5);
        dist_level->box(FL_FLAT_BOX);
        dist_level->color((Fl_Color)178);
        dist_level->selection_color((Fl_Color)62);
        dist_level->labeltype(FL_NORMAL_LABEL);
        dist_level->labelfont(0);
        dist_level->labelsize(10);
        dist_level->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_level->maximum(127);
        dist_level->step(1);
        dist_level->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_level->callback((Fl_Callback*)cb_dist_level);
        dist_level->align(FL_ALIGN_LEFT);
        dist_level->when(FL_WHEN_CHANGED);
      } // SliderW* dist_level
      { dist_tipo = new Fl_Choice(355, 303, 70, 16, gettext("Type"));
        dist_tipo->down_box(FL_BORDER_BOX);
        dist_tipo->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        dist_tipo->labelsize(10);
        dist_tipo->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_tipo->textsize(10);
        dist_tipo->callback((Fl_Callback*)cb_dist_tipo);
        dist_tipo->menu(menu_dist_tipo);
      } // Fl_Choice* dist_tipo
      { dist_neg = new Fl_Check_Button(431, 304, 40, 15, gettext("Neg."));
        dist_neg->down_box(FL_BORDER_BOX);
        dist_neg->labelsize(10);
        dist_neg->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_neg->callback((Fl_Callback*)cb_dist_neg);
      } // Fl_Check_Button* dist_neg
      { dist_pf = new Fl_Check_Button(330, 320, 30, 15, gettext("Pre Filter"));
        dist_pf->down_box(FL_BORDER_BOX);
        dist_pf->labelsize(10);
        dist_pf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_pf->callback((Fl_Callback*)cb_dist_pf);
      } // Fl_Check_Button* dist_pf
      { dist_st = new Fl_Check_Button(395, 320, 30, 15, gettext("Stereo"));
        dist_st->down_box(FL_BORDER_BOX);
        dist_st->labelsize(10);
        dist_st->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_st->callback((Fl_Callback*)cb_dist_st);
      } // Fl_Check_Button* dist_st
      { dist_pan = new SliderW(373, 337, 100, 10, gettext("Pan"));
        dist_pan->type(5);
        dist_pan->box(FL_FLAT_BOX);
        dist_pan->color((Fl_Color)178);
        dist_pan->selection_color((Fl_Color)62);
        dist_pan->labeltype(FL_NORMAL_LABEL);
        dist_pan->labelfont(0);
        dist_pan->labelsize(10);
        dist_pan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_pan->minimum(-64);
        dist_pan->maximum(63);
        dist_pan->step(1);
        dist_pan->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_pan->callback((Fl_Callback*)cb_dist_pan);
        dist_pan->align(FL_ALIGN_LEFT);
        dist_pan->when(FL_WHEN_CHANGED);
      } // SliderW* dist_pan
      { dist_oct = new SliderW(373, 357, 100, 10, gettext("Sub Octv"));
        dist_oct->type(5);
        dist_oct->box(FL_FLAT_BOX);
        dist_oct->color((Fl_Color)178);
        dist_oct->selection_color((Fl_Color)62);
        dist_oct->labeltype(FL_NORMAL_LABEL);
        dist_oct->labelfont(0);
        dist_oct->labelsize(10);
        dist_oct->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_oct->maximum(127);
        dist_oct->step(1);
        dist_oct->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_oct->callback((Fl_Callback*)cb_dist_oct);
        dist_oct->align(FL_ALIGN_LEFT);
        dist_oct->when(FL_WHEN_CHANGED);
      } // SliderW* dist_oct
      { dist_lpf = new SliderW(373, 369, 100, 10, gettext("LPF"));
        dist_lpf->type(5);
        dist_lpf->box(FL_FLAT_BOX);
        dist_lpf->color((Fl_Color)178);
        dist_lpf->selection_color((Fl_Color)62);
        dist_lpf->labeltype(FL_NORMAL_LABEL);
        dist_lpf->labelfont(0);
        dist_lpf->labelsize(10);
        dist_lpf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_lpf->maximum(127);
        dist_lpf->step(1);
        dist_lpf->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_lpf->callback((Fl_Callback*)cb_dist_lpf);
        dist_lpf->align(FL_ALIGN_LEFT);
        dist_lpf->when(FL_WHEN_CHANGED);
      } // SliderW* dist_lpf
      { dist_hpf = new SliderW(373, 381, 100, 10, gettext("HPF"));
        dist_hpf->type(5);
        dist_hpf->box(FL_FLAT_BOX);
        dist_hpf->color((Fl_Color)178);
        dist_hpf->selection_color((Fl_Color)62);
        dist_hpf->labeltype(FL_NORMAL_LABEL);
        dist_hpf->labelfont(0);
        dist_hpf->labelsize(10);
        dist_hpf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_hpf->maximum(127);
        dist_hpf->step(1);
        dist_hpf->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dist_hpf->callback((Fl_Callback*)cb_dist_hpf);
        dist_hpf->align(FL_ALIGN_LEFT);
        dist_hpf->when(FL_WHEN_CHANGED);
      } // SliderW* dist_hpf
      DIST->end();
    } // Fl_Group* DIST
    { OVRD = new Fl_Group(480, 212, 158, 184);
      OVRD->box(FL_UP_BOX);
      OVRD->color((Fl_Color)FL_FOREGROUND_COLOR);
      OVRD->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      OVRD->labelfont(1);
      OVRD->align(96|FL_ALIGN_INSIDE);
      { ovrd_activar = new Fl_Light_Button(485, 216, 34, 18, gettext("On"));
        ovrd_activar->shortcut(0x34);
        ovrd_activar->color((Fl_Color)62);
        ovrd_activar->selection_color((Fl_Color)1);
        ovrd_activar->labelsize(10);
        ovrd_activar->callback((Fl_Callback*)cb_ovrd_activar);
        ovrd_activar->align(68|FL_ALIGN_INSIDE);
        ovrd_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* ovrd_activar
      { ovrd_preset = new Fl_Choice(557, 216, 76, 18, gettext("Preset"));
        ovrd_preset->down_box(FL_BORDER_BOX);
        ovrd_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        ovrd_preset->labelsize(10);
        ovrd_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_preset->textsize(10);
        ovrd_preset->callback((Fl_Callback*)cb_ovrd_preset);
        ovrd_preset->when(FL_WHEN_RELEASE_ALWAYS);
        ovrd_preset->menu(menu_ovrd_preset);
      } // Fl_Choice* ovrd_preset
      { ovrd_WD = new SliderW(531, 247, 100, 10, gettext("Wet/Dry"));
        ovrd_WD->type(5);
        ovrd_WD->box(FL_FLAT_BOX);
        ovrd_WD->color((Fl_Color)178);
        ovrd_WD->selection_color((Fl_Color)62);
        ovrd_WD->labeltype(FL_NORMAL_LABEL);
        ovrd_WD->labelfont(0);
        ovrd_WD->labelsize(10);
        ovrd_WD->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_WD->minimum(-64);
        ovrd_WD->maximum(63);
        ovrd_WD->step(1);
        ovrd_WD->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_WD->callback((Fl_Callback*)cb_ovrd_WD);
        ovrd_WD->align(FL_ALIGN_LEFT);
        ovrd_WD->when(FL_WHEN_CHANGED);
      } // SliderW* ovrd_WD
      { ovrd_LRc = new SliderW(531, 260, 100, 10, gettext("L/R Cr."));
        ovrd_LRc->type(5);
        ovrd_LRc->box(FL_FLAT_BOX);
        ovrd_LRc->color((Fl_Color)178);
        ovrd_LRc->selection_color((Fl_Color)62);
        ovrd_LRc->labeltype(FL_NORMAL_LABEL);
        ovrd_LRc->labelfont(0);
        ovrd_LRc->labelsize(10);
        ovrd_LRc->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_LRc->minimum(-64);
        ovrd_LRc->maximum(63);
        ovrd_LRc->step(1);
        ovrd_LRc->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_LRc->callback((Fl_Callback*)cb_ovrd_LRc);
        ovrd_LRc->align(FL_ALIGN_LEFT);
        ovrd_LRc->when(FL_WHEN_CHANGED);
      } // SliderW* ovrd_LRc
      { ovrd_drive = new SliderW(531, 273, 100, 10, gettext("Drive"));
        ovrd_drive->type(5);
        ovrd_drive->box(FL_FLAT_BOX);
        ovrd_drive->color((Fl_Color)178);
        ovrd_drive->selection_color((Fl_Color)62);
        ovrd_drive->labeltype(FL_NORMAL_LABEL);
        ovrd_drive->labelfont(0);
        ovrd_drive->labelsize(10);
        ovrd_drive->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_drive->maximum(127);
        ovrd_drive->step(1);
        ovrd_drive->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_drive->callback((Fl_Callback*)cb_ovrd_drive);
        ovrd_drive->align(FL_ALIGN_LEFT);
        ovrd_drive->when(FL_WHEN_CHANGED);
      } // SliderW* ovrd_drive
      { ovrd_level = new SliderW(531, 287, 100, 10, gettext("Level"));
        ovrd_level->type(5);
        ovrd_level->box(FL_FLAT_BOX);
        ovrd_level->color((Fl_Color)178);
        ovrd_level->selection_color((Fl_Color)62);
        ovrd_level->labeltype(FL_NORMAL_LABEL);
        ovrd_level->labelfont(0);
        ovrd_level->labelsize(10);
        ovrd_level->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_level->maximum(127);
        ovrd_level->step(1);
        ovrd_level->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_level->callback((Fl_Callback*)cb_ovrd_level);
        ovrd_level->align(FL_ALIGN_LEFT);
        ovrd_level->when(FL_WHEN_CHANGED);
      } // SliderW* ovrd_level
      { ovrd_tipo = new Fl_Choice(513, 303, 72, 16, gettext("Type"));
        ovrd_tipo->down_box(FL_BORDER_BOX);
        ovrd_tipo->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        ovrd_tipo->labelsize(10);
        ovrd_tipo->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_tipo->textsize(10);
        ovrd_tipo->callback((Fl_Callback*)cb_ovrd_tipo);
        ovrd_tipo->menu(menu_ovrd_tipo);
      } // Fl_Choice* ovrd_tipo
      { ovrd_neg = new Fl_Check_Button(589, 304, 46, 15, gettext("Neg."));
        ovrd_neg->down_box(FL_BORDER_BOX);
        ovrd_neg->labelsize(10);
        ovrd_neg->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_neg->callback((Fl_Callback*)cb_ovrd_neg);
      } // Fl_Check_Button* ovrd_neg
      { ovrd_st = new Fl_Check_Button(521, 322, 30, 15, gettext("Stereo"));
        ovrd_st->down_box(FL_BORDER_BOX);
        ovrd_st->labelsize(10);
        ovrd_st->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_st->callback((Fl_Callback*)cb_ovrd_st);
      } // Fl_Check_Button* ovrd_st
      { ovrd_pan = new SliderW(531, 337, 100, 10, gettext("Pan"));
        ovrd_pan->type(5);
        ovrd_pan->box(FL_FLAT_BOX);
        ovrd_pan->color((Fl_Color)178);
        ovrd_pan->selection_color((Fl_Color)62);
        ovrd_pan->labeltype(FL_NORMAL_LABEL);
        ovrd_pan->labelfont(0);
        ovrd_pan->labelsize(10);
        ovrd_pan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_pan->minimum(-64);
        ovrd_pan->maximum(63);
        ovrd_pan->step(1);
        ovrd_pan->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_pan->callback((Fl_Callback*)cb_ovrd_pan);
        ovrd_pan->align(FL_ALIGN_LEFT);
        ovrd_pan->when(FL_WHEN_CHANGED);
      } // SliderW* ovrd_pan
      { ovrd_pf = new Fl_Check_Button(521, 350, 30, 15, gettext("Pre Filter"));
        ovrd_pf->down_box(FL_BORDER_BOX);
        ovrd_pf->labelsize(10);
        ovrd_pf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_pf->callback((Fl_Callback*)cb_ovrd_pf);
      } // Fl_Check_Button* ovrd_pf
      { ovrd_lpf = new SliderW(531, 369, 100, 10, gettext("LPF"));
        ovrd_lpf->type(5);
        ovrd_lpf->box(FL_FLAT_BOX);
        ovrd_lpf->color((Fl_Color)178);
        ovrd_lpf->selection_color((Fl_Color)62);
        ovrd_lpf->labeltype(FL_NORMAL_LABEL);
        ovrd_lpf->labelfont(0);
        ovrd_lpf->labelsize(10);
        ovrd_lpf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_lpf->maximum(127);
        ovrd_lpf->step(1);
        ovrd_lpf->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_lpf->callback((Fl_Callback*)cb_ovrd_lpf);
        ovrd_lpf->align(FL_ALIGN_LEFT);
        ovrd_lpf->when(FL_WHEN_CHANGED);
      } // SliderW* ovrd_lpf
      { ovrd_hpf = new SliderW(531, 381, 100, 10, gettext("HPF"));
        ovrd_hpf->type(5);
        ovrd_hpf->box(FL_FLAT_BOX);
        ovrd_hpf->color((Fl_Color)178);
        ovrd_hpf->selection_color((Fl_Color)62);
        ovrd_hpf->labeltype(FL_NORMAL_LABEL);
        ovrd_hpf->labelfont(0);
        ovrd_hpf->labelsize(10);
        ovrd_hpf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_hpf->maximum(127);
        ovrd_hpf->step(1);
        ovrd_hpf->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ovrd_hpf->callback((Fl_Callback*)cb_ovrd_hpf);
        ovrd_hpf->align(FL_ALIGN_LEFT);
        ovrd_hpf->when(FL_WHEN_CHANGED);
      } // SliderW* ovrd_hpf
      OVRD->end();
    } // Fl_Group* OVRD
    { ECHO = new Fl_Group(639, 212, 158, 184);
      ECHO->box(FL_UP_BOX);
      ECHO->color((Fl_Color)FL_FOREGROUND_COLOR);
      ECHO->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      ECHO->labelfont(1);
      ECHO->align(96|FL_ALIGN_INSIDE);
      { echo_activar = new Fl_Light_Button(644, 216, 34, 18, gettext("On"));
        echo_activar->shortcut(0x35);
        echo_activar->color((Fl_Color)62);
        echo_activar->selection_color((Fl_Color)1);
        echo_activar->labelsize(10);
        echo_activar->callback((Fl_Callback*)cb_echo_activar);
        echo_activar->align(68|FL_ALIGN_INSIDE);
        echo_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* echo_activar
      { echo_preset = new Fl_Choice(716, 216, 76, 18, gettext("Preset"));
        echo_preset->down_box(FL_BORDER_BOX);
        echo_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        echo_preset->labelsize(10);
        echo_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        echo_preset->textsize(10);
        echo_preset->callback((Fl_Callback*)cb_echo_preset);
        echo_preset->when(FL_WHEN_RELEASE_ALWAYS);
        echo_preset->menu(menu_echo_preset);
      } // Fl_Choice* echo_preset
      { echo_WD = new SliderW(690, 247, 100, 10, gettext("Wet/Dry"));
        echo_WD->type(5);
        echo_WD->box(FL_FLAT_BOX);
        echo_WD->color((Fl_Color)178);
        echo_WD->selection_color((Fl_Color)62);
        echo_WD->labeltype(FL_NORMAL_LABEL);
        echo_WD->labelfont(0);
        echo_WD->labelsize(10);
        echo_WD->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        echo_WD->minimum(-64);
        echo_WD->maximum(63);
        echo_WD->step(1);
        echo_WD->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        echo_WD->callback((Fl_Callback*)cb_echo_WD);
        echo_WD->align(FL_ALIGN_LEFT);
        echo_WD->when(FL_WHEN_CHANGED);
      } // SliderW* echo_WD
      { echo_RV = new SliderW(690, 270, 100, 10, gettext("Reverse"));
        echo_RV->type(5);
        echo_RV->box(FL_FLAT_BOX);
        echo_RV->color((Fl_Color)178);
        echo_RV->selection_color((Fl_Color)62);
        echo_RV->labeltype(FL_NORMAL_LABEL);
        echo_RV->labelfont(0);
        echo_RV->labelsize(10);
        echo_RV->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        echo_RV->maximum(127);
        echo_RV->step(1);
        echo_RV->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        echo_RV->callback((Fl_Callback*)cb_echo_RV);
        echo_RV->align(FL_ALIGN_LEFT);
        echo_RV->when(FL_WHEN_CHANGED);
      } // SliderW* echo_RV
      { echo_pan = new SliderW(690, 285, 100, 10, gettext("Pan"));
        echo_pan->type(5);
        echo_pan->box(FL_FLAT_BOX);
        echo_pan->color((Fl_Color)178);
        echo_pan->selection_color((Fl_Color)62);
        echo_pan->labeltype(FL_NORMAL_LABEL);
        echo_pan->labelfont(0);
        echo_pan->labelsize(10);
        echo_pan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        echo_pan->minimum(-64);
        echo_pan->maximum(63);
        echo_pan->step(1);
        echo_pan->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        echo_pan->callback((Fl_Callback*)cb_echo_pan);
        echo_pan->align(FL_ALIGN_LEFT);
        echo_pan->when(FL_WHEN_CHANGED);
      } // SliderW* echo_pan
      { echo_delay = new SliderW(690, 300, 100, 10, gettext("Delay"));
        echo_delay->type(5);
        echo_delay->box(FL_FLAT_BOX);
        echo_delay->color((Fl_Color)178);
        echo_delay->selection_color((Fl_Color)62);
        echo_delay->labeltype(FL_NORMAL_LABEL);
        echo_delay->labelfont(0);
        echo_delay->labelsize(10);
        echo_delay->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        echo_delay->maximum(127);
        echo_delay->step(1);
        echo_delay->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        echo_delay->callback((Fl_Callback*)cb_echo_delay);
        echo_delay->align(FL_ALIGN_LEFT);
        echo_delay->when(FL_WHEN_RELEASE);
      } // SliderW* echo_delay
      { echo_LRdl = new SliderW(690, 315, 100, 10, gettext("LRdl."));
        echo_LRdl->type(5);
        echo_LRdl->box(FL_FLAT_BOX);
        echo_LRdl->color((Fl_Color)178);
        echo_LRdl->selection_color((Fl_Color)62);
        echo_LRdl->labeltype(FL_NORMAL_LABEL);
        echo_LRdl->labelfont(0);
        echo_LRdl->labelsize(10);
        echo_LRdl->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        echo_LRdl->maximum(127);
        echo_LRdl->step(1);
        echo_LRdl->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        echo_LRdl->callback((Fl_Callback*)cb_echo_LRdl);
        echo_LRdl->align(FL_ALIGN_LEFT);
        echo_LRdl->when(FL_WHEN_RELEASE);
      } // SliderW* echo_LRdl
      { echo_LRc = new SliderW(690, 330, 100, 10, gettext("L/R.Cr"));
        echo_LRc->type(5);
        echo_LRc->box(FL_FLAT_BOX);
        echo_LRc->color((Fl_Color)178);
        echo_LRc->selection_color((Fl_Color)62);
        echo_LRc->labeltype(FL_NORMAL_LABEL);
        echo_LRc->labelfont(0);
        echo_LRc->labelsize(10);
        echo_LRc->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        echo_LRc->minimum(-64);
        echo_LRc->maximum(63);
        echo_LRc->step(1);
        echo_LRc->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        echo_LRc->callback((Fl_Callback*)cb_echo_LRc);
        echo_LRc->align(FL_ALIGN_LEFT);
        echo_LRc->when(FL_WHEN_CHANGED);
      } // SliderW* echo_LRc
      { echo_fb = new SliderW(690, 345, 100, 10, gettext("Fb."));
        echo_fb->type(5);
        echo_fb->box(FL_FLAT_BOX);
        echo_fb->color((Fl_Color)178);
        echo_fb->selection_color((Fl_Color)62);
        echo_fb->labeltype(FL_NORMAL_LABEL);
        echo_fb->labelfont(0);
        echo_fb->labelsize(10);
        echo_fb->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        echo_fb->maximum(127);
        echo_fb->step(1);
        echo_fb->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        echo_fb->callback((Fl_Callback*)cb_echo_fb);
        echo_fb->align(FL_ALIGN_LEFT);
        echo_fb->when(FL_WHEN_CHANGED);
      } // SliderW* echo_fb
      { echo_damp = new SliderW(690, 379, 100, 10, gettext("Damp"));
        echo_damp->type(5);
        echo_damp->box(FL_FLAT_BOX);
        echo_damp->color((Fl_Color)178);
        echo_damp->selection_color((Fl_Color)62);
        echo_damp->labeltype(FL_NORMAL_LABEL);
        echo_damp->labelfont(0);
        echo_damp->labelsize(10);
        echo_damp->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        echo_damp->maximum(127);
        echo_damp->step(1);
        echo_damp->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        echo_damp->callback((Fl_Callback*)cb_echo_damp);
        echo_damp->align(FL_ALIGN_LEFT);
        echo_damp->when(FL_WHEN_CHANGED);
      } // SliderW* echo_damp
      ECHO->end();
    } // Fl_Group* ECHO
    { CHORUS = new Fl_Group(2, 413, 158, 184);
      CHORUS->box(FL_UP_BOX);
      CHORUS->color((Fl_Color)FL_FOREGROUND_COLOR);
      CHORUS->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      CHORUS->labelfont(1);
      CHORUS->align(96|FL_ALIGN_INSIDE);
      { chorus_activar = new Fl_Light_Button(7, 417, 34, 18, gettext("On"));
        chorus_activar->shortcut(0x36);
        chorus_activar->color((Fl_Color)62);
        chorus_activar->selection_color((Fl_Color)1);
        chorus_activar->labelsize(10);
        chorus_activar->callback((Fl_Callback*)cb_chorus_activar);
        chorus_activar->align(68|FL_ALIGN_INSIDE);
        chorus_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* chorus_activar
      { chorux_preset = new Fl_Choice(79, 417, 76, 18, gettext("Preset"));
        chorux_preset->down_box(FL_BORDER_BOX);
        chorux_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        chorux_preset->labelsize(10);
        chorux_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorux_preset->textsize(10);
        chorux_preset->callback((Fl_Callback*)cb_chorux_preset);
        chorux_preset->when(FL_WHEN_RELEASE_ALWAYS);
        chorux_preset->menu(menu_chorux_preset);
      } // Fl_Choice* chorux_preset
      { chorus_WD = new SliderW(51, 442, 100, 10, gettext("Wet/Dry"));
        chorus_WD->type(5);
        chorus_WD->box(FL_FLAT_BOX);
        chorus_WD->color((Fl_Color)178);
        chorus_WD->selection_color((Fl_Color)62);
        chorus_WD->labeltype(FL_NORMAL_LABEL);
        chorus_WD->labelfont(0);
        chorus_WD->labelsize(10);
        chorus_WD->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_WD->minimum(-64);
        chorus_WD->maximum(63);
        chorus_WD->step(1);
        chorus_WD->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_WD->callback((Fl_Callback*)cb_chorus_WD);
        chorus_WD->align(FL_ALIGN_LEFT);
        chorus_WD->when(FL_WHEN_CHANGED);
      } // SliderW* chorus_WD
      { chorus_pan = new SliderW(51, 454, 100, 10, gettext("Pan"));
        chorus_pan->type(5);
        chorus_pan->box(FL_FLAT_BOX);
        chorus_pan->color((Fl_Color)178);
        chorus_pan->selection_color((Fl_Color)62);
        chorus_pan->labeltype(FL_NORMAL_LABEL);
        chorus_pan->labelfont(0);
        chorus_pan->labelsize(10);
        chorus_pan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_pan->minimum(-64);
        chorus_pan->maximum(63);
        chorus_pan->step(1);
        chorus_pan->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_pan->callback((Fl_Callback*)cb_chorus_pan);
        chorus_pan->align(FL_ALIGN_LEFT);
        chorus_pan->when(FL_WHEN_CHANGED);
      } // SliderW* chorus_pan
      { chorus_freq = new SliderW(51, 466, 100, 10, gettext("Tempo"));
        chorus_freq->type(5);
        chorus_freq->box(FL_FLAT_BOX);
        chorus_freq->color((Fl_Color)178);
        chorus_freq->selection_color((Fl_Color)62);
        chorus_freq->labeltype(FL_NORMAL_LABEL);
        chorus_freq->labelfont(0);
        chorus_freq->labelsize(10);
        chorus_freq->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_freq->minimum(1);
        chorus_freq->maximum(600);
        chorus_freq->step(1);
        chorus_freq->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_freq->callback((Fl_Callback*)cb_chorus_freq);
        chorus_freq->align(FL_ALIGN_LEFT);
        chorus_freq->when(FL_WHEN_CHANGED);
      } // SliderW* chorus_freq
      { chorus_rnd = new SliderW(51, 478, 100, 10, gettext("Rnd"));
        chorus_rnd->type(5);
        chorus_rnd->box(FL_FLAT_BOX);
        chorus_rnd->color((Fl_Color)178);
        chorus_rnd->selection_color((Fl_Color)62);
        chorus_rnd->labeltype(FL_NORMAL_LABEL);
        chorus_rnd->labelfont(0);
        chorus_rnd->labelsize(10);
        chorus_rnd->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_rnd->maximum(127);
        chorus_rnd->step(1);
        chorus_rnd->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_rnd->callback((Fl_Callback*)cb_chorus_rnd);
        chorus_rnd->align(FL_ALIGN_LEFT);
        chorus_rnd->when(FL_WHEN_CHANGED);
      } // SliderW* chorus_rnd
      { chorus_lfotype = new Fl_Choice(63, 490, 72, 16, gettext("LFO Type"));
        chorus_lfotype->down_box(FL_BORDER_BOX);
        chorus_lfotype->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        chorus_lfotype->labelsize(10);
        chorus_lfotype->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_lfotype->textsize(10);
        chorus_lfotype->callback((Fl_Callback*)cb_chorus_lfotype);
        chorus_lfotype->menu(menu_chorus_lfotype);
      } // Fl_Choice* chorus_lfotype
      { chorus_subs = new Fl_Check_Button(37, 507, 64, 15, gettext("Subtract"));
        chorus_subs->down_box(FL_BORDER_BOX);
        chorus_subs->labelsize(10);
        chorus_subs->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_subs->callback((Fl_Callback*)cb_chorus_subs);
      } // Fl_Check_Button* chorus_subs
      { chorus_stdf = new SliderW(51, 528, 100, 10, gettext("St.df"));
        chorus_stdf->type(5);
        chorus_stdf->box(FL_FLAT_BOX);
        chorus_stdf->color((Fl_Color)178);
        chorus_stdf->selection_color((Fl_Color)62);
        chorus_stdf->labeltype(FL_NORMAL_LABEL);
        chorus_stdf->labelfont(0);
        chorus_stdf->labelsize(10);
        chorus_stdf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_stdf->maximum(127);
        chorus_stdf->step(1);
        chorus_stdf->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_stdf->callback((Fl_Callback*)cb_chorus_stdf);
        chorus_stdf->align(FL_ALIGN_LEFT);
        chorus_stdf->when(FL_WHEN_CHANGED);
      } // SliderW* chorus_stdf
      { chorus_dpth = new SliderW(51, 541, 100, 10, gettext("Depth"));
        chorus_dpth->type(5);
        chorus_dpth->box(FL_FLAT_BOX);
        chorus_dpth->color((Fl_Color)178);
        chorus_dpth->selection_color((Fl_Color)62);
        chorus_dpth->labeltype(FL_NORMAL_LABEL);
        chorus_dpth->labelfont(0);
        chorus_dpth->labelsize(10);
        chorus_dpth->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_dpth->maximum(127);
        chorus_dpth->step(1);
        chorus_dpth->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_dpth->callback((Fl_Callback*)cb_chorus_dpth);
        chorus_dpth->align(FL_ALIGN_LEFT);
        chorus_dpth->when(FL_WHEN_CHANGED);
      } // SliderW* chorus_dpth
      { chorus_delay = new SliderW(51, 554, 100, 10, gettext("Delay"));
        chorus_delay->type(5);
        chorus_delay->box(FL_FLAT_BOX);
        chorus_delay->color((Fl_Color)178);
        chorus_delay->selection_color((Fl_Color)62);
        chorus_delay->labeltype(FL_NORMAL_LABEL);
        chorus_delay->labelfont(0);
        chorus_delay->labelsize(10);
        chorus_delay->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_delay->maximum(127);
        chorus_delay->step(1);
        chorus_delay->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_delay->callback((Fl_Callback*)cb_chorus_delay);
        chorus_delay->align(FL_ALIGN_LEFT);
        chorus_delay->when(FL_WHEN_CHANGED);
      } // SliderW* chorus_delay
      { chorus_fb = new SliderW(51, 567, 100, 10, gettext("Fb"));
        chorus_fb->type(5);
        chorus_fb->box(FL_FLAT_BOX);
        chorus_fb->color((Fl_Color)178);
        chorus_fb->selection_color((Fl_Color)62);
        chorus_fb->labeltype(FL_NORMAL_LABEL);
        chorus_fb->labelfont(0);
        chorus_fb->labelsize(10);
        chorus_fb->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_fb->maximum(127);
        chorus_fb->step(1);
        chorus_fb->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_fb->callback((Fl_Callback*)cb_chorus_fb);
        chorus_fb->align(FL_ALIGN_LEFT);
        chorus_fb->when(FL_WHEN_CHANGED);
      } // SliderW* chorus_fb
      { chorus_LR = new SliderW(51, 581, 100, 10, gettext("L/R.Cr"));
        chorus_LR->type(5);
        chorus_LR->box(FL_FLAT_BOX);
        chorus_LR->color((Fl_Color)178);
        chorus_LR->selection_color((Fl_Color)62);
        chorus_LR->labeltype(FL_NORMAL_LABEL);
        chorus_LR->labelfont(0);
        chorus_LR->labelsize(10);
        chorus_LR->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_LR->minimum(-64);
        chorus_LR->maximum(63);
        chorus_LR->step(1);
        chorus_LR->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        chorus_LR->callback((Fl_Callback*)cb_chorus_LR);
        chorus_LR->align(FL_ALIGN_LEFT);
        chorus_LR->when(FL_WHEN_CHANGED);
      } // SliderW* chorus_LR
      CHORUS->end();
    } // Fl_Group* CHORUS
    { PHASER = new Fl_Group(161, 413, 158, 184);
      PHASER->box(FL_UP_BOX);
      PHASER->color((Fl_Color)FL_FOREGROUND_COLOR);
      PHASER->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      PHASER->labelfont(1);
      PHASER->align(96|FL_ALIGN_INSIDE);
      { phaser_activar = new Fl_Light_Button(166, 417, 34, 18, gettext("On"));
        phaser_activar->shortcut(0x37);
        phaser_activar->color((Fl_Color)62);
        phaser_activar->selection_color((Fl_Color)1);
        phaser_activar->labelsize(10);
        phaser_activar->callback((Fl_Callback*)cb_phaser_activar);
        phaser_activar->align(68|FL_ALIGN_INSIDE);
        phaser_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* phaser_activar
      { phaser_preset = new Fl_Choice(238, 417, 76, 18, gettext("Preset"));
        phaser_preset->down_box(FL_BORDER_BOX);
        phaser_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        phaser_preset->labelsize(10);
        phaser_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_preset->textsize(10);
        phaser_preset->callback((Fl_Callback*)cb_phaser_preset);
        phaser_preset->when(FL_WHEN_RELEASE_ALWAYS);
        phaser_preset->menu(menu_phaser_preset);
      } // Fl_Choice* phaser_preset
      { phaser_WD = new SliderW(210, 442, 100, 10, gettext("Wet/Dry"));
        phaser_WD->type(5);
        phaser_WD->box(FL_FLAT_BOX);
        phaser_WD->color((Fl_Color)178);
        phaser_WD->selection_color((Fl_Color)62);
        phaser_WD->labeltype(FL_NORMAL_LABEL);
        phaser_WD->labelfont(0);
        phaser_WD->labelsize(10);
        phaser_WD->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_WD->minimum(-64);
        phaser_WD->maximum(63);
        phaser_WD->step(1);
        phaser_WD->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_WD->callback((Fl_Callback*)cb_phaser_WD);
        phaser_WD->align(FL_ALIGN_LEFT);
        phaser_WD->when(FL_WHEN_CHANGED);
      } // SliderW* phaser_WD
      { phaser_pan = new SliderW(210, 454, 100, 10, gettext("Pan"));
        phaser_pan->type(5);
        phaser_pan->box(FL_FLAT_BOX);
        phaser_pan->color((Fl_Color)178);
        phaser_pan->selection_color((Fl_Color)62);
        phaser_pan->labeltype(FL_NORMAL_LABEL);
        phaser_pan->labelfont(0);
        phaser_pan->labelsize(10);
        phaser_pan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_pan->minimum(-64);
        phaser_pan->maximum(63);
        phaser_pan->step(1);
        phaser_pan->value(64);
        phaser_pan->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_pan->callback((Fl_Callback*)cb_phaser_pan);
        phaser_pan->align(FL_ALIGN_LEFT);
        phaser_pan->when(FL_WHEN_CHANGED);
      } // SliderW* phaser_pan
      { phaser_freq = new SliderW(210, 466, 100, 10, gettext("Tempo"));
        phaser_freq->type(5);
        phaser_freq->box(FL_FLAT_BOX);
        phaser_freq->color((Fl_Color)178);
        phaser_freq->selection_color((Fl_Color)62);
        phaser_freq->labeltype(FL_NORMAL_LABEL);
        phaser_freq->labelfont(0);
        phaser_freq->labelsize(10);
        phaser_freq->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_freq->minimum(1);
        phaser_freq->maximum(600);
        phaser_freq->step(1);
        phaser_freq->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_freq->callback((Fl_Callback*)cb_phaser_freq);
        phaser_freq->align(FL_ALIGN_LEFT);
        phaser_freq->when(FL_WHEN_CHANGED);
      } // SliderW* phaser_freq
      { phaser_rnd = new SliderW(210, 478, 100, 10, gettext("Rnd"));
        phaser_rnd->type(5);
        phaser_rnd->box(FL_FLAT_BOX);
        phaser_rnd->color((Fl_Color)178);
        phaser_rnd->selection_color((Fl_Color)62);
        phaser_rnd->labeltype(FL_NORMAL_LABEL);
        phaser_rnd->labelfont(0);
        phaser_rnd->labelsize(10);
        phaser_rnd->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_rnd->maximum(127);
        phaser_rnd->step(1);
        phaser_rnd->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_rnd->callback((Fl_Callback*)cb_phaser_rnd);
        phaser_rnd->align(FL_ALIGN_LEFT);
        phaser_rnd->when(FL_WHEN_CHANGED);
      } // SliderW* phaser_rnd
      { phaser_lfotype = new Fl_Choice(221, 490, 72, 16, gettext("LFO Type"));
        phaser_lfotype->down_box(FL_BORDER_BOX);
        phaser_lfotype->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        phaser_lfotype->labelsize(10);
        phaser_lfotype->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_lfotype->textsize(10);
        phaser_lfotype->callback((Fl_Callback*)cb_phaser_lfotype);
        phaser_lfotype->menu(menu_phaser_lfotype);
      } // Fl_Choice* phaser_lfotype
      { phaser_subs = new Fl_Check_Button(201, 507, 64, 15, gettext("Subtract"));
        phaser_subs->down_box(FL_BORDER_BOX);
        phaser_subs->labelsize(10);
        phaser_subs->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_subs->callback((Fl_Callback*)cb_phaser_subs);
      } // Fl_Check_Button* phaser_subs
      { phaser_phase = new SliderW(210, 523, 100, 10, gettext("Phase"));
        phaser_phase->type(5);
        phaser_phase->box(FL_FLAT_BOX);
        phaser_phase->color((Fl_Color)178);
        phaser_phase->selection_color((Fl_Color)62);
        phaser_phase->labeltype(FL_NORMAL_LABEL);
        phaser_phase->labelfont(0);
        phaser_phase->labelsize(10);
        phaser_phase->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_phase->maximum(127);
        phaser_phase->step(1);
        phaser_phase->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_phase->callback((Fl_Callback*)cb_phaser_phase);
        phaser_phase->align(FL_ALIGN_LEFT);
        phaser_phase->when(FL_WHEN_CHANGED);
      } // SliderW* phaser_phase
      { phaser_stdf = new SliderW(210, 534, 100, 10, gettext("St.df"));
        phaser_stdf->type(5);
        phaser_stdf->box(FL_FLAT_BOX);
        phaser_stdf->color((Fl_Color)178);
        phaser_stdf->selection_color((Fl_Color)62);
        phaser_stdf->labeltype(FL_NORMAL_LABEL);
        phaser_stdf->labelfont(0);
        phaser_stdf->labelsize(10);
        phaser_stdf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_stdf->maximum(127);
        phaser_stdf->step(1);
        phaser_stdf->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_stdf->callback((Fl_Callback*)cb_phaser_stdf);
        phaser_stdf->align(FL_ALIGN_LEFT);
        phaser_stdf->when(FL_WHEN_CHANGED);
      } // SliderW* phaser_stdf
      { phaser_dpth = new SliderW(210, 545, 100, 10, gettext("Depth"));
        phaser_dpth->type(5);
        phaser_dpth->box(FL_FLAT_BOX);
        phaser_dpth->color((Fl_Color)178);
        phaser_dpth->selection_color((Fl_Color)62);
        phaser_dpth->labeltype(FL_NORMAL_LABEL);
        phaser_dpth->labelfont(0);
        phaser_dpth->labelsize(10);
        phaser_dpth->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_dpth->maximum(127);
        phaser_dpth->step(1);
        phaser_dpth->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_dpth->callback((Fl_Callback*)cb_phaser_dpth);
        phaser_dpth->align(FL_ALIGN_LEFT);
        phaser_dpth->when(FL_WHEN_CHANGED);
      } // SliderW* phaser_dpth
      { phaser_fb = new SliderW(210, 557, 100, 10, gettext("Fb"));
        phaser_fb->type(5);
        phaser_fb->box(FL_FLAT_BOX);
        phaser_fb->color((Fl_Color)178);
        phaser_fb->selection_color((Fl_Color)62);
        phaser_fb->labeltype(FL_NORMAL_LABEL);
        phaser_fb->labelfont(0);
        phaser_fb->labelsize(10);
        phaser_fb->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_fb->maximum(127);
        phaser_fb->step(1);
        phaser_fb->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_fb->callback((Fl_Callback*)cb_phaser_fb);
        phaser_fb->align(FL_ALIGN_LEFT);
        phaser_fb->when(FL_WHEN_CHANGED);
      } // SliderW* phaser_fb
      { phaser_stages = new Fl_Counter(233, 569, 52, 12, gettext("Stages"));
        phaser_stages->type(1);
        phaser_stages->box(FL_THIN_UP_BOX);
        phaser_stages->labelsize(10);
        phaser_stages->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_stages->minimum(1);
        phaser_stages->maximum(12);
        phaser_stages->step(1);
        phaser_stages->value(1);
        phaser_stages->textsize(9);
        phaser_stages->callback((Fl_Callback*)cb_phaser_stages);
        phaser_stages->align(FL_ALIGN_LEFT);
      } // Fl_Counter* phaser_stages
      { phaser_LR = new SliderW(210, 584, 100, 10, gettext("L/R.Cr"));
        phaser_LR->type(5);
        phaser_LR->box(FL_FLAT_BOX);
        phaser_LR->color((Fl_Color)178);
        phaser_LR->selection_color((Fl_Color)62);
        phaser_LR->labeltype(FL_NORMAL_LABEL);
        phaser_LR->labelfont(0);
        phaser_LR->labelsize(10);
        phaser_LR->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_LR->minimum(-64);
        phaser_LR->maximum(63);
        phaser_LR->step(1);
        phaser_LR->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        phaser_LR->callback((Fl_Callback*)cb_phaser_LR);
        phaser_LR->align(FL_ALIGN_LEFT);
        phaser_LR->when(FL_WHEN_CHANGED);
      } // SliderW* phaser_LR
      PHASER->end();
    } // Fl_Group* PHASER
    { FLANGER = new Fl_Group(321, 413, 158, 184);
      FLANGER->box(FL_UP_BOX);
      FLANGER->color((Fl_Color)FL_FOREGROUND_COLOR);
      FLANGER->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      FLANGER->labelfont(1);
      FLANGER->align(96|FL_ALIGN_INSIDE);
      { flanger_activar = new Fl_Light_Button(326, 417, 34, 18, gettext("On"));
        flanger_activar->shortcut(0x38);
        flanger_activar->color((Fl_Color)62);
        flanger_activar->selection_color((Fl_Color)1);
        flanger_activar->labelsize(10);
        flanger_activar->callback((Fl_Callback*)cb_flanger_activar);
        flanger_activar->align(68|FL_ALIGN_INSIDE);
        flanger_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* flanger_activar
      { flanger_preset = new Fl_Choice(398, 417, 76, 18, gettext("Preset"));
        flanger_preset->down_box(FL_BORDER_BOX);
        flanger_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        flanger_preset->labelsize(10);
        flanger_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_preset->textsize(10);
        flanger_preset->callback((Fl_Callback*)cb_flanger_preset);
        flanger_preset->when(FL_WHEN_RELEASE_ALWAYS);
        flanger_preset->menu(menu_flanger_preset);
      } // Fl_Choice* flanger_preset
      { flanger_WD = new SliderW(373, 442, 100, 10, gettext("Wet/Dry"));
        flanger_WD->type(5);
        flanger_WD->box(FL_FLAT_BOX);
        flanger_WD->color((Fl_Color)178);
        flanger_WD->selection_color((Fl_Color)62);
        flanger_WD->labeltype(FL_NORMAL_LABEL);
        flanger_WD->labelfont(0);
        flanger_WD->labelsize(10);
        flanger_WD->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_WD->minimum(-64);
        flanger_WD->maximum(63);
        flanger_WD->step(1);
        flanger_WD->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_WD->callback((Fl_Callback*)cb_flanger_WD);
        flanger_WD->align(FL_ALIGN_LEFT);
        flanger_WD->when(FL_WHEN_CHANGED);
      } // SliderW* flanger_WD
      { flanger_pan = new SliderW(373, 454, 100, 10, gettext("Pan"));
        flanger_pan->type(5);
        flanger_pan->box(FL_FLAT_BOX);
        flanger_pan->color((Fl_Color)178);
        flanger_pan->selection_color((Fl_Color)62);
        flanger_pan->labeltype(FL_NORMAL_LABEL);
        flanger_pan->labelfont(0);
        flanger_pan->labelsize(10);
        flanger_pan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_pan->minimum(-64);
        flanger_pan->maximum(63);
        flanger_pan->step(1);
        flanger_pan->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_pan->callback((Fl_Callback*)cb_flanger_pan);
        flanger_pan->align(FL_ALIGN_LEFT);
        flanger_pan->when(FL_WHEN_CHANGED);
      } // SliderW* flanger_pan
      { flanger_freq = new SliderW(373, 466, 100, 10, gettext("Tempo"));
        flanger_freq->type(5);
        flanger_freq->box(FL_FLAT_BOX);
        flanger_freq->color((Fl_Color)178);
        flanger_freq->selection_color((Fl_Color)62);
        flanger_freq->labeltype(FL_NORMAL_LABEL);
        flanger_freq->labelfont(0);
        flanger_freq->labelsize(10);
        flanger_freq->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_freq->minimum(1);
        flanger_freq->maximum(600);
        flanger_freq->step(1);
        flanger_freq->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_freq->callback((Fl_Callback*)cb_flanger_freq);
        flanger_freq->align(FL_ALIGN_LEFT);
        flanger_freq->when(FL_WHEN_CHANGED);
      } // SliderW* flanger_freq
      { flanger_rnd = new SliderW(373, 478, 100, 10, gettext("Rnd"));
        flanger_rnd->type(5);
        flanger_rnd->box(FL_FLAT_BOX);
        flanger_rnd->color((Fl_Color)178);
        flanger_rnd->selection_color((Fl_Color)62);
        flanger_rnd->labeltype(FL_NORMAL_LABEL);
        flanger_rnd->labelfont(0);
        flanger_rnd->labelsize(10);
        flanger_rnd->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_rnd->maximum(127);
        flanger_rnd->step(1);
        flanger_rnd->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_rnd->callback((Fl_Callback*)cb_flanger_rnd);
        flanger_rnd->align(FL_ALIGN_LEFT);
        flanger_rnd->when(FL_WHEN_CHANGED);
      } // SliderW* flanger_rnd
      { flanger_lfotype = new Fl_Choice(384, 490, 72, 16, gettext("LFO Type"));
        flanger_lfotype->down_box(FL_BORDER_BOX);
        flanger_lfotype->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        flanger_lfotype->labelsize(10);
        flanger_lfotype->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_lfotype->textsize(10);
        flanger_lfotype->callback((Fl_Callback*)cb_flanger_lfotype);
        flanger_lfotype->menu(menu_flanger_lfotype);
      } // Fl_Choice* flanger_lfotype
      { flanger_subs = new Fl_Check_Button(363, 507, 64, 15, gettext("Subtract"));
        flanger_subs->down_box(FL_BORDER_BOX);
        flanger_subs->labelsize(10);
        flanger_subs->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_subs->callback((Fl_Callback*)cb_flanger_subs);
      } // Fl_Check_Button* flanger_subs
      { flanger_stdf = new SliderW(373, 528, 100, 10, gettext("St.df"));
        flanger_stdf->type(5);
        flanger_stdf->box(FL_FLAT_BOX);
        flanger_stdf->color((Fl_Color)178);
        flanger_stdf->selection_color((Fl_Color)62);
        flanger_stdf->labeltype(FL_NORMAL_LABEL);
        flanger_stdf->labelfont(0);
        flanger_stdf->labelsize(10);
        flanger_stdf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_stdf->maximum(127);
        flanger_stdf->step(1);
        flanger_stdf->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_stdf->callback((Fl_Callback*)cb_flanger_stdf);
        flanger_stdf->align(FL_ALIGN_LEFT);
        flanger_stdf->when(FL_WHEN_CHANGED);
      } // SliderW* flanger_stdf
      { flanger_dpth = new SliderW(373, 541, 100, 10, gettext("Depth"));
        flanger_dpth->type(5);
        flanger_dpth->box(FL_FLAT_BOX);
        flanger_dpth->color((Fl_Color)178);
        flanger_dpth->selection_color((Fl_Color)62);
        flanger_dpth->labeltype(FL_NORMAL_LABEL);
        flanger_dpth->labelfont(0);
        flanger_dpth->labelsize(10);
        flanger_dpth->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_dpth->maximum(127);
        flanger_dpth->step(1);
        flanger_dpth->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_dpth->callback((Fl_Callback*)cb_flanger_dpth);
        flanger_dpth->align(FL_ALIGN_LEFT);
        flanger_dpth->when(FL_WHEN_CHANGED);
      } // SliderW* flanger_dpth
      { flanger_delay = new SliderW(373, 554, 100, 10, gettext("Delay"));
        flanger_delay->type(5);
        flanger_delay->box(FL_FLAT_BOX);
        flanger_delay->color((Fl_Color)178);
        flanger_delay->selection_color((Fl_Color)62);
        flanger_delay->labeltype(FL_NORMAL_LABEL);
        flanger_delay->labelfont(0);
        flanger_delay->labelsize(10);
        flanger_delay->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_delay->maximum(127);
        flanger_delay->step(1);
        flanger_delay->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_delay->callback((Fl_Callback*)cb_flanger_delay);
        flanger_delay->align(FL_ALIGN_LEFT);
        flanger_delay->when(FL_WHEN_CHANGED);
      } // SliderW* flanger_delay
      { flanger_fb = new SliderW(373, 567, 100, 10, gettext("Fb"));
        flanger_fb->type(5);
        flanger_fb->box(FL_FLAT_BOX);
        flanger_fb->color((Fl_Color)178);
        flanger_fb->selection_color((Fl_Color)62);
        flanger_fb->labeltype(FL_NORMAL_LABEL);
        flanger_fb->labelfont(0);
        flanger_fb->labelsize(10);
        flanger_fb->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_fb->maximum(127);
        flanger_fb->step(1);
        flanger_fb->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_fb->callback((Fl_Callback*)cb_flanger_fb);
        flanger_fb->align(FL_ALIGN_LEFT);
        flanger_fb->when(FL_WHEN_CHANGED);
      } // SliderW* flanger_fb
      { flanger_LR = new SliderW(373, 581, 100, 10, gettext("L/R.Cr"));
        flanger_LR->type(5);
        flanger_LR->box(FL_FLAT_BOX);
        flanger_LR->color((Fl_Color)178);
        flanger_LR->selection_color((Fl_Color)62);
        flanger_LR->labeltype(FL_NORMAL_LABEL);
        flanger_LR->labelfont(0);
        flanger_LR->labelsize(10);
        flanger_LR->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_LR->minimum(-64);
        flanger_LR->maximum(63);
        flanger_LR->step(1);
        flanger_LR->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        flanger_LR->callback((Fl_Callback*)cb_flanger_LR);
        flanger_LR->align(FL_ALIGN_LEFT);
        flanger_LR->when(FL_WHEN_CHANGED);
      } // SliderW* flanger_LR
      FLANGER->end();
    } // Fl_Group* FLANGER
    { REVERB = new Fl_Group(480, 413, 158, 184);
      REVERB->box(FL_UP_BOX);
      REVERB->color((Fl_Color)FL_FOREGROUND_COLOR);
      REVERB->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      REVERB->labelfont(1);
      REVERB->align(96|FL_ALIGN_INSIDE);
      { reverb_activar = new Fl_Light_Button(485, 417, 34, 18, gettext("On"));
        reverb_activar->shortcut(0x39);
        reverb_activar->color((Fl_Color)62);
        reverb_activar->selection_color((Fl_Color)1);
        reverb_activar->labelsize(10);
        reverb_activar->callback((Fl_Callback*)cb_reverb_activar);
        reverb_activar->align(68|FL_ALIGN_INSIDE);
        reverb_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* reverb_activar
      { reverb_preset = new Fl_Choice(557, 417, 76, 18, gettext("Preset"));
        reverb_preset->down_box(FL_BORDER_BOX);
        reverb_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        reverb_preset->labelsize(10);
        reverb_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_preset->textsize(10);
        reverb_preset->callback((Fl_Callback*)cb_reverb_preset);
        reverb_preset->when(FL_WHEN_RELEASE_ALWAYS);
        reverb_preset->menu(menu_reverb_preset);
      } // Fl_Choice* reverb_preset
      { reverb_WD = new SliderW(531, 440, 100, 10, gettext("Wet/Dry"));
        reverb_WD->type(5);
        reverb_WD->box(FL_FLAT_BOX);
        reverb_WD->color((Fl_Color)178);
        reverb_WD->selection_color((Fl_Color)62);
        reverb_WD->labeltype(FL_NORMAL_LABEL);
        reverb_WD->labelfont(0);
        reverb_WD->labelsize(10);
        reverb_WD->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_WD->minimum(-64);
        reverb_WD->maximum(63);
        reverb_WD->step(1);
        reverb_WD->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_WD->callback((Fl_Callback*)cb_reverb_WD);
        reverb_WD->align(FL_ALIGN_LEFT);
        reverb_WD->when(FL_WHEN_CHANGED);
      } // SliderW* reverb_WD
      { reverb_pan = new SliderW(531, 452, 100, 10, gettext("Pan"));
        reverb_pan->type(5);
        reverb_pan->box(FL_FLAT_BOX);
        reverb_pan->color((Fl_Color)178);
        reverb_pan->selection_color((Fl_Color)62);
        reverb_pan->labeltype(FL_NORMAL_LABEL);
        reverb_pan->labelfont(0);
        reverb_pan->labelsize(10);
        reverb_pan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_pan->minimum(-64);
        reverb_pan->maximum(63);
        reverb_pan->step(1);
        reverb_pan->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_pan->callback((Fl_Callback*)cb_reverb_pan);
        reverb_pan->align(FL_ALIGN_LEFT);
        reverb_pan->when(FL_WHEN_CHANGED);
      } // SliderW* reverb_pan
      { reverb_time = new SliderW(531, 465, 100, 10, gettext("Time"));
        reverb_time->type(5);
        reverb_time->box(FL_FLAT_BOX);
        reverb_time->color((Fl_Color)178);
        reverb_time->selection_color((Fl_Color)62);
        reverb_time->labeltype(FL_NORMAL_LABEL);
        reverb_time->labelfont(0);
        reverb_time->labelsize(10);
        reverb_time->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_time->maximum(127);
        reverb_time->step(1);
        reverb_time->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_time->callback((Fl_Callback*)cb_reverb_time);
        reverb_time->align(FL_ALIGN_LEFT);
        reverb_time->when(FL_WHEN_CHANGED);
      } // SliderW* reverb_time
      { reverb_ldel = new SliderW(531, 477, 100, 10, gettext("I.Del"));
        reverb_ldel->type(5);
        reverb_ldel->box(FL_FLAT_BOX);
        reverb_ldel->color((Fl_Color)178);
        reverb_ldel->selection_color((Fl_Color)62);
        reverb_ldel->labeltype(FL_NORMAL_LABEL);
        reverb_ldel->labelfont(0);
        reverb_ldel->labelsize(10);
        reverb_ldel->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_ldel->maximum(127);
        reverb_ldel->step(1);
        reverb_ldel->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_ldel->callback((Fl_Callback*)cb_reverb_ldel);
        reverb_ldel->align(FL_ALIGN_LEFT);
        reverb_ldel->when(FL_WHEN_CHANGED);
      } // SliderW* reverb_ldel
      { reverb_ldelft = new SliderW(531, 490, 100, 10, gettext("Del.E/R"));
        reverb_ldelft->type(5);
        reverb_ldelft->box(FL_FLAT_BOX);
        reverb_ldelft->color((Fl_Color)178);
        reverb_ldelft->selection_color((Fl_Color)62);
        reverb_ldelft->labeltype(FL_NORMAL_LABEL);
        reverb_ldelft->labelfont(0);
        reverb_ldelft->labelsize(10);
        reverb_ldelft->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_ldelft->maximum(127);
        reverb_ldelft->step(1);
        reverb_ldelft->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_ldelft->callback((Fl_Callback*)cb_reverb_ldelft);
        reverb_ldelft->align(FL_ALIGN_LEFT);
        reverb_ldelft->when(FL_WHEN_CHANGED);
      } // SliderW* reverb_ldelft
      { reverb_type = new Fl_Choice(542, 505, 72, 16, gettext("Type"));
        reverb_type->down_box(FL_BORDER_BOX);
        reverb_type->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        reverb_type->labelsize(10);
        reverb_type->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_type->textsize(10);
        reverb_type->callback((Fl_Callback*)cb_reverb_type);
        reverb_type->menu(menu_reverb_type);
      } // Fl_Choice* reverb_type
      { reverb_RS = new SliderW(531, 529, 100, 10, gettext("R.Size"));
        reverb_RS->type(5);
        reverb_RS->box(FL_FLAT_BOX);
        reverb_RS->color((Fl_Color)178);
        reverb_RS->selection_color((Fl_Color)62);
        reverb_RS->labeltype(FL_NORMAL_LABEL);
        reverb_RS->labelfont(0);
        reverb_RS->labelsize(10);
        reverb_RS->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_RS->minimum(1);
        reverb_RS->maximum(127);
        reverb_RS->step(1);
        reverb_RS->value(1);
        reverb_RS->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_RS->callback((Fl_Callback*)cb_reverb_RS);
        reverb_RS->align(FL_ALIGN_LEFT);
        reverb_RS->when(FL_WHEN_RELEASE);
      } // SliderW* reverb_RS
      { reverb_LPF = new SliderW(531, 544, 100, 10, gettext("LPF"));
        reverb_LPF->type(5);
        reverb_LPF->box(FL_FLAT_BOX);
        reverb_LPF->color((Fl_Color)178);
        reverb_LPF->selection_color((Fl_Color)62);
        reverb_LPF->labeltype(FL_NORMAL_LABEL);
        reverb_LPF->labelfont(0);
        reverb_LPF->labelsize(10);
        reverb_LPF->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_LPF->maximum(127);
        reverb_LPF->step(1);
        reverb_LPF->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_LPF->callback((Fl_Callback*)cb_reverb_LPF);
        reverb_LPF->align(FL_ALIGN_LEFT);
        reverb_LPF->when(FL_WHEN_CHANGED);
      } // SliderW* reverb_LPF
      { reverb_HPF = new SliderW(531, 560, 100, 10, gettext("HPF"));
        reverb_HPF->type(5);
        reverb_HPF->box(FL_FLAT_BOX);
        reverb_HPF->color((Fl_Color)178);
        reverb_HPF->selection_color((Fl_Color)62);
        reverb_HPF->labeltype(FL_NORMAL_LABEL);
        reverb_HPF->labelfont(0);
        reverb_HPF->labelsize(10);
        reverb_HPF->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_HPF->maximum(127);
        reverb_HPF->step(1);
        reverb_HPF->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_HPF->callback((Fl_Callback*)cb_reverb_HPF);
        reverb_HPF->align(FL_ALIGN_LEFT);
        reverb_HPF->when(FL_WHEN_CHANGED);
      } // SliderW* reverb_HPF
      { reverb_damp = new SliderW(531, 576, 100, 10, gettext("Damp"));
        reverb_damp->type(5);
        reverb_damp->box(FL_FLAT_BOX);
        reverb_damp->color((Fl_Color)178);
        reverb_damp->selection_color((Fl_Color)62);
        reverb_damp->labeltype(FL_NORMAL_LABEL);
        reverb_damp->labelfont(0);
        reverb_damp->labelsize(10);
        reverb_damp->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_damp->minimum(64);
        reverb_damp->maximum(127);
        reverb_damp->step(1);
        reverb_damp->value(64);
        reverb_damp->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        reverb_damp->callback((Fl_Callback*)cb_reverb_damp);
        reverb_damp->align(FL_ALIGN_LEFT);
        reverb_damp->when(FL_WHEN_CHANGED);
      } // SliderW* reverb_damp
      REVERB->end();
    } // Fl_Group* REVERB
    { PEQ = new Fl_Group(639, 413, 158, 184);
      PEQ->box(FL_UP_BOX);
      PEQ->color((Fl_Color)FL_FOREGROUND_COLOR);
      PEQ->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      PEQ->labelfont(1);
      PEQ->align(96|FL_ALIGN_INSIDE);
      { eqp_activar = new Fl_Light_Button(644, 417, 34, 18, gettext("On"));
        eqp_activar->shortcut(0x30);
        eqp_activar->color((Fl_Color)62);
        eqp_activar->selection_color((Fl_Color)1);
        eqp_activar->labelsize(10);
        eqp_activar->callback((Fl_Callback*)cb_eqp_activar);
        eqp_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* eqp_activar
      { eqp_preset = new Fl_Choice(716, 417, 76, 18, gettext("Preset"));
        eqp_preset->down_box(FL_BORDER_BOX);
        eqp_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        eqp_preset->labelsize(10);
        eqp_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_preset->textsize(10);
        eqp_preset->callback((Fl_Callback*)cb_eqp_preset);
        eqp_preset->when(FL_WHEN_RELEASE_ALWAYS);
        eqp_preset->menu(menu_eqp_preset);
      } // Fl_Choice* eqp_preset
      { eqp_Gain = new SliderW(689, 439, 100, 10, gettext("Gain"));
        eqp_Gain->type(5);
        eqp_Gain->box(FL_FLAT_BOX);
        eqp_Gain->color((Fl_Color)178);
        eqp_Gain->selection_color((Fl_Color)62);
        eqp_Gain->labeltype(FL_NORMAL_LABEL);
        eqp_Gain->labelfont(0);
        eqp_Gain->labelsize(10);
        eqp_Gain->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_Gain->minimum(-64);
        eqp_Gain->maximum(63);
        eqp_Gain->step(1);
        eqp_Gain->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_Gain->callback((Fl_Callback*)cb_eqp_Gain);
        eqp_Gain->align(FL_ALIGN_LEFT);
        eqp_Gain->when(FL_WHEN_CHANGED);
      } // SliderW* eqp_Gain
      { eqp_LF = new SliderW(689, 463, 100, 10, gettext("Low F."));
        eqp_LF->type(5);
        eqp_LF->box(FL_FLAT_BOX);
        eqp_LF->color((Fl_Color)178);
        eqp_LF->selection_color((Fl_Color)62);
        eqp_LF->labeltype(FL_NORMAL_LABEL);
        eqp_LF->labelfont(0);
        eqp_LF->labelsize(10);
        eqp_LF->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_LF->minimum(1);
        eqp_LF->maximum(48);
        eqp_LF->step(1);
        eqp_LF->value(24);
        eqp_LF->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_LF->callback((Fl_Callback*)cb_eqp_LF);
        eqp_LF->align(FL_ALIGN_LEFT);
        eqp_LF->when(FL_WHEN_CHANGED);
      } // SliderW* eqp_LF
      { eqp_LFg = new SliderW(689, 476, 100, 10, gettext("Low G."));
        eqp_LFg->type(5);
        eqp_LFg->box(FL_FLAT_BOX);
        eqp_LFg->color((Fl_Color)178);
        eqp_LFg->selection_color((Fl_Color)62);
        eqp_LFg->labeltype(FL_NORMAL_LABEL);
        eqp_LFg->labelfont(0);
        eqp_LFg->labelsize(10);
        eqp_LFg->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_LFg->minimum(-64);
        eqp_LFg->maximum(63);
        eqp_LFg->step(1);
        eqp_LFg->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_LFg->callback((Fl_Callback*)cb_eqp_LFg);
        eqp_LFg->align(FL_ALIGN_LEFT);
        eqp_LFg->when(FL_WHEN_CHANGED);
      } // SliderW* eqp_LFg
      { eqp_LQ = new SliderW(689, 489, 100, 10, gettext("Q"));
        eqp_LQ->type(5);
        eqp_LQ->box(FL_FLAT_BOX);
        eqp_LQ->color((Fl_Color)178);
        eqp_LQ->selection_color((Fl_Color)62);
        eqp_LQ->labeltype(FL_NORMAL_LABEL);
        eqp_LQ->labelfont(0);
        eqp_LQ->labelsize(10);
        eqp_LQ->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_LQ->minimum(-64);
        eqp_LQ->maximum(63);
        eqp_LQ->step(1);
        eqp_LQ->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_LQ->callback((Fl_Callback*)cb_eqp_LQ);
        eqp_LQ->align(FL_ALIGN_LEFT);
        eqp_LQ->when(FL_WHEN_CHANGED);
      } // SliderW* eqp_LQ
      { eqp_MF = new SliderW(689, 511, 100, 10, gettext("Mid F."));
        eqp_MF->type(5);
        eqp_MF->box(FL_FLAT_BOX);
        eqp_MF->color((Fl_Color)178);
        eqp_MF->selection_color((Fl_Color)62);
        eqp_MF->labeltype(FL_NORMAL_LABEL);
        eqp_MF->labelfont(0);
        eqp_MF->labelsize(10);
        eqp_MF->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_MF->minimum(49);
        eqp_MF->maximum(99);
        eqp_MF->step(1);
        eqp_MF->value(75);
        eqp_MF->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_MF->callback((Fl_Callback*)cb_eqp_MF);
        eqp_MF->align(FL_ALIGN_LEFT);
        eqp_MF->when(FL_WHEN_CHANGED);
      } // SliderW* eqp_MF
      { eqp_MFg = new SliderW(689, 523, 100, 10, gettext("Mid G."));
        eqp_MFg->type(5);
        eqp_MFg->box(FL_FLAT_BOX);
        eqp_MFg->color((Fl_Color)178);
        eqp_MFg->selection_color((Fl_Color)62);
        eqp_MFg->labeltype(FL_NORMAL_LABEL);
        eqp_MFg->labelfont(0);
        eqp_MFg->labelsize(10);
        eqp_MFg->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_MFg->minimum(-64);
        eqp_MFg->maximum(63);
        eqp_MFg->step(1);
        eqp_MFg->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_MFg->callback((Fl_Callback*)cb_eqp_MFg);
        eqp_MFg->align(FL_ALIGN_LEFT);
        eqp_MFg->when(FL_WHEN_CHANGED);
      } // SliderW* eqp_MFg
      { eqp_MQ = new SliderW(689, 535, 100, 10, gettext("Q"));
        eqp_MQ->type(5);
        eqp_MQ->box(FL_FLAT_BOX);
        eqp_MQ->color((Fl_Color)178);
        eqp_MQ->selection_color((Fl_Color)62);
        eqp_MQ->labeltype(FL_NORMAL_LABEL);
        eqp_MQ->labelfont(0);
        eqp_MQ->labelsize(10);
        eqp_MQ->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_MQ->minimum(-64);
        eqp_MQ->maximum(63);
        eqp_MQ->step(1);
        eqp_MQ->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_MQ->callback((Fl_Callback*)cb_eqp_MQ);
        eqp_MQ->align(FL_ALIGN_LEFT);
        eqp_MQ->when(FL_WHEN_CHANGED);
      } // SliderW* eqp_MQ
      { eqp_HF = new SliderW(689, 557, 100, 10, gettext("High F."));
        eqp_HF->type(5);
        eqp_HF->box(FL_FLAT_BOX);
        eqp_HF->color((Fl_Color)178);
        eqp_HF->selection_color((Fl_Color)62);
        eqp_HF->labeltype(FL_NORMAL_LABEL);
        eqp_HF->labelfont(0);
        eqp_HF->labelsize(10);
        eqp_HF->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_HF->minimum(100);
        eqp_HF->maximum(127);
        eqp_HF->step(1);
        eqp_HF->value(106);
        eqp_HF->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_HF->callback((Fl_Callback*)cb_eqp_HF);
        eqp_HF->align(FL_ALIGN_LEFT);
        eqp_HF->when(FL_WHEN_CHANGED);
      } // SliderW* eqp_HF
      { eqp_HFg = new SliderW(689, 569, 100, 10, gettext("High G."));
        eqp_HFg->type(5);
        eqp_HFg->box(FL_FLAT_BOX);
        eqp_HFg->color((Fl_Color)178);
        eqp_HFg->selection_color((Fl_Color)62);
        eqp_HFg->labeltype(FL_NORMAL_LABEL);
        eqp_HFg->labelfont(0);
        eqp_HFg->labelsize(10);
        eqp_HFg->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_HFg->minimum(-64);
        eqp_HFg->maximum(63);
        eqp_HFg->step(1);
        eqp_HFg->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_HFg->callback((Fl_Callback*)cb_eqp_HFg);
        eqp_HFg->align(FL_ALIGN_LEFT);
        eqp_HFg->when(FL_WHEN_CHANGED);
      } // SliderW* eqp_HFg
      { eqp_HQ = new SliderW(689, 581, 100, 10, gettext("Q"));
        eqp_HQ->type(5);
        eqp_HQ->box(FL_FLAT_BOX);
        eqp_HQ->color((Fl_Color)178);
        eqp_HQ->selection_color((Fl_Color)62);
        eqp_HQ->labeltype(FL_NORMAL_LABEL);
        eqp_HQ->labelfont(0);
        eqp_HQ->labelsize(10);
        eqp_HQ->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_HQ->minimum(-64);
        eqp_HQ->maximum(63);
        eqp_HQ->step(1);
        eqp_HQ->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        eqp_HQ->callback((Fl_Callback*)cb_eqp_HQ);
        eqp_HQ->align(FL_ALIGN_LEFT);
        eqp_HQ->when(FL_WHEN_CHANGED);
      } // SliderW* eqp_HQ
      PEQ->end();
    } // Fl_Group* PEQ
    { WHAWHA = new Fl_Group(162, 26, 158, 184);
      WHAWHA->box(FL_UP_BOX);
      WHAWHA->color((Fl_Color)FL_FOREGROUND_COLOR);
      WHAWHA->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      WHAWHA->labelfont(1);
      WHAWHA->align(96|FL_ALIGN_INSIDE);
      WHAWHA->hide();
      { WhaWha_activar = new Fl_Light_Button(167, 30, 34, 18, gettext("On"));
        WhaWha_activar->shortcut(0x36);
        WhaWha_activar->color((Fl_Color)62);
        WhaWha_activar->selection_color((Fl_Color)1);
        WhaWha_activar->labelsize(10);
        WhaWha_activar->callback((Fl_Callback*)cb_WhaWha_activar);
        WhaWha_activar->align(68|FL_ALIGN_INSIDE);
        WhaWha_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* WhaWha_activar
      { WhaWha_preset = new Fl_Choice(239, 30, 76, 18, gettext("Preset"));
        WhaWha_preset->down_box(FL_BORDER_BOX);
        WhaWha_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        WhaWha_preset->labelsize(10);
        WhaWha_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_preset->textsize(10);
        WhaWha_preset->callback((Fl_Callback*)cb_WhaWha_preset);
        WhaWha_preset->when(FL_WHEN_RELEASE_ALWAYS);
        WhaWha_preset->menu(menu_WhaWha_preset);
      } // Fl_Choice* WhaWha_preset
      { WhaWha_WD = new SliderW(211, 55, 100, 10, gettext("Wet/Dry"));
        WhaWha_WD->type(5);
        WhaWha_WD->box(FL_FLAT_BOX);
        WhaWha_WD->color((Fl_Color)178);
        WhaWha_WD->selection_color((Fl_Color)62);
        WhaWha_WD->labeltype(FL_NORMAL_LABEL);
        WhaWha_WD->labelfont(0);
        WhaWha_WD->labelsize(10);
        WhaWha_WD->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_WD->minimum(-64);
        WhaWha_WD->maximum(63);
        WhaWha_WD->step(1);
        WhaWha_WD->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_WD->callback((Fl_Callback*)cb_WhaWha_WD);
        WhaWha_WD->align(FL_ALIGN_LEFT);
        WhaWha_WD->when(FL_WHEN_CHANGED);
      } // SliderW* WhaWha_WD
      { WhaWha_pan = new SliderW(211, 67, 100, 10, gettext("Pan"));
        WhaWha_pan->type(5);
        WhaWha_pan->box(FL_FLAT_BOX);
        WhaWha_pan->color((Fl_Color)178);
        WhaWha_pan->selection_color((Fl_Color)62);
        WhaWha_pan->labeltype(FL_NORMAL_LABEL);
        WhaWha_pan->labelfont(0);
        WhaWha_pan->labelsize(10);
        WhaWha_pan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_pan->minimum(-64);
        WhaWha_pan->maximum(63);
        WhaWha_pan->step(1);
        WhaWha_pan->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_pan->callback((Fl_Callback*)cb_WhaWha_pan);
        WhaWha_pan->align(FL_ALIGN_LEFT);
        WhaWha_pan->when(FL_WHEN_CHANGED);
      } // SliderW* WhaWha_pan
      { WhaWha_freq = new SliderW(211, 79, 100, 10, gettext("Tempo"));
        WhaWha_freq->type(5);
        WhaWha_freq->box(FL_FLAT_BOX);
        WhaWha_freq->color((Fl_Color)178);
        WhaWha_freq->selection_color((Fl_Color)62);
        WhaWha_freq->labeltype(FL_NORMAL_LABEL);
        WhaWha_freq->labelfont(0);
        WhaWha_freq->labelsize(10);
        WhaWha_freq->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_freq->minimum(1);
        WhaWha_freq->maximum(600);
        WhaWha_freq->step(1);
        WhaWha_freq->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_freq->callback((Fl_Callback*)cb_WhaWha_freq);
        WhaWha_freq->align(FL_ALIGN_LEFT);
        WhaWha_freq->when(FL_WHEN_CHANGED);
      } // SliderW* WhaWha_freq
      { WhaWha_rnd = new SliderW(211, 91, 100, 10, gettext("Rnd"));
        WhaWha_rnd->type(5);
        WhaWha_rnd->box(FL_FLAT_BOX);
        WhaWha_rnd->color((Fl_Color)178);
        WhaWha_rnd->selection_color((Fl_Color)62);
        WhaWha_rnd->labeltype(FL_NORMAL_LABEL);
        WhaWha_rnd->labelfont(0);
        WhaWha_rnd->labelsize(10);
        WhaWha_rnd->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_rnd->maximum(127);
        WhaWha_rnd->step(1);
        WhaWha_rnd->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_rnd->callback((Fl_Callback*)cb_WhaWha_rnd);
        WhaWha_rnd->align(FL_ALIGN_LEFT);
        WhaWha_rnd->when(FL_WHEN_CHANGED);
      } // SliderW* WhaWha_rnd
      { WhaWha_lfotype = new Fl_Choice(223, 105, 72, 16, gettext("LFO Type"));
        WhaWha_lfotype->down_box(FL_BORDER_BOX);
        WhaWha_lfotype->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        WhaWha_lfotype->labelsize(10);
        WhaWha_lfotype->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_lfotype->textsize(10);
        WhaWha_lfotype->callback((Fl_Callback*)cb_WhaWha_lfotype);
        WhaWha_lfotype->menu(menu_WhaWha_lfotype);
      } // Fl_Choice* WhaWha_lfotype
      { WhaWha_stdf = new SliderW(211, 143, 100, 10, gettext("St.df"));
        WhaWha_stdf->type(5);
        WhaWha_stdf->box(FL_FLAT_BOX);
        WhaWha_stdf->color((Fl_Color)178);
        WhaWha_stdf->selection_color((Fl_Color)62);
        WhaWha_stdf->labeltype(FL_NORMAL_LABEL);
        WhaWha_stdf->labelfont(0);
        WhaWha_stdf->labelsize(10);
        WhaWha_stdf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_stdf->maximum(127);
        WhaWha_stdf->step(1);
        WhaWha_stdf->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_stdf->callback((Fl_Callback*)cb_WhaWha_stdf);
        WhaWha_stdf->align(FL_ALIGN_LEFT);
        WhaWha_stdf->when(FL_WHEN_CHANGED);
      } // SliderW* WhaWha_stdf
      { WhaWha_dpth = new SliderW(211, 155, 100, 10, gettext("Depth"));
        WhaWha_dpth->type(5);
        WhaWha_dpth->box(FL_FLAT_BOX);
        WhaWha_dpth->color((Fl_Color)178);
        WhaWha_dpth->selection_color((Fl_Color)62);
        WhaWha_dpth->labeltype(FL_NORMAL_LABEL);
        WhaWha_dpth->labelfont(0);
        WhaWha_dpth->labelsize(10);
        WhaWha_dpth->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_dpth->maximum(127);
        WhaWha_dpth->step(1);
        WhaWha_dpth->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_dpth->callback((Fl_Callback*)cb_WhaWha_dpth);
        WhaWha_dpth->align(FL_ALIGN_LEFT);
        WhaWha_dpth->when(FL_WHEN_CHANGED);
      } // SliderW* WhaWha_dpth
      { WhaWha_ampsns = new SliderW(211, 167, 100, 10, gettext("Amp.S."));
        WhaWha_ampsns->type(5);
        WhaWha_ampsns->box(FL_FLAT_BOX);
        WhaWha_ampsns->color((Fl_Color)178);
        WhaWha_ampsns->selection_color((Fl_Color)62);
        WhaWha_ampsns->labeltype(FL_NORMAL_LABEL);
        WhaWha_ampsns->labelfont(0);
        WhaWha_ampsns->labelsize(10);
        WhaWha_ampsns->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_ampsns->maximum(127);
        WhaWha_ampsns->step(1);
        WhaWha_ampsns->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_ampsns->callback((Fl_Callback*)cb_WhaWha_ampsns);
        WhaWha_ampsns->align(FL_ALIGN_LEFT);
        WhaWha_ampsns->when(FL_WHEN_CHANGED);
      } // SliderW* WhaWha_ampsns
      { WhaWha_ampsnsinv = new SliderW(211, 179, 100, 10, gettext("Amp.S.I"));
        WhaWha_ampsnsinv->type(5);
        WhaWha_ampsnsinv->box(FL_FLAT_BOX);
        WhaWha_ampsnsinv->color((Fl_Color)178);
        WhaWha_ampsnsinv->selection_color((Fl_Color)62);
        WhaWha_ampsnsinv->labeltype(FL_NORMAL_LABEL);
        WhaWha_ampsnsinv->labelfont(0);
        WhaWha_ampsnsinv->labelsize(10);
        WhaWha_ampsnsinv->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_ampsnsinv->maximum(127);
        WhaWha_ampsnsinv->step(1);
        WhaWha_ampsnsinv->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_ampsnsinv->callback((Fl_Callback*)cb_WhaWha_ampsnsinv);
        WhaWha_ampsnsinv->align(FL_ALIGN_LEFT);
        WhaWha_ampsnsinv->when(FL_WHEN_CHANGED);
      } // SliderW* WhaWha_ampsnsinv
      { WhaWha_smooth = new SliderW(211, 191, 100, 10, gettext("Smooth"));
        WhaWha_smooth->type(5);
        WhaWha_smooth->box(FL_FLAT_BOX);
        WhaWha_smooth->color((Fl_Color)178);
        WhaWha_smooth->selection_color((Fl_Color)62);
        WhaWha_smooth->labeltype(FL_NORMAL_LABEL);
        WhaWha_smooth->labelfont(0);
        WhaWha_smooth->labelsize(10);
        WhaWha_smooth->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_smooth->maximum(127);
        WhaWha_smooth->step(1);
        WhaWha_smooth->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WhaWha_smooth->callback((Fl_Callback*)cb_WhaWha_smooth);
        WhaWha_smooth->align(FL_ALIGN_LEFT);
        WhaWha_smooth->when(FL_WHEN_CHANGED);
      } // SliderW* WhaWha_smooth
      WHAWHA->end();
    } // Fl_Group* WHAWHA
    { ALIENWAH = new Fl_Group(356, 23, 158, 184);
      ALIENWAH->box(FL_UP_BOX);
      ALIENWAH->color((Fl_Color)FL_FOREGROUND_COLOR);
      ALIENWAH->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      ALIENWAH->labelfont(1);
      ALIENWAH->align(96|FL_ALIGN_INSIDE);
      ALIENWAH->hide();
      { Alienwah_activar = new Fl_Light_Button(360, 27, 34, 18, gettext("On"));
        Alienwah_activar->shortcut(0x36);
        Alienwah_activar->color((Fl_Color)62);
        Alienwah_activar->selection_color((Fl_Color)1);
        Alienwah_activar->labelsize(10);
        Alienwah_activar->callback((Fl_Callback*)cb_Alienwah_activar);
        Alienwah_activar->align(68|FL_ALIGN_INSIDE);
        Alienwah_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* Alienwah_activar
      { Alienwah_preset = new Fl_Choice(432, 27, 76, 18, gettext("Preset"));
        Alienwah_preset->down_box(FL_BORDER_BOX);
        Alienwah_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        Alienwah_preset->labelsize(10);
        Alienwah_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_preset->textsize(10);
        Alienwah_preset->callback((Fl_Callback*)cb_Alienwah_preset);
        Alienwah_preset->when(FL_WHEN_RELEASE_ALWAYS);
        Alienwah_preset->menu(menu_Alienwah_preset);
      } // Fl_Choice* Alienwah_preset
      { Alienwah_WD = new SliderW(404, 52, 100, 10, gettext("Wet/Dry"));
        Alienwah_WD->type(5);
        Alienwah_WD->box(FL_FLAT_BOX);
        Alienwah_WD->color((Fl_Color)178);
        Alienwah_WD->selection_color((Fl_Color)62);
        Alienwah_WD->labeltype(FL_NORMAL_LABEL);
        Alienwah_WD->labelfont(0);
        Alienwah_WD->labelsize(10);
        Alienwah_WD->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_WD->minimum(-64);
        Alienwah_WD->maximum(63);
        Alienwah_WD->step(1);
        Alienwah_WD->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_WD->callback((Fl_Callback*)cb_Alienwah_WD);
        Alienwah_WD->align(FL_ALIGN_LEFT);
        Alienwah_WD->when(FL_WHEN_CHANGED);
      } // SliderW* Alienwah_WD
      { Alienwah_pan = new SliderW(404, 64, 100, 10, gettext("Pan"));
        Alienwah_pan->type(5);
        Alienwah_pan->box(FL_FLAT_BOX);
        Alienwah_pan->color((Fl_Color)178);
        Alienwah_pan->selection_color((Fl_Color)62);
        Alienwah_pan->labeltype(FL_NORMAL_LABEL);
        Alienwah_pan->labelfont(0);
        Alienwah_pan->labelsize(10);
        Alienwah_pan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_pan->minimum(-64);
        Alienwah_pan->maximum(63);
        Alienwah_pan->step(1);
        Alienwah_pan->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_pan->callback((Fl_Callback*)cb_Alienwah_pan);
        Alienwah_pan->align(FL_ALIGN_LEFT);
        Alienwah_pan->when(FL_WHEN_CHANGED);
      } // SliderW* Alienwah_pan
      { Alienwah_freq = new SliderW(404, 76, 100, 10, gettext("Tempo"));
        Alienwah_freq->type(5);
        Alienwah_freq->box(FL_FLAT_BOX);
        Alienwah_freq->color((Fl_Color)178);
        Alienwah_freq->selection_color((Fl_Color)62);
        Alienwah_freq->labeltype(FL_NORMAL_LABEL);
        Alienwah_freq->labelfont(0);
        Alienwah_freq->labelsize(10);
        Alienwah_freq->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_freq->minimum(1);
        Alienwah_freq->maximum(600);
        Alienwah_freq->step(1);
        Alienwah_freq->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_freq->callback((Fl_Callback*)cb_Alienwah_freq);
        Alienwah_freq->align(FL_ALIGN_LEFT);
        Alienwah_freq->when(FL_WHEN_CHANGED);
      } // SliderW* Alienwah_freq
      { Alienwah_rnd = new SliderW(404, 88, 100, 10, gettext("Rnd"));
        Alienwah_rnd->type(5);
        Alienwah_rnd->box(FL_FLAT_BOX);
        Alienwah_rnd->color((Fl_Color)178);
        Alienwah_rnd->selection_color((Fl_Color)62);
        Alienwah_rnd->labeltype(FL_NORMAL_LABEL);
        Alienwah_rnd->labelfont(0);
        Alienwah_rnd->labelsize(10);
        Alienwah_rnd->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_rnd->maximum(127);
        Alienwah_rnd->step(1);
        Alienwah_rnd->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_rnd->callback((Fl_Callback*)cb_Alienwah_rnd);
        Alienwah_rnd->align(FL_ALIGN_LEFT);
        Alienwah_rnd->when(FL_WHEN_CHANGED);
      } // SliderW* Alienwah_rnd
      { Alienwah_lfotype = new Fl_Choice(416, 102, 72, 16, gettext("LFO Type"));
        Alienwah_lfotype->down_box(FL_BORDER_BOX);
        Alienwah_lfotype->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        Alienwah_lfotype->labelsize(10);
        Alienwah_lfotype->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_lfotype->textsize(10);
        Alienwah_lfotype->callback((Fl_Callback*)cb_Alienwah_lfotype);
        Alienwah_lfotype->menu(menu_Alienwah_lfotype);
      } // Fl_Choice* Alienwah_lfotype
      { Alienwah_phase = new SliderW(404, 128, 100, 10, gettext("Phase"));
        Alienwah_phase->type(5);
        Alienwah_phase->box(FL_FLAT_BOX);
        Alienwah_phase->color((Fl_Color)178);
        Alienwah_phase->selection_color((Fl_Color)62);
        Alienwah_phase->labeltype(FL_NORMAL_LABEL);
        Alienwah_phase->labelfont(0);
        Alienwah_phase->labelsize(10);
        Alienwah_phase->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_phase->maximum(127);
        Alienwah_phase->step(1);
        Alienwah_phase->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_phase->callback((Fl_Callback*)cb_Alienwah_phase);
        Alienwah_phase->align(FL_ALIGN_LEFT);
        Alienwah_phase->when(FL_WHEN_CHANGED);
      } // SliderW* Alienwah_phase
      { Alienwah_stdf = new SliderW(404, 140, 100, 10, gettext("St.df"));
        Alienwah_stdf->type(5);
        Alienwah_stdf->box(FL_FLAT_BOX);
        Alienwah_stdf->color((Fl_Color)178);
        Alienwah_stdf->selection_color((Fl_Color)62);
        Alienwah_stdf->labeltype(FL_NORMAL_LABEL);
        Alienwah_stdf->labelfont(0);
        Alienwah_stdf->labelsize(10);
        Alienwah_stdf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_stdf->maximum(127);
        Alienwah_stdf->step(1);
        Alienwah_stdf->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_stdf->callback((Fl_Callback*)cb_Alienwah_stdf);
        Alienwah_stdf->align(FL_ALIGN_LEFT);
        Alienwah_stdf->when(FL_WHEN_CHANGED);
      } // SliderW* Alienwah_stdf
      { Alienwah_dpth = new SliderW(404, 152, 100, 10, gettext("Depth"));
        Alienwah_dpth->type(5);
        Alienwah_dpth->box(FL_FLAT_BOX);
        Alienwah_dpth->color((Fl_Color)178);
        Alienwah_dpth->selection_color((Fl_Color)62);
        Alienwah_dpth->labeltype(FL_NORMAL_LABEL);
        Alienwah_dpth->labelfont(0);
        Alienwah_dpth->labelsize(10);
        Alienwah_dpth->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_dpth->maximum(127);
        Alienwah_dpth->step(1);
        Alienwah_dpth->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_dpth->callback((Fl_Callback*)cb_Alienwah_dpth);
        Alienwah_dpth->align(FL_ALIGN_LEFT);
        Alienwah_dpth->when(FL_WHEN_CHANGED);
      } // SliderW* Alienwah_dpth
      { Alienwah_delay = new SliderW(404, 164, 100, 10, gettext("Delay"));
        Alienwah_delay->type(5);
        Alienwah_delay->box(FL_FLAT_BOX);
        Alienwah_delay->color((Fl_Color)178);
        Alienwah_delay->selection_color((Fl_Color)62);
        Alienwah_delay->labeltype(FL_NORMAL_LABEL);
        Alienwah_delay->labelfont(0);
        Alienwah_delay->labelsize(10);
        Alienwah_delay->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_delay->maximum(127);
        Alienwah_delay->step(1);
        Alienwah_delay->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_delay->callback((Fl_Callback*)cb_Alienwah_delay);
        Alienwah_delay->align(FL_ALIGN_LEFT);
        Alienwah_delay->when(FL_WHEN_CHANGED);
      } // SliderW* Alienwah_delay
      { Alienwah_fb = new SliderW(404, 176, 100, 10, gettext("Fb"));
        Alienwah_fb->type(5);
        Alienwah_fb->box(FL_FLAT_BOX);
        Alienwah_fb->color((Fl_Color)178);
        Alienwah_fb->selection_color((Fl_Color)62);
        Alienwah_fb->labeltype(FL_NORMAL_LABEL);
        Alienwah_fb->labelfont(0);
        Alienwah_fb->labelsize(10);
        Alienwah_fb->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_fb->maximum(127);
        Alienwah_fb->step(1);
        Alienwah_fb->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_fb->callback((Fl_Callback*)cb_Alienwah_fb);
        Alienwah_fb->align(FL_ALIGN_LEFT);
        Alienwah_fb->when(FL_WHEN_CHANGED);
      } // SliderW* Alienwah_fb
      { Alienwah_LR = new SliderW(404, 189, 100, 10, gettext("L/R.Cr"));
        Alienwah_LR->type(5);
        Alienwah_LR->box(FL_FLAT_BOX);
        Alienwah_LR->color((Fl_Color)178);
        Alienwah_LR->selection_color((Fl_Color)62);
        Alienwah_LR->labeltype(FL_NORMAL_LABEL);
        Alienwah_LR->labelfont(0);
        Alienwah_LR->labelsize(10);
        Alienwah_LR->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_LR->minimum(-64);
        Alienwah_LR->maximum(63);
        Alienwah_LR->step(1);
        Alienwah_LR->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Alienwah_LR->callback((Fl_Callback*)cb_Alienwah_LR);
        Alienwah_LR->align(FL_ALIGN_LEFT);
        Alienwah_LR->when(FL_WHEN_CHANGED);
      } // SliderW* Alienwah_LR
      ALIENWAH->end();
    } // Fl_Group* ALIENWAH
    { CABINET = new Fl_Group(35, 44, 158, 184);
      CABINET->box(FL_UP_BOX);
      CABINET->color((Fl_Color)FL_FOREGROUND_COLOR);
      CABINET->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      CABINET->labelfont(1);
      CABINET->align(96|FL_ALIGN_INSIDE);
      CABINET->hide();
      { Cabinet_activar = new Fl_Light_Button(40, 48, 34, 18, gettext("On"));
        Cabinet_activar->shortcut(0x32);
        Cabinet_activar->color((Fl_Color)62);
        Cabinet_activar->selection_color((Fl_Color)1);
        Cabinet_activar->labelsize(10);
        Cabinet_activar->callback((Fl_Callback*)cb_Cabinet_activar);
        Cabinet_activar->align(68|FL_ALIGN_INSIDE);
        Cabinet_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* Cabinet_activar
      { Cabinet_preset = new Fl_Choice(80, 89, 106, 18, gettext("Preset"));
        Cabinet_preset->down_box(FL_BORDER_BOX);
        Cabinet_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        Cabinet_preset->labelsize(10);
        Cabinet_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Cabinet_preset->textsize(10);
        Cabinet_preset->callback((Fl_Callback*)cb_Cabinet_preset);
        Cabinet_preset->when(FL_WHEN_RELEASE_ALWAYS);
        Cabinet_preset->menu(menu_Cabinet_preset);
      } // Fl_Choice* Cabinet_preset
      { Cabinet_output = new SliderW(83, 136, 100, 10, gettext("Gain"));
        Cabinet_output->type(5);
        Cabinet_output->box(FL_FLAT_BOX);
        Cabinet_output->color((Fl_Color)178);
        Cabinet_output->selection_color((Fl_Color)62);
        Cabinet_output->labeltype(FL_NORMAL_LABEL);
        Cabinet_output->labelfont(0);
        Cabinet_output->labelsize(10);
        Cabinet_output->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Cabinet_output->minimum(-64);
        Cabinet_output->maximum(63);
        Cabinet_output->step(1);
        Cabinet_output->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Cabinet_output->callback((Fl_Callback*)cb_Cabinet_output);
        Cabinet_output->align(FL_ALIGN_LEFT);
        Cabinet_output->when(FL_WHEN_CHANGED);
      } // SliderW* Cabinet_output
      CABINET->end();
    } // Fl_Group* CABINET
    { PAN = new Fl_Group(3, 212, 158, 184);
      PAN->box(FL_UP_BOX);
      PAN->color((Fl_Color)FL_FOREGROUND_COLOR);
      PAN->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      PAN->labelfont(1);
      PAN->align(96|FL_ALIGN_INSIDE);
      PAN->hide();
      { pan_activar = new Fl_Light_Button(8, 216, 34, 18, gettext("On"));
        pan_activar->shortcut(0x36);
        pan_activar->color((Fl_Color)62);
        pan_activar->selection_color((Fl_Color)1);
        pan_activar->labelsize(10);
        pan_activar->callback((Fl_Callback*)cb_pan_activar);
        pan_activar->align(68|FL_ALIGN_INSIDE);
        pan_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* pan_activar
      { pan_preset = new Fl_Choice(80, 216, 76, 18, gettext("Preset"));
        pan_preset->down_box(FL_BORDER_BOX);
        pan_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        pan_preset->labelsize(10);
        pan_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        pan_preset->textsize(10);
        pan_preset->callback((Fl_Callback*)cb_pan_preset);
        pan_preset->when(FL_WHEN_RELEASE_ALWAYS);
        pan_preset->menu(menu_pan_preset);
      } // Fl_Choice* pan_preset
      { pan_WD = new SliderW(52, 241, 100, 10, gettext("Wet/Dry"));
        pan_WD->type(5);
        pan_WD->box(FL_FLAT_BOX);
        pan_WD->color((Fl_Color)178);
        pan_WD->selection_color((Fl_Color)62);
        pan_WD->labeltype(FL_NORMAL_LABEL);
        pan_WD->labelfont(0);
        pan_WD->labelsize(10);
        pan_WD->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        pan_WD->minimum(-64);
        pan_WD->maximum(63);
        pan_WD->step(1);
        pan_WD->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        pan_WD->callback((Fl_Callback*)cb_pan_WD);
        pan_WD->align(FL_ALIGN_LEFT);
        pan_WD->when(FL_WHEN_CHANGED);
      } // SliderW* pan_WD
      { pan_autopan = new Fl_Check_Button(38, 256, 64, 15, gettext("AutoPan"));
        pan_autopan->down_box(FL_BORDER_BOX);
        pan_autopan->labelsize(10);
        pan_autopan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        pan_autopan->callback((Fl_Callback*)cb_pan_autopan);
      } // Fl_Check_Button* pan_autopan
      { pan_pan = new SliderW(52, 273, 100, 10, gettext("Pan"));
        pan_pan->type(5);
        pan_pan->box(FL_FLAT_BOX);
        pan_pan->color((Fl_Color)178);
        pan_pan->selection_color((Fl_Color)62);
        pan_pan->labeltype(FL_NORMAL_LABEL);
        pan_pan->labelfont(0);
        pan_pan->labelsize(10);
        pan_pan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        pan_pan->minimum(-64);
        pan_pan->maximum(63);
        pan_pan->step(1);
        pan_pan->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        pan_pan->callback((Fl_Callback*)cb_pan_pan);
        pan_pan->align(FL_ALIGN_LEFT);
        pan_pan->when(FL_WHEN_CHANGED);
      } // SliderW* pan_pan
      { pan_freq = new SliderW(52, 285, 100, 10, gettext("Tempo"));
        pan_freq->type(5);
        pan_freq->box(FL_FLAT_BOX);
        pan_freq->color((Fl_Color)178);
        pan_freq->selection_color((Fl_Color)62);
        pan_freq->labeltype(FL_NORMAL_LABEL);
        pan_freq->labelfont(0);
        pan_freq->labelsize(10);
        pan_freq->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        pan_freq->minimum(1);
        pan_freq->maximum(600);
        pan_freq->step(1);
        pan_freq->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        pan_freq->callback((Fl_Callback*)cb_pan_freq);
        pan_freq->align(FL_ALIGN_LEFT);
        pan_freq->when(FL_WHEN_CHANGED);
      } // SliderW* pan_freq
      { pan_rnd = new SliderW(52, 297, 100, 10, gettext("Rnd"));
        pan_rnd->type(5);
        pan_rnd->box(FL_FLAT_BOX);
        pan_rnd->color((Fl_Color)178);
        pan_rnd->selection_color((Fl_Color)62);
        pan_rnd->labeltype(FL_NORMAL_LABEL);
        pan_rnd->labelfont(0);
        pan_rnd->labelsize(10);
        pan_rnd->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        pan_rnd->maximum(127);
        pan_rnd->step(1);
        pan_rnd->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        pan_rnd->callback((Fl_Callback*)cb_pan_rnd);
        pan_rnd->align(FL_ALIGN_LEFT);
        pan_rnd->when(FL_WHEN_CHANGED);
      } // SliderW* pan_rnd
      { pan_lfotype = new Fl_Choice(64, 315, 72, 16, gettext("LFO Type"));
        pan_lfotype->down_box(FL_BORDER_BOX);
        pan_lfotype->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        pan_lfotype->labelsize(10);
        pan_lfotype->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        pan_lfotype->textsize(10);
        pan_lfotype->callback((Fl_Callback*)cb_pan_lfotype);
        pan_lfotype->menu(menu_pan_lfotype);
      } // Fl_Choice* pan_lfotype
      { pan_stdf = new SliderW(52, 336, 100, 10, gettext("St.df"));
        pan_stdf->type(5);
        pan_stdf->box(FL_FLAT_BOX);
        pan_stdf->color((Fl_Color)178);
        pan_stdf->selection_color((Fl_Color)62);
        pan_stdf->labeltype(FL_NORMAL_LABEL);
        pan_stdf->labelfont(0);
        pan_stdf->labelsize(10);
        pan_stdf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        pan_stdf->maximum(127);
        pan_stdf->step(1);
        pan_stdf->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        pan_stdf->callback((Fl_Callback*)cb_pan_stdf);
        pan_stdf->align(FL_ALIGN_LEFT);
        pan_stdf->when(FL_WHEN_CHANGED);
      } // SliderW* pan_stdf
      { pan_extraon = new Fl_Check_Button(38, 352, 64, 15, gettext("Extra Stereo"));
        pan_extraon->down_box(FL_BORDER_BOX);
        pan_extraon->labelsize(10);
        pan_extraon->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        pan_extraon->callback((Fl_Callback*)cb_pan_extraon);
      } // Fl_Check_Button* pan_extraon
      { pan_extra = new SliderW(52, 373, 100, 10, gettext("E.S."));
        pan_extra->type(5);
        pan_extra->box(FL_FLAT_BOX);
        pan_extra->color((Fl_Color)178);
        pan_extra->selection_color((Fl_Color)62);
        pan_extra->labeltype(FL_NORMAL_LABEL);
        pan_extra->labelfont(0);
        pan_extra->labelsize(10);
        pan_extra->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        pan_extra->maximum(127);
        pan_extra->step(1);
        pan_extra->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        pan_extra->callback((Fl_Callback*)cb_pan_extra);
        pan_extra->align(FL_ALIGN_LEFT);
        pan_extra->when(FL_WHEN_CHANGED);
      } // SliderW* pan_extra
      PAN->end();
    } // Fl_Group* PAN
    { HAR = new Fl_Group(321, 212, 158, 184);
      HAR->box(FL_UP_BOX);
      HAR->color((Fl_Color)FL_FOREGROUND_COLOR);
      HAR->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      HAR->labelfont(1);
      HAR->align(96|FL_ALIGN_INSIDE);
      HAR->hide();
      { har_activar = new Fl_Light_Button(326, 216, 34, 18, gettext("On"));
        har_activar->shortcut(0x30);
        har_activar->color((Fl_Color)62);
        har_activar->selection_color((Fl_Color)1);
        har_activar->labelsize(10);
        har_activar->callback((Fl_Callback*)cb_har_activar);
        har_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* har_activar
      { har_preset = new Fl_Choice(398, 216, 76, 18, gettext("Preset"));
        har_preset->down_box(FL_BORDER_BOX);
        har_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        har_preset->labelsize(10);
        har_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_preset->textsize(10);
        har_preset->callback((Fl_Callback*)cb_har_preset);
        har_preset->when(FL_WHEN_RELEASE_ALWAYS);
        har_preset->menu(menu_har_preset);
      } // Fl_Choice* har_preset
      { har_WD = new SliderW(371, 242, 100, 10, gettext("Wet/Dry"));
        har_WD->type(5);
        har_WD->box(FL_FLAT_BOX);
        har_WD->color((Fl_Color)178);
        har_WD->selection_color((Fl_Color)62);
        har_WD->labeltype(FL_NORMAL_LABEL);
        har_WD->labelfont(0);
        har_WD->labelsize(10);
        har_WD->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_WD->minimum(-64);
        har_WD->maximum(63);
        har_WD->step(1);
        har_WD->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_WD->callback((Fl_Callback*)cb_har_WD);
        har_WD->align(FL_ALIGN_LEFT);
        har_WD->when(FL_WHEN_CHANGED);
      } // SliderW* har_WD
      { har_int = new SliderW(371, 255, 100, 10, gettext("Int."));
        har_int->type(5);
        har_int->box(FL_FLAT_BOX);
        har_int->color((Fl_Color)178);
        har_int->selection_color((Fl_Color)62);
        har_int->labeltype(FL_NORMAL_LABEL);
        har_int->labelfont(0);
        har_int->labelsize(10);
        har_int->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_int->minimum(-12);
        har_int->maximum(12);
        har_int->step(1);
        har_int->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_int->callback((Fl_Callback*)cb_har_int);
        har_int->align(FL_ALIGN_LEFT);
        har_int->when(FL_WHEN_CHANGED);
      } // SliderW* har_int
      { har_gan = new SliderW(371, 270, 100, 10, gettext("Gain"));
        har_gan->type(5);
        har_gan->box(FL_FLAT_BOX);
        har_gan->color((Fl_Color)178);
        har_gan->selection_color((Fl_Color)62);
        har_gan->labeltype(FL_NORMAL_LABEL);
        har_gan->labelfont(0);
        har_gan->labelsize(10);
        har_gan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_gan->minimum(-64);
        har_gan->maximum(63);
        har_gan->step(1);
        har_gan->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_gan->callback((Fl_Callback*)cb_har_gan);
        har_gan->align(FL_ALIGN_LEFT);
        har_gan->when(FL_WHEN_CHANGED);
      } // SliderW* har_gan
      { har_pan = new SliderW(371, 283, 100, 10, gettext("Pan"));
        har_pan->type(5);
        har_pan->box(FL_FLAT_BOX);
        har_pan->color((Fl_Color)178);
        har_pan->selection_color((Fl_Color)62);
        har_pan->labeltype(FL_NORMAL_LABEL);
        har_pan->labelfont(0);
        har_pan->labelsize(10);
        har_pan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_pan->minimum(-64);
        har_pan->maximum(63);
        har_pan->step(1);
        har_pan->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_pan->callback((Fl_Callback*)cb_har_pan);
        har_pan->align(FL_ALIGN_LEFT);
        har_pan->when(FL_WHEN_CHANGED);
      } // SliderW* har_pan
      { har_freq1 = new SliderW(372, 300, 100, 10, gettext("Freq"));
        har_freq1->type(5);
        har_freq1->box(FL_FLAT_BOX);
        har_freq1->color((Fl_Color)178);
        har_freq1->selection_color((Fl_Color)62);
        har_freq1->labeltype(FL_NORMAL_LABEL);
        har_freq1->labelfont(0);
        har_freq1->labelsize(10);
        har_freq1->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_freq1->maximum(127);
        har_freq1->step(1);
        har_freq1->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_freq1->callback((Fl_Callback*)cb_har_freq1);
        har_freq1->align(FL_ALIGN_LEFT);
        har_freq1->when(FL_WHEN_CHANGED);
      } // SliderW* har_freq1
      { har_gan1 = new SliderW(371, 312, 100, 10, gettext("Gain"));
        har_gan1->type(5);
        har_gan1->box(FL_FLAT_BOX);
        har_gan1->color((Fl_Color)178);
        har_gan1->selection_color((Fl_Color)62);
        har_gan1->labeltype(FL_NORMAL_LABEL);
        har_gan1->labelfont(0);
        har_gan1->labelsize(10);
        har_gan1->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_gan1->minimum(-64);
        har_gan1->maximum(63);
        har_gan1->step(1);
        har_gan1->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_gan1->callback((Fl_Callback*)cb_har_gan1);
        har_gan1->align(FL_ALIGN_LEFT);
        har_gan1->when(FL_WHEN_CHANGED);
      } // SliderW* har_gan1
      { har_q1 = new SliderW(371, 324, 100, 10, gettext("Q"));
        har_q1->type(5);
        har_q1->box(FL_FLAT_BOX);
        har_q1->color((Fl_Color)178);
        har_q1->selection_color((Fl_Color)62);
        har_q1->labeltype(FL_NORMAL_LABEL);
        har_q1->labelfont(0);
        har_q1->labelsize(10);
        har_q1->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_q1->minimum(-64);
        har_q1->maximum(63);
        har_q1->step(1);
        har_q1->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_q1->callback((Fl_Callback*)cb_har_q1);
        har_q1->align(FL_ALIGN_LEFT);
        har_q1->when(FL_WHEN_CHANGED);
      } // SliderW* har_q1
      { har_MIDI = new Fl_Check_Button(330, 336, 41, 15, gettext("MIDI"));
        har_MIDI->down_box(FL_BORDER_BOX);
        har_MIDI->labelsize(10);
        har_MIDI->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_MIDI->callback((Fl_Callback*)cb_har_MIDI);
        har_MIDI->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
      } // Fl_Check_Button* har_MIDI
      { har_SELECT = new Fl_Check_Button(330, 354, 37, 15, gettext("SEL"));
        har_SELECT->down_box(FL_BORDER_BOX);
        har_SELECT->labelsize(10);
        har_SELECT->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_SELECT->callback((Fl_Callback*)cb_har_SELECT);
        har_SELECT->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
      } // Fl_Check_Button* har_SELECT
      { har_chordname = new Fl_Box(377, 338, 98, 27);
        har_chordname->labelsize(12);
        har_chordname->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      } // Fl_Box* har_chordname
      { har_note = new SliderW(371, 370, 100, 10, gettext("Note"));
        har_note->type(5);
        har_note->box(FL_FLAT_BOX);
        har_note->color((Fl_Color)178);
        har_note->selection_color((Fl_Color)62);
        har_note->labeltype(FL_NORMAL_LABEL);
        har_note->labelfont(0);
        har_note->labelsize(10);
        har_note->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_note->maximum(23);
        har_note->step(1);
        har_note->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_note->callback((Fl_Callback*)cb_har_note);
        har_note->align(FL_ALIGN_LEFT);
        har_note->when(FL_WHEN_CHANGED);
      } // SliderW* har_note
      { har_type = new SliderW(371, 382, 100, 10, gettext("Chord"));
        har_type->type(5);
        har_type->box(FL_FLAT_BOX);
        har_type->color((Fl_Color)178);
        har_type->selection_color((Fl_Color)62);
        har_type->labeltype(FL_NORMAL_LABEL);
        har_type->labelfont(0);
        har_type->labelsize(10);
        har_type->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_type->maximum(33);
        har_type->step(1);
        har_type->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        har_type->callback((Fl_Callback*)cb_har_type);
        har_type->align(FL_ALIGN_LEFT);
        har_type->when(FL_WHEN_CHANGED);
      } // SliderW* har_type
      HAR->end();
    } // Fl_Group* HAR
    { MUSDELAY = new Fl_Group(479, 211, 158, 184);
      MUSDELAY->box(FL_UP_BOX);
      MUSDELAY->color((Fl_Color)FL_FOREGROUND_COLOR);
      MUSDELAY->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      MUSDELAY->labelfont(1);
      MUSDELAY->align(96|FL_ALIGN_INSIDE);
      MUSDELAY->hide();
      { musdelay_activar = new Fl_Light_Button(484, 215, 34, 18, gettext("On"));
        musdelay_activar->shortcut(0x35);
        musdelay_activar->color((Fl_Color)62);
        musdelay_activar->selection_color((Fl_Color)1);
        musdelay_activar->labelsize(10);
        musdelay_activar->callback((Fl_Callback*)cb_musdelay_activar);
        musdelay_activar->align(68|FL_ALIGN_INSIDE);
        musdelay_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* musdelay_activar
      { musdelay_preset = new Fl_Choice(556, 215, 76, 18, gettext("Preset"));
        musdelay_preset->down_box(FL_BORDER_BOX);
        musdelay_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        musdelay_preset->labelsize(10);
        musdelay_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_preset->textsize(10);
        musdelay_preset->callback((Fl_Callback*)cb_musdelay_preset);
        musdelay_preset->when(FL_WHEN_RELEASE_ALWAYS);
        musdelay_preset->menu(menu_musdelay_preset);
      } // Fl_Choice* musdelay_preset
      { musdelay_WD = new SliderW(532, 237, 100, 10, gettext("Wet/Dry"));
        musdelay_WD->type(5);
        musdelay_WD->box(FL_FLAT_BOX);
        musdelay_WD->color((Fl_Color)178);
        musdelay_WD->selection_color((Fl_Color)62);
        musdelay_WD->labeltype(FL_NORMAL_LABEL);
        musdelay_WD->labelfont(0);
        musdelay_WD->labelsize(10);
        musdelay_WD->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_WD->minimum(-64);
        musdelay_WD->maximum(63);
        musdelay_WD->step(1);
        musdelay_WD->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_WD->callback((Fl_Callback*)cb_musdelay_WD);
        musdelay_WD->align(FL_ALIGN_LEFT);
        musdelay_WD->when(FL_WHEN_CHANGED);
      } // SliderW* musdelay_WD
      { musdelay_LRc = new SliderW(532, 249, 100, 10, gettext("L/R.Cr"));
        musdelay_LRc->type(5);
        musdelay_LRc->box(FL_FLAT_BOX);
        musdelay_LRc->color((Fl_Color)178);
        musdelay_LRc->selection_color((Fl_Color)62);
        musdelay_LRc->labeltype(FL_NORMAL_LABEL);
        musdelay_LRc->labelfont(0);
        musdelay_LRc->labelsize(10);
        musdelay_LRc->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_LRc->minimum(-64);
        musdelay_LRc->maximum(63);
        musdelay_LRc->step(1);
        musdelay_LRc->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_LRc->callback((Fl_Callback*)cb_musdelay_LRc);
        musdelay_LRc->align(FL_ALIGN_LEFT);
        musdelay_LRc->when(FL_WHEN_CHANGED);
      } // SliderW* musdelay_LRc
      { musdelay_pan1 = new SliderW(532, 261, 100, 10, gettext("Pan1"));
        musdelay_pan1->type(5);
        musdelay_pan1->box(FL_FLAT_BOX);
        musdelay_pan1->color((Fl_Color)178);
        musdelay_pan1->selection_color((Fl_Color)62);
        musdelay_pan1->labeltype(FL_NORMAL_LABEL);
        musdelay_pan1->labelfont(0);
        musdelay_pan1->labelsize(10);
        musdelay_pan1->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_pan1->minimum(-64);
        musdelay_pan1->maximum(63);
        musdelay_pan1->step(1);
        musdelay_pan1->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_pan1->callback((Fl_Callback*)cb_musdelay_pan1);
        musdelay_pan1->align(FL_ALIGN_LEFT);
        musdelay_pan1->when(FL_WHEN_CHANGED);
      } // SliderW* musdelay_pan1
      { musdelay_pan2 = new SliderW(532, 273, 100, 10, gettext("Pan2"));
        musdelay_pan2->type(5);
        musdelay_pan2->box(FL_FLAT_BOX);
        musdelay_pan2->color((Fl_Color)178);
        musdelay_pan2->selection_color((Fl_Color)62);
        musdelay_pan2->labeltype(FL_NORMAL_LABEL);
        musdelay_pan2->labelfont(0);
        musdelay_pan2->labelsize(10);
        musdelay_pan2->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_pan2->minimum(-64);
        musdelay_pan2->maximum(63);
        musdelay_pan2->step(1);
        musdelay_pan2->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_pan2->callback((Fl_Callback*)cb_musdelay_pan2);
        musdelay_pan2->align(FL_ALIGN_LEFT);
        musdelay_pan2->when(FL_WHEN_CHANGED);
      } // SliderW* musdelay_pan2
      { musdelay_delay1 = new Fl_Choice(489, 293, 38, 14);
        musdelay_delay1->down_box(FL_BORDER_BOX);
        musdelay_delay1->labelsize(10);
        musdelay_delay1->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_delay1->textsize(10);
        musdelay_delay1->callback((Fl_Callback*)cb_musdelay_delay1);
        musdelay_delay1->menu(menu_musdelay_delay1);
      } // Fl_Choice* musdelay_delay1
      { musdelay_delay3 = new Fl_Choice(541, 293, 38, 14);
        musdelay_delay3->down_box(FL_BORDER_BOX);
        musdelay_delay3->labelsize(10);
        musdelay_delay3->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_delay3->textsize(10);
        musdelay_delay3->callback((Fl_Callback*)cb_musdelay_delay3);
        musdelay_delay3->menu(menu_musdelay_delay3);
      } // Fl_Choice* musdelay_delay3
      { musdelay_delay2 = new Fl_Choice(593, 293, 38, 14);
        musdelay_delay2->down_box(FL_BORDER_BOX);
        musdelay_delay2->labelsize(10);
        musdelay_delay2->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_delay2->textsize(10);
        musdelay_delay2->callback((Fl_Callback*)cb_musdelay_delay2);
        musdelay_delay2->menu(menu_musdelay_delay2);
      } // Fl_Choice* musdelay_delay2
      { musdelay_tempo = new SliderW(532, 314, 100, 10, gettext("Tempo"));
        musdelay_tempo->type(5);
        musdelay_tempo->box(FL_FLAT_BOX);
        musdelay_tempo->color((Fl_Color)178);
        musdelay_tempo->selection_color((Fl_Color)62);
        musdelay_tempo->labeltype(FL_NORMAL_LABEL);
        musdelay_tempo->labelfont(0);
        musdelay_tempo->labelsize(10);
        musdelay_tempo->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_tempo->minimum(10);
        musdelay_tempo->maximum(480);
        musdelay_tempo->step(1);
        musdelay_tempo->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_tempo->callback((Fl_Callback*)cb_musdelay_tempo);
        musdelay_tempo->align(FL_ALIGN_LEFT);
        musdelay_tempo->when(FL_WHEN_RELEASE);
      } // SliderW* musdelay_tempo
      { musdelay_gain1 = new SliderW(532, 333, 100, 10, gettext("Gain1"));
        musdelay_gain1->type(5);
        musdelay_gain1->box(FL_FLAT_BOX);
        musdelay_gain1->color((Fl_Color)178);
        musdelay_gain1->selection_color((Fl_Color)62);
        musdelay_gain1->labeltype(FL_NORMAL_LABEL);
        musdelay_gain1->labelfont(0);
        musdelay_gain1->labelsize(10);
        musdelay_gain1->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_gain1->minimum(-64);
        musdelay_gain1->maximum(63);
        musdelay_gain1->step(1);
        musdelay_gain1->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_gain1->callback((Fl_Callback*)cb_musdelay_gain1);
        musdelay_gain1->align(FL_ALIGN_LEFT);
        musdelay_gain1->when(FL_WHEN_CHANGED);
      } // SliderW* musdelay_gain1
      { musdelay_gain2 = new SliderW(532, 345, 100, 10, gettext("Gain2"));
        musdelay_gain2->type(5);
        musdelay_gain2->box(FL_FLAT_BOX);
        musdelay_gain2->color((Fl_Color)178);
        musdelay_gain2->selection_color((Fl_Color)62);
        musdelay_gain2->labeltype(FL_NORMAL_LABEL);
        musdelay_gain2->labelfont(0);
        musdelay_gain2->labelsize(10);
        musdelay_gain2->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_gain2->minimum(-64);
        musdelay_gain2->maximum(63);
        musdelay_gain2->step(1);
        musdelay_gain2->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_gain2->callback((Fl_Callback*)cb_musdelay_gain2);
        musdelay_gain2->align(FL_ALIGN_LEFT);
        musdelay_gain2->when(FL_WHEN_CHANGED);
      } // SliderW* musdelay_gain2
      { musdelay_fb1 = new SliderW(532, 357, 100, 10, gettext("Fb1."));
        musdelay_fb1->type(5);
        musdelay_fb1->box(FL_FLAT_BOX);
        musdelay_fb1->color((Fl_Color)178);
        musdelay_fb1->selection_color((Fl_Color)62);
        musdelay_fb1->labeltype(FL_NORMAL_LABEL);
        musdelay_fb1->labelfont(0);
        musdelay_fb1->labelsize(10);
        musdelay_fb1->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_fb1->maximum(127);
        musdelay_fb1->step(1);
        musdelay_fb1->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_fb1->callback((Fl_Callback*)cb_musdelay_fb1);
        musdelay_fb1->align(FL_ALIGN_LEFT);
        musdelay_fb1->when(FL_WHEN_CHANGED);
      } // SliderW* musdelay_fb1
      { musdelay_fb2 = new SliderW(532, 369, 100, 10, gettext("Fb2."));
        musdelay_fb2->type(5);
        musdelay_fb2->box(FL_FLAT_BOX);
        musdelay_fb2->color((Fl_Color)178);
        musdelay_fb2->selection_color((Fl_Color)62);
        musdelay_fb2->labeltype(FL_NORMAL_LABEL);
        musdelay_fb2->labelfont(0);
        musdelay_fb2->labelsize(10);
        musdelay_fb2->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_fb2->maximum(127);
        musdelay_fb2->step(1);
        musdelay_fb2->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_fb2->callback((Fl_Callback*)cb_musdelay_fb2);
        musdelay_fb2->align(FL_ALIGN_LEFT);
        musdelay_fb2->when(FL_WHEN_CHANGED);
      } // SliderW* musdelay_fb2
      { musdelay_damp = new SliderW(532, 381, 100, 10, gettext("Damp"));
        musdelay_damp->type(5);
        musdelay_damp->box(FL_FLAT_BOX);
        musdelay_damp->color((Fl_Color)178);
        musdelay_damp->selection_color((Fl_Color)62);
        musdelay_damp->labeltype(FL_NORMAL_LABEL);
        musdelay_damp->labelfont(0);
        musdelay_damp->labelsize(10);
        musdelay_damp->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_damp->maximum(127);
        musdelay_damp->step(1);
        musdelay_damp->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        musdelay_damp->callback((Fl_Callback*)cb_musdelay_damp);
        musdelay_damp->align(FL_ALIGN_LEFT);
        musdelay_damp->when(FL_WHEN_CHANGED);
      } // SliderW* musdelay_damp
      MUSDELAY->end();
    } // Fl_Group* MUSDELAY
    { GATE = new Fl_Group(321, 413, 158, 184);
      GATE->box(FL_UP_BOX);
      GATE->color((Fl_Color)FL_FOREGROUND_COLOR);
      GATE->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      GATE->labelfont(1);
      GATE->align(96|FL_ALIGN_INSIDE);
      GATE->hide();
      { gate_activar = new Fl_Light_Button(326, 417, 34, 18, gettext("On"));
        gate_activar->shortcut(0x32);
        gate_activar->color((Fl_Color)62);
        gate_activar->selection_color((Fl_Color)1);
        gate_activar->labelsize(10);
        gate_activar->callback((Fl_Callback*)cb_gate_activar);
        gate_activar->align(68|FL_ALIGN_INSIDE);
        gate_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* gate_activar
      { gate_preset = new Fl_Choice(398, 417, 76, 18, gettext("Preset"));
        gate_preset->down_box(FL_BORDER_BOX);
        gate_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        gate_preset->labelsize(10);
        gate_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        gate_preset->textsize(10);
        gate_preset->callback((Fl_Callback*)cb_gate_preset);
        gate_preset->when(FL_WHEN_RELEASE_ALWAYS);
        gate_preset->menu(menu_gate_preset);
      } // Fl_Choice* gate_preset
      { gate_ATime = new SliderW(372, 452, 100, 10, gettext("A. Time"));
        gate_ATime->type(5);
        gate_ATime->box(FL_FLAT_BOX);
        gate_ATime->color((Fl_Color)178);
        gate_ATime->selection_color((Fl_Color)62);
        gate_ATime->labeltype(FL_NORMAL_LABEL);
        gate_ATime->labelfont(0);
        gate_ATime->labelsize(10);
        gate_ATime->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        gate_ATime->minimum(1);
        gate_ATime->maximum(250);
        gate_ATime->step(1);
        gate_ATime->value(1);
        gate_ATime->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        gate_ATime->callback((Fl_Callback*)cb_gate_ATime);
        gate_ATime->align(FL_ALIGN_LEFT);
        gate_ATime->when(FL_WHEN_CHANGED);
      } // SliderW* gate_ATime
      { gate_RTime = new SliderW(371, 474, 100, 10, gettext("R. Time"));
        gate_RTime->type(5);
        gate_RTime->box(FL_FLAT_BOX);
        gate_RTime->color((Fl_Color)178);
        gate_RTime->selection_color((Fl_Color)62);
        gate_RTime->labeltype(FL_NORMAL_LABEL);
        gate_RTime->labelfont(0);
        gate_RTime->labelsize(10);
        gate_RTime->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        gate_RTime->minimum(2);
        gate_RTime->maximum(250);
        gate_RTime->step(1);
        gate_RTime->value(120);
        gate_RTime->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        gate_RTime->callback((Fl_Callback*)cb_gate_RTime);
        gate_RTime->align(FL_ALIGN_LEFT);
        gate_RTime->when(FL_WHEN_CHANGED);
      } // SliderW* gate_RTime
      { gate_range = new SliderW(371, 496, 100, 10, gettext("Range"));
        gate_range->type(5);
        gate_range->box(FL_FLAT_BOX);
        gate_range->color((Fl_Color)178);
        gate_range->selection_color((Fl_Color)62);
        gate_range->labeltype(FL_NORMAL_LABEL);
        gate_range->labelfont(0);
        gate_range->labelsize(10);
        gate_range->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        gate_range->minimum(-90);
        gate_range->maximum(0);
        gate_range->step(1);
        gate_range->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        gate_range->callback((Fl_Callback*)cb_gate_range);
        gate_range->align(FL_ALIGN_LEFT);
        gate_range->when(FL_WHEN_CHANGED);
      } // SliderW* gate_range
      { gate_threshold = new SliderW(371, 518, 100, 10, gettext("Thrhold"));
        gate_threshold->type(5);
        gate_threshold->box(FL_FLAT_BOX);
        gate_threshold->color((Fl_Color)178);
        gate_threshold->selection_color((Fl_Color)62);
        gate_threshold->labeltype(FL_NORMAL_LABEL);
        gate_threshold->labelfont(0);
        gate_threshold->labelsize(10);
        gate_threshold->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        gate_threshold->minimum(-70);
        gate_threshold->maximum(20);
        gate_threshold->step(1);
        gate_threshold->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        gate_threshold->callback((Fl_Callback*)cb_gate_threshold);
        gate_threshold->align(FL_ALIGN_LEFT);
        gate_threshold->when(FL_WHEN_CHANGED);
      } // SliderW* gate_threshold
      { gate_hold = new SliderW(371, 540, 100, 10, gettext("Hold"));
        gate_hold->type(5);
        gate_hold->box(FL_FLAT_BOX);
        gate_hold->color((Fl_Color)178);
        gate_hold->selection_color((Fl_Color)62);
        gate_hold->labeltype(FL_NORMAL_LABEL);
        gate_hold->labelfont(0);
        gate_hold->labelsize(10);
        gate_hold->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        gate_hold->minimum(2);
        gate_hold->maximum(500);
        gate_hold->step(1);
        gate_hold->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        gate_hold->callback((Fl_Callback*)cb_gate_hold);
        gate_hold->align(FL_ALIGN_LEFT);
        gate_hold->when(FL_WHEN_CHANGED);
      } // SliderW* gate_hold
      { gate_LPF = new SliderW(371, 559, 100, 10, gettext("LPF"));
        gate_LPF->type(5);
        gate_LPF->box(FL_FLAT_BOX);
        gate_LPF->color((Fl_Color)178);
        gate_LPF->selection_color((Fl_Color)62);
        gate_LPF->labeltype(FL_NORMAL_LABEL);
        gate_LPF->labelfont(0);
        gate_LPF->labelsize(10);
        gate_LPF->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        gate_LPF->maximum(127);
        gate_LPF->step(1);
        gate_LPF->value(127);
        gate_LPF->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        gate_LPF->callback((Fl_Callback*)cb_gate_LPF);
        gate_LPF->align(FL_ALIGN_LEFT);
        gate_LPF->when(FL_WHEN_CHANGED);
      } // SliderW* gate_LPF
      { gate_HPF = new SliderW(371, 575, 100, 10, gettext("HPF"));
        gate_HPF->type(5);
        gate_HPF->box(FL_FLAT_BOX);
        gate_HPF->color((Fl_Color)178);
        gate_HPF->selection_color((Fl_Color)62);
        gate_HPF->labeltype(FL_NORMAL_LABEL);
        gate_HPF->labelfont(0);
        gate_HPF->labelsize(10);
        gate_HPF->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        gate_HPF->maximum(127);
        gate_HPF->step(1);
        gate_HPF->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        gate_HPF->callback((Fl_Callback*)cb_gate_HPF);
        gate_HPF->align(FL_ALIGN_LEFT);
        gate_HPF->when(FL_WHEN_CHANGED);
      } // SliderW* gate_HPF
      GATE->end();
    } // Fl_Group* GATE
    { NEWDIST = new Fl_Group(320, 211, 158, 184);
      NEWDIST->box(FL_UP_BOX);
      NEWDIST->color((Fl_Color)FL_FOREGROUND_COLOR);
      NEWDIST->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      NEWDIST->labelfont(1);
      NEWDIST->align(96|FL_ALIGN_INSIDE);
      NEWDIST->hide();
      { newdist_activar = new Fl_Light_Button(325, 215, 34, 18, gettext("On"));
        newdist_activar->shortcut(0x33);
        newdist_activar->color((Fl_Color)62);
        newdist_activar->selection_color((Fl_Color)1);
        newdist_activar->labelsize(10);
        newdist_activar->callback((Fl_Callback*)cb_newdist_activar);
        newdist_activar->align(68|FL_ALIGN_INSIDE);
        newdist_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* newdist_activar
      { newdist_preset = new Fl_Choice(397, 215, 76, 18, gettext("Preset"));
        newdist_preset->down_box(FL_BORDER_BOX);
        newdist_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        newdist_preset->labelsize(10);
        newdist_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_preset->textsize(10);
        newdist_preset->callback((Fl_Callback*)cb_newdist_preset);
        newdist_preset->when(FL_WHEN_RELEASE_ALWAYS);
        newdist_preset->menu(menu_newdist_preset);
      } // Fl_Choice* newdist_preset
      { newdist_WD = new SliderW(372, 239, 100, 10, gettext("Wet/Dry"));
        newdist_WD->type(5);
        newdist_WD->box(FL_FLAT_BOX);
        newdist_WD->color((Fl_Color)178);
        newdist_WD->selection_color((Fl_Color)62);
        newdist_WD->labeltype(FL_NORMAL_LABEL);
        newdist_WD->labelfont(0);
        newdist_WD->labelsize(10);
        newdist_WD->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_WD->minimum(-64);
        newdist_WD->maximum(63);
        newdist_WD->step(1);
        newdist_WD->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_WD->callback((Fl_Callback*)cb_newdist_WD);
        newdist_WD->align(FL_ALIGN_LEFT);
        newdist_WD->when(FL_WHEN_CHANGED);
      } // SliderW* newdist_WD
      { newdist_LRc = new SliderW(372, 253, 100, 10, gettext("L/R.Cr"));
        newdist_LRc->type(5);
        newdist_LRc->box(FL_FLAT_BOX);
        newdist_LRc->color((Fl_Color)178);
        newdist_LRc->selection_color((Fl_Color)62);
        newdist_LRc->labeltype(FL_NORMAL_LABEL);
        newdist_LRc->labelfont(0);
        newdist_LRc->labelsize(10);
        newdist_LRc->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_LRc->minimum(-64);
        newdist_LRc->maximum(63);
        newdist_LRc->step(1);
        newdist_LRc->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_LRc->callback((Fl_Callback*)cb_newdist_LRc);
        newdist_LRc->align(FL_ALIGN_LEFT);
        newdist_LRc->when(FL_WHEN_CHANGED);
      } // SliderW* newdist_LRc
      { newdist_drive = new SliderW(372, 267, 100, 10, gettext("Drive"));
        newdist_drive->type(5);
        newdist_drive->box(FL_FLAT_BOX);
        newdist_drive->color((Fl_Color)178);
        newdist_drive->selection_color((Fl_Color)62);
        newdist_drive->labeltype(FL_NORMAL_LABEL);
        newdist_drive->labelfont(0);
        newdist_drive->labelsize(10);
        newdist_drive->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_drive->minimum(1);
        newdist_drive->maximum(127);
        newdist_drive->step(1);
        newdist_drive->value(1);
        newdist_drive->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_drive->callback((Fl_Callback*)cb_newdist_drive);
        newdist_drive->align(FL_ALIGN_LEFT);
        newdist_drive->when(FL_WHEN_CHANGED);
      } // SliderW* newdist_drive
      { newdist_level = new SliderW(372, 281, 100, 10, gettext("Level"));
        newdist_level->type(5);
        newdist_level->box(FL_FLAT_BOX);
        newdist_level->color((Fl_Color)178);
        newdist_level->selection_color((Fl_Color)62);
        newdist_level->labeltype(FL_NORMAL_LABEL);
        newdist_level->labelfont(0);
        newdist_level->labelsize(10);
        newdist_level->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_level->maximum(127);
        newdist_level->step(1);
        newdist_level->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_level->callback((Fl_Callback*)cb_newdist_level);
        newdist_level->align(FL_ALIGN_LEFT);
        newdist_level->when(FL_WHEN_CHANGED);
      } // SliderW* newdist_level
      { newdist_tipo = new Fl_Choice(354, 295, 70, 16, gettext("Type"));
        newdist_tipo->down_box(FL_BORDER_BOX);
        newdist_tipo->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        newdist_tipo->labelsize(10);
        newdist_tipo->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_tipo->textsize(10);
        newdist_tipo->callback((Fl_Callback*)cb_newdist_tipo);
        newdist_tipo->menu(menu_newdist_tipo);
      } // Fl_Choice* newdist_tipo
      { newdist_neg = new Fl_Check_Button(430, 295, 40, 15, gettext("Neg."));
        newdist_neg->down_box(FL_BORDER_BOX);
        newdist_neg->labelsize(10);
        newdist_neg->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_neg->callback((Fl_Callback*)cb_newdist_neg);
      } // Fl_Check_Button* newdist_neg
      { newdist_st = new SliderW(372, 317, 100, 10, gettext("Color"));
        newdist_st->type(5);
        newdist_st->box(FL_FLAT_BOX);
        newdist_st->color((Fl_Color)178);
        newdist_st->selection_color((Fl_Color)62);
        newdist_st->labeltype(FL_NORMAL_LABEL);
        newdist_st->labelfont(0);
        newdist_st->labelsize(10);
        newdist_st->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_st->maximum(127);
        newdist_st->step(1);
        newdist_st->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_st->callback((Fl_Callback*)cb_newdist_st);
        newdist_st->align(FL_ALIGN_LEFT);
        newdist_st->when(FL_WHEN_CHANGED);
      } // SliderW* newdist_st
      { newdist_oct = new SliderW(372, 331, 100, 10, gettext("Sub Octv"));
        newdist_oct->type(5);
        newdist_oct->box(FL_FLAT_BOX);
        newdist_oct->color((Fl_Color)178);
        newdist_oct->selection_color((Fl_Color)62);
        newdist_oct->labeltype(FL_NORMAL_LABEL);
        newdist_oct->labelfont(0);
        newdist_oct->labelsize(10);
        newdist_oct->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_oct->maximum(127);
        newdist_oct->step(1);
        newdist_oct->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_oct->callback((Fl_Callback*)cb_newdist_oct);
        newdist_oct->align(FL_ALIGN_LEFT);
        newdist_oct->when(FL_WHEN_CHANGED);
      } // SliderW* newdist_oct
      { newdist_pan = new SliderW(372, 345, 100, 10, gettext("Pan"));
        newdist_pan->type(5);
        newdist_pan->box(FL_FLAT_BOX);
        newdist_pan->color((Fl_Color)178);
        newdist_pan->selection_color((Fl_Color)62);
        newdist_pan->labeltype(FL_NORMAL_LABEL);
        newdist_pan->labelfont(0);
        newdist_pan->labelsize(10);
        newdist_pan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_pan->minimum(-64);
        newdist_pan->maximum(63);
        newdist_pan->step(1);
        newdist_pan->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_pan->callback((Fl_Callback*)cb_newdist_pan);
        newdist_pan->align(FL_ALIGN_LEFT);
        newdist_pan->when(FL_WHEN_CHANGED);
      } // SliderW* newdist_pan
      { newdist_pf = new Fl_Check_Button(370, 355, 30, 15, gettext("Pre Filter"));
        newdist_pf->down_box(FL_BORDER_BOX);
        newdist_pf->labelsize(10);
        newdist_pf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_pf->callback((Fl_Callback*)cb_newdist_pf);
      } // Fl_Check_Button* newdist_pf
      { newdist_lpf = new SliderW(372, 370, 100, 10, gettext("LPF"));
        newdist_lpf->type(5);
        newdist_lpf->box(FL_FLAT_BOX);
        newdist_lpf->color((Fl_Color)178);
        newdist_lpf->selection_color((Fl_Color)62);
        newdist_lpf->labeltype(FL_NORMAL_LABEL);
        newdist_lpf->labelfont(0);
        newdist_lpf->labelsize(10);
        newdist_lpf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_lpf->maximum(127);
        newdist_lpf->step(1);
        newdist_lpf->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_lpf->callback((Fl_Callback*)cb_newdist_lpf);
        newdist_lpf->align(FL_ALIGN_LEFT);
        newdist_lpf->when(FL_WHEN_CHANGED);
      } // SliderW* newdist_lpf
      { newdist_hpf = new SliderW(372, 382, 100, 10, gettext("HPF"));
        newdist_hpf->type(5);
        newdist_hpf->box(FL_FLAT_BOX);
        newdist_hpf->color((Fl_Color)178);
        newdist_hpf->selection_color((Fl_Color)62);
        newdist_hpf->labeltype(FL_NORMAL_LABEL);
        newdist_hpf->labelfont(0);
        newdist_hpf->labelsize(10);
        newdist_hpf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_hpf->maximum(127);
        newdist_hpf->step(1);
        newdist_hpf->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        newdist_hpf->callback((Fl_Callback*)cb_newdist_hpf);
        newdist_hpf->align(FL_ALIGN_LEFT);
        newdist_hpf->when(FL_WHEN_CHANGED);
      } // SliderW* newdist_hpf
      NEWDIST->end();
    } // Fl_Group* NEWDIST
    { APHASER = new Fl_Group(320, 216, 158, 184);
      APHASER->box(FL_UP_BOX);
      APHASER->color((Fl_Color)FL_FOREGROUND_COLOR);
      APHASER->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      APHASER->labelfont(1);
      APHASER->align(96|FL_ALIGN_INSIDE);
      APHASER->hide();
      { aphaser_activar = new Fl_Light_Button(325, 220, 34, 18, gettext("On"));
        aphaser_activar->shortcut(0x37);
        aphaser_activar->color((Fl_Color)62);
        aphaser_activar->selection_color((Fl_Color)1);
        aphaser_activar->labelsize(10);
        aphaser_activar->callback((Fl_Callback*)cb_aphaser_activar);
        aphaser_activar->align(68|FL_ALIGN_INSIDE);
        aphaser_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* aphaser_activar
      { aphaser_preset = new Fl_Choice(397, 220, 76, 18, gettext("Preset"));
        aphaser_preset->down_box(FL_BORDER_BOX);
        aphaser_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        aphaser_preset->labelsize(10);
        aphaser_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_preset->textsize(10);
        aphaser_preset->callback((Fl_Callback*)cb_aphaser_preset);
        aphaser_preset->when(FL_WHEN_RELEASE_ALWAYS);
        aphaser_preset->menu(menu_aphaser_preset);
      } // Fl_Choice* aphaser_preset
      { aphaser_WD = new SliderW(369, 243, 100, 10, gettext("Wet/Dry"));
        aphaser_WD->type(5);
        aphaser_WD->box(FL_FLAT_BOX);
        aphaser_WD->color((Fl_Color)178);
        aphaser_WD->selection_color((Fl_Color)62);
        aphaser_WD->labeltype(FL_NORMAL_LABEL);
        aphaser_WD->labelfont(0);
        aphaser_WD->labelsize(10);
        aphaser_WD->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_WD->minimum(-64);
        aphaser_WD->maximum(63);
        aphaser_WD->step(1);
        aphaser_WD->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_WD->callback((Fl_Callback*)cb_aphaser_WD);
        aphaser_WD->align(FL_ALIGN_LEFT);
        aphaser_WD->when(FL_WHEN_CHANGED);
      } // SliderW* aphaser_WD
      { aphaser_lfotype = new Fl_Choice(395, 257, 72, 16, gettext("LFO Type"));
        aphaser_lfotype->down_box(FL_BORDER_BOX);
        aphaser_lfotype->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        aphaser_lfotype->labelsize(10);
        aphaser_lfotype->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_lfotype->textsize(10);
        aphaser_lfotype->callback((Fl_Callback*)cb_aphaser_lfotype);
        aphaser_lfotype->menu(menu_aphaser_lfotype);
      } // Fl_Choice* aphaser_lfotype
      { aphaser_freq = new SliderW(368, 278, 100, 10, gettext("Tempo"));
        aphaser_freq->type(5);
        aphaser_freq->box(FL_FLAT_BOX);
        aphaser_freq->color((Fl_Color)178);
        aphaser_freq->selection_color((Fl_Color)62);
        aphaser_freq->labeltype(FL_NORMAL_LABEL);
        aphaser_freq->labelfont(0);
        aphaser_freq->labelsize(10);
        aphaser_freq->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_freq->minimum(1);
        aphaser_freq->maximum(600);
        aphaser_freq->step(1);
        aphaser_freq->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_freq->callback((Fl_Callback*)cb_aphaser_freq);
        aphaser_freq->align(FL_ALIGN_LEFT);
        aphaser_freq->when(FL_WHEN_CHANGED);
      } // SliderW* aphaser_freq
      { aphaser_dpth = new SliderW(368, 302, 100, 10, gettext("Width"));
        aphaser_dpth->type(5);
        aphaser_dpth->box(FL_FLAT_BOX);
        aphaser_dpth->color((Fl_Color)178);
        aphaser_dpth->selection_color((Fl_Color)62);
        aphaser_dpth->labeltype(FL_NORMAL_LABEL);
        aphaser_dpth->labelfont(0);
        aphaser_dpth->labelsize(10);
        aphaser_dpth->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_dpth->maximum(127);
        aphaser_dpth->step(1);
        aphaser_dpth->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_dpth->callback((Fl_Callback*)cb_aphaser_dpth);
        aphaser_dpth->align(FL_ALIGN_LEFT);
        aphaser_dpth->when(FL_WHEN_CHANGED);
      } // SliderW* aphaser_dpth
      { aphaser_phase = new SliderW(369, 290, 100, 10, gettext("Depth"));
        aphaser_phase->type(5);
        aphaser_phase->box(FL_FLAT_BOX);
        aphaser_phase->color((Fl_Color)178);
        aphaser_phase->selection_color((Fl_Color)62);
        aphaser_phase->labeltype(FL_NORMAL_LABEL);
        aphaser_phase->labelfont(0);
        aphaser_phase->labelsize(10);
        aphaser_phase->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_phase->maximum(127);
        aphaser_phase->step(1);
        aphaser_phase->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_phase->callback((Fl_Callback*)cb_aphaser_phase);
        aphaser_phase->align(FL_ALIGN_LEFT);
        aphaser_phase->when(FL_WHEN_CHANGED);
      } // SliderW* aphaser_phase
      { aphaser_fb = new SliderW(368, 314, 100, 10, gettext("Fb"));
        aphaser_fb->type(5);
        aphaser_fb->box(FL_FLAT_BOX);
        aphaser_fb->color((Fl_Color)178);
        aphaser_fb->selection_color((Fl_Color)62);
        aphaser_fb->labeltype(FL_NORMAL_LABEL);
        aphaser_fb->labelfont(0);
        aphaser_fb->labelsize(10);
        aphaser_fb->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_fb->minimum(-64);
        aphaser_fb->maximum(64);
        aphaser_fb->step(1);
        aphaser_fb->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_fb->callback((Fl_Callback*)cb_aphaser_fb);
        aphaser_fb->align(FL_ALIGN_LEFT);
        aphaser_fb->when(FL_WHEN_CHANGED);
      } // SliderW* aphaser_fb
      { aphaser_LR = new SliderW(368, 327, 100, 10, gettext("Mismatch"));
        aphaser_LR->type(5);
        aphaser_LR->box(FL_FLAT_BOX);
        aphaser_LR->color((Fl_Color)178);
        aphaser_LR->selection_color((Fl_Color)62);
        aphaser_LR->labeltype(FL_NORMAL_LABEL);
        aphaser_LR->labelfont(0);
        aphaser_LR->labelsize(7);
        aphaser_LR->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_LR->maximum(100);
        aphaser_LR->step(1);
        aphaser_LR->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_LR->callback((Fl_Callback*)cb_aphaser_LR);
        aphaser_LR->align(FL_ALIGN_LEFT);
        aphaser_LR->when(FL_WHEN_CHANGED);
      } // SliderW* aphaser_LR
      { aphaser_pan = new SliderW(368, 338, 100, 10, gettext("Distort"));
        aphaser_pan->type(5);
        aphaser_pan->box(FL_FLAT_BOX);
        aphaser_pan->color((Fl_Color)178);
        aphaser_pan->selection_color((Fl_Color)62);
        aphaser_pan->labeltype(FL_NORMAL_LABEL);
        aphaser_pan->labelfont(0);
        aphaser_pan->labelsize(10);
        aphaser_pan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_pan->maximum(100);
        aphaser_pan->step(1);
        aphaser_pan->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_pan->callback((Fl_Callback*)cb_aphaser_pan);
        aphaser_pan->align(FL_ALIGN_LEFT);
        aphaser_pan->when(FL_WHEN_CHANGED);
      } // SliderW* aphaser_pan
      { aphaser_stdf = new SliderW(369, 350, 100, 10, gettext("St.df"));
        aphaser_stdf->type(5);
        aphaser_stdf->box(FL_FLAT_BOX);
        aphaser_stdf->color((Fl_Color)178);
        aphaser_stdf->selection_color((Fl_Color)62);
        aphaser_stdf->labeltype(FL_NORMAL_LABEL);
        aphaser_stdf->labelfont(0);
        aphaser_stdf->labelsize(10);
        aphaser_stdf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_stdf->maximum(127);
        aphaser_stdf->step(1);
        aphaser_stdf->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_stdf->callback((Fl_Callback*)cb_aphaser_stdf);
        aphaser_stdf->align(FL_ALIGN_LEFT);
        aphaser_stdf->when(FL_WHEN_CHANGED);
      } // SliderW* aphaser_stdf
      { aphaser_stages = new Fl_Counter(400, 367, 52, 12, gettext("Stages"));
        aphaser_stages->type(1);
        aphaser_stages->box(FL_THIN_UP_BOX);
        aphaser_stages->labelsize(10);
        aphaser_stages->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_stages->minimum(1);
        aphaser_stages->maximum(12);
        aphaser_stages->step(1);
        aphaser_stages->value(1);
        aphaser_stages->textsize(9);
        aphaser_stages->callback((Fl_Callback*)cb_aphaser_stages);
        aphaser_stages->align(FL_ALIGN_LEFT);
      } // Fl_Counter* aphaser_stages
      { aphaser_hyper = new Fl_Check_Button(395, 381, 60, 15, gettext("Hyper"));
        aphaser_hyper->down_box(FL_BORDER_BOX);
        aphaser_hyper->labelsize(10);
        aphaser_hyper->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_hyper->callback((Fl_Callback*)cb_aphaser_hyper);
      } // Fl_Check_Button* aphaser_hyper
      { aphaser_subs = new Fl_Check_Button(330, 381, 60, 15, gettext("Subtract"));
        aphaser_subs->down_box(FL_BORDER_BOX);
        aphaser_subs->labelsize(10);
        aphaser_subs->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        aphaser_subs->callback((Fl_Callback*)cb_aphaser_subs);
      } // Fl_Check_Button* aphaser_subs
      APHASER->end();
    } // Fl_Group* APHASER
    { VALVE = new Fl_Group(320, 211, 158, 184);
      VALVE->box(FL_UP_BOX);
      VALVE->color((Fl_Color)FL_FOREGROUND_COLOR);
      VALVE->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      VALVE->labelfont(1);
      VALVE->align(96|FL_ALIGN_INSIDE);
      { valve_activar = new Fl_Light_Button(325, 215, 34, 18, gettext("On"));
        valve_activar->shortcut(0x33);
        valve_activar->color((Fl_Color)62);
        valve_activar->selection_color((Fl_Color)1);
        valve_activar->labelsize(10);
        valve_activar->callback((Fl_Callback*)cb_valve_activar);
        valve_activar->align(68|FL_ALIGN_INSIDE);
        valve_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* valve_activar
      { valve_preset = new Fl_Choice(397, 215, 76, 18, gettext("Preset"));
        valve_preset->down_box(FL_BORDER_BOX);
        valve_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        valve_preset->labelsize(10);
        valve_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_preset->textsize(10);
        valve_preset->callback((Fl_Callback*)cb_valve_preset);
        valve_preset->when(FL_WHEN_RELEASE_ALWAYS);
        valve_preset->menu(menu_valve_preset);
      } // Fl_Choice* valve_preset
      { valve_WD = new SliderW(373, 242, 100, 10, gettext("Wet/Dry"));
        valve_WD->type(5);
        valve_WD->box(FL_FLAT_BOX);
        valve_WD->color((Fl_Color)178);
        valve_WD->selection_color((Fl_Color)62);
        valve_WD->labeltype(FL_NORMAL_LABEL);
        valve_WD->labelfont(0);
        valve_WD->labelsize(10);
        valve_WD->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_WD->minimum(-64);
        valve_WD->maximum(63);
        valve_WD->step(1);
        valve_WD->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_WD->callback((Fl_Callback*)cb_valve_WD);
        valve_WD->align(FL_ALIGN_LEFT);
        valve_WD->when(FL_WHEN_CHANGED);
      } // SliderW* valve_WD
      { valve_LRc = new SliderW(373, 255, 100, 10, gettext("L/R.Cr"));
        valve_LRc->type(5);
        valve_LRc->box(FL_FLAT_BOX);
        valve_LRc->color((Fl_Color)178);
        valve_LRc->selection_color((Fl_Color)62);
        valve_LRc->labeltype(FL_NORMAL_LABEL);
        valve_LRc->labelfont(0);
        valve_LRc->labelsize(10);
        valve_LRc->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_LRc->minimum(-64);
        valve_LRc->maximum(63);
        valve_LRc->step(1);
        valve_LRc->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_LRc->callback((Fl_Callback*)cb_valve_LRc);
        valve_LRc->align(FL_ALIGN_LEFT);
        valve_LRc->when(FL_WHEN_CHANGED);
      } // SliderW* valve_LRc
      { valve_pan = new SliderW(373, 268, 100, 10, gettext("Pan"));
        valve_pan->type(5);
        valve_pan->box(FL_FLAT_BOX);
        valve_pan->color((Fl_Color)178);
        valve_pan->selection_color((Fl_Color)62);
        valve_pan->labeltype(FL_NORMAL_LABEL);
        valve_pan->labelfont(0);
        valve_pan->labelsize(10);
        valve_pan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_pan->minimum(-64);
        valve_pan->maximum(63);
        valve_pan->step(1);
        valve_pan->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_pan->callback((Fl_Callback*)cb_valve_pan);
        valve_pan->align(FL_ALIGN_LEFT);
        valve_pan->when(FL_WHEN_CHANGED);
      } // SliderW* valve_pan
      { valve_level = new SliderW(373, 282, 100, 10, gettext("Level"));
        valve_level->type(5);
        valve_level->box(FL_FLAT_BOX);
        valve_level->color((Fl_Color)178);
        valve_level->selection_color((Fl_Color)62);
        valve_level->labeltype(FL_NORMAL_LABEL);
        valve_level->labelfont(0);
        valve_level->labelsize(10);
        valve_level->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_level->maximum(127);
        valve_level->step(1);
        valve_level->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_level->callback((Fl_Callback*)cb_valve_level);
        valve_level->align(FL_ALIGN_LEFT);
        valve_level->when(FL_WHEN_CHANGED);
      } // SliderW* valve_level
      { valve_drive = new SliderW(373, 295, 100, 10, gettext("Drive"));
        valve_drive->type(5);
        valve_drive->box(FL_FLAT_BOX);
        valve_drive->color((Fl_Color)178);
        valve_drive->selection_color((Fl_Color)62);
        valve_drive->labeltype(FL_NORMAL_LABEL);
        valve_drive->labelfont(0);
        valve_drive->labelsize(10);
        valve_drive->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_drive->maximum(127);
        valve_drive->step(1);
        valve_drive->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_drive->callback((Fl_Callback*)cb_valve_drive);
        valve_drive->align(FL_ALIGN_LEFT);
        valve_drive->when(FL_WHEN_CHANGED);
      } // SliderW* valve_drive
      { valve_ed = new Fl_Check_Button(335, 307, 30, 15, gettext("Extra Dist."));
        valve_ed->down_box(FL_BORDER_BOX);
        valve_ed->labelsize(10);
        valve_ed->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_ed->callback((Fl_Callback*)cb_valve_ed);
      } // Fl_Check_Button* valve_ed
      { valve_Q = new SliderW(373, 323, 100, 10, gettext("Dist,"));
        valve_Q->type(5);
        valve_Q->box(FL_FLAT_BOX);
        valve_Q->color((Fl_Color)178);
        valve_Q->selection_color((Fl_Color)62);
        valve_Q->labeltype(FL_NORMAL_LABEL);
        valve_Q->labelfont(0);
        valve_Q->labelsize(10);
        valve_Q->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_Q->maximum(127);
        valve_Q->step(1);
        valve_Q->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_Q->callback((Fl_Callback*)cb_valve_Q);
        valve_Q->align(FL_ALIGN_LEFT);
        valve_Q->when(FL_WHEN_CHANGED);
      } // SliderW* valve_Q
      { valve_Pre = new SliderW(373, 338, 100, 10, gettext("Presence"));
        valve_Pre->type(5);
        valve_Pre->box(FL_FLAT_BOX);
        valve_Pre->color((Fl_Color)178);
        valve_Pre->selection_color((Fl_Color)62);
        valve_Pre->labeltype(FL_NORMAL_LABEL);
        valve_Pre->labelfont(0);
        valve_Pre->labelsize(10);
        valve_Pre->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_Pre->maximum(100);
        valve_Pre->step(1);
        valve_Pre->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_Pre->callback((Fl_Callback*)cb_valve_Pre);
        valve_Pre->align(FL_ALIGN_LEFT);
        valve_Pre->when(FL_WHEN_CHANGED);
      } // SliderW* valve_Pre
      { valve_pf = new Fl_Check_Button(325, 350, 30, 15, gettext("Pre Filter"));
        valve_pf->down_box(FL_BORDER_BOX);
        valve_pf->labelsize(10);
        valve_pf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_pf->callback((Fl_Callback*)cb_valve_pf);
      } // Fl_Check_Button* valve_pf
      { valve_st = new Fl_Check_Button(385, 350, 30, 15, gettext("Stereo"));
        valve_st->down_box(FL_BORDER_BOX);
        valve_st->labelsize(10);
        valve_st->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_st->callback((Fl_Callback*)cb_valve_st);
      } // Fl_Check_Button* valve_st
      { valve_neg = new Fl_Check_Button(434, 350, 40, 15, gettext("Neg."));
        valve_neg->down_box(FL_BORDER_BOX);
        valve_neg->labelsize(10);
        valve_neg->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_neg->callback((Fl_Callback*)cb_valve_neg);
      } // Fl_Check_Button* valve_neg
      { valve_lpf = new SliderW(373, 367, 100, 10, gettext("LPF"));
        valve_lpf->type(5);
        valve_lpf->box(FL_FLAT_BOX);
        valve_lpf->color((Fl_Color)178);
        valve_lpf->selection_color((Fl_Color)62);
        valve_lpf->labeltype(FL_NORMAL_LABEL);
        valve_lpf->labelfont(0);
        valve_lpf->labelsize(10);
        valve_lpf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_lpf->maximum(127);
        valve_lpf->step(1);
        valve_lpf->value(127);
        valve_lpf->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_lpf->callback((Fl_Callback*)cb_valve_lpf);
        valve_lpf->align(FL_ALIGN_LEFT);
        valve_lpf->when(FL_WHEN_CHANGED);
      } // SliderW* valve_lpf
      { valve_hpf = new SliderW(373, 380, 100, 10, gettext("HPF"));
        valve_hpf->type(5);
        valve_hpf->box(FL_FLAT_BOX);
        valve_hpf->color((Fl_Color)178);
        valve_hpf->selection_color((Fl_Color)62);
        valve_hpf->labeltype(FL_NORMAL_LABEL);
        valve_hpf->labelfont(0);
        valve_hpf->labelsize(10);
        valve_hpf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_hpf->maximum(127);
        valve_hpf->step(1);
        valve_hpf->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        valve_hpf->callback((Fl_Callback*)cb_valve_hpf);
        valve_hpf->align(FL_ALIGN_LEFT);
        valve_hpf->when(FL_WHEN_CHANGED);
      } // SliderW* valve_hpf
      VALVE->end();
    } // Fl_Group* VALVE
    { DFLANGE = new Fl_Group(320, 211, 158, 184);
      DFLANGE->box(FL_UP_BOX);
      DFLANGE->color((Fl_Color)FL_FOREGROUND_COLOR);
      DFLANGE->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      DFLANGE->labelfont(1);
      DFLANGE->align(96|FL_ALIGN_INSIDE);
      DFLANGE->hide();
      { dflange_activar = new Fl_Light_Button(325, 215, 34, 18, gettext("On"));
        dflange_activar->shortcut(0x38);
        dflange_activar->color((Fl_Color)62);
        dflange_activar->selection_color((Fl_Color)1);
        dflange_activar->labelsize(10);
        dflange_activar->callback((Fl_Callback*)cb_dflange_activar);
        dflange_activar->align(68|FL_ALIGN_INSIDE);
        dflange_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* dflange_activar
      { dflange_preset = new Fl_Choice(397, 215, 76, 18, gettext("Preset"));
        dflange_preset->down_box(FL_BORDER_BOX);
        dflange_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        dflange_preset->labelsize(10);
        dflange_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_preset->textsize(10);
        dflange_preset->callback((Fl_Callback*)cb_dflange_preset);
        dflange_preset->when(FL_WHEN_RELEASE_ALWAYS);
        dflange_preset->menu(menu_dflange_preset);
      } // Fl_Choice* dflange_preset
      { dflange_WD = new SliderW(372, 235, 100, 10, gettext("Wet/Dry"));
        dflange_WD->type(5);
        dflange_WD->box(FL_FLAT_BOX);
        dflange_WD->color((Fl_Color)178);
        dflange_WD->selection_color((Fl_Color)62);
        dflange_WD->labeltype(FL_NORMAL_LABEL);
        dflange_WD->labelfont(0);
        dflange_WD->labelsize(10);
        dflange_WD->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_WD->minimum(-64);
        dflange_WD->maximum(64);
        dflange_WD->step(1);
        dflange_WD->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_WD->callback((Fl_Callback*)cb_dflange_WD);
        dflange_WD->align(FL_ALIGN_LEFT);
        dflange_WD->when(FL_WHEN_CHANGED);
      } // SliderW* dflange_WD
      { dflange_pan = new SliderW(372, 246, 100, 10, gettext("Pan"));
        dflange_pan->type(5);
        dflange_pan->box(FL_FLAT_BOX);
        dflange_pan->color((Fl_Color)178);
        dflange_pan->selection_color((Fl_Color)62);
        dflange_pan->labeltype(FL_NORMAL_LABEL);
        dflange_pan->labelfont(0);
        dflange_pan->labelsize(10);
        dflange_pan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_pan->minimum(-64);
        dflange_pan->maximum(64);
        dflange_pan->step(1);
        dflange_pan->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_pan->callback((Fl_Callback*)cb_dflange_pan);
        dflange_pan->align(FL_ALIGN_LEFT);
        dflange_pan->when(FL_WHEN_CHANGED);
      } // SliderW* dflange_pan
      { dflange_LR = new SliderW(372, 257, 100, 10, gettext("L/R.Cr"));
        dflange_LR->type(5);
        dflange_LR->box(FL_FLAT_BOX);
        dflange_LR->color((Fl_Color)178);
        dflange_LR->selection_color((Fl_Color)62);
        dflange_LR->labeltype(FL_NORMAL_LABEL);
        dflange_LR->labelfont(0);
        dflange_LR->labelsize(10);
        dflange_LR->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_LR->maximum(127);
        dflange_LR->step(1);
        dflange_LR->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_LR->callback((Fl_Callback*)cb_dflange_LR);
        dflange_LR->align(FL_ALIGN_LEFT);
        dflange_LR->when(FL_WHEN_CHANGED);
      } // SliderW* dflange_LR
      { dflange_depth = new SliderW(372, 268, 100, 10, gettext("Depth"));
        dflange_depth->type(5);
        dflange_depth->box(FL_FLAT_BOX);
        dflange_depth->color((Fl_Color)178);
        dflange_depth->selection_color((Fl_Color)62);
        dflange_depth->labeltype(FL_NORMAL_LABEL);
        dflange_depth->labelfont(0);
        dflange_depth->labelsize(10);
        dflange_depth->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_depth->minimum(20);
        dflange_depth->maximum(500);
        dflange_depth->step(1);
        dflange_depth->value(20);
        dflange_depth->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_depth->callback((Fl_Callback*)cb_dflange_depth);
        dflange_depth->align(FL_ALIGN_LEFT);
        dflange_depth->when(FL_WHEN_CHANGED);
      } // SliderW* dflange_depth
      { dflange_width = new SliderW(372, 280, 100, 10, gettext("Width"));
        dflange_width->type(5);
        dflange_width->box(FL_FLAT_BOX);
        dflange_width->color((Fl_Color)178);
        dflange_width->selection_color((Fl_Color)62);
        dflange_width->labeltype(FL_NORMAL_LABEL);
        dflange_width->labelfont(0);
        dflange_width->labelsize(10);
        dflange_width->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_width->maximum(3000);
        dflange_width->step(1);
        dflange_width->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_width->callback((Fl_Callback*)cb_dflange_width);
        dflange_width->align(FL_ALIGN_LEFT);
        dflange_width->when(FL_WHEN_CHANGED);
      } // SliderW* dflange_width
      { dflange_offset = new SliderW(372, 291, 100, 10, gettext("Offset"));
        dflange_offset->type(5);
        dflange_offset->box(FL_FLAT_BOX);
        dflange_offset->color((Fl_Color)178);
        dflange_offset->selection_color((Fl_Color)62);
        dflange_offset->labeltype(FL_NORMAL_LABEL);
        dflange_offset->labelfont(0);
        dflange_offset->labelsize(10);
        dflange_offset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_offset->maximum(100);
        dflange_offset->step(1);
        dflange_offset->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_offset->callback((Fl_Callback*)cb_dflange_offset);
        dflange_offset->align(FL_ALIGN_LEFT);
        dflange_offset->when(FL_WHEN_CHANGED);
      } // SliderW* dflange_offset
      { dflange_fb = new SliderW(372, 302, 100, 10, gettext("Fb"));
        dflange_fb->type(5);
        dflange_fb->box(FL_FLAT_BOX);
        dflange_fb->color((Fl_Color)178);
        dflange_fb->selection_color((Fl_Color)62);
        dflange_fb->labeltype(FL_NORMAL_LABEL);
        dflange_fb->labelfont(0);
        dflange_fb->labelsize(10);
        dflange_fb->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_fb->minimum(-64);
        dflange_fb->maximum(64);
        dflange_fb->step(1);
        dflange_fb->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_fb->callback((Fl_Callback*)cb_dflange_fb);
        dflange_fb->align(FL_ALIGN_LEFT);
        dflange_fb->when(FL_WHEN_CHANGED);
      } // SliderW* dflange_fb
      { dflange_lpf = new SliderW(372, 313, 100, 10, gettext("LPF"));
        dflange_lpf->type(5);
        dflange_lpf->box(FL_FLAT_BOX);
        dflange_lpf->color((Fl_Color)178);
        dflange_lpf->selection_color((Fl_Color)62);
        dflange_lpf->labeltype(FL_NORMAL_LABEL);
        dflange_lpf->labelfont(0);
        dflange_lpf->labelsize(10);
        dflange_lpf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_lpf->minimum(20);
        dflange_lpf->maximum(20000);
        dflange_lpf->step(1);
        dflange_lpf->value(20);
        dflange_lpf->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_lpf->callback((Fl_Callback*)cb_dflange_lpf);
        dflange_lpf->align(FL_ALIGN_LEFT);
        dflange_lpf->when(FL_WHEN_CHANGED);
      } // SliderW* dflange_lpf
      { dflange_subs = new Fl_Check_Button(332, 324, 64, 15, gettext("Subtract"));
        dflange_subs->down_box(FL_BORDER_BOX);
        dflange_subs->labelsize(10);
        dflange_subs->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_subs->callback((Fl_Callback*)cb_dflange_subs);
      } // Fl_Check_Button* dflange_subs
      { dflange_tz = new Fl_Check_Button(395, 324, 64, 15, gettext("Th. zero"));
        dflange_tz->down_box(FL_BORDER_BOX);
        dflange_tz->labelsize(10);
        dflange_tz->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_tz->callback((Fl_Callback*)cb_dflange_tz);
      } // Fl_Check_Button* dflange_tz
      { dflange_freq = new SliderW(372, 339, 100, 10, gettext("Tempo"));
        dflange_freq->type(5);
        dflange_freq->box(FL_FLAT_BOX);
        dflange_freq->color((Fl_Color)178);
        dflange_freq->selection_color((Fl_Color)62);
        dflange_freq->labeltype(FL_NORMAL_LABEL);
        dflange_freq->labelfont(0);
        dflange_freq->labelsize(10);
        dflange_freq->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_freq->minimum(1);
        dflange_freq->maximum(600);
        dflange_freq->step(1);
        dflange_freq->value(100);
        dflange_freq->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_freq->callback((Fl_Callback*)cb_dflange_freq);
        dflange_freq->align(FL_ALIGN_LEFT);
        dflange_freq->when(FL_WHEN_CHANGED);
      } // SliderW* dflange_freq
      { dflange_stdf = new SliderW(372, 351, 100, 10, gettext("St.df"));
        dflange_stdf->type(5);
        dflange_stdf->box(FL_FLAT_BOX);
        dflange_stdf->color((Fl_Color)178);
        dflange_stdf->selection_color((Fl_Color)62);
        dflange_stdf->labeltype(FL_NORMAL_LABEL);
        dflange_stdf->labelfont(0);
        dflange_stdf->labelsize(10);
        dflange_stdf->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_stdf->maximum(127);
        dflange_stdf->step(1);
        dflange_stdf->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_stdf->callback((Fl_Callback*)cb_dflange_stdf);
        dflange_stdf->align(FL_ALIGN_LEFT);
        dflange_stdf->when(FL_WHEN_CHANGED);
      } // SliderW* dflange_stdf
      { dflange_lfotype = new Fl_Choice(383, 364, 72, 15, gettext("LFO Type"));
        dflange_lfotype->down_box(FL_BORDER_BOX);
        dflange_lfotype->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        dflange_lfotype->labelsize(10);
        dflange_lfotype->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_lfotype->textsize(10);
        dflange_lfotype->callback((Fl_Callback*)cb_dflange_lfotype);
        dflange_lfotype->menu(menu_dflange_lfotype);
      } // Fl_Choice* dflange_lfotype
      { dflange_rnd = new SliderW(372, 381, 100, 10, gettext("Rnd"));
        dflange_rnd->type(5);
        dflange_rnd->box(FL_FLAT_BOX);
        dflange_rnd->color((Fl_Color)178);
        dflange_rnd->selection_color((Fl_Color)62);
        dflange_rnd->labeltype(FL_NORMAL_LABEL);
        dflange_rnd->labelfont(0);
        dflange_rnd->labelsize(10);
        dflange_rnd->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_rnd->maximum(127);
        dflange_rnd->step(1);
        dflange_rnd->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        dflange_rnd->callback((Fl_Callback*)cb_dflange_rnd);
        dflange_rnd->align(FL_ALIGN_LEFT);
        dflange_rnd->when(FL_WHEN_CHANGED);
      } // SliderW* dflange_rnd
      DFLANGE->end();
    } // Fl_Group* DFLANGE
    { RING = new Fl_Group(320, 211, 158, 184);
      RING->box(FL_UP_BOX);
      RING->color((Fl_Color)FL_FOREGROUND_COLOR);
      RING->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      RING->labelfont(1);
      RING->align(96|FL_ALIGN_INSIDE);
      RING->hide();
      { ring_activar = new Fl_Light_Button(325, 215, 34, 18, gettext("On"));
        ring_activar->shortcut(0x34);
        ring_activar->color((Fl_Color)62);
        ring_activar->selection_color((Fl_Color)1);
        ring_activar->labelsize(10);
        ring_activar->callback((Fl_Callback*)cb_ring_activar);
        ring_activar->align(68|FL_ALIGN_INSIDE);
        ring_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* ring_activar
      { ring_preset = new Fl_Choice(397, 215, 76, 18, gettext("Preset"));
        ring_preset->down_box(FL_BORDER_BOX);
        ring_preset->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        ring_preset->labelsize(10);
        ring_preset->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_preset->textsize(10);
        ring_preset->callback((Fl_Callback*)cb_ring_preset);
        ring_preset->when(FL_WHEN_RELEASE_ALWAYS);
        ring_preset->menu(menu_ring_preset);
      } // Fl_Choice* ring_preset
      { ring_WD = new SliderW(371, 240, 100, 10, gettext("Wet/Dry"));
        ring_WD->type(5);
        ring_WD->box(FL_FLAT_BOX);
        ring_WD->color((Fl_Color)178);
        ring_WD->selection_color((Fl_Color)62);
        ring_WD->labeltype(FL_NORMAL_LABEL);
        ring_WD->labelfont(0);
        ring_WD->labelsize(10);
        ring_WD->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_WD->minimum(-64);
        ring_WD->maximum(64);
        ring_WD->step(1);
        ring_WD->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_WD->callback((Fl_Callback*)cb_ring_WD);
        ring_WD->align(FL_ALIGN_LEFT);
        ring_WD->when(FL_WHEN_CHANGED);
      } // SliderW* ring_WD
      { ring_LRc = new SliderW(371, 253, 100, 10, gettext("L/R Cr."));
        ring_LRc->type(5);
        ring_LRc->box(FL_FLAT_BOX);
        ring_LRc->color((Fl_Color)178);
        ring_LRc->selection_color((Fl_Color)62);
        ring_LRc->labeltype(FL_NORMAL_LABEL);
        ring_LRc->labelfont(0);
        ring_LRc->labelsize(10);
        ring_LRc->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_LRc->minimum(-64);
        ring_LRc->maximum(64);
        ring_LRc->step(1);
        ring_LRc->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_LRc->callback((Fl_Callback*)cb_ring_LRc);
        ring_LRc->align(FL_ALIGN_LEFT);
        ring_LRc->when(FL_WHEN_CHANGED);
      } // SliderW* ring_LRc
      { ring_input = new SliderW(371, 266, 100, 10, gettext("Input"));
        ring_input->type(5);
        ring_input->box(FL_FLAT_BOX);
        ring_input->color((Fl_Color)178);
        ring_input->selection_color((Fl_Color)62);
        ring_input->labeltype(FL_NORMAL_LABEL);
        ring_input->labelfont(0);
        ring_input->labelsize(10);
        ring_input->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_input->maximum(127);
        ring_input->step(1);
        ring_input->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_input->callback((Fl_Callback*)cb_ring_input);
        ring_input->align(FL_ALIGN_LEFT);
        ring_input->when(FL_WHEN_CHANGED);
      } // SliderW* ring_input
      { ring_level = new SliderW(371, 279, 100, 10, gettext("Level"));
        ring_level->type(5);
        ring_level->box(FL_FLAT_BOX);
        ring_level->color((Fl_Color)178);
        ring_level->selection_color((Fl_Color)62);
        ring_level->labeltype(FL_NORMAL_LABEL);
        ring_level->labelfont(0);
        ring_level->labelsize(10);
        ring_level->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_level->maximum(127);
        ring_level->step(1);
        ring_level->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_level->callback((Fl_Callback*)cb_ring_level);
        ring_level->align(FL_ALIGN_LEFT);
        ring_level->when(FL_WHEN_CHANGED);
      } // SliderW* ring_level
      { ring_pan = new SliderW(371, 292, 100, 10, gettext("Pan"));
        ring_pan->type(5);
        ring_pan->box(FL_FLAT_BOX);
        ring_pan->color((Fl_Color)178);
        ring_pan->selection_color((Fl_Color)62);
        ring_pan->labeltype(FL_NORMAL_LABEL);
        ring_pan->labelfont(0);
        ring_pan->labelsize(10);
        ring_pan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_pan->minimum(-64);
        ring_pan->maximum(64);
        ring_pan->step(1);
        ring_pan->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_pan->callback((Fl_Callback*)cb_ring_pan);
        ring_pan->align(FL_ALIGN_LEFT);
        ring_pan->when(FL_WHEN_CHANGED);
      } // SliderW* ring_pan
      { ring_st = new Fl_Check_Button(348, 303, 30, 15, gettext("Stereo"));
        ring_st->down_box(FL_BORDER_BOX);
        ring_st->labelsize(10);
        ring_st->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_st->callback((Fl_Callback*)cb_ring_st);
      } // Fl_Check_Button* ring_st
      { ring_afreq = new Fl_Check_Button(400, 303, 30, 15, gettext("Auto Freq"));
        ring_afreq->down_box(FL_BORDER_BOX);
        ring_afreq->labelsize(10);
        ring_afreq->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_afreq->callback((Fl_Callback*)cb_ring_afreq);
      } // Fl_Check_Button* ring_afreq
      { ring_depth = new SliderW(371, 317, 100, 10, gettext("Depth"));
        ring_depth->type(5);
        ring_depth->box(FL_FLAT_BOX);
        ring_depth->color((Fl_Color)178);
        ring_depth->selection_color((Fl_Color)62);
        ring_depth->labeltype(FL_NORMAL_LABEL);
        ring_depth->labelfont(0);
        ring_depth->labelsize(10);
        ring_depth->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_depth->maximum(100);
        ring_depth->step(1);
        ring_depth->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_depth->callback((Fl_Callback*)cb_ring_depth);
        ring_depth->align(FL_ALIGN_LEFT);
        ring_depth->when(FL_WHEN_CHANGED);
      } // SliderW* ring_depth
      { ring_freq = new SliderW(371, 329, 100, 10, gettext("Freq"));
        ring_freq->type(5);
        ring_freq->box(FL_FLAT_BOX);
        ring_freq->color((Fl_Color)178);
        ring_freq->selection_color((Fl_Color)62);
        ring_freq->labeltype(FL_NORMAL_LABEL);
        ring_freq->labelfont(0);
        ring_freq->labelsize(10);
        ring_freq->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_freq->minimum(1);
        ring_freq->maximum(20000);
        ring_freq->step(10);
        ring_freq->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_freq->callback((Fl_Callback*)cb_ring_freq);
        ring_freq->align(FL_ALIGN_LEFT);
        ring_freq->when(FL_WHEN_CHANGED);
      } // SliderW* ring_freq
      { ring_sin = new SliderW(371, 341, 100, 10, gettext("Sin"));
        ring_sin->type(5);
        ring_sin->box(FL_FLAT_BOX);
        ring_sin->color((Fl_Color)178);
        ring_sin->selection_color((Fl_Color)62);
        ring_sin->labeltype(FL_NORMAL_LABEL);
        ring_sin->labelfont(0);
        ring_sin->labelsize(10);
        ring_sin->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_sin->maximum(100);
        ring_sin->step(1);
        ring_sin->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_sin->callback((Fl_Callback*)cb_ring_sin);
        ring_sin->align(FL_ALIGN_LEFT);
        ring_sin->when(FL_WHEN_CHANGED);
      } // SliderW* ring_sin
      { ring_tri = new SliderW(371, 353, 100, 10, gettext("Tri"));
        ring_tri->type(5);
        ring_tri->box(FL_FLAT_BOX);
        ring_tri->color((Fl_Color)178);
        ring_tri->selection_color((Fl_Color)62);
        ring_tri->labeltype(FL_NORMAL_LABEL);
        ring_tri->labelfont(0);
        ring_tri->labelsize(10);
        ring_tri->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_tri->maximum(100);
        ring_tri->step(1);
        ring_tri->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_tri->callback((Fl_Callback*)cb_ring_tri);
        ring_tri->align(FL_ALIGN_LEFT);
        ring_tri->when(FL_WHEN_CHANGED);
      } // SliderW* ring_tri
      { ring_saw = new SliderW(371, 365, 100, 10, gettext("Saw"));
        ring_saw->type(5);
        ring_saw->box(FL_FLAT_BOX);
        ring_saw->color((Fl_Color)178);
        ring_saw->selection_color((Fl_Color)62);
        ring_saw->labeltype(FL_NORMAL_LABEL);
        ring_saw->labelfont(0);
        ring_saw->labelsize(10);
        ring_saw->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_saw->maximum(100);
        ring_saw->step(1);
        ring_saw->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_saw->callback((Fl_Callback*)cb_ring_saw);
        ring_saw->align(FL_ALIGN_LEFT);
        ring_saw->when(FL_WHEN_CHANGED);
      } // SliderW* ring_saw
      { ring_squ = new SliderW(371, 378, 100, 10, gettext("Squ"));
        ring_squ->type(5);
        ring_squ->box(FL_FLAT_BOX);
        ring_squ->color((Fl_Color)178);
        ring_squ->selection_color((Fl_Color)62);
        ring_squ->labeltype(FL_NORMAL_LABEL);
        ring_squ->labelfont(0);
        ring_squ->labelsize(10);
        ring_squ->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_squ->maximum(100);
        ring_squ->step(1);
        ring_squ->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        ring_squ->callback((Fl_Callback*)cb_ring_squ);
        ring_squ->align(FL_ALIGN_LEFT);
        ring_squ->when(FL_WHEN_CHANGED);
      } // SliderW* ring_squ
      RING->end();
    } // Fl_Group* RING
    { Tuner = new Fl_Group(521, 84, 276, 58);
      Tuner->box(FL_UP_BOX);
      Tuner->color((Fl_Color)FL_FOREGROUND_COLOR);
      Tuner->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      Tuner->align(96|FL_ALIGN_INSIDE);
      { tuner_activar = new Fl_Light_Button(526, 88, 38, 18, gettext("On"));
        tuner_activar->shortcut(0x74);
        tuner_activar->color((Fl_Color)62);
        tuner_activar->selection_color((Fl_Color)1);
        tuner_activar->labelsize(10);
        tuner_activar->callback((Fl_Callback*)cb_tuner_activar);
        tuner_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* tuner_activar
      { TunerLed* o = tuner_bar = new TunerLed(586, 91, 206, 14);
        tuner_bar->box(FL_THIN_DOWN_BOX);
        tuner_bar->color((Fl_Color)FL_DARK1);
        tuner_bar->selection_color((Fl_Color)FL_RED);
        tuner_bar->labeltype(FL_NORMAL_LABEL);
        tuner_bar->labelfont(0);
        tuner_bar->labelsize(14);
        tuner_bar->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        tuner_bar->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
        tuner_bar->when(FL_WHEN_RELEASE);
        o->minimum(-32);
        o->maximum(32);
        o->value(-32);
      } // TunerLed* tuner_bar
      { WNote = new Fl_Box(676, 117, 28, 22);
        WNote->labelfont(1);
        WNote->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WNote->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      } // Fl_Box* WNote
      { WRfreq = new Fl_Box(588, 117, 76, 22);
        WRfreq->labelfont(1);
        WRfreq->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WRfreq->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      } // Fl_Box* WRfreq
      { WNfreq = new Fl_Box(714, 117, 76, 22);
        WNfreq->labelfont(1);
        WNfreq->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WNfreq->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      } // Fl_Box* WNfreq
      { PINCHO = new Fl_Box(673, 108, 32, 5, gettext("@-4$8<"));
        PINCHO->box(FL_FLAT_BOX);
        PINCHO->color((Fl_Color)55);
        PINCHO->labelcolor((Fl_Color)4);
        PINCHO->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      } // Fl_Box* PINCHO
      { TUNER_LABEL = new Fl_Box(527, 123, 57, 14, gettext("Tuner"));
        TUNER_LABEL->labelfont(1);
        TUNER_LABEL->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      } // Fl_Box* TUNER_LABEL
      Tuner->end();
    } // Fl_Group* Tuner
    { InOut = new Fl_Group(2, 24, 164, 170);
      InOut->box(FL_UP_BOX);
      InOut->color((Fl_Color)FL_FOREGROUND_COLOR);
      InOut->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      InOut->align(96|FL_ALIGN_INSIDE);
      { ActivarGeneral = new Fl_Light_Button(6, 30, 52, 18, gettext("FX On"));
        ActivarGeneral->shortcut(0x72);
        ActivarGeneral->color((Fl_Color)62);
        ActivarGeneral->selection_color((Fl_Color)1);
        ActivarGeneral->labelsize(10);
        ActivarGeneral->callback((Fl_Callback*)cb_ActivarGeneral);
        ActivarGeneral->align(68|FL_ALIGN_INSIDE);
        ActivarGeneral->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* ActivarGeneral
      { Balance = new SliderW(15, 48, 19, 126, gettext("FX%"));
        Balance->type(4);
        Balance->box(FL_FLAT_BOX);
        Balance->color((Fl_Color)FL_FOREGROUND_COLOR);
        Balance->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        Balance->labeltype(FL_NORMAL_LABEL);
        Balance->labelfont(0);
        Balance->labelsize(10);
        Balance->labelcolor((Fl_Color)31);
        Balance->minimum(100);
        Balance->maximum(0);
        Balance->step(1);
        Balance->value(100);
        Balance->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Balance->callback((Fl_Callback*)cb_Balance);
        Balance->align(FL_ALIGN_BOTTOM);
        Balance->when(FL_WHEN_CHANGED);
      } // SliderW* Balance
      { Nivel_Entrada = new SliderW(57, 48, 19, 126, gettext("Input"));
        Nivel_Entrada->type(4);
        Nivel_Entrada->box(FL_FLAT_BOX);
        Nivel_Entrada->color((Fl_Color)FL_FOREGROUND_COLOR);
        Nivel_Entrada->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        Nivel_Entrada->labeltype(FL_NORMAL_LABEL);
        Nivel_Entrada->labelfont(0);
        Nivel_Entrada->labelsize(10);
        Nivel_Entrada->labelcolor((Fl_Color)31);
        Nivel_Entrada->minimum(50);
        Nivel_Entrada->maximum(-50);
        Nivel_Entrada->step(1);
        Nivel_Entrada->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Nivel_Entrada->callback((Fl_Callback*)cb_Nivel_Entrada);
        Nivel_Entrada->align(FL_ALIGN_BOTTOM);
        Nivel_Entrada->when(FL_WHEN_CHANGED);
      } // SliderW* Nivel_Entrada
      { Nivel_Salida = new SliderW(115, 48, 19, 126, gettext("Output"));
        Nivel_Salida->type(4);
        Nivel_Salida->box(FL_FLAT_BOX);
        Nivel_Salida->color((Fl_Color)FL_FOREGROUND_COLOR);
        Nivel_Salida->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        Nivel_Salida->labeltype(FL_NORMAL_LABEL);
        Nivel_Salida->labelfont(0);
        Nivel_Salida->labelsize(10);
        Nivel_Salida->labelcolor((Fl_Color)31);
        Nivel_Salida->minimum(50);
        Nivel_Salida->maximum(-50);
        Nivel_Salida->step(1);
        Nivel_Salida->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Nivel_Salida->callback((Fl_Callback*)cb_Nivel_Salida);
        Nivel_Salida->align(FL_ALIGN_BOTTOM);
        Nivel_Salida->when(FL_WHEN_CHANGED);
      } // SliderW* Nivel_Salida
      { input_vu = new NewVum(84, 50, 15, 122);
        input_vu->type(2);
        input_vu->box(FL_NO_BOX);
        input_vu->color((Fl_Color)178);
        input_vu->selection_color((Fl_Color)90);
        input_vu->labeltype(FL_NORMAL_LABEL);
        input_vu->labelfont(0);
        input_vu->labelsize(14);
        input_vu->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        input_vu->minimum(15);
        input_vu->maximum(-48);
        input_vu->step(1);
        input_vu->value(-48);
        input_vu->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
        input_vu->when(FL_WHEN_NEVER);
      } // NewVum* input_vu
      { output_vu = new NewVum(142, 50, 15, 122);
        output_vu->type(2);
        output_vu->box(FL_NO_BOX);
        output_vu->color((Fl_Color)178);
        output_vu->selection_color((Fl_Color)90);
        output_vu->labeltype(FL_NORMAL_LABEL);
        output_vu->labelfont(0);
        output_vu->labelsize(14);
        output_vu->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        output_vu->minimum(15);
        output_vu->maximum(-48);
        output_vu->step(1);
        output_vu->value(-48);
        output_vu->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
        output_vu->when(FL_WHEN_NEVER);
      } // NewVum* output_vu
      { LABEL_IO = new Fl_Box(68, 30, 62, 14, gettext("In/Out"));
        LABEL_IO->labelfont(1);
        LABEL_IO->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        LABEL_IO->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      } // Fl_Box* LABEL_IO
      InOut->end();
    } // Fl_Group* InOut
    { Midi = new Fl_Group(521, 144, 276, 50);
      Midi->box(FL_UP_BOX);
      Midi->color((Fl_Color)FL_FOREGROUND_COLOR);
      Midi->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      Midi->align(96|FL_ALIGN_INSIDE);
      { nidi_activar = new Fl_Light_Button(526, 148, 38, 18, gettext("On"));
        nidi_activar->shortcut(0x6d);
        nidi_activar->color((Fl_Color)62);
        nidi_activar->selection_color((Fl_Color)1);
        nidi_activar->labelsize(10);
        nidi_activar->callback((Fl_Callback*)cb_nidi_activar);
        nidi_activar->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* nidi_activar
      { Midi_out_Counter = new Fl_Counter(602, 154, 60, 20, gettext("Channel"));
        Midi_out_Counter->type(1);
        Midi_out_Counter->color((Fl_Color)62);
        Midi_out_Counter->labelsize(10);
        Midi_out_Counter->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Midi_out_Counter->minimum(1);
        Midi_out_Counter->maximum(16);
        Midi_out_Counter->step(1);
        Midi_out_Counter->value(1);
        Midi_out_Counter->textsize(11);
        Midi_out_Counter->callback((Fl_Callback*)cb_Midi_out_Counter);
      } // Fl_Counter* Midi_out_Counter
      { Trig_Adj = new SliderW(668, 159, 117, 11, gettext("Trigger"));
        Trig_Adj->type(5);
        Trig_Adj->box(FL_FLAT_BOX);
        Trig_Adj->color((Fl_Color)178);
        Trig_Adj->selection_color((Fl_Color)62);
        Trig_Adj->labeltype(FL_NORMAL_LABEL);
        Trig_Adj->labelfont(0);
        Trig_Adj->labelsize(8);
        Trig_Adj->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Trig_Adj->minimum(2);
        Trig_Adj->maximum(60);
        Trig_Adj->step(1);
        Trig_Adj->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Trig_Adj->callback((Fl_Callback*)cb_Trig_Adj);
        Trig_Adj->align(FL_ALIGN_TOP_RIGHT);
        Trig_Adj->when(FL_WHEN_CHANGED);
      } // SliderW* Trig_Adj
      { Vel_Adj = new SliderW(668, 178, 117, 11, gettext("Velocity"));
        Vel_Adj->type(5);
        Vel_Adj->box(FL_FLAT_BOX);
        Vel_Adj->color((Fl_Color)178);
        Vel_Adj->selection_color((Fl_Color)62);
        Vel_Adj->labeltype(FL_NORMAL_LABEL);
        Vel_Adj->labelfont(0);
        Vel_Adj->labelsize(8);
        Vel_Adj->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Vel_Adj->minimum(1);
        Vel_Adj->maximum(100);
        Vel_Adj->step(1);
        Vel_Adj->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Vel_Adj->callback((Fl_Callback*)cb_Vel_Adj);
        Vel_Adj->align(FL_ALIGN_TOP_RIGHT);
        Vel_Adj->when(FL_WHEN_CHANGED);
      } // SliderW* Vel_Adj
      { MIDI_LABEL = new Fl_Box(527, 174, 45, 13, gettext("MIDI"));
        MIDI_LABEL->labelfont(1);
        MIDI_LABEL->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        MIDI_LABEL->callback((Fl_Callback*)cb_MIDI_LABEL);
        MIDI_LABEL->when(FL_WHEN_NEVER);
      } // Fl_Box* MIDI_LABEL
      { Mled = new Fl_Box(572, 149, 10, 10);
        Mled->box(FL_ROUNDED_BOX);
        Mled->color((Fl_Color)FL_RED);
        Mled->labelsize(18);
      } // Fl_Box* Mled
      Midi->end();
    } // Fl_Group* Midi
    { Presets = new Fl_Group(168, 24, 352, 170);
      Presets->box(FL_UP_BOX);
      Presets->color((Fl_Color)FL_FOREGROUND_COLOR);
      Presets->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      Presets->align(96|FL_ALIGN_INSIDE);
      { PRESETS_LABEL = new Fl_Box(174, 28, 62, 14, gettext("Presets"));
        PRESETS_LABEL->labelfont(1);
        PRESETS_LABEL->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      } // Fl_Box* PRESETS_LABEL
      { S_new = new Fl_Button(174, 44, 64, 18, gettext("New"));
        S_new->shortcut(0x6e);
        S_new->color((Fl_Color)62);
        S_new->labelsize(12);
        S_new->callback((Fl_Callback*)cb_S_new);
      } // Fl_Button* S_new
      { L_preset = new Fl_Button(240, 44, 64, 18, gettext("Load"));
        L_preset->shortcut(0x6c);
        L_preset->color((Fl_Color)62);
        L_preset->labelsize(12);
        L_preset->callback((Fl_Callback*)cb_L_preset);
      } // Fl_Button* L_preset
      { S_preset = new Fl_Button(306, 44, 64, 18, gettext("Save"));
        S_preset->shortcut(0x73);
        S_preset->color((Fl_Color)62);
        S_preset->labelsize(12);
        S_preset->callback((Fl_Callback*)cb_S_preset);
      } // Fl_Button* S_preset
      { Compare = new Fl_Light_Button(373, 44, 72, 18, gettext("Compare"));
        Compare->shortcut(0x70);
        Compare->color((Fl_Color)62);
        Compare->selection_color((Fl_Color)1);
        Compare->labelsize(12);
        Compare->callback((Fl_Callback*)cb_Compare);
        Compare->align(68|FL_ALIGN_INSIDE);
        Compare->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* Compare
      { B_preset = new Fl_Button(448, 44, 64, 18, gettext("Bank"));
        B_preset->shortcut(0x62);
        B_preset->color((Fl_Color)62);
        B_preset->labelsize(12);
        B_preset->callback((Fl_Callback*)cb_B_preset);
      } // Fl_Button* B_preset
      { Fl_Input* o = WPreset_Name = new Fl_Input(174, 66, 338, 36);
        WPreset_Name->color((Fl_Color)62);
        WPreset_Name->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        WPreset_Name->textsize(24);
        WPreset_Name->callback((Fl_Callback*)cb_WPreset_Name);
        WPreset_Name->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        o->maximum_size(22);
      } // Fl_Input* WPreset_Name
      { Preset_Counter = new Fl_Counter(174, 106, 60, 20, gettext("Preset"));
        Preset_Counter->type(1);
        Preset_Counter->color((Fl_Color)62);
        Preset_Counter->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        Preset_Counter->labelsize(11);
        Preset_Counter->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Preset_Counter->minimum(1);
        Preset_Counter->maximum(60);
        Preset_Counter->step(1);
        Preset_Counter->value(1);
        Preset_Counter->textsize(11);
        Preset_Counter->callback((Fl_Callback*)cb_Preset_Counter);
      } // Fl_Counter* Preset_Counter
      { DAuthor = new Fl_Box(246, 107, 266, 18);
        DAuthor->box(FL_DOWN_BOX);
        DAuthor->color((Fl_Color)62);
        DAuthor->align(100|FL_ALIGN_INSIDE);
      } // Fl_Box* DAuthor
      { Open_Order = new Fl_Button(255, 132, 195, 25, gettext("Put Order in your Rack"));
        Open_Order->shortcut(0x6f);
        Open_Order->color((Fl_Color)62);
        Open_Order->callback((Fl_Callback*)cb_Open_Order);
        Open_Order->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
        Open_Order->when(FL_WHEN_RELEASE_ALWAYS);
      } // Fl_Button* Open_Order
      { Etit = new Fl_Button(174, 160, 340, 28);
        Etit->type(1);
        Etit->box(FL_NO_BOX);
        Etit->labeltype(FL_EMBOSSED_LABEL);
        Etit->labelfont(1);
        Etit->labelsize(21);
        Etit->callback((Fl_Callback*)cb_Etit);
        Etit->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      } // Fl_Button* Etit
      { Analy = new Analyzer(174, 160, 340, 28);
        Analy->box(FL_NO_BOX);
        Analy->color((Fl_Color)FL_BACKGROUND_COLOR);
        Analy->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        Analy->labeltype(FL_EMBOSSED_LABEL);
        Analy->labelfont(1);
        Analy->labelsize(22);
        Analy->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        Analy->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
        Analy->when(FL_WHEN_RELEASE);
        Analy->hide();
      } // Analyzer* Analy
      Presets->end();
    } // Fl_Group* Presets
    Principal->size_range(640, 480, 3200, 2400);
    Principal->end();
    Principal->resizable(Principal);
  } // Fl_Double_Window* Principal
  { BankWindow = new Fl_Double_Window(800, 600);
    BankWindow->color((Fl_Color)4);
    BankWindow->selection_color((Fl_Color)FL_BACKGROUND2_COLOR);
    BankWindow->callback((Fl_Callback*)cb_BankWindow, (void*)(this));
    { Fondo3 = new Fl_Box(1, 1, 800, 600);
    } // Fl_Box* Fondo3
    { MenuB = new Fl_Menu_Bar(0, 0, 800, 20);
      MenuB->box(FL_NO_BOX);
      MenuB->color((Fl_Color)55);
      MenuB->selection_color((Fl_Color)FL_BACKGROUND2_COLOR);
      MenuB->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      MenuB->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      MenuB->align(96|FL_ALIGN_INSIDE);
      MenuB->menu(menu_MenuB);
    } // Fl_Menu_Bar* MenuB
    { ob = new Fl_Group(0, 20, 800, 580);
      ob->labelsize(18);
      ob->end();
    } // Fl_Group* ob
    BankWindow->size_range(640, 480, 3200, 2400);
    BankWindow->end();
    BankWindow->resizable(BankWindow);
  } // Fl_Double_Window* BankWindow
  { Order = new Fl_Double_Window(600, 400);
    Order->color((Fl_Color)178);
    Order->callback((Fl_Callback*)cb_Order, (void*)(this));
    { Fondo1 = new Fl_Box(1, 1, 600, 400);
    } // Fl_Box* Fondo1
    { O_TITLE = new Fl_Box(88, 21, 438, 37, gettext("Put Order in your Rack"));
      O_TITLE->labelfont(1);
      O_TITLE->labelsize(33);
      O_TITLE->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
    } // Fl_Box* O_TITLE
    { Avail_Bro = new Fl_Browser(12, 77, 185, 225);
      Avail_Bro->type(2);
      Avail_Bro->labelsize(18);
      Avail_Bro->textsize(18);
    } // Fl_Browser* Avail_Bro
    { Pon = new Fl_Button(217, 168, 72, 25, gettext("@<->"));
      Pon->labelsize(18);
      Pon->callback((Fl_Callback*)cb_Pon);
    } // Fl_Button* Pon
    { Order_Bro = new Fl_Browser(305, 77, 185, 225);
      Order_Bro->type(2);
      Order_Bro->labelsize(18);
      Order_Bro->textsize(18);
    } // Fl_Browser* Order_Bro
    { Sube = new Fl_Button(508, 141, 72, 25, gettext("@$2->"));
      Sube->labelsize(18);
      Sube->callback((Fl_Callback*)cb_Sube);
    } // Fl_Button* Sube
    { Baja = new Fl_Button(510, 188, 72, 25, gettext("@$8->"));
      Baja->labelsize(18);
      Baja->callback((Fl_Callback*)cb_Baja);
    } // Fl_Button* Baja
    { ok_order = new Fl_Button(436, 354, 72, 26, gettext("Ok"));
      ok_order->callback((Fl_Callback*)cb_ok_order);
    } // Fl_Button* ok_order
    { Cancel_order = new Fl_Button(516, 354, 72, 26, gettext("Cancel"));
      Cancel_order->callback((Fl_Callback*)cb_Cancel_order);
    } // Fl_Button* Cancel_order
    Order->size_range(500, 400, 3200, 2400);
    Order->end();
    Order->resizable(Order);
  } // Fl_Double_Window* Order
  { Settings = new Fl_Double_Window(640, 528);
    Settings->color((Fl_Color)4);
    Settings->callback((Fl_Callback*)cb_Settings, (void*)(this));
    { Fondo2 = new Fl_Box(1, 1, 640, 528);
    } // Fl_Box* Fondo2
    { Prefs_OK = new Fl_Button(535, 496, 90, 25, gettext("Ok"));
      Prefs_OK->callback((Fl_Callback*)cb_Prefs_OK);
    } // Fl_Button* Prefs_OK
    { Look = new Fl_Group(10, 20, 615, 98, gettext("Look & Feel"));
      Look->box(FL_PLASTIC_DOWN_FRAME);
      Look->color((Fl_Color)FL_BACKGROUND2_COLOR);
      Look->labelfont(1);
      Look->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      Look->align(FL_ALIGN_TOP_LEFT);
      { B_C = new Fl_Button(20, 30, 90, 30, gettext("Buttons"));
        B_C->callback((Fl_Callback*)cb_B_C);
      } // Fl_Button* B_C
      { L_C = new Fl_Button(120, 30, 90, 30, gettext("Leds"));
        L_C->callback((Fl_Callback*)cb_L_C);
      } // Fl_Button* L_C
      { K_C = new Fl_Button(220, 30, 90, 30, gettext("Background"));
        K_C->callback((Fl_Callback*)cb_K_C);
      } // Fl_Button* K_C
      { A_C = new Fl_Button(320, 30, 90, 30, gettext("Labels"));
        A_C->callback((Fl_Callback*)cb_A_C);
      } // Fl_Button* A_C
      { scheme_ch = new Fl_Choice(520, 35, 88, 20, gettext("schema"));
        scheme_ch->down_box(FL_BORDER_BOX);
        scheme_ch->labelsize(11);
        scheme_ch->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        scheme_ch->textsize(12);
        scheme_ch->callback((Fl_Callback*)cb_scheme_ch);
        scheme_ch->menu(menu_scheme_ch);
      } // Fl_Choice* scheme_ch
      { BackFiname = new Fl_File_Input(20, 80, 390, 30, gettext("Background Image"));
        BackFiname->labelsize(11);
        BackFiname->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        BackFiname->textsize(12);
        BackFiname->align(FL_ALIGN_TOP_LEFT);
      } // Fl_File_Input* BackFiname
      { BI_Browser = new Fl_Button(415, 80, 65, 25, gettext("Browse"));
        BI_Browser->callback((Fl_Callback*)cb_BI_Browser);
      } // Fl_Button* BI_Browser
      { FSLabel = new Fl_Box(538, 63, 60, 17, gettext("Font Size"));
        FSLabel->labelsize(11);
        FSLabel->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      } // Fl_Box* FSLabel
      { FSplus = new Fl_Button(535, 85, 30, 20, gettext("+"));
        FSplus->callback((Fl_Callback*)cb_FSplus);
      } // Fl_Button* FSplus
      { FSless = new Fl_Button(570, 85, 30, 20, gettext("-"));
        FSless->callback((Fl_Callback*)cb_FSless);
      } // Fl_Button* FSless
      Look->end();
    } // Fl_Group* Look
    { AUDIO_SET = new Fl_Group(10, 138, 615, 35, gettext("Audio"));
      AUDIO_SET->box(FL_PLASTIC_DOWN_FRAME);
      AUDIO_SET->labelfont(1);
      AUDIO_SET->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      AUDIO_SET->align(FL_ALIGN_TOP_LEFT);
      { Pre_Serve = new Fl_Check_Button(358, 150, 90, 20, gettext("Preserve Gain/Master"));
        Pre_Serve->down_box(FL_DOWN_BOX);
        Pre_Serve->labelsize(11);
        Pre_Serve->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Pre_Serve->callback((Fl_Callback*)cb_Pre_Serve);
        Pre_Serve->align(FL_ALIGN_LEFT);
      } // Fl_Check_Button* Pre_Serve
      { Har_Qual = new Fl_Choice(563, 150, 43, 18, gettext("Harmonizer Quality"));
        Har_Qual->down_box(FL_BORDER_BOX);
        Har_Qual->labelsize(10);
        Har_Qual->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Har_Qual->textsize(10);
        Har_Qual->callback((Fl_Callback*)cb_Har_Qual);
        Har_Qual->menu(menu_Har_Qual);
      } // Fl_Choice* Har_Qual
      { INSTATE = new Fl_Check_Button(103, 150, 90, 20, gettext("FX On at start"));
        INSTATE->down_box(FL_DOWN_BOX);
        INSTATE->labelsize(11);
        INSTATE->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        INSTATE->callback((Fl_Callback*)cb_INSTATE);
        INSTATE->align(FL_ALIGN_LEFT);
      } // Fl_Check_Button* INSTATE
      AUDIO_SET->end();
    } // Fl_Group* AUDIO_SET
    { MIDI_SET = new Fl_Group(10, 194, 313, 195, gettext("MIDI"));
      MIDI_SET->box(FL_PLASTIC_DOWN_FRAME);
      MIDI_SET->color((Fl_Color)FL_BACKGROUND2_COLOR);
      MIDI_SET->labelfont(1);
      MIDI_SET->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      MIDI_SET->align(FL_ALIGN_TOP_LEFT);
      { D_A_Connect = new Fl_Check_Button(140, 198, 105, 20, gettext("Auto Connect MIDI In"));
        D_A_Connect->down_box(FL_DOWN_BOX);
        D_A_Connect->labelsize(11);
        D_A_Connect->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        D_A_Connect->callback((Fl_Callback*)cb_D_A_Connect);
        D_A_Connect->align(FL_ALIGN_LEFT);
      } // Fl_Check_Button* D_A_Connect
      { BMidiIn = new Fl_Browser(20, 232, 190, 111, gettext("ALSA Sequencer Ports"));
        BMidiIn->type(2);
        BMidiIn->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        BMidiIn->labelsize(11);
        BMidiIn->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        BMidiIn->textsize(12);
        BMidiIn->callback((Fl_Callback*)cb_BMidiIn);
        BMidiIn->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Browser* BMidiIn
      { Midi_In_Counter = new Fl_Counter(236, 226, 60, 24, gettext("Channel"));
        Midi_In_Counter->type(1);
        Midi_In_Counter->color((Fl_Color)62);
        Midi_In_Counter->labelsize(10);
        Midi_In_Counter->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Midi_In_Counter->minimum(1);
        Midi_In_Counter->maximum(16);
        Midi_In_Counter->step(1);
        Midi_In_Counter->value(1);
        Midi_In_Counter->textsize(11);
        Midi_In_Counter->callback((Fl_Callback*)cb_Midi_In_Counter);
        Midi_In_Counter->align(FL_ALIGN_TOP);
      } // Fl_Counter* Midi_In_Counter
      { Har_In_Counter = new Fl_Counter(235, 271, 60, 24, gettext("Harmonizer Channel"));
        Har_In_Counter->type(1);
        Har_In_Counter->color((Fl_Color)62);
        Har_In_Counter->labelsize(10);
        Har_In_Counter->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Har_In_Counter->minimum(1);
        Har_In_Counter->maximum(16);
        Har_In_Counter->step(1);
        Har_In_Counter->value(1);
        Har_In_Counter->textsize(11);
        Har_In_Counter->callback((Fl_Callback*)cb_Har_In_Counter);
        Har_In_Counter->align(FL_ALIGN_TOP);
      } // Fl_Counter* Har_In_Counter
      { wMIDI = new Fl_Group(20, 360, 295, 25, gettext("MIDI implementation"));
        wMIDI->box(FL_PLASTIC_DOWN_FRAME);
        wMIDI->labelsize(10);
        wMIDI->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        wMIDI->align(FL_ALIGN_TOP_LEFT);
        { Mw0 = new Fl_Check_Button(77, 363, 105, 20, gettext("Default"));
          Mw0->type(102);
          Mw0->down_box(FL_DOWN_BOX);
          Mw0->labelsize(11);
          Mw0->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
          Mw0->callback((Fl_Callback*)cb_Mw0);
          Mw0->align(FL_ALIGN_LEFT);
        } // Fl_Check_Button* Mw0
        { Mw1 = new Fl_Check_Button(188, 363, 105, 20, gettext("MIDI Learn"));
          Mw1->type(102);
          Mw1->down_box(FL_DOWN_BOX);
          Mw1->labelsize(11);
          Mw1->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
          Mw1->callback((Fl_Callback*)cb_Mw1);
          Mw1->align(FL_ALIGN_LEFT);
        } // Fl_Check_Button* Mw1
        wMIDI->end();
      } // Fl_Group* wMIDI
      MIDI_SET->end();
    } // Fl_Group* MIDI_SET
    { JACK_SET = new Fl_Group(333, 194, 293, 195, gettext("Jack"));
      JACK_SET->box(FL_PLASTIC_DOWN_FRAME);
      JACK_SET->labelfont(1);
      JACK_SET->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      JACK_SET->align(FL_ALIGN_TOP_LEFT);
      { D_J_Connect = new Fl_Check_Button(455, 210, 105, 20, gettext("Auto Connect Jack"));
        D_J_Connect->down_box(FL_DOWN_BOX);
        D_J_Connect->labelsize(11);
        D_J_Connect->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        D_J_Connect->callback((Fl_Callback*)cb_D_J_Connect);
        D_J_Connect->align(FL_ALIGN_LEFT);
      } // Fl_Check_Button* D_J_Connect
      { JackCo = new Fl_Browser(350, 245, 191, 142, gettext("Jack Ports"));
        JackCo->type(3);
        JackCo->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        JackCo->labelsize(11);
        JackCo->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        JackCo->textsize(12);
        JackCo->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Browser* JackCo
      JACK_SET->end();
    } // Fl_Group* JACK_SET
    { MISC_SET = new Fl_Group(10, 410, 615, 35, gettext("Misc"));
      MISC_SET->box(FL_PLASTIC_DOWN_FRAME);
      MISC_SET->labelfont(1);
      MISC_SET->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      MISC_SET->align(FL_ALIGN_TOP_LEFT);
      { Username = new Fl_Input(85, 423, 240, 21, gettext("Username:"));
        Username->labelsize(11);
        Username->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        Username->textsize(11);
        Username->callback((Fl_Callback*)cb_Username);
      } // Fl_Input* Username
      MISC_SET->end();
    } // Fl_Group* MISC_SET
    { BANK_SET = new Fl_Group(10, 468, 510, 55, gettext("Bank"));
      BANK_SET->box(FL_PLASTIC_DOWN_FRAME);
      BANK_SET->labelfont(1);
      BANK_SET->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      BANK_SET->align(FL_ALIGN_TOP_LEFT);
      { BFiname = new Fl_File_Input(20, 488, 390, 30, gettext("Bank Filename"));
        BFiname->labelsize(11);
        BFiname->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
        BFiname->textsize(12);
        BFiname->align(FL_ALIGN_TOP_LEFT);
      } // Fl_File_Input* BFiname
      { BF_Browser = new Fl_Button(415, 488, 65, 30, gettext("Browse"));
        BF_Browser->callback((Fl_Callback*)cb_BF_Browser);
      } // Fl_Button* BF_Browser
      BANK_SET->end();
    } // Fl_Group* BANK_SET
    Settings->end();
  } // Fl_Double_Window* Settings
  { MIDILearn = new Fl_Double_Window(640, 480);
    MIDILearn->callback((Fl_Callback*)cb_MIDILearn, (void*)(this));
    { Fondo4 = new Fl_Box(1, 1, 640, 480);
    } // Fl_Box* Fondo4
    { Epar = new Fl_Browser(10, 58, 201, 348);
      Epar->type(2);
      Epar->callback((Fl_Callback*)cb_Epar);
    } // Fl_Browser* Epar
    { GMM = new Fl_Button(10, 410, 135, 30, gettext("Get MIDI Message"));
      GMM->callback((Fl_Callback*)cb_GMM);
    } // Fl_Button* GMM
    { TPresets = new Fl_Browser(430, 61, 201, 348);
      TPresets->type(2);
      TPresets->when(3);
    } // Fl_Browser* TPresets
    { CopyF = new Fl_Button(430, 20, 95, 30, gettext("Copy from: "));
      CopyF->callback((Fl_Callback*)cb_CopyF);
    } // Fl_Button* CopyF
    { CopyT = new Fl_Button(535, 20, 95, 30, gettext("Copy to: "));
      CopyT->callback((Fl_Callback*)cb_CopyT);
    } // Fl_Button* CopyT
    { Ares = new Fl_Group(215, 60, 205, 180);
      Ares->box(FL_THIN_DOWN_BOX);
      Ares->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
      { Ar1 = new Fl_Box(220, 65, 45, 30);
        Ar1->box(FL_DOWN_BOX);
      } // Fl_Box* Ar1
      { Ar2 = new Fl_Box(270, 65, 45, 30);
        Ar2->box(FL_DOWN_BOX);
      } // Fl_Box* Ar2
      { Ar3 = new Fl_Box(320, 65, 45, 30);
        Ar3->box(FL_DOWN_BOX);
      } // Fl_Box* Ar3
      { Ar4 = new Fl_Box(370, 65, 45, 30);
        Ar4->box(FL_DOWN_BOX);
      } // Fl_Box* Ar4
      { Ar5 = new Fl_Box(220, 100, 45, 30);
        Ar5->box(FL_DOWN_BOX);
      } // Fl_Box* Ar5
      { Ar6 = new Fl_Box(270, 100, 45, 30);
        Ar6->box(FL_DOWN_BOX);
      } // Fl_Box* Ar6
      { Ar7 = new Fl_Box(320, 100, 45, 30);
        Ar7->box(FL_DOWN_BOX);
      } // Fl_Box* Ar7
      { Ar8 = new Fl_Box(370, 100, 45, 30);
        Ar8->box(FL_DOWN_BOX);
      } // Fl_Box* Ar8
      { Ar9 = new Fl_Box(220, 135, 45, 30);
        Ar9->box(FL_DOWN_BOX);
      } // Fl_Box* Ar9
      { Ar10 = new Fl_Box(270, 135, 45, 30);
        Ar10->box(FL_DOWN_BOX);
      } // Fl_Box* Ar10
      { Ar11 = new Fl_Box(320, 135, 45, 30);
        Ar11->box(FL_DOWN_BOX);
      } // Fl_Box* Ar11
      { Ar12 = new Fl_Box(370, 135, 45, 30);
        Ar12->box(FL_DOWN_BOX);
      } // Fl_Box* Ar12
      { Ar13 = new Fl_Box(220, 170, 45, 30);
        Ar13->box(FL_DOWN_BOX);
      } // Fl_Box* Ar13
      { Ar14 = new Fl_Box(270, 170, 45, 30);
        Ar14->box(FL_DOWN_BOX);
      } // Fl_Box* Ar14
      { Ar15 = new Fl_Box(320, 170, 45, 30);
        Ar15->box(FL_DOWN_BOX);
      } // Fl_Box* Ar15
      { Ar16 = new Fl_Box(370, 170, 45, 30);
        Ar16->box(FL_DOWN_BOX);
      } // Fl_Box* Ar16
      { Ar17 = new Fl_Box(220, 205, 45, 30);
        Ar17->box(FL_DOWN_BOX);
      } // Fl_Box* Ar17
      { Ar18 = new Fl_Box(270, 205, 45, 30);
        Ar18->box(FL_DOWN_BOX);
      } // Fl_Box* Ar18
      { Ar19 = new Fl_Box(320, 205, 45, 30);
        Ar19->box(FL_DOWN_BOX);
      } // Fl_Box* Ar19
      { Ar20 = new Fl_Box(370, 205, 45, 30);
        Ar20->box(FL_DOWN_BOX);
      } // Fl_Box* Ar20
      Ares->end();
    } // Fl_Group* Ares
    { ClearA = new Fl_Button(245, 250, 150, 30, gettext("Clear Assignements"));
      ClearA->callback((Fl_Callback*)cb_ClearA);
    } // Fl_Button* ClearA
    { ClearP = new Fl_Button(245, 285, 150, 30, gettext("Clear Preset"));
      ClearP->callback((Fl_Callback*)cb_ClearP);
    } // Fl_Button* ClearP
    { Assign = new Fl_Button(10, 20, 150, 30, gettext("Assign"));
      Assign->callback((Fl_Callback*)cb_Assign);
    } // Fl_Button* Assign
    { CloseML = new Fl_Button(480, 445, 150, 30, gettext("Close"));
      CloseML->callback((Fl_Callback*)cb_CloseML);
    } // Fl_Button* CloseML
    { CancelRec = new Fl_Button(10, 445, 135, 30, gettext("Cancel"));
      CancelRec->callback((Fl_Callback*)cb_CancelRec);
    } // Fl_Button* CancelRec
    { Disp_Control = new Fl_Value_Input(155, 410, 45, 30);
      Disp_Control->minimum(1);
      Disp_Control->maximum(127);
      Disp_Control->step(1);
      Disp_Control->value(1);
    } // Fl_Value_Input* Disp_Control
    MIDILearn->end();
  } // Fl_Double_Window* MIDILearn
  { AboutWin = new Fl_Double_Window(375, 235, gettext("About Rakarrack"));
    AboutWin->color((Fl_Color)FL_DARK2);
    AboutWin->callback((Fl_Callback*)cb_AboutWin, (void*)(this));
    { AB_Title = new Fl_Box(56, 4, 259, 41, gettext("Rakarrack"));
      AB_Title->labelfont(1);
      AB_Title->labelsize(40);
      AB_Title->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
    } // Fl_Box* AB_Title
    { AB_SubTitle = new Fl_Box(121, 39, 130, 22, gettext("Audio F/X"));
      AB_SubTitle->labelfont(1);
      AB_SubTitle->labelsize(16);
      AB_SubTitle->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
    } // Fl_Box* AB_SubTitle
    { About_Version = new Fl_Box(69, 60, 233, 15);
      About_Version->labelsize(12);
      About_Version->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      About_Version->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    } // Fl_Box* About_Version
    { AB_url = new Fl_Box(68, 77, 234, 22, gettext("http://rakarrack.sourceforge.net"));
      AB_url->labelfont(1);
      AB_url->labelsize(13);
      AB_url->labelcolor((Fl_Color)6);
    } // Fl_Box* AB_url
    { AB_Authors = new Fl_Box(89, 96, 192, 32, gettext("Copyrigth Josep Andreu Ryan Billing Douglas McClendon Jose Luis Di Biase Hern\
\341n Ordiales  2010"));
      AB_Authors->labelfont(1);
      AB_Authors->labelsize(8);
      AB_Authors->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      AB_Authors->align(FL_ALIGN_WRAP);
    } // Fl_Box* AB_Authors
    { AB_A1 = new Fl_Box(63, 130, 251, 35, gettext("Code of Reverb, Chorus/Flanger, Phaser, Distortion/Overdrive & Echo taked fro\
m ZynAddSubFx by Paul Nasca Octavian"));
      AB_A1->labelfont(1);
      AB_A1->labelsize(8);
      AB_A1->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      AB_A1->align(FL_ALIGN_WRAP);
    } // Fl_Box* AB_A1
    { AB_A2 = new Fl_Box(66, 166, 240, 19, gettext("Code of Tuner taked from tuneit by Mario Lang"));
      AB_A2->labelfont(1);
      AB_A2->labelsize(8);
      AB_A2->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
    } // Fl_Box* AB_A2
    { AB_A3 = new Fl_Box(66, 180, 244, 30, gettext("Code of Compressor based in ArtsCompresor by Matthias Kretz & Stefan Westerfe\
ld"));
      AB_A3->labelfont(1);
      AB_A3->labelsize(8);
      AB_A3->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      AB_A3->align(FL_ALIGN_WRAP);
    } // Fl_Box* AB_A3
    { Fl_Button* o = new Fl_Button(48, 215, 92, 16, gettext("LICENSE"));
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_LICENSE);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(276, 215, 92, 16, gettext("OK"));
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Button* o
    AboutWin->end();
  } // Fl_Double_Window* AboutWin
  char tmp[64];
sprintf(tmp,"Version %s",VERSION);
About_Version->copy_label(tmp);


Mled->color(fl_darker(FL_RED));
  return AboutWin;
}

RKRGUI::RKRGUI(int argc, char**argv,RKR *rkr_) {
  fl_open_display();
XpmCreatePixmapFromData(fl_display, DefaultRootWindow(fl_display),(char **)icono_rakarrack_128x128,&p ,&mask, NULL);

Fl::visual(FL_RGB);
Fl::visual(FL_DOUBLE|FL_INDEX);
Fl::get_system_colors();
fl_register_images();
rkr=rkr_;

back = NULL;

make_window();

Principal->icon((char *)p);
BankWindow->icon((char *)p);
Order->icon((char *)p);
Settings->icon((char *)p);
AboutWin->icon((char *)p);
MIDILearn->icon((char *)p);

made=0;
char tmp[256];
nt=0;
at=0;
tta=0;
Analyzer_ON=0;
Scope_ON=0;

Sco->init(rkr->anall, rkr->analr, PERIOD);
Analy->init(rkr->anall, rkr->analr, PERIOD, SAMPLE_RATE);

bzero(tmp,sizeof(tmp));
sprintf(tmp,"%s   v%s",rkr->jackcliname,VERSION); 
Principal->copy_label(tmp);
BankWin_Label(rkr->BankFilename);
bzero(tmp,sizeof(tmp));
sprintf(tmp,"%s   v%s - Effects Order",rkr->jackcliname,VERSION);
Order->copy_label(tmp);
bzero(tmp,sizeof(tmp));
sprintf(tmp,"%s   v%s - Settings",rkr->jackcliname,VERSION);
Settings->copy_label(tmp);
sprintf(tmp,"%s   v%s - MIDI Learn",rkr->jackcliname,VERSION);
MIDILearn->copy_label(tmp);
load_stat();
Put_Loaded();
Principal->show(argc,argv);
put_icon(Principal);


void * v=MT;
Fl::add_timeout(.04,tick,v);
}

void RKRGUI::Background_Color_Change(Fl_Color bcolor) {
  MenuP->color(bcolor);
MenuB->color(bcolor);

eq_preset->selection_color(bcolor);
compress_preset->selection_color(bcolor);
dist_preset->selection_color(bcolor);
dist_tipo->selection_color(bcolor);
ovrd_preset->selection_color(bcolor);
ovrd_tipo->selection_color(bcolor);
echo_preset->selection_color(bcolor);
chorux_preset->selection_color(bcolor);
chorus_lfotype->selection_color(bcolor);
phaser_preset->selection_color(bcolor);
phaser_lfotype->selection_color(bcolor);
aphaser_preset->selection_color(bcolor);
aphaser_lfotype->selection_color(bcolor);
flanger_preset->selection_color(bcolor);
flanger_lfotype->selection_color(bcolor);
reverb_preset->selection_color(bcolor);
reverb_type->selection_color(bcolor);
eqp_preset->selection_color(bcolor);
WhaWha_preset->selection_color(bcolor);
WhaWha_lfotype->selection_color(bcolor);
Alienwah_preset->selection_color(bcolor);
Alienwah_lfotype->selection_color(bcolor);
Cabinet_preset->selection_color(bcolor);
pan_preset->selection_color(bcolor);
pan_lfotype->selection_color(bcolor);
har_preset->selection_color(bcolor);
musdelay_preset->selection_color(bcolor);
musdelay_delay1->selection_color(bcolor);
musdelay_delay2->selection_color(bcolor);
musdelay_delay3->selection_color(bcolor);
gate_preset->selection_color(bcolor);

scheme_ch->selection_color(bcolor);
Har_Qual->selection_color(bcolor);
BMidiIn->selection_color(bcolor);
JackCo->selection_color(bcolor);
BFiname->selection_color(bcolor);


Avail_Bro->selection_color(bcolor);
Order_Bro->selection_color(bcolor);







back_color = bcolor;

Fl::redraw();
}

void RKRGUI::Label_Color_Change(Fl_Color bcolor) {
  L1->labelcolor(bcolor);
L2->labelcolor(bcolor);
L3->labelcolor(bcolor);
L4->labelcolor(bcolor);
L5->labelcolor(bcolor);
L6->labelcolor(bcolor);
L7->labelcolor(bcolor);
L8->labelcolor(bcolor);
L9->labelcolor(bcolor);
L10->labelcolor(bcolor);
MIDI_LABEL->labelcolor(bcolor);
TUNER_LABEL->labelcolor(bcolor);
LABEL_IO->labelcolor(bcolor);

ChangeActives();

Etit->labelcolor(bcolor);

eq_preset->labelcolor(bcolor);


compress_preset->labelcolor(bcolor);
Auto_Output->labelcolor(bcolor);
Stereo->labelcolor(bcolor);



dist_preset->labelcolor(bcolor);
dist_tipo->labelcolor(bcolor);
dist_st->labelcolor(bcolor);
dist_neg->labelcolor(bcolor);
dist_pf->labelcolor(bcolor);


newdist_preset->labelcolor(bcolor);
newdist_tipo->labelcolor(bcolor);
newdist_st->labelcolor(bcolor);
newdist_neg->labelcolor(bcolor);
newdist_pf->labelcolor(bcolor);


valve_preset->labelcolor(bcolor);
valve_st->labelcolor(bcolor);
valve_neg->labelcolor(bcolor);
valve_pf->labelcolor(bcolor);
valve_ed->labelcolor(bcolor);


ring_st->labelcolor(bcolor);
ring_afreq->labelcolor(bcolor);

ovrd_preset->labelcolor(bcolor);
ovrd_tipo->labelcolor(bcolor);
ovrd_st->labelcolor(bcolor);
ovrd_neg->labelcolor(bcolor);
ovrd_pf->labelcolor(bcolor);


echo_preset->labelcolor(bcolor);



chorux_preset->labelcolor(bcolor);
chorus_lfotype->labelcolor(bcolor);
chorus_subs->labelcolor(bcolor);


phaser_preset->labelcolor(bcolor);
phaser_lfotype->labelcolor(bcolor);
phaser_subs->labelcolor(bcolor);
phaser_stages->labelcolor(bcolor);


aphaser_preset->labelcolor(bcolor);
aphaser_lfotype->labelcolor(bcolor);
aphaser_subs->labelcolor(bcolor);
aphaser_hyper->labelcolor(bcolor);
aphaser_stages->labelcolor(bcolor);



flanger_preset->labelcolor(bcolor);
flanger_subs->labelcolor(bcolor);
flanger_lfotype->labelcolor(bcolor);

dflange_preset->labelcolor(bcolor);
dflange_subs->labelcolor(bcolor);
dflange_lfotype->labelcolor(bcolor);
dflange_tz->labelcolor(bcolor);



reverb_preset->labelcolor(bcolor);
reverb_type->labelcolor(bcolor);



eqp_preset->labelcolor(bcolor);



WhaWha_preset->labelcolor(bcolor);
WhaWha_lfotype->labelcolor(bcolor);

Alienwah_preset->labelcolor(bcolor);
Alienwah_lfotype->labelcolor(bcolor);



Cabinet_preset->labelcolor(bcolor);




pan_preset->labelcolor(bcolor);
pan_lfotype->labelcolor(bcolor);
pan_extraon->labelcolor(bcolor);
pan_autopan->labelcolor(bcolor);



har_preset->labelcolor(bcolor);
har_SELECT->labelcolor(bcolor);
har_MIDI->labelcolor(bcolor);
har_chordname->labelcolor(bcolor);


musdelay_preset->labelcolor(bcolor);
musdelay_delay1->labelcolor(bcolor);
musdelay_delay3->labelcolor(bcolor);
musdelay_delay2->labelcolor(bcolor);




gate_preset->labelcolor(bcolor);



Midi_out_Counter->labelcolor(bcolor);

LABEL_IO->labelcolor(bcolor);

Preset_Counter->labelcolor(bcolor);
PRESETS_LABEL->labelcolor(bcolor);


WNote->labelcolor(bcolor);
WRfreq->labelcolor(bcolor);
WNfreq->labelcolor(bcolor);

TITTLE_L->labelcolor(bcolor);
DESC_L->labelcolor(bcolor);

O_TITLE->labelcolor(bcolor);

Look->labelcolor(bcolor);
scheme_ch->labelcolor(bcolor);
MIDI_SET->labelcolor(bcolor);
BMidiIn->labelcolor(bcolor);
D_A_Connect->labelcolor(bcolor);
JACK_SET->labelcolor(bcolor);
JackCo->labelcolor(bcolor);
D_J_Connect->labelcolor(bcolor);
Midi_In_Counter->labelcolor(bcolor);
Har_In_Counter->labelcolor(bcolor);
Har_Qual->labelcolor(bcolor);
AUDIO_SET->labelcolor(bcolor);
Pre_Serve->labelcolor(bcolor);
INSTATE->labelcolor(bcolor);
MISC_SET->labelcolor(bcolor);
Username->labelcolor(bcolor);
BANK_SET->labelcolor(bcolor);
BFiname->labelcolor(bcolor);
FSLabel->labelcolor(bcolor);
BackFiname->labelcolor(bcolor);

Mw0->labelcolor(bcolor);
Mw1->labelcolor(bcolor);
wMIDI->labelcolor(bcolor);



if (scheme_ch->value()==3)
{
About_Version->labelcolor(bcolor);
AB_Title->labelcolor(bcolor);
AB_SubTitle->labelcolor(bcolor);
AB_Authors->labelcolor(bcolor);
AB_A1->labelcolor(bcolor);
AB_A2->labelcolor(bcolor);
AB_A3->labelcolor(bcolor);
AB_url->labelcolor(bcolor);
}



label_color = bcolor;


Fl::redraw();
}

void RKRGUI::Buttons_Color_Change(Fl_Color bcolor) {
  ActivarGeneral->color(bcolor);
eq_activar->color(bcolor);
compress_activar->color(bcolor);
dist_activar->color(bcolor);
ovrd_activar->color(bcolor);
echo_activar->color(bcolor);
chorus_activar->color(bcolor);
phaser_activar->color(bcolor);
aphaser_activar->color(bcolor);
flanger_activar->color(bcolor);
dflange_activar->color(bcolor);
reverb_activar->color(bcolor);
eqp_activar->color(bcolor);
WhaWha_activar->color(bcolor);
Alienwah_activar->color(bcolor);
pan_activar->color(bcolor);
har_activar->color(bcolor);
musdelay_activar->color(bcolor);
gate_activar->color(bcolor);
newdist_activar->color(bcolor);
valve_activar->color(bcolor);
ring_activar->color(bcolor);
Cabinet_activar->color(bcolor);
tuner_activar->color(bcolor);
Preset_Counter->color(bcolor);
Midi_In_Counter->color(bcolor);
Har_In_Counter->color(bcolor);
FSplus->color(bcolor);
FSless->color(bcolor);
Midi_out_Counter->color(bcolor);
DAuthor->color(bcolor);
WPreset_Name->color(bcolor);
Open_Order->color(bcolor);
S_new->color(bcolor);
S_preset->color(bcolor);
L_preset->color(bcolor);
B_preset->color(bcolor);
Compare->color(bcolor);
nidi_activar->color(bcolor);

for(int i=0; i<10;i++) 
     ChangeActivesB(rkr->efx_order[i], rkr->active[i]);


if (made)
{
for (int t=0; t<ob->children();t++)
  {
    Fl_Widget *w = ob->child(t);
    long long temp = (long long) w->user_data();
    if (temp > 0) w->color(bcolor); 
  }



}

ok_order->color(bcolor);
Cancel_order->color(bcolor);
Sube->color(bcolor);
Baja->color(bcolor);
Pon->color(bcolor);

A_C->color(bcolor);
B_C->color(bcolor);
L_C->color(bcolor);
K_C->color(bcolor);
Prefs_OK->color(bcolor);
BF_Browser->color(bcolor);
BI_Browser->color(bcolor);

GMM->color(bcolor);
CopyF->color(bcolor);
CopyT->color(bcolor);
ClearA->color(bcolor);
ClearP->color(bcolor);
Assign->color(bcolor);
CloseML->color(bcolor);
CancelRec->color(bcolor);



fore_color= bcolor;

Fl::redraw();
}

void RKRGUI::Leds_Color_Change(Fl_Color bcolor) {
  ActivarGeneral->selection_color(bcolor);
eq_activar->selection_color(bcolor);
compress_activar->selection_color(bcolor);
dist_activar->selection_color(bcolor);
ovrd_activar->selection_color(bcolor);
echo_activar->selection_color(bcolor);
chorus_activar->selection_color(bcolor);
phaser_activar->selection_color(bcolor);
aphaser_activar->selection_color(bcolor);
flanger_activar->selection_color(bcolor);
dflange_activar->selection_color(bcolor);
valve_activar->selection_color(bcolor);
reverb_activar->selection_color(bcolor);
eqp_activar->selection_color(bcolor);
WhaWha_activar->selection_color(bcolor);
Alienwah_activar->selection_color(bcolor);
newdist_activar->selection_color(bcolor);
Cabinet_activar->selection_color(bcolor);
pan_activar->selection_color(bcolor);
har_activar->selection_color(bcolor);
musdelay_activar->selection_color(bcolor);
gate_activar->selection_color(bcolor);
tuner_activar->selection_color(bcolor);
nidi_activar->selection_color(bcolor);
Compare->selection_color(bcolor);

aphaser_hyper->selection_color(bcolor);
aphaser_subs->selection_color(bcolor);
newdist_pf->selection_color(bcolor);
newdist_neg->selection_color(bcolor);
har_MIDI->selection_color(bcolor);
har_SELECT->selection_color(bcolor);
pan_extraon->selection_color(bcolor);
pan_autopan->selection_color(bcolor);
flanger_subs->selection_color(bcolor);
dflange_subs->selection_color(bcolor);
dflange_tz->selection_color(bcolor);
phaser_subs->selection_color(bcolor);
chorus_subs->selection_color(bcolor);
ovrd_neg->selection_color(bcolor);
ovrd_st->selection_color(bcolor);
ovrd_pf->selection_color(bcolor);
dist_neg->selection_color(bcolor);
dist_st->selection_color(bcolor);
dist_pf->selection_color(bcolor);
valve_neg->selection_color(bcolor);
valve_st->selection_color(bcolor);
valve_ed->selection_color(bcolor);
valve_pf->selection_color(bcolor);
ring_st->selection_color(bcolor);
ring_afreq->selection_color(bcolor);

Auto_Output->selection_color(bcolor);
Stereo->selection_color(bcolor);
 




leds_color=bcolor;



Fl::redraw();
}

void RKRGUI::put_icon(Fl_Window* window) {
  if (hints == NULL)
hints = XGetWMHints(fl_display, fl_xid(window));

hints->icon_pixmap=p;
hints->icon_mask=mask; 
hints->flags = IconPixmapHint | IconMaskHint;
XSetWMHints(fl_display, fl_xid(window), hints);
}

void RKRGUI::load_stat() {
  int x,y,w,h,k,b,f,l,a;

Fl_Preferences rakarrack (Fl_Preferences::USER, WEBSITE, PACKAGE);

rakarrack.get(rkr->PrefNom("Principal X"),x,1);
rakarrack.get(rkr->PrefNom("Principal Y"),y,1);
rakarrack.get(rkr->PrefNom("Principal W"),w,800);
rkr->resolution=w;
rakarrack.get(rkr->PrefNom("Principal H"),h,600);

char tmp[256];
sprintf (tmp, "%s/bg.png", DATADIR);

rakarrack.get(rkr->PrefNom("Background Image"),rkr->BackgroundImage,tmp,256);
PutBackground();
rakarrack.get(rkr->PrefNom("FontSize"),rkr->relfontsize,0);
if( rkr->relfontsize!=0) chfsize(rkr->relfontsize);


rakarrack.get(rkr->PrefNom("Background Color"),b, 774778368);
rakarrack.get(rkr->PrefNom("Foreground Color"),f,1602392832);
rakarrack.get(rkr->PrefNom("Leds Color"),l, -13485824);
rakarrack.get(rkr->PrefNom("Labels Color"),a, -1075849984);
rakarrack.get(rkr->PrefNom("Schema"), k,0);
scheme_ch->value(k);
scheme_ch->do_callback();

Principal->resize(x,y,w,h);

rakarrack.get(rkr->PrefNom("BankWindow X"),x,1);
rakarrack.get(rkr->PrefNom("BankWindow Y"),y,1);
rakarrack.get(rkr->PrefNom("BankWindow W"),w,800);
rakarrack.get(rkr->PrefNom("BankWindow H"),h,600);

BankWindow->resize(x,y,w,h);

rakarrack.get(rkr->PrefNom("Order X"),x,1);
rakarrack.get(rkr->PrefNom("Order Y"),y,1);
rakarrack.get(rkr->PrefNom("Order W"),w,600);
rakarrack.get(rkr->PrefNom("Order H"),h,480);

Order->resize(x,y,w,h);

rakarrack.get(rkr->PrefNom("MIDI Learn X"),x,1);
rakarrack.get(rkr->PrefNom("MIDI Learn Y"),y,1);
rakarrack.get(rkr->PrefNom("MIDI Learn W"),w,640);
rakarrack.get(rkr->PrefNom("MIDI Learn H"),h,480);

MIDILearn->resize(x,y,w,h);



rakarrack.get(rkr->PrefNom("Settings X"),x,1);
rakarrack.get(rkr->PrefNom("Settings Y"),y,1);
rakarrack.get(rkr->PrefNom("Settings W"),w,640);
rakarrack.get(rkr->PrefNom("Settings H"),h,528);

if (w<640) w=640;
if (h<528) h=528;

Settings->resize(x,y,w,h);


back_color=(Fl_Color)b;
fore_color=(Fl_Color)f;
leds_color=(Fl_Color)l;
label_color=(Fl_Color)a;

Background_Color_Change(back_color);
Buttons_Color_Change(fore_color);
Leds_Color_Change(leds_color);
Label_Color_Change(label_color);

if (!commandline)
{
rakarrack.get(rkr->PrefNom("Preset Num"),k ,1);
rkr->Selected_Preset=k;
Preset_Counter->value(k);
rkr->Bank_to_Preset(k);
}

rakarrack.get(rkr->PrefNom("MIDI Implementation"),rkr->MIDIway,0); 
if(!rkr->MIDIway) ML_Menu->deactivate();

rakarrack.get(rkr->PrefNom("UserName"),rkr->UserRealName,"",127);
rakarrack.get(rkr->PrefNom("Preserve Gain/Master"),rkr->actuvol,0);
rakarrack.get(rkr->PrefNom("MIDI IN Channel"),rkr->MidiCh,1);
rkr->MidiCh--;
rakarrack.get(rkr->PrefNom("MIDI IN Harmonizer"),rkr->HarCh,1);
rkr->HarCh--;

rakarrack.get(rkr->PrefNom("FX_init_state"),rkr->init_state,0);

if(rkr->init_state)
{
  rkr->Bypass=1;
  rkr->calculavol(1);
  rkr->calculavol(2);
}  

//MIDIConverter

rakarrack.get(rkr->PrefNom("Midi Out Channel"),k,1);
Midi_out_Counter->value(k);
rkr->efx_MIDIConverter->setmidichannel(k);
 
rakarrack.get(rkr->PrefNom("Trigger Adjust"),k,4);
Trig_Adj->value(k);
rkr->efx_MIDIConverter->setTriggerAdjust(k);


rakarrack.get(rkr->PrefNom("Velocity Adjust"),k,50);
Vel_Adj->value(k);
rkr->efx_MIDIConverter->setVelAdjust(k);
}

void RKRGUI::save_stat(int i) {
  Fl_Preferences rakarrack (Fl_Preferences::USER, WEBSITE, PACKAGE);

if (i==0)
{
rakarrack.set(rkr->PrefNom("Principal X"),Principal->x());
rakarrack.set(rkr->PrefNom("Principal Y"),Principal->y());
rakarrack.set(rkr->PrefNom("Principal W"),Principal->w());
rakarrack.set(rkr->PrefNom("Principal H"),Principal->h());
rakarrack.set(rkr->PrefNom("FontSize"), rkr->relfontsize);
rakarrack.set(rkr->PrefNom("Background Color"), (int)back_color);
rakarrack.set(rkr->PrefNom("Foreground Color"), (int)fore_color);
rakarrack.set(rkr->PrefNom("Leds Color"), (int) leds_color);
rakarrack.set(rkr->PrefNom("Labels Color"),(int) label_color);
rakarrack.set(rkr->PrefNom("Schema"), (int) scheme_ch->value());

if ((Preset_Counter->value() >0) && (Preset_Counter->value() < 81))

rakarrack.set(rkr->PrefNom("Preset Num"),(int) Preset_Counter->value());

if (rkr->help_displayed)
{

rakarrack.set(rkr->PrefNom("Help X"),visor->x());
rakarrack.set(rkr->PrefNom("Help Y"),visor->y());
rakarrack.set(rkr->PrefNom("Help W"),visor->w());
rakarrack.set(rkr->PrefNom("Help H"),visor->h());
rakarrack.set(rkr->PrefNom("Help TextSize"),visor->textsize());
}

//MIDIConverter

rakarrack.set(rkr->PrefNom("Midi Out Channel"),(int)Midi_out_Counter->value()); 
rakarrack.set(rkr->PrefNom("Trigger Adjust"),(int)Trig_Adj->value());
rakarrack.set(rkr->PrefNom("Velocity Adjust"),(int)Vel_Adj->value());

}


if (i==1)
{
rakarrack.set(rkr->PrefNom("BankWindow X"),BankWindow->x());
rakarrack.set(rkr->PrefNom("BankWindow Y"),BankWindow->y());
rakarrack.set(rkr->PrefNom("BankWindow W"),BankWindow->w());
rakarrack.set(rkr->PrefNom("BankWindow H"),BankWindow->h());


}

if (i==5)
{
rakarrack.set(rkr->PrefNom("MIDI Learn X"),MIDILearn->x());
rakarrack.set(rkr->PrefNom("MIDI Learn Y"),MIDILearn->y());
rakarrack.set(rkr->PrefNom("MIDI Learn W"),MIDILearn->w());
rakarrack.set(rkr->PrefNom("MIDI Learn H"),MIDILearn->h());
}





if (i==2)
{
rakarrack.set(rkr->PrefNom("Order X"),Order->x());
rakarrack.set(rkr->PrefNom("Order Y"),Order->y());
rakarrack.set(rkr->PrefNom("Order W"),Order->w());
rakarrack.set(rkr->PrefNom("Order H"),Order->h());
}

if (i==3)
{
rakarrack.set(rkr->PrefNom("Settings X"),Settings->x());
rakarrack.set(rkr->PrefNom("Settings Y"),Settings->y());
rakarrack.set(rkr->PrefNom("Settings W"),Settings->w());
rakarrack.set(rkr->PrefNom("Settings H"),Settings->h());

rakarrack.set(rkr->PrefNom("UserName"),rkr->UserRealName);
rakarrack.set(rkr->PrefNom("Preserve Gain/Master"),rkr->actuvol);
rakarrack.set(rkr->PrefNom("FX_init_state"),rkr->init_state);

rakarrack.set(rkr->PrefNom("FontSize"),rkr->relfontsize);
rakarrack.set(rkr->PrefNom("Bank Filename"),rkr->BankFilename);
rakarrack.set(rkr->PrefNom("Background Image"),rkr->BackgroundImage);
rakarrack.set(rkr->PrefNom("Auto Connect MIDI IN"),rkr->aconnect_MI);
rakarrack.set(rkr->PrefNom("Auto Connect Jack"),rkr->aconnect_JA);

rakarrack.set(rkr->PrefNom("MIDI Implementation"),rkr->MIDIway);



i = BMidiIn->value();
char *temp;
temp = (char*) BMidiIn->text(i);
if (temp!=NULL)
rakarrack.set(rkr->PrefNom("MIDI IN Device"),temp);
rakarrack.set(rkr->PrefNom("MIDI IN Channel"),rkr->MidiCh+1);
rakarrack.set(rkr->PrefNom("MIDI IN Harmonizer"),rkr->HarCh+1);
rakarrack.set(rkr->PrefNom("Harmonizer Quality"),rkr->HarQual);


int k=1;
char temp1[128];


for(i=1; i<=JackCo->size();i++)
{ 
 
  if (JackCo->selected(i))
    {
      sprintf(temp1,"Jack Port %d",k);
      rakarrack.set(rkr->PrefNom(temp1),JackCo->text(i));
      k++;
    }
      
}   
      
 rakarrack.set(rkr->PrefNom("Auto Connect Num"),k-1); 
  
    



}
}

void RKRGUI::Put_Loaded() {
  //General



WPreset_Name->value(rkr->Preset_Name);
DAuthor->copy_label(rkr->Author);

Nivel_Entrada->value((int) (rkr->Input_Gain*100.0)-50);
rkr->calculavol(1);
Nivel_Salida->value((int) (rkr->Master_Volume*100.0)-50);
rkr->calculavol(2);


ActivarGeneral->value(rkr->Bypass);

if (rkr->Bypass==0)
{

rkr->val_i_sum=-50;
rkr->val_v_sum=-50;
input_vu->value(-50);
output_vu->value(-50);

}
//Reverb

reverb_WD->value(rkr->lv[0][0]-64);
reverb_pan->value(rkr->lv[0][1]-64);
reverb_time->value(rkr->lv[0][2]);
reverb_ldel->value(rkr->lv[0][3]);
reverb_ldelft->value(rkr->lv[0][4]);
reverb_RS->value(rkr->lv[0][11]);
reverb_LPF->value(rkr->lv[0][7]);
reverb_HPF->value(rkr->lv[0][8]);
reverb_damp->value(rkr->lv[0][9]);
reverb_type->value(rkr->lv[0][10]);
reverb_activar->value(rkr->Reverb_Bypass);

//Echo

echo_WD->value(rkr->lv[1][0]-64);
echo_pan->value(rkr->lv[1][1]-64);
echo_delay->value(rkr->lv[1][2]);
echo_LRdl->value(rkr->lv[1][3]);
echo_LRc->value(rkr->lv[1][4]-64);
echo_fb->value(rkr->lv[1][5]);
echo_damp->value(rkr->lv[1][6]);
echo_RV->value(rkr->lv[1][8]);
echo_activar->value(rkr->Echo_Bypass);

//Chorus

chorus_WD->value(rkr->lv[2][0]-64);
chorus_lfotype->value(rkr->lv[2][4]);
chorus_subs->value(rkr->lv[2][11]);
chorus_pan->value(rkr->lv[2][1]-64);
chorus_freq->value(rkr->lv[2][2]);
chorus_rnd->value(rkr->lv[2][3]);
chorus_stdf->value(rkr->lv[2][5]);
chorus_dpth->value(rkr->lv[2][6]);
chorus_delay->value(rkr->lv[2][7]);
chorus_fb->value(rkr->lv[2][8]);
chorus_LR->value(rkr->lv[2][9]-64);
chorus_activar->value(rkr->Chorus_Bypass);


//Flanger

flanger_WD->value(rkr->lv[3][0]-64);
flanger_lfotype->value(rkr->lv[3][4]);
flanger_subs->value(rkr->lv[3][11]);
flanger_pan->value(rkr->lv[3][1]-64);
flanger_freq->value(rkr->lv[3][2]);
flanger_rnd->value(rkr->lv[3][3]);
flanger_stdf->value(rkr->lv[3][5]);
flanger_dpth->value(rkr->lv[3][6]);
flanger_delay->value(rkr->lv[3][7]);
flanger_fb->value(rkr->lv[3][8]);
flanger_LR->value(rkr->lv[3][9]-64);
flanger_activar->value(rkr->Flanger_Bypass);


//Phaser

phaser_WD->value(rkr->lv[4][0]-64);
phaser_lfotype->value(rkr->lv[4][4]);
phaser_subs->value(rkr->lv[4][10]);
phaser_pan->value(rkr->lv[4][1]-64);
phaser_freq->value(rkr->lv[4][2]);
phaser_rnd->value(rkr->lv[4][3]);
phaser_phase->value(rkr->lv[4][11]);
phaser_stdf->value(rkr->lv[4][5]);
phaser_dpth->value(rkr->lv[4][6]);
phaser_fb->value(rkr->lv[4][7]);
phaser_stages->value(rkr->lv[4][8]);
phaser_LR->value(rkr->lv[4][9]-64);
phaser_activar->value(rkr->Phaser_Bypass);

//Overdrive

ovrd_WD->value(rkr->lv[5][0]-64);
ovrd_tipo->value(rkr->lv[5][4]);
ovrd_neg->value(rkr->lv[5][6]);
ovrd_st->value(rkr->lv[5][9]);
ovrd_pf->value(rkr->lv[5][10]);
ovrd_LRc->value(rkr->lv[5][2]-64);
ovrd_drive->value(rkr->lv[5][3]);
ovrd_level->value(rkr->lv[5][4]);
ovrd_tipo->value(rkr->lv[5][5]);
ovrd_pan->value(rkr->lv[5][1]-64);
ovrd_lpf->value(rkr->lv[5][7]);
ovrd_hpf->value(rkr->lv[5][8]);
ovrd_activar->value(rkr->Overdrive_Bypass);


//Distorsion

dist_WD->value(rkr->lv[6][0]-64);
dist_tipo->value(rkr->lv[6][4]);
dist_neg->value(rkr->lv[6][6]);
dist_st->value(rkr->lv[6][9]);
dist_pf->value(rkr->lv[6][10]);
dist_LRc->value(rkr->lv[6][2]-64);
dist_drive->value(rkr->lv[6][3]);
dist_level->value(rkr->lv[6][4]);
dist_tipo->value(rkr->lv[6][5]);
dist_pan->value(rkr->lv[6][1]-64);
dist_lpf->value(rkr->lv[6][7]);
dist_hpf->value(rkr->lv[6][8]);
dist_oct->value(rkr->lv[6][12]);
dist_activar->value(rkr->Distorsion_Bypass);

//EQ1

eq_1->value(rkr->lv[7][0]-64);
eq_2->value(rkr->lv[7][1]-64);
eq_3->value(rkr->lv[7][2]-64);
eq_4->value(rkr->lv[7][3]-64);
eq_5->value(rkr->lv[7][4]-64);
eq_6->value(rkr->lv[7][5]-64);
eq_7->value(rkr->lv[7][6]-64);
eq_8->value(rkr->lv[7][7]-64);
eq_9->value(rkr->lv[7][8]-64);
eq_10->value(rkr->lv[7][9]-64);
eq_Gain->value(rkr->lv[7][10]-64);
eq_Q->value(rkr->lv[7][11]-64);
eq_activar->value(rkr->EQ1_Bypass);


//EQ2

eqp_LF->value(rkr->lv[8][0]);
eqp_LFg->value(rkr->lv[8][1]-64);
eqp_LQ->value(rkr->lv[8][2]-64);
eqp_MF->value(rkr->lv[8][3]);
eqp_MFg->value(rkr->lv[8][4]-64);
eqp_MQ->value(rkr->lv[8][5]-64);
eqp_HF->value(rkr->lv[8][6]);
eqp_HFg->value(rkr->lv[8][7]-64);
eqp_HQ->value(rkr->lv[8][8]-64);
eqp_Gain->value(rkr->lv[8][9]-64);
eqp_activar->value(rkr->EQ2_Bypass);


//Compressor

compress_ATime->value(rkr->lv[9][3]);
compress_RTime->value(rkr->lv[9][4]);
compress_Ratio->value(rkr->lv[9][1]);
compress_threshold->value(rkr->lv[9][0]);
compress_output->value(rkr->lv[9][2]);
Auto_Output->value(rkr->lv[9][5]);
compress_Knee->value(rkr->lv[9][6]);
Stereo->value(rkr->lv[9][7]);
compress_activar->value(rkr->Compressor_Bypass);


//WahWah

WhaWha_WD->value(rkr->lv[11][0]-64);
WhaWha_lfotype->value(rkr->lv[11][4]);
WhaWha_pan->value(rkr->lv[11][1]-64);
WhaWha_freq->value(rkr->lv[11][2]);
WhaWha_rnd->value(rkr->lv[11][3]);
WhaWha_stdf->value(rkr->lv[11][5]);
WhaWha_dpth->value(rkr->lv[11][6]);
WhaWha_ampsns->value(rkr->lv[11][7]);
WhaWha_ampsnsinv->value(rkr->lv[11][8]);
WhaWha_smooth->value(rkr->lv[11][9]);
WhaWha_activar->value(rkr->WhaWha_Bypass);


//AlienWah

Alienwah_WD->value(rkr->lv[12][0]-64);
Alienwah_lfotype->value(rkr->lv[12][4]);
Alienwah_pan->value(rkr->lv[12][1]-64);
Alienwah_freq->value(rkr->lv[12][2]);
Alienwah_rnd->value(rkr->lv[12][10]);
Alienwah_phase->value(rkr->lv[12][10]);
Alienwah_stdf->value(rkr->lv[12][5]);
Alienwah_dpth->value(rkr->lv[12][6]);
Alienwah_fb->value(rkr->lv[12][7]);
Alienwah_delay->value(rkr->lv[12][8]);
Alienwah_LR->value(rkr->lv[12][9]-64);
Alienwah_activar->value(rkr->Alienwah_Bypass);


//Cabinet

Cabinet_output->value(rkr->lv[13][1]-64);
Cabinet_preset->value(rkr->lv[13][0]);
Cabinet_activar->value(rkr->Cabinet_Bypass);



//Pan

pan_WD->value(rkr->lv[14][0]-64);
pan_lfotype->value(rkr->lv[14][4]);
pan_autopan->value(rkr->lv[14][7]);
pan_extraon->value(rkr->lv[14][8]);
pan_pan->value(rkr->lv[14][1]-64);
pan_freq->value(rkr->lv[14][2]);
pan_rnd->value(rkr->lv[14][3]);
pan_stdf->value(rkr->lv[14][5]);
pan_extra->value(rkr->lv[14][6]);
pan_activar->value(rkr->Pan_Bypass);



//Har

har_WD->value(rkr->lv[15][0]-64);
har_pan->value(rkr->lv[15][1]-64);
har_gan->value(rkr->lv[15][2]-64);
har_int->value(rkr->lv[15][3]-12);
har_freq1->value(rkr->lv[15][4]);
har_gan1->value(rkr->lv[15][8]-64);
har_q1->value(rkr->lv[15][9]-64);
har_SELECT->value(rkr->lv[15][5]);
har_note->value(rkr->lv[15][6]);
har_type->value(rkr->lv[15][7]);
har_MIDI->value(rkr->lv[15][10]);
har_activar->value(rkr->Harmonizer_Bypass);
Chord();


//MusicalDelay
musdelay_WD->value(rkr->lv[16][0]-64);
musdelay_pan1->value(rkr->lv[16][1]-64);
musdelay_delay1->value(rkr->lv[16][2]-1);
musdelay_delay3->value(rkr->lv[16][3]-1);
musdelay_LRc->value(rkr->lv[16][4]-64);
musdelay_fb1->value(rkr->lv[16][5]);
musdelay_damp->value(rkr->lv[16][6]);
musdelay_pan2->value(rkr->lv[16][7]-64);
musdelay_delay2->value(rkr->lv[16][8]-1);
musdelay_fb2->value(rkr->lv[16][9]);
musdelay_tempo->value(rkr->lv[16][10]);
musdelay_gain1->value(rkr->lv[16][11]-64);
musdelay_gain2->value(rkr->lv[16][12]-64);
musdelay_activar->value(rkr->MusDelay_Bypass);


//NoiseGate

gate_ATime->value(rkr->lv[17][2]);
gate_RTime->value(rkr->lv[17][3]);
gate_range->value(rkr->lv[17][1]);
gate_hold->value(rkr->lv[17][6]);
gate_LPF->value(rkr->lv[17][4]);
gate_HPF->value(rkr->lv[17][5]);
gate_threshold->value(rkr->lv[17][0]);
gate_activar->value(rkr->Gate_Bypass);



//NewDist

newdist_WD->value(rkr->lv[18][0]-64);
newdist_tipo->value(rkr->lv[18][4]);
newdist_neg->value(rkr->lv[18][6]);
newdist_st->value(rkr->lv[18][9]);
newdist_oct->value(rkr->lv[18][11]);
newdist_pf->value(rkr->lv[18][10]);
newdist_LRc->value(rkr->lv[18][2]-64);
newdist_drive->value(rkr->lv[18][3]);
newdist_level->value(rkr->lv[18][4]);
newdist_tipo->value(rkr->lv[18][5]);
newdist_pan->value(rkr->lv[18][1]-64);
newdist_lpf->value(rkr->lv[18][7]);
newdist_hpf->value(rkr->lv[18][8]);
newdist_activar->value(rkr->NewDist_Bypass);




//APhaser

aphaser_WD->value(rkr->lv[19][0]-64);
aphaser_lfotype->value(rkr->lv[19][4]);
aphaser_subs->value(rkr->lv[19][10]);
aphaser_stdf->value(rkr->lv[19][5]);
aphaser_hyper->value(rkr->lv[19][12]);
aphaser_pan->value(rkr->lv[19][1]);
aphaser_phase->value(rkr->lv[19][11]);
aphaser_freq->value(rkr->lv[19][2]);
aphaser_dpth->value(rkr->lv[19][6]);
aphaser_fb->value(rkr->lv[19][7]-64);
aphaser_stages->value(rkr->lv[19][8]);
aphaser_LR->value(rkr->lv[19][9]);
aphaser_activar->value(rkr->APhaser_Bypass);


//Valve

valve_WD->value(rkr->lv[20][0]-64);
valve_neg->value(rkr->lv[20][5]);
valve_st->value(rkr->lv[20][8]);
valve_pf->value(rkr->lv[20][9]);
valve_LRc->value(rkr->lv[20][2]-64);
valve_drive->value(rkr->lv[20][3]);
valve_Q->value(rkr->lv[20][10]);
valve_level->value(rkr->lv[20][4]);
valve_pan->value(rkr->lv[20][1]-64);
valve_lpf->value(rkr->lv[20][6]);
valve_hpf->value(rkr->lv[20][7]);
valve_ed->value(rkr->lv[20][11]);
valve_Pre->value(rkr->lv[20][12]);

valve_activar->value(rkr->Valve_Bypass);

//Dual_Flange


dflange_WD->value(rkr->lv[21][0]);
dflange_pan->value(rkr->lv[21][1]);
dflange_freq->value(rkr->lv[21][10]);
dflange_rnd->value(rkr->lv[21][13]);
dflange_lfotype->value(rkr->lv[21][12]);
dflange_stdf->value(rkr->lv[21][11]);
dflange_width->value(rkr->lv[21][4]);
dflange_depth->value(rkr->lv[21][3]);
dflange_fb->value(rkr->lv[21][6]);
dflange_LR->value(rkr->lv[21][2]);
dflange_subs->value(rkr->lv[21][8]);
dflange_tz->value(rkr->lv[21][9]);
dflange_offset->value(rkr->lv[21][5]);
dflange_lpf->value(rkr->lv[21][7]);
dflange_activar->value(rkr->DFlange_Bypass);


// Ring

ring_WD->value(rkr->lv[22][0]);
ring_LRc->value(rkr->lv[22][2]);
ring_input->value(rkr->lv[22][11]);
ring_level->value(rkr->lv[22][3]);
ring_st->value(rkr->lv[22][6]);
ring_depth->value(rkr->lv[22][4]);
ring_freq->value(rkr->lv[22][5]);
ring_sin->value(rkr->lv[22][7]);
ring_tri->value(rkr->lv[22][8]);
ring_saw->value(rkr->lv[22][9]);
ring_squ->value(rkr->lv[22][10]);
ring_pan->value(rkr->lv[22][1]);
ring_afreq->value(rkr->lv[22][12]);
ring_activar->value(rkr->Ring_Bypass);






reordena();
}

void RKRGUI::tick(void* v) {
  Fl_Box *o = (Fl_Box*)v;
o->do_callback();
Fl::repeat_timeout(.04,tick,v);
}

void RKRGUI::preset_click(Fl_Button* o, void* v) {
  ((RKRGUI*)(o->parent()->parent()->user_data()))->preset_click_i(o,v);
}

inline void RKRGUI::preset_click_i(Fl_Button* o, void*) {
  int ok;

char temp2[128];
long long kk = (long long) o->user_data();
int num = (int) kk;
int tecla = Fl::event_key();


if (Fl::event_button()==3)
{

Fl_Widget *w = ob->child(num-1);


if (strlen(rkr->Bank[num].Preset_Name) >0)
{ 
  Fl_Widget *m = fl_message_icon();
  m->parent()->copy_label(rkr->jackcliname);
  sprintf(temp2,"Overwrite? \"%s\"",w->label());
  ok=fl_choice(temp2,"No","Yes",NULL);
 if (!ok) return;
}
   
  rkr->Preset_to_Bank(num);
  w->copy_label(rkr->Preset_Name);
  rkr->modified=1;

}



if ((Fl::event_button()==1) || tecla==32)
{

Fl_Widget *w = ob->child(num-1);
unlight_preset(rkr->Selected_Preset);
rkr->Selected_Preset=num;
w->color(fl_darker(leds_color));
Preset_Counter->value(num);
rkr->Bank_to_Preset(num);
FillML(0);
Put_Loaded();
}
}

void RKRGUI::make_window_banks() {
  int i,j,x,y,num;
int elw,elh;

elw=176*BankWindow->w()/800;
elh=32*BankWindow->h()/600;



ob->begin();

x=40;y=10;
num=1;

for (i=1;i<16;i++)
{
y +=elh+2;

for (j=1; j<5; j++)
{
   
     Fl_Button* butX = new Fl_Button(x+1, y+1, elw,elh,rkr->Bank[num].Preset_Name);
      butX->type(0);
      butX->color(fore_color);
      butX->box(FL_FLAT_BOX);
      butX->selection_color(leds_color);
      butX->labelsize(14);
      butX->align(68|FL_ALIGN_INSIDE);
      butX->user_data((void*) (num));
      butX->value(0);
      butX->callback((Fl_Callback *)preset_click);
      ob->add(butX);

x +=elw+4;
num++;

}
 x=40;

}


ob->end();

made=1;

light_preset(rkr->Selected_Preset);
}

void RKRGUI::reordena() {
  int i,j,k,t;
unsigned int x[10],y[10];
ulong s[10];

s[0]=49;
s[1]=50;
s[2]=51;
s[3]=52;
s[4]=53;
s[5]=54;
s[6]=55;
s[7]=56;
s[8]=57;
s[9]=48;


x[0]=E1->x();
x[1]=E2->x();
x[2]=E3->x();
x[3]=E4->x();
x[4]=E5->x();
x[5]=E6->x();
x[6]=E7->x();
x[7]=E8->x();
x[8]=E9->x();
x[9]=E10->x();

y[0]=E1->y();
y[1]=E2->y();
y[2]=E3->y();
y[3]=E4->y();
y[4]=E5->y();
y[5]=E6->y();
y[6]=E7->y();
y[7]=E8->y();
y[8]=E9->y();
y[9]=E10->y();


//Find to Hide


t=1;

for (i=0; i<rkr->NumEffects;i++)
{

 k=0;
 for (j=0;j<10;j++) if (rkr->efx_order[j]==i) k=1;
       
 if(!k)
 
 { 
  rkr->availables[t]=i;
  t++;
 }

}



//Hide


for (i=1; i<=t; i++)

 {


    switch ( rkr->availables[i])
      {


        case 0: 
        EQ->hide();
        break; 
        case 1: 
        COMPRESS->hide();
        break;
        case 2:
        DIST->hide();
        break;
        case 3:
        OVRD->hide(); 
        break;
        case 4:
        ECHO->hide();
        break;
        case 5:
        CHORUS->hide();
        break;
        case 6:
        PHASER->hide();
        break;
        case 7:
        FLANGER->hide();
        break;
        case 8:
        REVERB->hide();
        break;
        case 9:
        PEQ->hide();
        break;
        case 10:
        WHAWHA->hide();
        break;
        case 11:
        ALIENWAH->hide();        
        break;
        case 12:
        CABINET->hide();
        break;
        case 13:
        PAN->hide();
        break;
        case 14:
        HAR->hide();
        break;
        case 15:
        MUSDELAY->hide();
        break;
        case 16:
        GATE->hide();
        break;
        case 17:
        NEWDIST->hide();
        break;
        case 18:
        APHASER->hide();
        break;
        case 19:
        VALVE->hide();
        break;
        case 20:
        DFLANGE->hide();
        break;
        case 21:
        RING->hide();
        break;
      }
      
    }
    
    
    
    
    
 // Show   
    
    
         

for (i=0; i<10; i++)
{

switch(i)
 {
    case 0:
       L1->copy_label(rkr->efx_names[rkr->efx_order[i]].Nom);
       break;
    case 1:
       L2->copy_label(rkr->efx_names[rkr->efx_order[i]].Nom);
       break;
    case 2:
       L3->copy_label(rkr->efx_names[rkr->efx_order[i]].Nom);
       break;
    case 3:
       L4->copy_label(rkr->efx_names[rkr->efx_order[i]].Nom);
       break;
    case 4:
       L5->copy_label(rkr->efx_names[rkr->efx_order[i]].Nom);
       break;
    case 5:
       L6->copy_label(rkr->efx_names[rkr->efx_order[i]].Nom);
       break;
    case 6:
       L7->copy_label(rkr->efx_names[rkr->efx_order[i]].Nom);
       break;
    case 7:
       L8->copy_label(rkr->efx_names[rkr->efx_order[i]].Nom);
       break;
    case 8:
       L9->copy_label(rkr->efx_names[rkr->efx_order[i]].Nom);
       break;
    case 9:
       L10->copy_label(rkr->efx_names[rkr->efx_order[i]].Nom);
       break;
}

switch ( rkr->efx_order[i])
  {
  
    case 0:
       
       EQ->position(x[i],y[i]);
       eq_activar->shortcut(s[i]);
       EQ->show();
       if(rkr->EQ1_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;   
       
       
    case 1:
       
       COMPRESS->position(x[i],y[i]);
       compress_activar->shortcut(s[i]);
       COMPRESS->show();
       if(rkr->Compressor_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;   
       
     case 2:
    
       DIST->position(x[i],y[i]);
       dist_activar->shortcut(s[i]);
       DIST->show();
       if(rkr->Distorsion_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;   
       
     case 3:
    
       OVRD->position(x[i],y[i]);
       ovrd_activar->shortcut(s[i]);
       OVRD->show();
       if(rkr->Overdrive_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;   
       
     case 4:
    
       ECHO->position(x[i],y[i]);
       echo_activar->shortcut(s[i]);
       ECHO->show();
       if(rkr->Echo_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;   
       
     case 5:
    
       CHORUS->position(x[i],y[i]);
       chorus_activar->shortcut(s[i]);
       CHORUS->show();
       if(rkr->Chorus_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;   
       
     case 6:
    
       PHASER->position(x[i],y[i]);
       phaser_activar->shortcut(s[i]);
       PHASER->show();
       if(rkr->Phaser_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;   
       
     case 7:
    
       FLANGER->position(x[i],y[i]);
       flanger_activar->shortcut(s[i]);
       FLANGER->show();
       if(rkr->Flanger_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;    
                    
     case 8:
    
       REVERB->position(x[i],y[i]);
       reverb_activar->shortcut(s[i]);
       REVERB->show();
       if(rkr->Reverb_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;     
       
       
     case 9:
    
       PEQ->position(x[i],y[i]);
       eqp_activar->shortcut(s[i]);
       PEQ->show();
       if(rkr->EQ2_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;     
     
     case 10:
    
       WHAWHA->position(x[i],y[i]);
       WhaWha_activar->shortcut(s[i]);
       WHAWHA->show();
       if(rkr->WhaWha_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;  
       
     case 11:
    
       ALIENWAH->position(x[i],y[i]);
       Alienwah_activar->shortcut(s[i]);
       ALIENWAH->show();
       if(rkr->Alienwah_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;      
     
     case 12:
     
       CABINET->position(x[i],y[i]);   
       Cabinet_activar->shortcut(s[i]);
       CABINET->show();
       if(rkr->Cabinet_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;
    
     case 13:
     
       PAN->position(x[i],y[i]);   
       pan_activar->shortcut(s[i]);
       PAN->show();
       if(rkr->Pan_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;
     
     case 14:
       HAR->position(x[i],y[i]);
       har_activar->shortcut(s[i]);
       HAR->show();
       if(rkr->Harmonizer_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;
     
     case 15:
       MUSDELAY->position(x[i],y[i]);
       musdelay_activar->shortcut(s[i]);
       MUSDELAY->show();
       if(rkr->MusDelay_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break; 
       
     case 16:
       GATE->position(x[i],y[i]);
       gate_activar->shortcut(s[i]);
       GATE->show();
       if(rkr->Gate_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;  
     
     case 17:
       NEWDIST->position(x[i],y[i]);
       newdist_activar->shortcut(s[i]);
       NEWDIST->show();
       if(rkr->NewDist_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;
      
     case 18:
       APHASER->position(x[i],y[i]);
       aphaser_activar->shortcut(s[i]);
       APHASER->show();
       if(rkr->APhaser_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;
 
     case 19:
       VALVE->position(x[i],y[i]);
       valve_activar->shortcut(s[i]);
       VALVE->show();
       if(rkr->Valve_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;

     case 20:
       DFLANGE->position(x[i],y[i]);
       dflange_activar->shortcut(s[i]);
       DFLANGE->show();
       if(rkr->DFlange_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;

     case 21:
       RING->position(x[i],y[i]);
       ring_activar->shortcut(s[i]);
       RING->show();
       if(rkr->Ring_Bypass)rkr->active[i]=1; else rkr->active[i]=0;
       break;


 }
 
 }
 
  Principal->init_sizes();
 
  ChangeActives();
  
  for(i=0; i<10;i++) 
     ChangeActivesB(rkr->efx_order[i], rkr->active[i]);
  
 
  Fl::redraw();
}

void RKRGUI::show_help() {
  char temp[128];

int x,y,w,h,k;

Fl_Preferences rakarrack (Fl_Preferences::USER, WEBSITE, PACKAGE);

if (rkr->help_displayed==0)
{
 visor = new Fl_Help_Dialog;

rakarrack.get(rkr->PrefNom("Help X"),x,1);
rakarrack.get(rkr->PrefNom("Help Y"),y,1);
rakarrack.get(rkr->PrefNom("Help W"),w,640);
rakarrack.get(rkr->PrefNom("Help H"),h,480);
rakarrack.get(rkr->PrefNom("Help TextSize"),k,11);
visor->resize(x,y,w,h);
visor->textsize((unsigned char)k);
}


bzero(temp,sizeof(temp));
sprintf(temp,"%s/html/help.html",HELPDIR);


 if (FILE * file = fopen(temp, "r"))
        {
                fclose(file);
                visor->load(temp);
		rkr->help_displayed=1;
		visor->show();
	}
}

void RKRGUI::show_lic() {
  char temp[128];

int x,y,w,h,k;

Fl_Preferences rakarrack (Fl_Preferences::USER, WEBSITE, PACKAGE);



if (rkr->help_displayed==0)
{
 visor = new Fl_Help_Dialog;

rakarrack.get(rkr->PrefNom("Help X"),x,1);
rakarrack.get(rkr->PrefNom("Help Y"),y,1);
rakarrack.get(rkr->PrefNom("Help W"),w,640);
rakarrack.get(rkr->PrefNom("Help H"),h,480);
rakarrack.get(rkr->PrefNom("Help TextSize"),k,11);
visor->resize(x,y,w,h);
visor->textsize((unsigned char)k);
}


bzero(temp,sizeof(temp));
sprintf(temp,"%s/html/license.html",HELPDIR);
visor->load(temp);


rkr->help_displayed=1;

visor->show();
}

void RKRGUI::MiraClientes() {
  FILE *fp;
char temp[128];
char temp1[128];
char *masque;
char *name;

BMidiIn->clear();


if ((fp = fopen ("/proc/asound/seq/clients", "r")) != NULL)
  {
    bzero (temp, sizeof (temp));

      while (fgets (temp, sizeof temp, fp) != NULL)
           {
             
            if (strstr(temp,"Port") != NULL)
             
           {  
             
             strcpy(temp1,temp);
             strtok(temp1,"\"");
             name=strtok(NULL,"\"");
             masque=strtok(NULL,")");
             
             if ((masque[2]=='R') && (strstr(name,"rakarrack MC OUT")==0)) BMidiIn->add(name);
             
            } 
           } 
   }
   
   fclose(fp);
 
 
   
 JackCo->clear();
 
 const char **ports;
  
  
   if ((ports = jack_get_ports (rkr->jackclient, NULL, JACK_DEFAULT_AUDIO_TYPE, 
                               JackPortIsInput)) == NULL) {
                fprintf(stderr, "Cannot find any capture ports\n");
    
                
        }
  
  else
  {
  int i=0;
  
  while (ports[i] != NULL)
     {
      if((strstr(ports[i],"rakarrack:in_1")==0) && (strstr(ports[i],"rakarrack:in_2")==0))
      JackCo->add(ports[i]);
      i++; 
     }
     
    
         
   }  
   
   free(ports);
}

void RKRGUI::MiraConfig() {
  int i = 1;
int k;
while (BMidiIn->text(i) != NULL)
{
if (strcmp(BMidiIn->text(i),rkr->MID)==0 ) BMidiIn->select(i,1);
i++; 
}

i=1;

while (JackCo->text(i) != NULL)
{

for (k=0; k < rkr->cuan_jack; k++)
if (strcmp(JackCo->text(i),rkr->jack_po[k].name)==0 ) JackCo->select(i,1);

i++; 
}




if (rkr->MIDIway) Mw1->setonly(); else Mw0->setonly();



BFiname->value(rkr->BankFilename);
BackFiname->value(rkr->BackgroundImage);
Username->value(rkr->UserRealName);
Pre_Serve->value(rkr->actuvol);
INSTATE->value(rkr->init_state);
D_A_Connect->value(rkr->aconnect_MI);
D_J_Connect->value(rkr->aconnect_JA);
Midi_In_Counter->value(rkr->MidiCh+1);
Har_In_Counter->value(rkr->HarCh+1);

switch(rkr->HarQual)
{
  case 4:
  Har_Qual->value(0);
  break;
  
  case 8:
  Har_Qual->value(1);
  break;
  
  case 16:
  Har_Qual->value(2);
  break;
}  

if (rkr->aconnect_MI) BMidiIn->activate();
else BMidiIn->deactivate();

if (rkr->aconnect_JA) JackCo->activate();
else JackCo->deactivate();
}

void RKRGUI::BankWin_Label(char *filename) {
  char tmp[256];


bzero(tmp,sizeof(tmp));
sprintf(tmp,"%s   v%s - Bank Manager - %s",rkr->jackcliname,VERSION,fl_filename_name(filename));
BankWindow->copy_label(tmp);
}

void RKRGUI::is_modified() {
  int ok;


if (rkr->modified)
{

 Fl_Widget *w = fl_message_icon();
 w->parent()->copy_label(rkr->jackcliname);
 

 ok=fl_choice("Bank was modified, but not saved","Discard","Save",NULL);



 switch(ok)
  
    {
        case 0:
          break;

        case 1: 
          MIDI_LABEL->do_callback();
          break;  

    }

}
}

void RKRGUI::Put_Loaded_Bank() {
  int k=1;

for (int t=0; t<ob->children();t++)
  {
    Fl_Widget *w = ob->child(t);
    long long temp = (long long) w->user_data();
    if (temp > 0)
    {
     w->copy_label(rkr->Bank[k].Preset_Name);
     k++;
    }
  
  }
  
FillML(2);
}

void RKRGUI::Chord() {
  int tipo=rkr->efx_Har->getpar(7);
int undi=rkr->efx_Har->getpar(6);

sprintf(rkr->RC->NombreAcorde,"%s%s", rkr->RC->NCE[undi].Nom,rkr->RC->ChN[tipo].Nom);

rkr->RC->ctipo=tipo;
rkr->RC->fundi=undi;
rkr->RC->cc=1;
}

void RKRGUI::ActMIDI() {
  if (rkr->Mvalue==0) return;

int i;

for (i=1; i<158; i++)

{

  
 if (rkr->Mcontrol[i]==0) continue;
 
 rkr->Mcontrol[i]=0;


switch (i)
{
     case 12:
     Balance->value(rkr->Fraction_Bypass*100);
     Balance->redraw();
     break;
     case 14:
     Nivel_Entrada->value((int) (rkr->Input_Gain*100.0)-50);
     Nivel_Entrada->redraw();
     break;
     case 7:
     Nivel_Salida->value((int) (rkr->Master_Volume*100.0)-50);
     Nivel_Salida->redraw();
     break;  
     
     case 1:
     WhaWha_dpth->value(rkr->efx_WhaWha->getpar(6));
     WhaWha_dpth->redraw();
     break;
     case 20:
     Alienwah_dpth->value(rkr->efx_Alienwah->getpar(6));
     Alienwah_dpth->redraw();
     break;
     case 21:
     phaser_dpth->value(rkr->efx_Phaser->getpar(6));
     phaser_dpth->redraw();
     break;
     case 22:
     flanger_dpth->value(rkr->efx_Flanger->getpar(6));
     flanger_dpth->redraw();
     break;
     case 23:
     chorus_dpth->value(rkr->efx_Chorus->getpar(6));
     chorus_dpth->redraw();
     break;
     case 24:
     musdelay_gain1->value(rkr->efx_MusDelay->getpar(11)-64);
     musdelay_gain1->redraw();
     break;
     case 25:
     musdelay_gain2->value(rkr->efx_MusDelay->getpar(12)-64);
     musdelay_gain2->redraw();
     break;
     case 26:
     har_freq1->value(rkr->efx_Har->getpar(4));
     har_freq1->redraw();
     break;
     case 27:
     har_int->value(rkr->efx_Har->getpar(3)-12);
     har_int->redraw();
     break;
     case 28:
     WhaWha_WD->value(rkr->efx_WhaWha->getpar(0)-64);
     WhaWha_WD->redraw();
     break;
     case 29:
     ovrd_WD->value(rkr->efx_Overdrive->getpar(0)-64);
     ovrd_WD->redraw();
     break;
     case 30:
     dist_WD->value(rkr->efx_Distorsion->getpar(0)-64);
     dist_WD->redraw();
     break;
     case 31:
     har_WD->value(rkr->efx_Har->getpar(0)-64);
     har_WD->redraw();
     break;
     case 52:
     chorus_WD->value(rkr->efx_Chorus->getpar(0)-64);
     chorus_WD->redraw();
     break;
     case 53:
     flanger_WD->value(rkr->efx_Flanger->getpar(0)-64);
     flanger_WD->redraw();
     break;
     case 54:
     phaser_WD->value(rkr->efx_Phaser->getpar(0)-64);
     phaser_WD->redraw();
     break;
     case 55:
     Alienwah_WD->value(rkr->efx_Alienwah->getpar(0)-64);
     Alienwah_WD->redraw();
     break;
     case 56:
     musdelay_WD->value(rkr->efx_MusDelay->getpar(0)-64);
     musdelay_WD->redraw();
     break;
     case 57:
     reverb_WD->value(rkr->efx_Rev->getpar(0)-64);
     reverb_WD->redraw();
     break;
     case 58:
     pan_WD->value(rkr->efx_Pan->getpar(0)-64);
     pan_WD->redraw();
     break;
     case 59:
     echo_WD->value(rkr->efx_Echo->getpar(0)-64);
     echo_WD->redraw();
     break;
     case 46:
     echo_pan->value(rkr->efx_Echo->getpar(1)-64);
     echo_pan->redraw();
     break;
     case 47:
     ovrd_pan->value(rkr->efx_Overdrive->getpar(1)-64);
     ovrd_pan->redraw();
     break;
     case 48:
     dist_pan->value(rkr->efx_Distorsion->getpar(1)-64);
     dist_pan->redraw();
     break;
     case 49:
     har_pan->value(rkr->efx_Har->getpar(1)-64);
     har_pan->redraw();
     break;
     case 50:
     chorus_pan->value(rkr->efx_Chorus->getpar(1)-64);
     chorus_pan->redraw();
     break;
     case 51:
     flanger_pan->value(rkr->efx_Flanger->getpar(1)-64);
     flanger_pan->redraw();
     break;
     case 60:
     phaser_pan->value(rkr->efx_Phaser->getpar(1)-64);
     phaser_pan->redraw();
     break;
     case 61:
     Alienwah_pan->value(rkr->efx_Alienwah->getpar(1)-64);
     Alienwah_pan->redraw();
     break;
     case 62:
     musdelay_pan1->value(rkr->efx_MusDelay->getpar(1)-64);
     musdelay_pan1->redraw();
     break;
     case 63:
     reverb_pan->value(rkr->efx_Rev->getpar(1)-64);
     reverb_pan->redraw();
     break;
     case 65:
     musdelay_pan2->value(rkr->efx_MusDelay->getpar(7)-64);
     musdelay_pan2->redraw();
     break;
     case 66:
     WhaWha_pan->value(rkr->efx_WhaWha->getpar(1)-64);
     WhaWha_pan->redraw();
     break;
     case 67:
     pan_pan->value(rkr->efx_Pan->getpar(1)-64);
     pan_pan->redraw();
     break;
     case 68:
     ovrd_drive->value(rkr->efx_Overdrive->getpar(3));
     ovrd_pan->redraw();
     break;
     case 69:
     dist_drive->value(rkr->efx_Distorsion->getpar(3));
     dist_drive->redraw();
     break;
     case 70:
     ovrd_level->value(rkr->efx_Overdrive->getpar(4));
     ovrd_level->redraw();
     break;
     case 71:
     dist_level->value(rkr->efx_Distorsion->getpar(4));
     dist_level->redraw();
     break;
     case 72:
     chorus_freq->value(rkr->efx_Chorus->getpar(2));
     chorus_freq->redraw();
     break;
     case 73:
     flanger_freq->value(rkr->efx_Flanger->getpar(2));
     flanger_freq->redraw();
     break;
     case 74:
     phaser_freq->value(rkr->efx_Phaser->getpar(2));
     phaser_freq->redraw();
     break;
     case 75:
     WhaWha_freq->value(rkr->efx_WhaWha->getpar(2));
     WhaWha_freq->redraw();
     break;
     case 76:
     Alienwah_freq->value(rkr->efx_Alienwah->getpar(2));
     Alienwah_freq->redraw();
     break;
     case 77:
     pan_freq->value(rkr->efx_Pan->getpar(2));
     pan_freq->redraw();
     break;
     case 78:
     echo_fb->value(rkr->efx_Echo->getpar(5));
     echo_fb->redraw();
     break;
     case 79:
     chorus_fb->value(rkr->efx_Chorus->getpar(8));
     chorus_fb->redraw();
     break;
     case 80:
     flanger_fb->value(rkr->efx_Flanger->getpar(8));
     flanger_fb->redraw();
     break;
     case 81:
     phaser_fb->value(rkr->efx_Phaser->getpar(7));
     phaser_fb->redraw();
     break;
     case 82:
     Alienwah_fb->value(rkr->efx_Alienwah->getpar(7));
     Alienwah_fb->redraw();
     break;
     case 83:
     musdelay_fb1->value(rkr->efx_MusDelay->getpar(5));
     musdelay_fb1->redraw();
     break;
     case 84:
     musdelay_fb2->value(rkr->efx_MusDelay->getpar(9));
     musdelay_fb2->redraw();
     break;
     case 85:
     ovrd_lpf->value(rkr->efx_Overdrive->getpar(7));
     ovrd_lpf->redraw();
     break;
     case 86:
     dist_lpf->value(rkr->efx_Distorsion->getpar(7));
     dist_lpf->redraw();
     break;
     case 87:
     reverb_LPF->value(rkr->efx_Rev->getpar(7));
     reverb_LPF->redraw();
     break;
     case 88:
     ovrd_hpf->value(rkr->efx_Overdrive->getpar(8));
     ovrd_hpf->redraw();
     break;
     case 89:
     dist_hpf->value(rkr->efx_Distorsion->getpar(8));
     dist_hpf->redraw();
     break;
     case 90:
     reverb_HPF->value(rkr->efx_Rev->getpar(8));
     reverb_HPF->redraw();
     break;
     case 91:
     chorus_LR->value(rkr->efx_Chorus->getpar(9)-64);
     chorus_LR->redraw();
     break;
     case 92:
     flanger_LR->value(rkr->efx_Flanger->getpar(9)-64);
     flanger_LR->redraw();
     break;
     case 93:
      phaser_LR->value(rkr->efx_Phaser->getpar(9)-64);
      phaser_LR->redraw();
     break;
     case 94:
     ovrd_LRc->value(rkr->efx_Overdrive->getpar(2)-64);
     ovrd_LRc->redraw();
     break;
     case 95:
     dist_LRc->value(rkr->efx_Distorsion->getpar(2)-64);
     dist_LRc->redraw();
     break;
     case 96:
     Alienwah_LR->value(rkr->efx_Alienwah->getpar(9)-64);
     Alienwah_LR->redraw();
     break;
     case 97:
     echo_LRc->value(rkr->efx_Echo->getpar(4)-64);
     echo_LRc->redraw();
     break;
     case 98:
     musdelay_LRc->value(rkr->efx_MusDelay->getpar(4)-64);
     musdelay_LRc->redraw();
     break;
     case 99:
     chorus_stdf->value(rkr->efx_Chorus->getpar(5));
     chorus_stdf->redraw();
     break;
     case 100:
     flanger_stdf->value(rkr->efx_Flanger->getpar(5));
     flanger_stdf->redraw();
     break;
     case 101:
     phaser_stdf->value(rkr->efx_Phaser->getpar(5));
     phaser_stdf->redraw();
     break;
     case 102:
     WhaWha_stdf->value(rkr->efx_WhaWha->getpar(5));
     WhaWha_stdf->redraw();
     break;
     case 103:
     Alienwah_stdf->value(rkr->efx_Alienwah->getpar(5));
     Alienwah_stdf->redraw();
     break;
     case 104:
     pan_stdf->value(rkr->efx_Pan->getpar(5));
     pan_stdf->redraw();
     break;
     case 105:
     chorus_rnd->value(rkr->efx_Chorus->getpar(3));
     chorus_rnd->redraw();
     break;
     case 106:
     flanger_rnd->value(rkr->efx_Flanger->getpar(3));
     flanger_rnd->redraw();
     break;
     case 107:
     phaser_rnd->value(rkr->efx_Phaser->getpar(3));
     phaser_rnd->redraw();
     break;
     case 108:
     WhaWha_rnd->value(rkr->efx_WhaWha->getpar(3));
     WhaWha_rnd->redraw();
     break;
     case 109:
     Alienwah_rnd->value(rkr->efx_Alienwah->getpar(3));
     Alienwah_rnd->redraw();
     break;
     case 110:
     pan_rnd->value(rkr->efx_Pan->getpar(3));
     pan_rnd->redraw();
     break;
     case 111:
     WhaWha_ampsns->value(rkr->efx_WhaWha->getpar(7));
     WhaWha_ampsns->redraw();
     break;
     case 112:
     WhaWha_ampsnsinv->value(rkr->efx_WhaWha->getpar(8));
     WhaWha_ampsnsinv->redraw();
     break;
     case 113:
     WhaWha_smooth->value(rkr->efx_WhaWha->getpar(9));
     WhaWha_smooth->redraw();
     break;
     case 114:
     phaser_phase->value(rkr->efx_Phaser->getpar(11));
     phaser_phase->redraw();
     break;
     case 115:
     Alienwah_phase->value(rkr->efx_Alienwah->getpar(10));
     Alienwah_phase->redraw();
     break;
     case 116:
     ActOnOff();
     break;
     case 117:
     aphaser_WD->value(rkr->efx_APhaser->getpar(0)-64);
     aphaser_WD->redraw();
     break;
     case 118:
     aphaser_pan->value(rkr->efx_APhaser->getpar(1));
     aphaser_pan->redraw();
     break;
     case 119:
     aphaser_freq->value(rkr->efx_APhaser->getpar(2));
     aphaser_freq->redraw();
     break;
     case 120:
     aphaser_phase->value(rkr->efx_APhaser->getpar(11));
     aphaser_phase->redraw();
     break;
     case 121:
     aphaser_dpth->value(rkr->efx_APhaser->getpar(6));
     aphaser_dpth->redraw();
     break;
     case 122:
     aphaser_fb->value(rkr->efx_APhaser->getpar(7)-64);
     aphaser_fb->redraw();
     break;
     case 123:
     aphaser_LR->value(rkr->efx_APhaser->getpar(9));
     aphaser_LR->redraw();
     break;
     case 124:
     aphaser_stdf->value(rkr->efx_APhaser->getpar(5));
     aphaser_stdf->redraw();
     break;
     case 125:
     newdist_WD->value(rkr->efx_NewDist->getpar(0)-64);
     newdist_WD->redraw();
     break;
     case 126:
     newdist_pan->value(rkr->efx_NewDist->getpar(1)-64);
     newdist_pan->redraw();
     break;
     case 127:
     newdist_LRc->value(rkr->efx_NewDist->getpar(2)-64);
     newdist_LRc->redraw();
     break;
     case 2:
     newdist_drive->value(rkr->efx_NewDist->getpar(3));
     newdist_drive->redraw();
     break;
     case 3:
     newdist_level->value(rkr->efx_NewDist->getpar(4));
     newdist_level->redraw();
     break;
     case 4:
     newdist_lpf->value(rkr->efx_NewDist->getpar(7));
     newdist_lpf->redraw();
     break;
     case 5:
     newdist_hpf->value(rkr->efx_NewDist->getpar(8));
     newdist_hpf->redraw();
     break;
     case 6:
     newdist_st->value(rkr->efx_NewDist->getpar(9));
     newdist_st->redraw();
     break;
     case 8:
     newdist_oct->value(rkr->efx_NewDist->getpar(11));
     newdist_oct->redraw();
     break;
     case 9:
     dist_oct->value(rkr->efx_NewDist->getpar(12));
     dist_oct->redraw();
     break;
     case 130:
     eq_Gain->value(rkr->efx_EQ1->getpar(0)-64);
     eq_Gain->redraw();
     break;
     case 131:
     eq_Q->value(rkr->efx_EQ1->getpar(13)-64);
     eq_Q->redraw();
     break;
     case 132:
     eq_1->value(rkr->efx_EQ1->getpar(12)-64);
     eq_1->redraw();
     break;
     case 133:
     eq_2->value(rkr->efx_EQ1->getpar(17)-64);
     eq_2->redraw();
     break;
     case 134:
     eq_3->value(rkr->efx_EQ1->getpar(22)-64);
     eq_3->redraw();
     break;
     case 135:
     eq_4->value(rkr->efx_EQ1->getpar(27)-64);
     eq_4->redraw();
     break;
     case 136:
     eq_5->value(rkr->efx_EQ1->getpar(32)-64);
     eq_5->redraw();
     break;
     case 137:
     eq_6->value(rkr->efx_EQ1->getpar(37)-64);
     eq_6->redraw();
     break;
     case 138:
     eq_7->value(rkr->efx_EQ1->getpar(42)-64);
     eq_7->redraw();
     break;
     case 139:
     eq_8->value(rkr->efx_EQ1->getpar(47)-64);
     eq_8->redraw();
     break;
     case 140:
     eq_9->value(rkr->efx_EQ1->getpar(52)-64);
     eq_9->redraw();
     break;
     case 141:
     eq_10->value(rkr->efx_EQ1->getpar(57)-64);
     eq_10->redraw();
     break;
     case 142:
     compress_ATime->value(rkr->efx_Compressor->getpar(4));
     compress_ATime->redraw();
     break;
     case 143:
     compress_RTime->value(rkr->efx_Compressor->getpar(5));
     compress_RTime->redraw();
     break;
     case 144:
     compress_Ratio->value(rkr->efx_Compressor->getpar(2));
     compress_Ratio->redraw();
     break;
     case 145:
     compress_Knee->value(rkr->efx_Compressor->getpar(7));
     compress_Knee->redraw();
     break;
     case 146:
     compress_threshold->value(rkr->efx_Compressor->getpar(1));
     compress_threshold->redraw();
     break;
     case 147:
     compress_output->value(rkr->efx_Compressor->getpar(3));
     compress_output->redraw();
     break;
     case 148:
     eqp_Gain->value(rkr->efx_EQ2->getpar(0)-64);
     eqp_Gain->redraw();
     break;
     case 149:
     eqp_LF->value(rkr->efx_EQ2->getpar(11));
     eqp_LF->redraw();
     break;
     case 150:
     eqp_LFg->value(rkr->efx_EQ2->getpar(12)-64);
     eqp_LFg->redraw();
     break;
     case 151:
     eqp_LQ->value(rkr->efx_EQ2->getpar(13)-64);
     eqp_LQ->redraw();
     break;	
     case 152:
     eqp_MF->value(rkr->efx_EQ2->getpar(16));
     eqp_MF->redraw();
     break;
      case 153:
     eqp_MFg->value(rkr->efx_EQ2->getpar(17)-64);
     eqp_MFg->redraw();
     break;
     case 154:
     eqp_MQ->value(rkr->efx_EQ2->getpar(18)-64);
     eqp_MQ->redraw();
     break;
     case 155:
     eqp_HF->value(rkr->efx_EQ2->getpar(21));
     eqp_HF->redraw();
     break;
     case 156:
     eqp_HFg->value(rkr->efx_EQ2->getpar(22)-64);
     eqp_HFg->redraw();
     break;
     case 157:
     eqp_HQ->value(rkr->efx_EQ2->getpar(23)-64);
     eqp_HQ->redraw();
     break;


}


}


rkr->Mvalue=0;
}

void RKRGUI::ActOnOff() {
  switch(rkr->efx_order[rkr->Mnumeff])
{
  case 0:
  eq_activar->value(rkr->EQ1_Bypass);
  eq_activar->do_callback();
  break;
  case 1:
  compress_activar->value(rkr->Compressor_Bypass);
  compress_activar->do_callback();
  break;
  case 2:
  dist_activar->value(rkr->Distorsion_Bypass);
  dist_activar->do_callback();
  break;
  case 3:
  ovrd_activar->value(rkr->Overdrive_Bypass);
  ovrd_activar->do_callback();
  break;
  case 4:
  echo_activar->value(rkr->Echo_Bypass);
  echo_activar->do_callback();
  break;
  case 5:
  chorus_activar->value(rkr->Chorus_Bypass);
  chorus_activar->do_callback();
  break;
  case 6:
  phaser_activar->value(rkr->Phaser_Bypass);
  phaser_activar->do_callback();
  break;
  case 7:
  flanger_activar->value(rkr->Flanger_Bypass);
  flanger_activar->do_callback();
  break;
  case 8:
  reverb_activar->value(rkr->Reverb_Bypass);
  reverb_activar->do_callback();
  break;
  case 9:
  eqp_activar->value(rkr->EQ2_Bypass);
  eqp_activar->do_callback();
  break;
  case 10:
  WhaWha_activar->value(rkr->WhaWha_Bypass);
  WhaWha_activar->do_callback();
  break;
  case 11:
  Alienwah_activar->value(rkr->Alienwah_Bypass);
  Alienwah_activar->do_callback();
  break;
  case 12:
  Cabinet_activar->value(rkr->Cabinet_Bypass);
  Cabinet_activar->do_callback();
  break;
  case 13:
  pan_activar->value(rkr->Pan_Bypass);
  pan_activar->do_callback();
  break;
  case 14:
  har_activar->value(rkr->Harmonizer_Bypass);
  har_activar->do_callback();
  break;
  case 15:
  musdelay_activar->value(rkr->MusDelay_Bypass);
  musdelay_activar->do_callback();
  break;
  case 16:
  gate_activar->value(rkr->Gate_Bypass);
  gate_activar->do_callback();
  break;
  case 17:
  newdist_activar->value(rkr->NewDist_Bypass);
  newdist_activar->do_callback();
  break;
  case 18:
  aphaser_activar->value(rkr->APhaser_Bypass);
  aphaser_activar->do_callback();
  break;
  
}
}

void RKRGUI::light_preset(int npreset) {
  if(!made) return;

for (int t=0; t<ob->children();t++)
  {
    Fl_Widget *w = ob->child(t);
    long long temp = (long long) w->user_data();
    if (temp == npreset)
    {
     w->color(fl_darker(leds_color));
     break;
     }
  
  }
}

void RKRGUI::unlight_preset(int npreset) {
  if(!made) return;

for (int t=0; t<ob->children();t++)
  {
    Fl_Widget *w = ob->child(t);
    long long temp = (long long) w->user_data();
    if (temp == npreset)
    {
     w->color(fore_color);
     break;
     }
  
  }
}

void RKRGUI::PutBackground() {
  back = new Fl_Tiled_Image(new Fl_PNG_Image(rkr->BackgroundImage),1600,1200);
InOut->image(back);
EQ->image(InOut->image());
COMPRESS->image(InOut->image());
DIST->image(InOut->image());
OVRD->image(InOut->image());
ECHO->image(InOut->image());
CHORUS->image(InOut->image());
FLANGER->image(InOut->image());
WHAWHA->image(InOut->image());
ALIENWAH->image(InOut->image());
PHASER->image(InOut->image());
REVERB->image(InOut->image());
PEQ->image(InOut->image());
CABINET->image(InOut->image());
PAN->image(InOut->image());
HAR->image(InOut->image());
MUSDELAY->image(InOut->image());
GATE->image(InOut->image());
NEWDIST->image(InOut->image());
APHASER->image(InOut->image());
VALVE->image(InOut->image());
DFLANGE->image(InOut->image());
RING->image(InOut->image());

Presets->image(InOut->image());
Tuner->image(InOut->image());
Midi->image(InOut->image());
fondo->image(InOut->image());
TITTLE_L->image(InOut->image());
Fondo1->image(InOut->image());
Fondo2->image(InOut->image());
Fondo3->image(InOut->image());
Fondo4->image(InOut->image());
Etit->image(InOut->image());
Ares->image(InOut->image());

MenuP->image(InOut->image());
MenuB->image(InOut->image());


Fl::redraw();
}

void RKRGUI::chfsize(int value) {
  unsigned char k;

for (int t=0; t<Principal->children();t++)
  {
    Fl_Widget *w = Principal->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    Principal->redraw();
    
for (int t=0; t<EQ->children();t++)
  {
    Fl_Widget *w = EQ->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    EQ->redraw();
    
for (int t=0; t<COMPRESS->children();t++)
  {
    Fl_Widget *w = COMPRESS->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    COMPRESS->redraw();
    
for (int t=0; t<DIST->children();t++)
  {
    Fl_Widget *w = DIST->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    DIST->redraw();

for (int t=0; t<OVRD->children();t++)
  {
    Fl_Widget *w = OVRD->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    OVRD->redraw();
    
    
for (int t=0; t<ECHO->children();t++)
  {
    Fl_Widget *w = ECHO->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    ECHO->redraw();    
    
for (int t=0; t<CHORUS->children();t++)
  {
    Fl_Widget *w = CHORUS->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    CHORUS->redraw();    

for (int t=0; t<PHASER->children();t++)
  {
    Fl_Widget *w = PHASER->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    PHASER->redraw();
    
for (int t=0; t<FLANGER->children();t++)
  {
    Fl_Widget *w = FLANGER->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    FLANGER->redraw();
    
for (int t=0; t<REVERB->children();t++)
  {
    Fl_Widget *w = REVERB->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    REVERB->redraw();
    
for (int t=0; t<PEQ->children();t++)
  {
    Fl_Widget *w = PEQ->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    PEQ->redraw();
    
for (int t=0; t<WHAWHA->children();t++)
  {
    Fl_Widget *w = WHAWHA->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    WHAWHA->redraw();
    
for (int t=0; t<ALIENWAH->children();t++)
  {
    Fl_Widget *w = ALIENWAH->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    ALIENWAH->redraw();
    
for (int t=0; t<CABINET->children();t++)
  {
    Fl_Widget *w = CABINET->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    CABINET->redraw();
    
for (int t=0; t<PAN->children();t++)
  {
    Fl_Widget *w = PAN->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    PAN->redraw();
    
for (int t=0; t<HAR->children();t++)
  {
    Fl_Widget *w = HAR->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    HAR->redraw();
    
for (int t=0; t<MUSDELAY->children();t++)
  {
    Fl_Widget *w = MUSDELAY->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    MUSDELAY->redraw();
    
for (int t=0; t<GATE->children();t++)
  {
    Fl_Widget *w = GATE->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    GATE->redraw();                                
    
for (int t=0; t<NEWDIST->children();t++)
  {
    Fl_Widget *w = NEWDIST->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    NEWDIST->redraw();    
    
for (int t=0; t<APHASER->children();t++)
  {
    Fl_Widget *w = APHASER->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    APHASER->redraw();
    
for (int t=0; t<VALVE->children();t++)
  {
    Fl_Widget *w = VALVE->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    VALVE->redraw();

for (int t=0; t<DFLANGE->children();t++)
  {
    Fl_Widget *w = DFLANGE->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    DFLANGE->redraw();


for (int t=0; t<Tuner->children();t++)
  {
    Fl_Widget *w = Tuner->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    Tuner->redraw();
    
for (int t=0; t<InOut->children();t++)
  {
    Fl_Widget *w = InOut->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    InOut->redraw();
    
for (int t=0; t<Midi->children();t++)
  {
    Fl_Widget *w = Midi->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    Midi->redraw();
    

for (int t=0; t<Presets->children();t++)
  {
    Fl_Widget *w = Presets->child(t);
    
     k= w->labelsize();
     k+=value;
     w->labelsize(k);
     
    }
        
    Presets->redraw();
}

void RKRGUI::adjustfont() {
  int change,value;

change = Principal->w() - rkr->resolution;
value=change/100;
rkr->resolution=Principal->w();
rkr->relfontsize +=value;
chfsize(value);
}

void RKRGUI::ChangeActives() {
  Fl_Color on = fl_lighter(label_color);
Fl_Color off = fl_darker(label_color);


if(rkr->active[0]) L1->labelcolor(on); else L1->labelcolor(off);
if(rkr->active[1]) L2->labelcolor(on); else L2->labelcolor(off);
if(rkr->active[2]) L3->labelcolor(on); else L3->labelcolor(off);
if(rkr->active[3]) L4->labelcolor(on); else L4->labelcolor(off);
if(rkr->active[4]) L5->labelcolor(on); else L5->labelcolor(off);
if(rkr->active[5]) L6->labelcolor(on); else L6->labelcolor(off);
if(rkr->active[6]) L7->labelcolor(on); else L7->labelcolor(off);
if(rkr->active[7]) L8->labelcolor(on); else L8->labelcolor(off);
if(rkr->active[8]) L9->labelcolor(on); else L9->labelcolor(off);
if(rkr->active[9]) L10->labelcolor(on); else L10->labelcolor(off);


if(rkr->MIDIConverter_Bypass) MIDI_LABEL->labelcolor(on); else MIDI_LABEL->labelcolor(off);
if(rkr->Tuner_Bypass) TUNER_LABEL->labelcolor(on); else TUNER_LABEL->labelcolor(off);
if(rkr->Bypass) LABEL_IO->labelcolor(on); else LABEL_IO->labelcolor(off);
}

void RKRGUI::findpos(int num, int value) {
  int i;
Fl_Color on = fl_lighter(label_color);
Fl_Color off= fl_darker(label_color);

for(i=0; i<10; i++)
 {
    if (rkr->efx_order[i]== num)
      {
        rkr->active[i]=value;
        break;
       }
  }
  
  switch(i)
  
  {
  
     case 0:
     if(value) L1->labelcolor(on); else L1->labelcolor(off);
     L1->redraw();  
     break;  
     
     case 1:
     if(value) L2->labelcolor(on); else L2->labelcolor(off);
     L2->redraw();  
     break;  
       
     case 2:
     if(value) L3->labelcolor(on); else L3->labelcolor(off);
     L3->redraw();  
     break;  
       
     case 3:
     if(value) L4->labelcolor(on); else L4->labelcolor(off);
     L4->redraw();  
     break;  
       
     case 4:
     if(value) L5->labelcolor(on); else L5->labelcolor(off);
     L5->redraw();  
     break;  
       
     case 5:
     if(value) L6->labelcolor(on); else L6->labelcolor(off);
     L6->redraw();  
     break;  
       
     case 6:
     if(value) L7->labelcolor(on); else L7->labelcolor(off);
     L7->redraw();  
     break;  
       
     case 7:
     if(value) L8->labelcolor(on); else L8->labelcolor(off);
     L8->redraw();  
     break;  
       
     case 8:
     if(value) L9->labelcolor(on); else L9->labelcolor(off);
     L9->redraw();  
     break;  
       
     case 9:
     if(value) L10->labelcolor(on); else L10->labelcolor(off);
     L10->redraw();  
     break;  
       
 }
 
 ChangeActivesB(num,value);
}

void RKRGUI::Put_Skin(int last) {
  Principal->resize(Principal->x(),Principal->y(),rkr->resolution,rkr->sh);

back_color=(Fl_Color)rkr->sback_color;
fore_color=(Fl_Color)rkr->sfore_color;
leds_color=(Fl_Color)rkr->sleds_color;
label_color=(Fl_Color)rkr->slabel_color;

Background_Color_Change(back_color);
Buttons_Color_Change(fore_color);
Leds_Color_Change(leds_color);
Label_Color_Change(label_color);

scheme_ch->value(rkr->sschema);
scheme_ch->do_callback();
PutBackground();
chfsize(rkr->relfontsize - last);
save_stat(3);

Fl::redraw();
}

void RKRGUI::FillML(int type) {
  int i;
char tmp[256];
bzero(tmp,sizeof(tmp));


if(type<1)
{
sprintf(tmp,"%s   v%s - MIDI Learn - Preset : %s",rkr->jackcliname,VERSION,rkr->Bank[rkr->Selected_Preset].Preset_Name);
MIDILearn->copy_label(tmp);
}


if (type<2)
{
Epar->clear();
for(i=0; i<rkr->NumParams; i++) Epar->add(rkr->efx_params[i].Nom);
Epar->select(1,1);
}

if (type<3)
{
TPresets->clear();
for(i=1; i<=60; i++)  TPresets->add(rkr->Bank[i].Preset_Name);
TPresets->select(rkr->Selected_Preset,1);
TPresets->redraw();
}



DisAssigns();
}

void RKRGUI::DisAssigns() {
  int i,j,k;
char tmp[8];


k=0;

for(i=0;i<128;i++)
  {
    for(j=0;j<20;j++)
      { 
        
       if(rkr->XUserMIDI[i][j] == rkr->efx_params[Epar->value()-1].Ato)
         {
           k++;     
           bzero(tmp,sizeof(tmp));
           sprintf(tmp, "%d", i);
           
           switch (k)
           {
           case 1:
              Ar1->copy_label(tmp);
              Ar1->redraw();
              break;     
                            
           case 2:
              Ar2->copy_label(tmp);
              Ar2->redraw();
              break;     
        
           case 3:
              Ar3->copy_label(tmp);
              Ar3->redraw();
              break;     
        
           case 4:
              Ar4->copy_label(tmp);
              Ar4->redraw();
              break;     
        
           case 5:
              Ar5->copy_label(tmp);
              Ar5->redraw();
              break;     
        
           case 6:
              Ar6->copy_label(tmp);
              Ar6->redraw();
              break;     
    
           case 7:
              Ar7->copy_label(tmp);
              Ar7->redraw();
              break;     
    
           case 8:
              Ar8->copy_label(tmp);
              Ar8->redraw();
              break;     
    
           case 9:
              Ar9->copy_label(tmp);
              Ar9->redraw();
              break;     
    
           case 10:
              Ar10->copy_label(tmp);
              Ar10->redraw();
              break;     
        
           case 11:
              Ar11->copy_label(tmp);
              Ar11->redraw();
              break;     
        
           case 12:
              Ar12->copy_label(tmp);
              Ar12->redraw();
              break;     
        
           case 13:
              Ar13->copy_label(tmp);
              Ar13->redraw();
              break;     
    
           case 14:
              Ar14->copy_label(tmp);
              Ar14->redraw();
              break;     

           case 15:
              Ar15->copy_label(tmp);
              Ar15->redraw();
              break;     

           case 16:
              Ar16->copy_label(tmp);
              Ar16->redraw();
              break;     
        
           case 17:
              Ar17->copy_label(tmp);
              Ar17->redraw();
              break;     
        
           case 18:
              Ar18->copy_label(tmp);
              Ar18->redraw();
              break;     
    
           case 19:
              Ar19->copy_label(tmp);
              Ar19->redraw();
              break;     

           case 20:
              Ar20->copy_label(tmp);
              Ar20->redraw();
              break;     


           }



       } 

 }         

}


           k++;     
           
           for(i=k;i<=20;i++)
           {
 
           bzero(tmp,sizeof(tmp));
           
           switch (i)
           {
           case 1:
              Ar1->copy_label(tmp);
              Ar1->redraw();
              break;     
                            
           case 2:
              Ar2->copy_label(tmp);
              Ar2->redraw();
              break;     
        
           case 3:
              Ar3->copy_label(tmp);
              Ar3->redraw();
              break;     
        
           case 4:
              Ar4->copy_label(tmp);
              Ar4->redraw();
              break;     
        
           case 5:
              Ar5->copy_label(tmp);
              Ar5->redraw();
              break;     
        
           case 6:
              Ar6->copy_label(tmp);
              Ar6->redraw();
              break;     
    
           case 7:
              Ar7->copy_label(tmp);
              Ar7->redraw();
              break;     
    
           case 8:
              Ar8->copy_label(tmp);
              Ar8->redraw();
              break;     
    
           case 9:
              Ar9->copy_label(tmp);
              Ar9->redraw();
              break;     
    
           case 10:
              Ar10->copy_label(tmp);
              Ar10->redraw();
              break;     
        
           case 11:
              Ar11->copy_label(tmp);
              Ar11->redraw();
              break;     
        
           case 12:
              Ar12->copy_label(tmp);
              Ar12->redraw();
              break;     
        
           case 13:
              Ar13->copy_label(tmp);
              Ar13->redraw();
              break;     
    
           case 14:
              Ar14->copy_label(tmp);
              Ar14->redraw();
              break;     

           case 15:
              Ar15->copy_label(tmp);
              Ar15->redraw();
              break;     

           case 16:
              Ar16->copy_label(tmp);
              Ar16->redraw();
              break;     
        
           case 17:
              Ar17->copy_label(tmp);
              Ar17->redraw();
              break;     
        
           case 18:
              Ar18->copy_label(tmp);
              Ar18->redraw();
              break;     
    
           case 19:
              Ar19->copy_label(tmp);
              Ar19->redraw();
              break;     

           case 20:
              Ar20->copy_label(tmp);
              Ar20->redraw();
              break;     


}          

}
}

void RKRGUI::ChangeActivesB(int num,int value) {
  Fl_Color bon = fl_lighter(fore_color);
Fl_Color boff = fore_color;



 switch(num)
   {
     case 0: 
   
     if(value) eq_activar->color(bon); else eq_activar->color(boff);
     break;
   
     case 1: 
   
     if(value) compress_activar->color(bon); else compress_activar->color(boff);
     break;
      
     case 2: 
   
     if(value) dist_activar->color(bon); else dist_activar->color(boff);
     break;
     
     
     case 3: 
   
     if(value) ovrd_activar->color(bon); else ovrd_activar->color(boff);
     break;
     
     
     case 4: 
   
     if(value) echo_activar->color(bon); else echo_activar->color(boff);
     break;
     
     
     case 5: 
   
     if(value) chorus_activar->color(bon); else chorus_activar->color(boff);
     break;
     
     case 6: 
   
     if(value) phaser_activar->color(bon); else phaser_activar->color(boff);
     break;
     
     case 7: 
   
     if(value) flanger_activar->color(bon); else flanger_activar->color(boff);
     break;
     
     case 8: 
   
     if(value) reverb_activar->color(bon); else reverb_activar->color(boff);
     break;
     
     case 9: 
   
     if(value) eqp_activar->color(bon); else eqp_activar->color(boff);
     break;
     
     case 10: 
   
     if(value) WhaWha_activar->color(bon); else WhaWha_activar->color(boff);
     break;
     
     case 11: 
   
     if(value) Alienwah_activar->color(bon); else Alienwah_activar->color(boff);
     break;
     
     case 12: 
   
     if(value) Cabinet_activar->color(bon); else Cabinet_activar->color(boff);
     break;
     
     case 13: 
   
     if(value) pan_activar->color(bon); else pan_activar->color(boff);
     break;
     
     case 14: 
   
     if(value) har_activar->color(bon); else har_activar->color(boff);
     break;
     
     case 15: 
   
     if(value) musdelay_activar->color(bon); else musdelay_activar->color(boff);
     break;
     
     case 16: 
   
     if(value) gate_activar->color(bon); else gate_activar->color(boff);
     break;
     
     case 17: 
   
     if(value) newdist_activar->color(bon); else newdist_activar->color(boff);
     break;
     
     case 18: 
   
     if(value) aphaser_activar->color(bon); else aphaser_activar->color(boff);
     break;
     
     case 19: 
   
     if(value) valve_activar->color(bon); else valve_activar->color(boff);
     break;
     
     case 20: 
   
     if(value) dflange_activar->color(bon); else dflange_activar->color(boff);
     break;

     case 21: 
   
     if(value) ring_activar->color(bon); else ring_activar->color(boff);
     break;



    }
}
